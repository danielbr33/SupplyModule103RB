
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003268  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000f0  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000074  20000000  08003510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000010c0  20000074  08003584  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001134  08003584  00021134  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   000162e5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000388f  00000000  00000000  00036382  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a6df  00000000  00000000  00039c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  000442f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  00045200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008c02  00000000  00000000  00046470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005c9a  00000000  00000000  0004f072  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00054d0c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002bc0  00000000  00000000  00054d88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003360 	.word	0x08003360

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003360 	.word	0x08003360

08000150 <selfrel_offset31>:
 8000150:	6803      	ldr	r3, [r0, #0]
 8000152:	005a      	lsls	r2, r3, #1
 8000154:	bf4c      	ite	mi
 8000156:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800015a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800015e:	4418      	add	r0, r3
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop

08000164 <search_EIT_table>:
 8000164:	b361      	cbz	r1, 80001c0 <search_EIT_table+0x5c>
 8000166:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800016a:	f101 3aff 	add.w	sl, r1, #4294967295
 800016e:	4690      	mov	r8, r2
 8000170:	4606      	mov	r6, r0
 8000172:	46d1      	mov	r9, sl
 8000174:	2700      	movs	r7, #0
 8000176:	eb07 0409 	add.w	r4, r7, r9
 800017a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800017e:	1064      	asrs	r4, r4, #1
 8000180:	00e5      	lsls	r5, r4, #3
 8000182:	1971      	adds	r1, r6, r5
 8000184:	4608      	mov	r0, r1
 8000186:	f7ff ffe3 	bl	8000150 <selfrel_offset31>
 800018a:	45a2      	cmp	sl, r4
 800018c:	4683      	mov	fp, r0
 800018e:	f105 0008 	add.w	r0, r5, #8
 8000192:	4430      	add	r0, r6
 8000194:	d009      	beq.n	80001aa <search_EIT_table+0x46>
 8000196:	f7ff ffdb 	bl	8000150 <selfrel_offset31>
 800019a:	45c3      	cmp	fp, r8
 800019c:	f100 30ff 	add.w	r0, r0, #4294967295
 80001a0:	d805      	bhi.n	80001ae <search_EIT_table+0x4a>
 80001a2:	4540      	cmp	r0, r8
 80001a4:	d209      	bcs.n	80001ba <search_EIT_table+0x56>
 80001a6:	1c67      	adds	r7, r4, #1
 80001a8:	e7e5      	b.n	8000176 <search_EIT_table+0x12>
 80001aa:	45c3      	cmp	fp, r8
 80001ac:	d905      	bls.n	80001ba <search_EIT_table+0x56>
 80001ae:	42a7      	cmp	r7, r4
 80001b0:	d002      	beq.n	80001b8 <search_EIT_table+0x54>
 80001b2:	f104 39ff 	add.w	r9, r4, #4294967295
 80001b6:	e7de      	b.n	8000176 <search_EIT_table+0x12>
 80001b8:	2100      	movs	r1, #0
 80001ba:	4608      	mov	r0, r1
 80001bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001c0:	4608      	mov	r0, r1
 80001c2:	4770      	bx	lr

080001c4 <__gnu_unwind_get_pr_addr>:
 80001c4:	2801      	cmp	r0, #1
 80001c6:	d007      	beq.n	80001d8 <__gnu_unwind_get_pr_addr+0x14>
 80001c8:	2802      	cmp	r0, #2
 80001ca:	d007      	beq.n	80001dc <__gnu_unwind_get_pr_addr+0x18>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__gnu_unwind_get_pr_addr+0x1c>)
 80001ce:	2800      	cmp	r0, #0
 80001d0:	bf0c      	ite	eq
 80001d2:	4618      	moveq	r0, r3
 80001d4:	2000      	movne	r0, #0
 80001d6:	4770      	bx	lr
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <__gnu_unwind_get_pr_addr+0x20>)
 80001da:	4770      	bx	lr
 80001dc:	4802      	ldr	r0, [pc, #8]	; (80001e8 <__gnu_unwind_get_pr_addr+0x24>)
 80001de:	4770      	bx	lr
 80001e0:	080008d5 	.word	0x080008d5
 80001e4:	080008d9 	.word	0x080008d9
 80001e8:	080008dd 	.word	0x080008dd

080001ec <get_eit_entry>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	4b25      	ldr	r3, [pc, #148]	; (8000284 <get_eit_entry+0x98>)
 80001f0:	b083      	sub	sp, #12
 80001f2:	4604      	mov	r4, r0
 80001f4:	1e8d      	subs	r5, r1, #2
 80001f6:	b373      	cbz	r3, 8000256 <get_eit_entry+0x6a>
 80001f8:	a901      	add	r1, sp, #4
 80001fa:	4628      	mov	r0, r5
 80001fc:	f3af 8000 	nop.w
 8000200:	b318      	cbz	r0, 800024a <get_eit_entry+0x5e>
 8000202:	9901      	ldr	r1, [sp, #4]
 8000204:	462a      	mov	r2, r5
 8000206:	f7ff ffad 	bl	8000164 <search_EIT_table>
 800020a:	4601      	mov	r1, r0
 800020c:	b1e8      	cbz	r0, 800024a <get_eit_entry+0x5e>
 800020e:	f7ff ff9f 	bl	8000150 <selfrel_offset31>
 8000212:	684b      	ldr	r3, [r1, #4]
 8000214:	64a0      	str	r0, [r4, #72]	; 0x48
 8000216:	2b01      	cmp	r3, #1
 8000218:	d011      	beq.n	800023e <get_eit_entry+0x52>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db22      	blt.n	8000264 <get_eit_entry+0x78>
 800021e:	1d08      	adds	r0, r1, #4
 8000220:	f7ff ff96 	bl	8000150 <selfrel_offset31>
 8000224:	2300      	movs	r3, #0
 8000226:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000228:	6523      	str	r3, [r4, #80]	; 0x50
 800022a:	6803      	ldr	r3, [r0, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	db1e      	blt.n	800026e <get_eit_entry+0x82>
 8000230:	f7ff ff8e 	bl	8000150 <selfrel_offset31>
 8000234:	2300      	movs	r3, #0
 8000236:	6120      	str	r0, [r4, #16]
 8000238:	4618      	mov	r0, r3
 800023a:	b003      	add	sp, #12
 800023c:	bd30      	pop	{r4, r5, pc}
 800023e:	2305      	movs	r3, #5
 8000240:	2200      	movs	r2, #0
 8000242:	4618      	mov	r0, r3
 8000244:	6122      	str	r2, [r4, #16]
 8000246:	b003      	add	sp, #12
 8000248:	bd30      	pop	{r4, r5, pc}
 800024a:	2309      	movs	r3, #9
 800024c:	2200      	movs	r2, #0
 800024e:	4618      	mov	r0, r3
 8000250:	6122      	str	r2, [r4, #16]
 8000252:	b003      	add	sp, #12
 8000254:	bd30      	pop	{r4, r5, pc}
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <get_eit_entry+0x9c>)
 8000258:	490c      	ldr	r1, [pc, #48]	; (800028c <get_eit_entry+0xa0>)
 800025a:	4618      	mov	r0, r3
 800025c:	1ac9      	subs	r1, r1, r3
 800025e:	10c9      	asrs	r1, r1, #3
 8000260:	9101      	str	r1, [sp, #4]
 8000262:	e7cf      	b.n	8000204 <get_eit_entry+0x18>
 8000264:	2301      	movs	r3, #1
 8000266:	1d08      	adds	r0, r1, #4
 8000268:	64e0      	str	r0, [r4, #76]	; 0x4c
 800026a:	6523      	str	r3, [r4, #80]	; 0x50
 800026c:	e7dd      	b.n	800022a <get_eit_entry+0x3e>
 800026e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000272:	f7ff ffa7 	bl	80001c4 <__gnu_unwind_get_pr_addr>
 8000276:	2800      	cmp	r0, #0
 8000278:	6120      	str	r0, [r4, #16]
 800027a:	bf14      	ite	ne
 800027c:	2300      	movne	r3, #0
 800027e:	2309      	moveq	r3, #9
 8000280:	e7da      	b.n	8000238 <get_eit_entry+0x4c>
 8000282:	bf00      	nop
 8000284:	00000000 	.word	0x00000000
 8000288:	08003418 	.word	0x08003418
 800028c:	08003508 	.word	0x08003508

08000290 <restore_non_core_regs>:
 8000290:	6803      	ldr	r3, [r0, #0]
 8000292:	b510      	push	{r4, lr}
 8000294:	07da      	lsls	r2, r3, #31
 8000296:	4604      	mov	r4, r0
 8000298:	d406      	bmi.n	80002a8 <restore_non_core_regs+0x18>
 800029a:	079b      	lsls	r3, r3, #30
 800029c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002a0:	d509      	bpl.n	80002b6 <restore_non_core_regs+0x26>
 80002a2:	f000 fc57 	bl	8000b54 <__gnu_Unwind_Restore_VFP_D>
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	0759      	lsls	r1, r3, #29
 80002aa:	d509      	bpl.n	80002c0 <restore_non_core_regs+0x30>
 80002ac:	071a      	lsls	r2, r3, #28
 80002ae:	d50e      	bpl.n	80002ce <restore_non_core_regs+0x3e>
 80002b0:	06db      	lsls	r3, r3, #27
 80002b2:	d513      	bpl.n	80002dc <restore_non_core_regs+0x4c>
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	f000 fc45 	bl	8000b44 <__gnu_Unwind_Restore_VFP>
 80002ba:	6823      	ldr	r3, [r4, #0]
 80002bc:	0759      	lsls	r1, r3, #29
 80002be:	d4f5      	bmi.n	80002ac <restore_non_core_regs+0x1c>
 80002c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002c4:	f000 fc4e 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002c8:	6823      	ldr	r3, [r4, #0]
 80002ca:	071a      	lsls	r2, r3, #28
 80002cc:	d4f0      	bmi.n	80002b0 <restore_non_core_regs+0x20>
 80002ce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002d2:	f000 fc4f 	bl	8000b74 <__gnu_Unwind_Restore_WMMXD>
 80002d6:	6823      	ldr	r3, [r4, #0]
 80002d8:	06db      	lsls	r3, r3, #27
 80002da:	d4eb      	bmi.n	80002b4 <restore_non_core_regs+0x24>
 80002dc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002e4:	f000 bc8a 	b.w	8000bfc <__gnu_Unwind_Restore_WMMXC>

080002e8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002e8:	6803      	ldr	r3, [r0, #0]
 80002ea:	b103      	cbz	r3, 80002ee <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80002ec:	4403      	add	r3, r0
 80002ee:	4618      	mov	r0, r3
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <__gnu_unwind_24bit.isra.1>:
 80002f4:	2009      	movs	r0, #9
 80002f6:	4770      	bx	lr

080002f8 <_Unwind_DebugHook>:
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop

080002fc <unwind_phase2>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4604      	mov	r4, r0
 8000300:	460d      	mov	r5, r1
 8000302:	e008      	b.n	8000316 <unwind_phase2+0x1a>
 8000304:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000306:	6923      	ldr	r3, [r4, #16]
 8000308:	6162      	str	r2, [r4, #20]
 800030a:	4621      	mov	r1, r4
 800030c:	462a      	mov	r2, r5
 800030e:	2001      	movs	r0, #1
 8000310:	4798      	blx	r3
 8000312:	2808      	cmp	r0, #8
 8000314:	d108      	bne.n	8000328 <unwind_phase2+0x2c>
 8000316:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000318:	4620      	mov	r0, r4
 800031a:	f7ff ff67 	bl	80001ec <get_eit_entry>
 800031e:	4606      	mov	r6, r0
 8000320:	2800      	cmp	r0, #0
 8000322:	d0ef      	beq.n	8000304 <unwind_phase2+0x8>
 8000324:	f002 ffd1 	bl	80032ca <abort>
 8000328:	2807      	cmp	r0, #7
 800032a:	d1fb      	bne.n	8000324 <unwind_phase2+0x28>
 800032c:	4630      	mov	r0, r6
 800032e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000330:	f7ff ffe2 	bl	80002f8 <_Unwind_DebugHook>
 8000334:	1d28      	adds	r0, r5, #4
 8000336:	f000 fbf9 	bl	8000b2c <__restore_core_regs>
 800033a:	bf00      	nop

0800033c <unwind_phase2_forced>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	4605      	mov	r5, r0
 8000342:	2700      	movs	r7, #0
 8000344:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000348:	ac03      	add	r4, sp, #12
 800034a:	1d0e      	adds	r6, r1, #4
 800034c:	4692      	mov	sl, r2
 800034e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000356:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000362:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800036a:	ac02      	add	r4, sp, #8
 800036c:	4628      	mov	r0, r5
 800036e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000370:	6027      	str	r7, [r4, #0]
 8000372:	f7ff ff3b 	bl	80001ec <get_eit_entry>
 8000376:	f1ba 0f00 	cmp.w	sl, #0
 800037a:	4607      	mov	r7, r0
 800037c:	bf14      	ite	ne
 800037e:	260a      	movne	r6, #10
 8000380:	2609      	moveq	r6, #9
 8000382:	b17f      	cbz	r7, 80003a4 <unwind_phase2_forced+0x68>
 8000384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000386:	f046 0110 	orr.w	r1, r6, #16
 800038a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800038e:	462a      	mov	r2, r5
 8000390:	6463      	str	r3, [r4, #68]	; 0x44
 8000392:	2001      	movs	r0, #1
 8000394:	462b      	mov	r3, r5
 8000396:	47c0      	blx	r8
 8000398:	bb78      	cbnz	r0, 80003fa <unwind_phase2_forced+0xbe>
 800039a:	4638      	mov	r0, r7
 800039c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003aa:	616b      	str	r3, [r5, #20]
 80003ac:	4621      	mov	r1, r4
 80003ae:	a87a      	add	r0, sp, #488	; 0x1e8
 80003b0:	f002 ff78 	bl	80032a4 <memcpy>
 80003b4:	692b      	ldr	r3, [r5, #16]
 80003b6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003b8:	4629      	mov	r1, r5
 80003ba:	4630      	mov	r0, r6
 80003bc:	4798      	blx	r3
 80003be:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003c0:	4682      	mov	sl, r0
 80003c2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003c6:	4631      	mov	r1, r6
 80003c8:	6463      	str	r3, [r4, #68]	; 0x44
 80003ca:	462a      	mov	r2, r5
 80003cc:	462b      	mov	r3, r5
 80003ce:	2001      	movs	r0, #1
 80003d0:	47c0      	blx	r8
 80003d2:	b990      	cbnz	r0, 80003fa <unwind_phase2_forced+0xbe>
 80003d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003d8:	a97a      	add	r1, sp, #488	; 0x1e8
 80003da:	4620      	mov	r0, r4
 80003dc:	f002 ff62 	bl	80032a4 <memcpy>
 80003e0:	f1ba 0f08 	cmp.w	sl, #8
 80003e4:	d106      	bne.n	80003f4 <unwind_phase2_forced+0xb8>
 80003e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003e8:	4628      	mov	r0, r5
 80003ea:	f7ff feff 	bl	80001ec <get_eit_entry>
 80003ee:	2609      	movs	r6, #9
 80003f0:	4607      	mov	r7, r0
 80003f2:	e7c6      	b.n	8000382 <unwind_phase2_forced+0x46>
 80003f4:	f1ba 0f07 	cmp.w	sl, #7
 80003f8:	d005      	beq.n	8000406 <unwind_phase2_forced+0xca>
 80003fa:	2709      	movs	r7, #9
 80003fc:	4638      	mov	r0, r7
 80003fe:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	4638      	mov	r0, r7
 8000408:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800040a:	f7ff ff75 	bl	80002f8 <_Unwind_DebugHook>
 800040e:	a803      	add	r0, sp, #12
 8000410:	f000 fb8c 	bl	8000b2c <__restore_core_regs>

08000414 <_Unwind_GetCFA>:
 8000414:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000416:	4770      	bx	lr

08000418 <__gnu_Unwind_RaiseException>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	f04f 3eff 	mov.w	lr, #4294967295
 800041e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000420:	b0f9      	sub	sp, #484	; 0x1e4
 8000422:	640b      	str	r3, [r1, #64]	; 0x40
 8000424:	1d0e      	adds	r6, r1, #4
 8000426:	ad01      	add	r5, sp, #4
 8000428:	460f      	mov	r7, r1
 800042a:	4604      	mov	r4, r0
 800042c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800042e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000430:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000434:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000438:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800043c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000440:	f8cd e000 	str.w	lr, [sp]
 8000444:	e006      	b.n	8000454 <__gnu_Unwind_RaiseException+0x3c>
 8000446:	6923      	ldr	r3, [r4, #16]
 8000448:	466a      	mov	r2, sp
 800044a:	4621      	mov	r1, r4
 800044c:	4798      	blx	r3
 800044e:	2808      	cmp	r0, #8
 8000450:	4605      	mov	r5, r0
 8000452:	d108      	bne.n	8000466 <__gnu_Unwind_RaiseException+0x4e>
 8000454:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000456:	4620      	mov	r0, r4
 8000458:	f7ff fec8 	bl	80001ec <get_eit_entry>
 800045c:	2800      	cmp	r0, #0
 800045e:	d0f2      	beq.n	8000446 <__gnu_Unwind_RaiseException+0x2e>
 8000460:	2009      	movs	r0, #9
 8000462:	b079      	add	sp, #484	; 0x1e4
 8000464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000466:	4668      	mov	r0, sp
 8000468:	f7ff ff12 	bl	8000290 <restore_non_core_regs>
 800046c:	2d06      	cmp	r5, #6
 800046e:	d1f7      	bne.n	8000460 <__gnu_Unwind_RaiseException+0x48>
 8000470:	4639      	mov	r1, r7
 8000472:	4620      	mov	r0, r4
 8000474:	f7ff ff42 	bl	80002fc <unwind_phase2>

08000478 <__gnu_Unwind_ForcedUnwind>:
 8000478:	b430      	push	{r4, r5}
 800047a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800047c:	60c1      	str	r1, [r0, #12]
 800047e:	6182      	str	r2, [r0, #24]
 8000480:	4619      	mov	r1, r3
 8000482:	641d      	str	r5, [r3, #64]	; 0x40
 8000484:	2200      	movs	r2, #0
 8000486:	bc30      	pop	{r4, r5}
 8000488:	e758      	b.n	800033c <unwind_phase2_forced>
 800048a:	bf00      	nop

0800048c <__gnu_Unwind_Resume>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	6943      	ldr	r3, [r0, #20]
 8000490:	68c6      	ldr	r6, [r0, #12]
 8000492:	640b      	str	r3, [r1, #64]	; 0x40
 8000494:	b126      	cbz	r6, 80004a0 <__gnu_Unwind_Resume+0x14>
 8000496:	2201      	movs	r2, #1
 8000498:	f7ff ff50 	bl	800033c <unwind_phase2_forced>
 800049c:	f002 ff15 	bl	80032ca <abort>
 80004a0:	6903      	ldr	r3, [r0, #16]
 80004a2:	460a      	mov	r2, r1
 80004a4:	4604      	mov	r4, r0
 80004a6:	460d      	mov	r5, r1
 80004a8:	4601      	mov	r1, r0
 80004aa:	2002      	movs	r0, #2
 80004ac:	4798      	blx	r3
 80004ae:	2807      	cmp	r0, #7
 80004b0:	d007      	beq.n	80004c2 <__gnu_Unwind_Resume+0x36>
 80004b2:	2808      	cmp	r0, #8
 80004b4:	d103      	bne.n	80004be <__gnu_Unwind_Resume+0x32>
 80004b6:	4629      	mov	r1, r5
 80004b8:	4620      	mov	r0, r4
 80004ba:	f7ff ff1f 	bl	80002fc <unwind_phase2>
 80004be:	f002 ff04 	bl	80032ca <abort>
 80004c2:	4630      	mov	r0, r6
 80004c4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004c6:	f7ff ff17 	bl	80002f8 <_Unwind_DebugHook>
 80004ca:	1d28      	adds	r0, r5, #4
 80004cc:	f000 fb2e 	bl	8000b2c <__restore_core_regs>

080004d0 <__gnu_Unwind_Resume_or_Rethrow>:
 80004d0:	68c2      	ldr	r2, [r0, #12]
 80004d2:	b12a      	cbz	r2, 80004e0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004d4:	b410      	push	{r4}
 80004d6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004d8:	2200      	movs	r2, #0
 80004da:	640c      	str	r4, [r1, #64]	; 0x40
 80004dc:	bc10      	pop	{r4}
 80004de:	e72d      	b.n	800033c <unwind_phase2_forced>
 80004e0:	e79a      	b.n	8000418 <__gnu_Unwind_RaiseException>
 80004e2:	bf00      	nop

080004e4 <_Unwind_Complete>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_Unwind_DeleteException>:
 80004e8:	6883      	ldr	r3, [r0, #8]
 80004ea:	b113      	cbz	r3, 80004f2 <_Unwind_DeleteException+0xa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	2001      	movs	r0, #1
 80004f0:	4718      	bx	r3
 80004f2:	4770      	bx	lr

080004f4 <_Unwind_VRS_Get>:
 80004f4:	b500      	push	{lr}
 80004f6:	2904      	cmp	r1, #4
 80004f8:	d807      	bhi.n	800050a <_Unwind_VRS_Get+0x16>
 80004fa:	e8df f001 	tbb	[pc, r1]
 80004fe:	0903      	.short	0x0903
 8000500:	0906      	.short	0x0906
 8000502:	09          	.byte	0x09
 8000503:	00          	.byte	0x00
 8000504:	b90b      	cbnz	r3, 800050a <_Unwind_VRS_Get+0x16>
 8000506:	2a0f      	cmp	r2, #15
 8000508:	d905      	bls.n	8000516 <_Unwind_VRS_Get+0x22>
 800050a:	2002      	movs	r0, #2
 800050c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000510:	2001      	movs	r0, #1
 8000512:	f85d fb04 	ldr.w	pc, [sp], #4
 8000516:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800051a:	6852      	ldr	r2, [r2, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	9b01      	ldr	r3, [sp, #4]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f85d fb04 	ldr.w	pc, [sp], #4
 8000526:	bf00      	nop

08000528 <_Unwind_GetGR>:
 8000528:	2300      	movs	r3, #0
 800052a:	b510      	push	{r4, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	ac03      	add	r4, sp, #12
 8000530:	460a      	mov	r2, r1
 8000532:	9400      	str	r4, [sp, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f7ff ffdd 	bl	80004f4 <_Unwind_VRS_Get>
 800053a:	9803      	ldr	r0, [sp, #12]
 800053c:	b004      	add	sp, #16
 800053e:	bd10      	pop	{r4, pc}

08000540 <_Unwind_VRS_Set>:
 8000540:	b500      	push	{lr}
 8000542:	2904      	cmp	r1, #4
 8000544:	d807      	bhi.n	8000556 <_Unwind_VRS_Set+0x16>
 8000546:	e8df f001 	tbb	[pc, r1]
 800054a:	0903      	.short	0x0903
 800054c:	0906      	.short	0x0906
 800054e:	09          	.byte	0x09
 800054f:	00          	.byte	0x00
 8000550:	b90b      	cbnz	r3, 8000556 <_Unwind_VRS_Set+0x16>
 8000552:	2a0f      	cmp	r2, #15
 8000554:	d905      	bls.n	8000562 <_Unwind_VRS_Set+0x22>
 8000556:	2002      	movs	r0, #2
 8000558:	f85d fb04 	ldr.w	pc, [sp], #4
 800055c:	2001      	movs	r0, #1
 800055e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000568:	6809      	ldr	r1, [r1, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	6051      	str	r1, [r2, #4]
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000572:	bf00      	nop

08000574 <_Unwind_SetGR>:
 8000574:	2300      	movs	r3, #0
 8000576:	b510      	push	{r4, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	ac04      	add	r4, sp, #16
 800057c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000580:	9400      	str	r4, [sp, #0]
 8000582:	460a      	mov	r2, r1
 8000584:	4619      	mov	r1, r3
 8000586:	f7ff ffdb 	bl	8000540 <_Unwind_VRS_Set>
 800058a:	b004      	add	sp, #16
 800058c:	bd10      	pop	{r4, pc}
 800058e:	bf00      	nop

08000590 <__gnu_Unwind_Backtrace>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	f04f 3eff 	mov.w	lr, #4294967295
 8000596:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000598:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	1d15      	adds	r5, r2, #4
 80005a0:	ac17      	add	r4, sp, #92	; 0x5c
 80005a2:	4607      	mov	r7, r0
 80005a4:	460e      	mov	r6, r1
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ba:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005be:	e012      	b.n	80005e6 <__gnu_Unwind_Backtrace+0x56>
 80005c0:	210c      	movs	r1, #12
 80005c2:	a816      	add	r0, sp, #88	; 0x58
 80005c4:	466a      	mov	r2, sp
 80005c6:	f7ff ffd5 	bl	8000574 <_Unwind_SetGR>
 80005ca:	4631      	mov	r1, r6
 80005cc:	a816      	add	r0, sp, #88	; 0x58
 80005ce:	47b8      	blx	r7
 80005d0:	b978      	cbnz	r0, 80005f2 <__gnu_Unwind_Backtrace+0x62>
 80005d2:	9b04      	ldr	r3, [sp, #16]
 80005d4:	aa16      	add	r2, sp, #88	; 0x58
 80005d6:	4669      	mov	r1, sp
 80005d8:	2008      	movs	r0, #8
 80005da:	4798      	blx	r3
 80005dc:	2805      	cmp	r0, #5
 80005de:	4604      	mov	r4, r0
 80005e0:	d008      	beq.n	80005f4 <__gnu_Unwind_Backtrace+0x64>
 80005e2:	2809      	cmp	r0, #9
 80005e4:	d005      	beq.n	80005f2 <__gnu_Unwind_Backtrace+0x62>
 80005e6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005e8:	4668      	mov	r0, sp
 80005ea:	f7ff fdff 	bl	80001ec <get_eit_entry>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d0e6      	beq.n	80005c0 <__gnu_Unwind_Backtrace+0x30>
 80005f2:	2409      	movs	r4, #9
 80005f4:	a816      	add	r0, sp, #88	; 0x58
 80005f6:	f7ff fe4b 	bl	8000290 <restore_non_core_regs>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000602:	bf00      	nop

08000604 <__gnu_unwind_pr_common>:
 8000604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000608:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800060a:	4691      	mov	r9, r2
 800060c:	6822      	ldr	r2, [r4, #0]
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	3404      	adds	r4, #4
 8000612:	460d      	mov	r5, r1
 8000614:	9207      	str	r2, [sp, #28]
 8000616:	9408      	str	r4, [sp, #32]
 8000618:	f000 0b03 	and.w	fp, r0, #3
 800061c:	461e      	mov	r6, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d160      	bne.n	80006e4 <__gnu_unwind_pr_common+0xe0>
 8000622:	2303      	movs	r3, #3
 8000624:	0212      	lsls	r2, r2, #8
 8000626:	9207      	str	r2, [sp, #28]
 8000628:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800062c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000630:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000632:	f1bb 0f02 	cmp.w	fp, #2
 8000636:	bf08      	it	eq
 8000638:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800063a:	f013 0301 	ands.w	r3, r3, #1
 800063e:	d140      	bne.n	80006c2 <__gnu_unwind_pr_common+0xbe>
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f000 0308 	and.w	r3, r0, #8
 8000646:	9303      	str	r3, [sp, #12]
 8000648:	f8d4 8000 	ldr.w	r8, [r4]
 800064c:	f1b8 0f00 	cmp.w	r8, #0
 8000650:	d039      	beq.n	80006c6 <__gnu_unwind_pr_common+0xc2>
 8000652:	2e02      	cmp	r6, #2
 8000654:	d043      	beq.n	80006de <__gnu_unwind_pr_common+0xda>
 8000656:	f8b4 8000 	ldrh.w	r8, [r4]
 800065a:	8867      	ldrh	r7, [r4, #2]
 800065c:	3404      	adds	r4, #4
 800065e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000660:	f027 0a01 	bic.w	sl, r7, #1
 8000664:	210f      	movs	r1, #15
 8000666:	4648      	mov	r0, r9
 8000668:	449a      	add	sl, r3
 800066a:	f7ff ff5d 	bl	8000528 <_Unwind_GetGR>
 800066e:	4582      	cmp	sl, r0
 8000670:	d833      	bhi.n	80006da <__gnu_unwind_pr_common+0xd6>
 8000672:	f028 0301 	bic.w	r3, r8, #1
 8000676:	449a      	add	sl, r3
 8000678:	4550      	cmp	r0, sl
 800067a:	bf2c      	ite	cs
 800067c:	2000      	movcs	r0, #0
 800067e:	2001      	movcc	r0, #1
 8000680:	007f      	lsls	r7, r7, #1
 8000682:	f007 0702 	and.w	r7, r7, #2
 8000686:	f008 0801 	and.w	r8, r8, #1
 800068a:	ea47 0708 	orr.w	r7, r7, r8
 800068e:	2f01      	cmp	r7, #1
 8000690:	d03e      	beq.n	8000710 <__gnu_unwind_pr_common+0x10c>
 8000692:	d335      	bcc.n	8000700 <__gnu_unwind_pr_common+0xfc>
 8000694:	2f02      	cmp	r7, #2
 8000696:	d11c      	bne.n	80006d2 <__gnu_unwind_pr_common+0xce>
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800069e:	9202      	str	r2, [sp, #8]
 80006a0:	f1bb 0f00 	cmp.w	fp, #0
 80006a4:	d176      	bne.n	8000794 <__gnu_unwind_pr_common+0x190>
 80006a6:	b128      	cbz	r0, 80006b4 <__gnu_unwind_pr_common+0xb0>
 80006a8:	9903      	ldr	r1, [sp, #12]
 80006aa:	2900      	cmp	r1, #0
 80006ac:	d07e      	beq.n	80007ac <__gnu_unwind_pr_common+0x1a8>
 80006ae:	2a00      	cmp	r2, #0
 80006b0:	f000 80a6 	beq.w	8000800 <__gnu_unwind_pr_common+0x1fc>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db77      	blt.n	80007a8 <__gnu_unwind_pr_common+0x1a4>
 80006b8:	9b02      	ldr	r3, [sp, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006c0:	e7c2      	b.n	8000648 <__gnu_unwind_pr_common+0x44>
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2e02      	cmp	r6, #2
 80006c8:	dd3e      	ble.n	8000748 <__gnu_unwind_pr_common+0x144>
 80006ca:	f7ff fe13 	bl	80002f4 <__gnu_unwind_24bit.isra.1>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d040      	beq.n	8000754 <__gnu_unwind_pr_common+0x150>
 80006d2:	2009      	movs	r0, #9
 80006d4:	b00b      	add	sp, #44	; 0x2c
 80006d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006da:	2000      	movs	r0, #0
 80006dc:	e7d0      	b.n	8000680 <__gnu_unwind_pr_common+0x7c>
 80006de:	6867      	ldr	r7, [r4, #4]
 80006e0:	3408      	adds	r4, #8
 80006e2:	e7bc      	b.n	800065e <__gnu_unwind_pr_common+0x5a>
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	dca3      	bgt.n	8000630 <__gnu_unwind_pr_common+0x2c>
 80006e8:	2102      	movs	r1, #2
 80006ea:	0c13      	lsrs	r3, r2, #16
 80006ec:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80006f0:	0412      	lsls	r2, r2, #16
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006f8:	9207      	str	r2, [sp, #28]
 80006fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80006fe:	e797      	b.n	8000630 <__gnu_unwind_pr_common+0x2c>
 8000700:	f1bb 0f00 	cmp.w	fp, #0
 8000704:	d002      	beq.n	800070c <__gnu_unwind_pr_common+0x108>
 8000706:	2800      	cmp	r0, #0
 8000708:	f040 80bd 	bne.w	8000886 <__gnu_unwind_pr_common+0x282>
 800070c:	3404      	adds	r4, #4
 800070e:	e79b      	b.n	8000648 <__gnu_unwind_pr_common+0x44>
 8000710:	f1bb 0f00 	cmp.w	fp, #0
 8000714:	d125      	bne.n	8000762 <__gnu_unwind_pr_common+0x15e>
 8000716:	b1a8      	cbz	r0, 8000744 <__gnu_unwind_pr_common+0x140>
 8000718:	e894 000c 	ldmia.w	r4, {r2, r3}
 800071c:	1c99      	adds	r1, r3, #2
 800071e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000722:	d0d6      	beq.n	80006d2 <__gnu_unwind_pr_common+0xce>
 8000724:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000728:	3301      	adds	r3, #1
 800072a:	9106      	str	r1, [sp, #24]
 800072c:	f000 80a3 	beq.w	8000876 <__gnu_unwind_pr_common+0x272>
 8000730:	1d20      	adds	r0, r4, #4
 8000732:	f7ff fdd9 	bl	80002e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000736:	ab06      	add	r3, sp, #24
 8000738:	4601      	mov	r1, r0
 800073a:	4628      	mov	r0, r5
 800073c:	f3af 8000 	nop.w
 8000740:	2800      	cmp	r0, #0
 8000742:	d177      	bne.n	8000834 <__gnu_unwind_pr_common+0x230>
 8000744:	3408      	adds	r4, #8
 8000746:	e77f      	b.n	8000648 <__gnu_unwind_pr_common+0x44>
 8000748:	a907      	add	r1, sp, #28
 800074a:	4648      	mov	r0, r9
 800074c:	f000 faf0 	bl	8000d30 <__gnu_unwind_execute>
 8000750:	2800      	cmp	r0, #0
 8000752:	d1be      	bne.n	80006d2 <__gnu_unwind_pr_common+0xce>
 8000754:	9b01      	ldr	r3, [sp, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d15c      	bne.n	8000814 <__gnu_unwind_pr_common+0x210>
 800075a:	2008      	movs	r0, #8
 800075c:	b00b      	add	sp, #44	; 0x2c
 800075e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000762:	210d      	movs	r1, #13
 8000764:	4648      	mov	r0, r9
 8000766:	6a2f      	ldr	r7, [r5, #32]
 8000768:	f7ff fede 	bl	8000528 <_Unwind_GetGR>
 800076c:	4287      	cmp	r7, r0
 800076e:	d1e9      	bne.n	8000744 <__gnu_unwind_pr_common+0x140>
 8000770:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000772:	429c      	cmp	r4, r3
 8000774:	d1e6      	bne.n	8000744 <__gnu_unwind_pr_common+0x140>
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff fcea 	bl	8000150 <selfrel_offset31>
 800077c:	210f      	movs	r1, #15
 800077e:	4602      	mov	r2, r0
 8000780:	4648      	mov	r0, r9
 8000782:	f7ff fef7 	bl	8000574 <_Unwind_SetGR>
 8000786:	4648      	mov	r0, r9
 8000788:	462a      	mov	r2, r5
 800078a:	2100      	movs	r1, #0
 800078c:	f7ff fef2 	bl	8000574 <_Unwind_SetGR>
 8000790:	2007      	movs	r0, #7
 8000792:	e79f      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 8000794:	210d      	movs	r1, #13
 8000796:	4648      	mov	r0, r9
 8000798:	6a2f      	ldr	r7, [r5, #32]
 800079a:	f7ff fec5 	bl	8000528 <_Unwind_GetGR>
 800079e:	4287      	cmp	r7, r0
 80007a0:	d058      	beq.n	8000854 <__gnu_unwind_pr_common+0x250>
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	da87      	bge.n	80006b8 <__gnu_unwind_pr_common+0xb4>
 80007a8:	3404      	adds	r4, #4
 80007aa:	e785      	b.n	80006b8 <__gnu_unwind_pr_common+0xb4>
 80007ac:	9b02      	ldr	r3, [sp, #8]
 80007ae:	b33b      	cbz	r3, 8000800 <__gnu_unwind_pr_common+0x1fc>
 80007b0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007b4:	1d27      	adds	r7, r4, #4
 80007b6:	f8cd b010 	str.w	fp, [sp, #16]
 80007ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007be:	46a3      	mov	fp, r4
 80007c0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007c4:	461c      	mov	r4, r3
 80007c6:	9605      	str	r6, [sp, #20]
 80007c8:	e002      	b.n	80007d0 <__gnu_unwind_pr_common+0x1cc>
 80007ca:	45b2      	cmp	sl, r6
 80007cc:	46b0      	mov	r8, r6
 80007ce:	d016      	beq.n	80007fe <__gnu_unwind_pr_common+0x1fa>
 80007d0:	4638      	mov	r0, r7
 80007d2:	9406      	str	r4, [sp, #24]
 80007d4:	f7ff fd88 	bl	80002e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007d8:	ab06      	add	r3, sp, #24
 80007da:	4601      	mov	r1, r0
 80007dc:	2200      	movs	r2, #0
 80007de:	4628      	mov	r0, r5
 80007e0:	f3af 8000 	nop.w
 80007e4:	f108 0601 	add.w	r6, r8, #1
 80007e8:	3704      	adds	r7, #4
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d0ed      	beq.n	80007ca <__gnu_unwind_pr_common+0x1c6>
 80007ee:	9b02      	ldr	r3, [sp, #8]
 80007f0:	465c      	mov	r4, fp
 80007f2:	4543      	cmp	r3, r8
 80007f4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80007f8:	9e05      	ldr	r6, [sp, #20]
 80007fa:	d1d2      	bne.n	80007a2 <__gnu_unwind_pr_common+0x19e>
 80007fc:	e000      	b.n	8000800 <__gnu_unwind_pr_common+0x1fc>
 80007fe:	465c      	mov	r4, fp
 8000800:	4648      	mov	r0, r9
 8000802:	210d      	movs	r1, #13
 8000804:	f7ff fe90 	bl	8000528 <_Unwind_GetGR>
 8000808:	9b06      	ldr	r3, [sp, #24]
 800080a:	6228      	str	r0, [r5, #32]
 800080c:	62ac      	str	r4, [r5, #40]	; 0x28
 800080e:	626b      	str	r3, [r5, #36]	; 0x24
 8000810:	2006      	movs	r0, #6
 8000812:	e75f      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 8000814:	210f      	movs	r1, #15
 8000816:	4648      	mov	r0, r9
 8000818:	f7ff fe86 	bl	8000528 <_Unwind_GetGR>
 800081c:	210e      	movs	r1, #14
 800081e:	4602      	mov	r2, r0
 8000820:	4648      	mov	r0, r9
 8000822:	f7ff fea7 	bl	8000574 <_Unwind_SetGR>
 8000826:	4648      	mov	r0, r9
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <__gnu_unwind_pr_common+0x2cc>)
 800082a:	210f      	movs	r1, #15
 800082c:	f7ff fea2 	bl	8000574 <_Unwind_SetGR>
 8000830:	2007      	movs	r0, #7
 8000832:	e74f      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 8000834:	4607      	mov	r7, r0
 8000836:	210d      	movs	r1, #13
 8000838:	4648      	mov	r0, r9
 800083a:	f7ff fe75 	bl	8000528 <_Unwind_GetGR>
 800083e:	2f02      	cmp	r7, #2
 8000840:	6228      	str	r0, [r5, #32]
 8000842:	d11d      	bne.n	8000880 <__gnu_unwind_pr_common+0x27c>
 8000844:	462b      	mov	r3, r5
 8000846:	9a06      	ldr	r2, [sp, #24]
 8000848:	f843 2f2c 	str.w	r2, [r3, #44]!
 800084c:	626b      	str	r3, [r5, #36]	; 0x24
 800084e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000850:	2006      	movs	r0, #6
 8000852:	e73f      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 8000854:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000856:	429c      	cmp	r4, r3
 8000858:	d1a3      	bne.n	80007a2 <__gnu_unwind_pr_common+0x19e>
 800085a:	2204      	movs	r2, #4
 800085c:	2700      	movs	r7, #0
 800085e:	9902      	ldr	r1, [sp, #8]
 8000860:	18a3      	adds	r3, r4, r2
 8000862:	62a9      	str	r1, [r5, #40]	; 0x28
 8000864:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000866:	632a      	str	r2, [r5, #48]	; 0x30
 8000868:	636b      	str	r3, [r5, #52]	; 0x34
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	42bb      	cmp	r3, r7
 800086e:	db1d      	blt.n	80008ac <__gnu_unwind_pr_common+0x2a8>
 8000870:	2301      	movs	r3, #1
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	e720      	b.n	80006b8 <__gnu_unwind_pr_common+0xb4>
 8000876:	4648      	mov	r0, r9
 8000878:	210d      	movs	r1, #13
 800087a:	f7ff fe55 	bl	8000528 <_Unwind_GetGR>
 800087e:	6228      	str	r0, [r5, #32]
 8000880:	9b06      	ldr	r3, [sp, #24]
 8000882:	626b      	str	r3, [r5, #36]	; 0x24
 8000884:	e7e3      	b.n	800084e <__gnu_unwind_pr_common+0x24a>
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff fc62 	bl	8000150 <selfrel_offset31>
 800088c:	3404      	adds	r4, #4
 800088e:	4606      	mov	r6, r0
 8000890:	63ac      	str	r4, [r5, #56]	; 0x38
 8000892:	4628      	mov	r0, r5
 8000894:	f3af 8000 	nop.w
 8000898:	2800      	cmp	r0, #0
 800089a:	f43f af1a 	beq.w	80006d2 <__gnu_unwind_pr_common+0xce>
 800089e:	4648      	mov	r0, r9
 80008a0:	4632      	mov	r2, r6
 80008a2:	210f      	movs	r1, #15
 80008a4:	f7ff fe66 	bl	8000574 <_Unwind_SetGR>
 80008a8:	2007      	movs	r0, #7
 80008aa:	e713      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 80008ac:	4608      	mov	r0, r1
 80008ae:	3001      	adds	r0, #1
 80008b0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008b4:	f7ff fc4c 	bl	8000150 <selfrel_offset31>
 80008b8:	210f      	movs	r1, #15
 80008ba:	4602      	mov	r2, r0
 80008bc:	4648      	mov	r0, r9
 80008be:	f7ff fe59 	bl	8000574 <_Unwind_SetGR>
 80008c2:	4648      	mov	r0, r9
 80008c4:	462a      	mov	r2, r5
 80008c6:	4639      	mov	r1, r7
 80008c8:	f7ff fe54 	bl	8000574 <_Unwind_SetGR>
 80008cc:	2007      	movs	r0, #7
 80008ce:	e701      	b.n	80006d4 <__gnu_unwind_pr_common+0xd0>
 80008d0:	00000000 	.word	0x00000000

080008d4 <__aeabi_unwind_cpp_pr0>:
 80008d4:	2300      	movs	r3, #0
 80008d6:	e695      	b.n	8000604 <__gnu_unwind_pr_common>

080008d8 <__aeabi_unwind_cpp_pr1>:
 80008d8:	2301      	movs	r3, #1
 80008da:	e693      	b.n	8000604 <__gnu_unwind_pr_common>

080008dc <__aeabi_unwind_cpp_pr2>:
 80008dc:	2302      	movs	r3, #2
 80008de:	e691      	b.n	8000604 <__gnu_unwind_pr_common>

080008e0 <_Unwind_VRS_Pop>:
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	4604      	mov	r4, r0
 80008e4:	b0c5      	sub	sp, #276	; 0x114
 80008e6:	2904      	cmp	r1, #4
 80008e8:	d80d      	bhi.n	8000906 <_Unwind_VRS_Pop+0x26>
 80008ea:	e8df f001 	tbb	[pc, r1]
 80008ee:	0355      	.short	0x0355
 80008f0:	310c      	.short	0x310c
 80008f2:	0f          	.byte	0x0f
 80008f3:	00          	.byte	0x00
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80008fa:	b295      	uxth	r5, r2
 80008fc:	d164      	bne.n	80009c8 <_Unwind_VRS_Pop+0xe8>
 80008fe:	1972      	adds	r2, r6, r5
 8000900:	2a10      	cmp	r2, #16
 8000902:	f240 809d 	bls.w	8000a40 <_Unwind_VRS_Pop+0x160>
 8000906:	2002      	movs	r0, #2
 8000908:	b045      	add	sp, #276	; 0x114
 800090a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1fa      	bne.n	8000906 <_Unwind_VRS_Pop+0x26>
 8000910:	2a10      	cmp	r2, #16
 8000912:	d8f8      	bhi.n	8000906 <_Unwind_VRS_Pop+0x26>
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	06d8      	lsls	r0, r3, #27
 8000918:	f100 80c8 	bmi.w	8000aac <_Unwind_VRS_Pop+0x1cc>
 800091c:	ae22      	add	r6, sp, #136	; 0x88
 800091e:	4630      	mov	r0, r6
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	2501      	movs	r5, #1
 8000924:	f000 f974 	bl	8000c10 <__gnu_Unwind_Save_WMMXC>
 8000928:	2300      	movs	r3, #0
 800092a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800092c:	9a01      	ldr	r2, [sp, #4]
 800092e:	fa05 f103 	lsl.w	r1, r5, r3
 8000932:	4211      	tst	r1, r2
 8000934:	d003      	beq.n	800093e <_Unwind_VRS_Pop+0x5e>
 8000936:	6801      	ldr	r1, [r0, #0]
 8000938:	3004      	adds	r0, #4
 800093a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800093e:	3301      	adds	r3, #1
 8000940:	2b04      	cmp	r3, #4
 8000942:	d1f4      	bne.n	800092e <_Unwind_VRS_Pop+0x4e>
 8000944:	63a0      	str	r0, [r4, #56]	; 0x38
 8000946:	4630      	mov	r0, r6
 8000948:	f000 f958 	bl	8000bfc <__gnu_Unwind_Restore_WMMXC>
 800094c:	2000      	movs	r0, #0
 800094e:	e7db      	b.n	8000908 <_Unwind_VRS_Pop+0x28>
 8000950:	2b03      	cmp	r3, #3
 8000952:	d1d8      	bne.n	8000906 <_Unwind_VRS_Pop+0x26>
 8000954:	0c15      	lsrs	r5, r2, #16
 8000956:	b297      	uxth	r7, r2
 8000958:	19eb      	adds	r3, r5, r7
 800095a:	2b10      	cmp	r3, #16
 800095c:	d8d3      	bhi.n	8000906 <_Unwind_VRS_Pop+0x26>
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	071e      	lsls	r6, r3, #28
 8000962:	f100 80b7 	bmi.w	8000ad4 <_Unwind_VRS_Pop+0x1f4>
 8000966:	ae22      	add	r6, sp, #136	; 0x88
 8000968:	4630      	mov	r0, r6
 800096a:	f000 f925 	bl	8000bb8 <__gnu_Unwind_Save_WMMXD>
 800096e:	00ed      	lsls	r5, r5, #3
 8000970:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000972:	b15f      	cbz	r7, 800098c <_Unwind_VRS_Pop+0xac>
 8000974:	3d04      	subs	r5, #4
 8000976:	4603      	mov	r3, r0
 8000978:	1971      	adds	r1, r6, r5
 800097a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800097e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000982:	4283      	cmp	r3, r0
 8000984:	f841 2f04 	str.w	r2, [r1, #4]!
 8000988:	d1f9      	bne.n	800097e <_Unwind_VRS_Pop+0x9e>
 800098a:	4618      	mov	r0, r3
 800098c:	63a0      	str	r0, [r4, #56]	; 0x38
 800098e:	4630      	mov	r0, r6
 8000990:	f000 f8f0 	bl	8000b74 <__gnu_Unwind_Restore_WMMXD>
 8000994:	2000      	movs	r0, #0
 8000996:	e7b7      	b.n	8000908 <_Unwind_VRS_Pop+0x28>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1b4      	bne.n	8000906 <_Unwind_VRS_Pop+0x26>
 800099c:	2701      	movs	r7, #1
 800099e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80009a0:	b296      	uxth	r6, r2
 80009a2:	1d20      	adds	r0, r4, #4
 80009a4:	fa07 f103 	lsl.w	r1, r7, r3
 80009a8:	4231      	tst	r1, r6
 80009aa:	f103 0301 	add.w	r3, r3, #1
 80009ae:	d002      	beq.n	80009b6 <_Unwind_VRS_Pop+0xd6>
 80009b0:	6829      	ldr	r1, [r5, #0]
 80009b2:	3504      	adds	r5, #4
 80009b4:	6001      	str	r1, [r0, #0]
 80009b6:	2b10      	cmp	r3, #16
 80009b8:	f100 0004 	add.w	r0, r0, #4
 80009bc:	d1f2      	bne.n	80009a4 <_Unwind_VRS_Pop+0xc4>
 80009be:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009c2:	d13b      	bne.n	8000a3c <_Unwind_VRS_Pop+0x15c>
 80009c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80009c6:	e79f      	b.n	8000908 <_Unwind_VRS_Pop+0x28>
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d19c      	bne.n	8000906 <_Unwind_VRS_Pop+0x26>
 80009cc:	1977      	adds	r7, r6, r5
 80009ce:	2f20      	cmp	r7, #32
 80009d0:	d899      	bhi.n	8000906 <_Unwind_VRS_Pop+0x26>
 80009d2:	2e0f      	cmp	r6, #15
 80009d4:	d966      	bls.n	8000aa4 <_Unwind_VRS_Pop+0x1c4>
 80009d6:	462f      	mov	r7, r5
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d13a      	bne.n	8000a52 <_Unwind_VRS_Pop+0x172>
 80009dc:	462a      	mov	r2, r5
 80009de:	2700      	movs	r7, #0
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009e4:	dd72      	ble.n	8000acc <_Unwind_VRS_Pop+0x1ec>
 80009e6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009ea:	4601      	mov	r1, r0
 80009ec:	a844      	add	r0, sp, #272	; 0x110
 80009ee:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80009f2:	388c      	subs	r0, #140	; 0x8c
 80009f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80009f8:	4291      	cmp	r1, r2
 80009fa:	f840 5f04 	str.w	r5, [r0, #4]!
 80009fe:	d1f9      	bne.n	80009f4 <_Unwind_VRS_Pop+0x114>
 8000a00:	4608      	mov	r0, r1
 8000a02:	b197      	cbz	r7, 8000a2a <_Unwind_VRS_Pop+0x14a>
 8000a04:	2e10      	cmp	r6, #16
 8000a06:	4632      	mov	r2, r6
 8000a08:	bf38      	it	cc
 8000a0a:	2210      	movcc	r2, #16
 8000a0c:	a944      	add	r1, sp, #272	; 0x110
 8000a0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a12:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a16:	0079      	lsls	r1, r7, #1
 8000a18:	3a04      	subs	r2, #4
 8000a1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a1e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a22:	4288      	cmp	r0, r1
 8000a24:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a28:	d1f9      	bne.n	8000a1e <_Unwind_VRS_Pop+0x13e>
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d048      	beq.n	8000ac0 <_Unwind_VRS_Pop+0x1e0>
 8000a2e:	2e0f      	cmp	r6, #15
 8000a30:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a32:	d933      	bls.n	8000a9c <_Unwind_VRS_Pop+0x1bc>
 8000a34:	b117      	cbz	r7, 8000a3c <_Unwind_VRS_Pop+0x15c>
 8000a36:	a802      	add	r0, sp, #8
 8000a38:	f000 f894 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e763      	b.n	8000908 <_Unwind_VRS_Pop+0x28>
 8000a40:	2e0f      	cmp	r6, #15
 8000a42:	f63f af60 	bhi.w	8000906 <_Unwind_VRS_Pop+0x26>
 8000a46:	2700      	movs	r7, #0
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	07d1      	lsls	r1, r2, #31
 8000a4c:	d417      	bmi.n	8000a7e <_Unwind_VRS_Pop+0x19e>
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d060      	beq.n	8000b14 <_Unwind_VRS_Pop+0x234>
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	0751      	lsls	r1, r2, #29
 8000a56:	d445      	bmi.n	8000ae4 <_Unwind_VRS_Pop+0x204>
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d04d      	beq.n	8000af8 <_Unwind_VRS_Pop+0x218>
 8000a5c:	2e0f      	cmp	r6, #15
 8000a5e:	d806      	bhi.n	8000a6e <_Unwind_VRS_Pop+0x18e>
 8000a60:	a822      	add	r0, sp, #136	; 0x88
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	f000 f87a 	bl	8000b5c <__gnu_Unwind_Save_VFP_D>
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d0b6      	beq.n	80009dc <_Unwind_VRS_Pop+0xfc>
 8000a6e:	a802      	add	r0, sp, #8
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f000 f87b 	bl	8000b6c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	f1c6 0210 	rsb	r2, r6, #16
 8000a7c:	e7b0      	b.n	80009e0 <_Unwind_VRS_Pop+0x100>
 8000a7e:	f022 0101 	bic.w	r1, r2, #1
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	6021      	str	r1, [r4, #0]
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	4620      	mov	r0, r4
 8000a8a:	d03b      	beq.n	8000b04 <_Unwind_VRS_Pop+0x224>
 8000a8c:	f022 0203 	bic.w	r2, r2, #3
 8000a90:	f840 2b48 	str.w	r2, [r0], #72
 8000a94:	f000 f85a 	bl	8000b4c <__gnu_Unwind_Save_VFP>
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	e7d8      	b.n	8000a4e <_Unwind_VRS_Pop+0x16e>
 8000a9c:	a822      	add	r0, sp, #136	; 0x88
 8000a9e:	f000 f859 	bl	8000b54 <__gnu_Unwind_Restore_VFP_D>
 8000aa2:	e7c7      	b.n	8000a34 <_Unwind_VRS_Pop+0x154>
 8000aa4:	2f10      	cmp	r7, #16
 8000aa6:	d9ce      	bls.n	8000a46 <_Unwind_VRS_Pop+0x166>
 8000aa8:	3f10      	subs	r7, #16
 8000aaa:	e7cd      	b.n	8000a48 <_Unwind_VRS_Pop+0x168>
 8000aac:	f023 0310 	bic.w	r3, r3, #16
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ab6:	9201      	str	r2, [sp, #4]
 8000ab8:	f000 f8aa 	bl	8000c10 <__gnu_Unwind_Save_WMMXC>
 8000abc:	9a01      	ldr	r2, [sp, #4]
 8000abe:	e72d      	b.n	800091c <_Unwind_VRS_Pop+0x3c>
 8000ac0:	3104      	adds	r1, #4
 8000ac2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ac4:	a822      	add	r0, sp, #136	; 0x88
 8000ac6:	f000 f83d 	bl	8000b44 <__gnu_Unwind_Restore_VFP>
 8000aca:	e7b7      	b.n	8000a3c <_Unwind_VRS_Pop+0x15c>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d199      	bne.n	8000a04 <_Unwind_VRS_Pop+0x124>
 8000ad0:	4601      	mov	r1, r0
 8000ad2:	e7aa      	b.n	8000a2a <_Unwind_VRS_Pop+0x14a>
 8000ad4:	f023 0308 	bic.w	r3, r3, #8
 8000ad8:	6023      	str	r3, [r4, #0]
 8000ada:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000ade:	f000 f86b 	bl	8000bb8 <__gnu_Unwind_Save_WMMXD>
 8000ae2:	e740      	b.n	8000966 <_Unwind_VRS_Pop+0x86>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f022 0204 	bic.w	r2, r2, #4
 8000aea:	f840 2bd0 	str.w	r2, [r0], #208
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	f000 f83c 	bl	8000b6c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000af4:	9b01      	ldr	r3, [sp, #4]
 8000af6:	e7af      	b.n	8000a58 <_Unwind_VRS_Pop+0x178>
 8000af8:	a822      	add	r0, sp, #136	; 0x88
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	f000 f826 	bl	8000b4c <__gnu_Unwind_Save_VFP>
 8000b00:	9b01      	ldr	r3, [sp, #4]
 8000b02:	e7b9      	b.n	8000a78 <_Unwind_VRS_Pop+0x198>
 8000b04:	f041 0102 	orr.w	r1, r1, #2
 8000b08:	f840 1b48 	str.w	r1, [r0], #72
 8000b0c:	f000 f826 	bl	8000b5c <__gnu_Unwind_Save_VFP_D>
 8000b10:	9b01      	ldr	r3, [sp, #4]
 8000b12:	e79c      	b.n	8000a4e <_Unwind_VRS_Pop+0x16e>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d003      	beq.n	8000b20 <_Unwind_VRS_Pop+0x240>
 8000b18:	2e0f      	cmp	r6, #15
 8000b1a:	f63f af5f 	bhi.w	80009dc <_Unwind_VRS_Pop+0xfc>
 8000b1e:	e79f      	b.n	8000a60 <_Unwind_VRS_Pop+0x180>
 8000b20:	a822      	add	r0, sp, #136	; 0x88
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	f000 f812 	bl	8000b4c <__gnu_Unwind_Save_VFP>
 8000b28:	9b01      	ldr	r3, [sp, #4]
 8000b2a:	e757      	b.n	80009dc <_Unwind_VRS_Pop+0xfc>

08000b2c <__restore_core_regs>:
 8000b2c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b30:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b34:	469c      	mov	ip, r3
 8000b36:	46a6      	mov	lr, r4
 8000b38:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b3c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b40:	46e5      	mov	sp, ip
 8000b42:	bd00      	pop	{pc}

08000b44 <__gnu_Unwind_Restore_VFP>:
 8000b44:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <__gnu_Unwind_Save_VFP>:
 8000b4c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__gnu_Unwind_Restore_VFP_D>:
 8000b54:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__gnu_Unwind_Save_VFP_D>:
 8000b5c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b64:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b6c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__gnu_Unwind_Restore_WMMXD>:
 8000b74:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b78:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b7c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b80:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b84:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b88:	ecf0 5102 	ldfe	f5, [r0], #8
 8000b8c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000b90:	ecf0 7102 	ldfe	f7, [r0], #8
 8000b94:	ecf0 8102 	ldfp	f0, [r0], #8
 8000b98:	ecf0 9102 	ldfp	f1, [r0], #8
 8000b9c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000ba0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000ba4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ba8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bac:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bb0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__gnu_Unwind_Save_WMMXD>:
 8000bb8:	ece0 0102 	stfe	f0, [r0], #8
 8000bbc:	ece0 1102 	stfe	f1, [r0], #8
 8000bc0:	ece0 2102 	stfe	f2, [r0], #8
 8000bc4:	ece0 3102 	stfe	f3, [r0], #8
 8000bc8:	ece0 4102 	stfe	f4, [r0], #8
 8000bcc:	ece0 5102 	stfe	f5, [r0], #8
 8000bd0:	ece0 6102 	stfe	f6, [r0], #8
 8000bd4:	ece0 7102 	stfe	f7, [r0], #8
 8000bd8:	ece0 8102 	stfp	f0, [r0], #8
 8000bdc:	ece0 9102 	stfp	f1, [r0], #8
 8000be0:	ece0 a102 	stfp	f2, [r0], #8
 8000be4:	ece0 b102 	stfp	f3, [r0], #8
 8000be8:	ece0 c102 	stfp	f4, [r0], #8
 8000bec:	ece0 d102 	stfp	f5, [r0], #8
 8000bf0:	ece0 e102 	stfp	f6, [r0], #8
 8000bf4:	ece0 f102 	stfp	f7, [r0], #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__gnu_Unwind_Restore_WMMXC>:
 8000bfc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c00:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c04:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c08:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Save_WMMXC>:
 8000c10:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c14:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c18:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c1c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <_Unwind_RaiseException>:
 8000c24:	46ec      	mov	ip, sp
 8000c26:	b500      	push	{lr}
 8000c28:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c2c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c38:	a901      	add	r1, sp, #4
 8000c3a:	f7ff fbed 	bl	8000418 <__gnu_Unwind_RaiseException>
 8000c3e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c42:	b012      	add	sp, #72	; 0x48
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <_Unwind_Resume>:
 8000c48:	46ec      	mov	ip, sp
 8000c4a:	b500      	push	{lr}
 8000c4c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c50:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c5c:	a901      	add	r1, sp, #4
 8000c5e:	f7ff fc15 	bl	800048c <__gnu_Unwind_Resume>
 8000c62:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c66:	b012      	add	sp, #72	; 0x48
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <_Unwind_Resume_or_Rethrow>:
 8000c6c:	46ec      	mov	ip, sp
 8000c6e:	b500      	push	{lr}
 8000c70:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c74:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c80:	a901      	add	r1, sp, #4
 8000c82:	f7ff fc25 	bl	80004d0 <__gnu_Unwind_Resume_or_Rethrow>
 8000c86:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c8a:	b012      	add	sp, #72	; 0x48
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <_Unwind_ForcedUnwind>:
 8000c90:	46ec      	mov	ip, sp
 8000c92:	b500      	push	{lr}
 8000c94:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c98:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca4:	ab01      	add	r3, sp, #4
 8000ca6:	f7ff fbe7 	bl	8000478 <__gnu_Unwind_ForcedUnwind>
 8000caa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cae:	b012      	add	sp, #72	; 0x48
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <_Unwind_Backtrace>:
 8000cb4:	46ec      	mov	ip, sp
 8000cb6:	b500      	push	{lr}
 8000cb8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cbc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc8:	aa01      	add	r2, sp, #4
 8000cca:	f7ff fc61 	bl	8000590 <__gnu_Unwind_Backtrace>
 8000cce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cd2:	b012      	add	sp, #72	; 0x48
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <next_unwind_byte>:
 8000cd8:	7a02      	ldrb	r2, [r0, #8]
 8000cda:	b91a      	cbnz	r2, 8000ce4 <next_unwind_byte+0xc>
 8000cdc:	7a43      	ldrb	r3, [r0, #9]
 8000cde:	b943      	cbnz	r3, 8000cf2 <next_unwind_byte+0x1a>
 8000ce0:	20b0      	movs	r0, #176	; 0xb0
 8000ce2:	4770      	bx	lr
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	3a01      	subs	r2, #1
 8000ce8:	7202      	strb	r2, [r0, #8]
 8000cea:	021a      	lsls	r2, r3, #8
 8000cec:	6002      	str	r2, [r0, #0]
 8000cee:	0e18      	lsrs	r0, r3, #24
 8000cf0:	4770      	bx	lr
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	6842      	ldr	r2, [r0, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b410      	push	{r4}
 8000cfa:	7243      	strb	r3, [r0, #9]
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	1d14      	adds	r4, r2, #4
 8000d00:	7201      	strb	r1, [r0, #8]
 8000d02:	021a      	lsls	r2, r3, #8
 8000d04:	6044      	str	r4, [r0, #4]
 8000d06:	6002      	str	r2, [r0, #0]
 8000d08:	bc10      	pop	{r4}
 8000d0a:	0e18      	lsrs	r0, r3, #24
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <_Unwind_GetGR.constprop.0>:
 8000d10:	2300      	movs	r3, #0
 8000d12:	b500      	push	{lr}
 8000d14:	b085      	sub	sp, #20
 8000d16:	aa03      	add	r2, sp, #12
 8000d18:	9200      	str	r2, [sp, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	220c      	movs	r2, #12
 8000d1e:	f7ff fbe9 	bl	80004f4 <_Unwind_VRS_Get>
 8000d22:	9803      	ldr	r0, [sp, #12]
 8000d24:	b005      	add	sp, #20
 8000d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d2a:	bf00      	nop

08000d2c <unwind_UCB_from_context>:
 8000d2c:	e7f0      	b.n	8000d10 <_Unwind_GetGR.constprop.0>
 8000d2e:	bf00      	nop

08000d30 <__gnu_unwind_execute>:
 8000d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d34:	4606      	mov	r6, r0
 8000d36:	460f      	mov	r7, r1
 8000d38:	f04f 0800 	mov.w	r8, #0
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	4638      	mov	r0, r7
 8000d40:	f7ff ffca 	bl	8000cd8 <next_unwind_byte>
 8000d44:	28b0      	cmp	r0, #176	; 0xb0
 8000d46:	4604      	mov	r4, r0
 8000d48:	d023      	beq.n	8000d92 <__gnu_unwind_execute+0x62>
 8000d4a:	0605      	lsls	r5, r0, #24
 8000d4c:	d427      	bmi.n	8000d9e <__gnu_unwind_execute+0x6e>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f10d 090c 	add.w	r9, sp, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	0085      	lsls	r5, r0, #2
 8000d58:	220d      	movs	r2, #13
 8000d5a:	f8cd 9000 	str.w	r9, [sp]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff fbc8 	bl	80004f4 <_Unwind_VRS_Get>
 8000d64:	b2ed      	uxtb	r5, r5
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	0660      	lsls	r0, r4, #25
 8000d6a:	f105 0504 	add.w	r5, r5, #4
 8000d6e:	bf4c      	ite	mi
 8000d70:	1b5d      	submi	r5, r3, r5
 8000d72:	18ed      	addpl	r5, r5, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	220d      	movs	r2, #13
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f8cd 9000 	str.w	r9, [sp]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	9503      	str	r5, [sp, #12]
 8000d82:	f7ff fbdd 	bl	8000540 <_Unwind_VRS_Set>
 8000d86:	4638      	mov	r0, r7
 8000d88:	f7ff ffa6 	bl	8000cd8 <next_unwind_byte>
 8000d8c:	28b0      	cmp	r0, #176	; 0xb0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	d1db      	bne.n	8000d4a <__gnu_unwind_execute+0x1a>
 8000d92:	f1b8 0f00 	cmp.w	r8, #0
 8000d96:	f000 8094 	beq.w	8000ec2 <__gnu_unwind_execute+0x192>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e01c      	b.n	8000dd8 <__gnu_unwind_execute+0xa8>
 8000d9e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000da2:	2b80      	cmp	r3, #128	; 0x80
 8000da4:	d05c      	beq.n	8000e60 <__gnu_unwind_execute+0x130>
 8000da6:	2b90      	cmp	r3, #144	; 0x90
 8000da8:	d019      	beq.n	8000dde <__gnu_unwind_execute+0xae>
 8000daa:	2ba0      	cmp	r3, #160	; 0xa0
 8000dac:	d02c      	beq.n	8000e08 <__gnu_unwind_execute+0xd8>
 8000dae:	2bb0      	cmp	r3, #176	; 0xb0
 8000db0:	d03e      	beq.n	8000e30 <__gnu_unwind_execute+0x100>
 8000db2:	2bc0      	cmp	r3, #192	; 0xc0
 8000db4:	d06b      	beq.n	8000e8e <__gnu_unwind_execute+0x15e>
 8000db6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dba:	2bd0      	cmp	r3, #208	; 0xd0
 8000dbc:	d10b      	bne.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000dbe:	f000 0207 	and.w	r2, r0, #7
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dc8:	2305      	movs	r3, #5
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	f7ff fd87 	bl	80008e0 <_Unwind_VRS_Pop>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d0b3      	beq.n	8000d3e <__gnu_unwind_execute+0xe>
 8000dd6:	2009      	movs	r0, #9
 8000dd8:	b005      	add	sp, #20
 8000dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dde:	f000 030d 	and.w	r3, r0, #13
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d0f7      	beq.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000de6:	2300      	movs	r3, #0
 8000de8:	ad03      	add	r5, sp, #12
 8000dea:	f000 020f 	and.w	r2, r0, #15
 8000dee:	4619      	mov	r1, r3
 8000df0:	9500      	str	r5, [sp, #0]
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff fb7e 	bl	80004f4 <_Unwind_VRS_Get>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9500      	str	r5, [sp, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	220d      	movs	r2, #13
 8000e00:	4630      	mov	r0, r6
 8000e02:	f7ff fb9d 	bl	8000540 <_Unwind_VRS_Set>
 8000e06:	e79a      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000e08:	43c3      	mvns	r3, r0
 8000e0a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	411a      	asrs	r2, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	0701      	lsls	r1, r0, #28
 8000e18:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e1c:	bf48      	it	mi
 8000e1e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e22:	4619      	mov	r1, r3
 8000e24:	4630      	mov	r0, r6
 8000e26:	f7ff fd5b 	bl	80008e0 <_Unwind_VRS_Pop>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d1d3      	bne.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000e2e:	e786      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000e30:	28b1      	cmp	r0, #177	; 0xb1
 8000e32:	d057      	beq.n	8000ee4 <__gnu_unwind_execute+0x1b4>
 8000e34:	28b2      	cmp	r0, #178	; 0xb2
 8000e36:	d068      	beq.n	8000f0a <__gnu_unwind_execute+0x1da>
 8000e38:	28b3      	cmp	r0, #179	; 0xb3
 8000e3a:	f000 8095 	beq.w	8000f68 <__gnu_unwind_execute+0x238>
 8000e3e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e42:	2bb4      	cmp	r3, #180	; 0xb4
 8000e44:	d0c7      	beq.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 0207 	and.w	r2, r0, #7
 8000e4c:	441a      	add	r2, r3
 8000e4e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e52:	4619      	mov	r1, r3
 8000e54:	4630      	mov	r0, r6
 8000e56:	f7ff fd43 	bl	80008e0 <_Unwind_VRS_Pop>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d1bb      	bne.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000e5e:	e76e      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000e60:	4638      	mov	r0, r7
 8000e62:	f7ff ff39 	bl	8000cd8 <next_unwind_byte>
 8000e66:	0224      	lsls	r4, r4, #8
 8000e68:	4304      	orrs	r4, r0
 8000e6a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e6e:	d0b2      	beq.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000e70:	2300      	movs	r3, #0
 8000e72:	0124      	lsls	r4, r4, #4
 8000e74:	b2a2      	uxth	r2, r4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4630      	mov	r0, r6
 8000e7a:	f7ff fd31 	bl	80008e0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d1a9      	bne.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000e82:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e86:	bf18      	it	ne
 8000e88:	f04f 0801 	movne.w	r8, #1
 8000e8c:	e757      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000e8e:	28c6      	cmp	r0, #198	; 0xc6
 8000e90:	d07d      	beq.n	8000f8e <__gnu_unwind_execute+0x25e>
 8000e92:	28c7      	cmp	r0, #199	; 0xc7
 8000e94:	f000 8086 	beq.w	8000fa4 <__gnu_unwind_execute+0x274>
 8000e98:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e9c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e9e:	f000 8094 	beq.w	8000fca <__gnu_unwind_execute+0x29a>
 8000ea2:	28c8      	cmp	r0, #200	; 0xc8
 8000ea4:	f000 809f 	beq.w	8000fe6 <__gnu_unwind_execute+0x2b6>
 8000ea8:	28c9      	cmp	r0, #201	; 0xc9
 8000eaa:	d194      	bne.n	8000dd6 <__gnu_unwind_execute+0xa6>
 8000eac:	4638      	mov	r0, r7
 8000eae:	f7ff ff13 	bl	8000cd8 <next_unwind_byte>
 8000eb2:	0302      	lsls	r2, r0, #12
 8000eb4:	f000 000f 	and.w	r0, r0, #15
 8000eb8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000ebc:	3001      	adds	r0, #1
 8000ebe:	4302      	orrs	r2, r0
 8000ec0:	e782      	b.n	8000dc8 <__gnu_unwind_execute+0x98>
 8000ec2:	ac03      	add	r4, sp, #12
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	220e      	movs	r2, #14
 8000ec8:	4641      	mov	r1, r8
 8000eca:	9400      	str	r4, [sp, #0]
 8000ecc:	4630      	mov	r0, r6
 8000ece:	f7ff fb11 	bl	80004f4 <_Unwind_VRS_Get>
 8000ed2:	9400      	str	r4, [sp, #0]
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	220f      	movs	r2, #15
 8000eda:	4641      	mov	r1, r8
 8000edc:	f7ff fb30 	bl	8000540 <_Unwind_VRS_Set>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e779      	b.n	8000dd8 <__gnu_unwind_execute+0xa8>
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	f7ff fef7 	bl	8000cd8 <next_unwind_byte>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	f43f af73 	beq.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000ef0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000ef4:	f47f af6f 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4630      	mov	r0, r6
 8000efe:	f7ff fcef 	bl	80008e0 <_Unwind_VRS_Pop>
 8000f02:	2800      	cmp	r0, #0
 8000f04:	f47f af67 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000f08:	e719      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f10d 090c 	add.w	r9, sp, #12
 8000f10:	220d      	movs	r2, #13
 8000f12:	4619      	mov	r1, r3
 8000f14:	f8cd 9000 	str.w	r9, [sp]
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f7ff faeb 	bl	80004f4 <_Unwind_VRS_Get>
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff feda 	bl	8000cd8 <next_unwind_byte>
 8000f24:	0602      	lsls	r2, r0, #24
 8000f26:	f04f 0402 	mov.w	r4, #2
 8000f2a:	d50c      	bpl.n	8000f46 <__gnu_unwind_execute+0x216>
 8000f2c:	9b03      	ldr	r3, [sp, #12]
 8000f2e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f32:	40a0      	lsls	r0, r4
 8000f34:	4403      	add	r3, r0
 8000f36:	4638      	mov	r0, r7
 8000f38:	9303      	str	r3, [sp, #12]
 8000f3a:	f7ff fecd 	bl	8000cd8 <next_unwind_byte>
 8000f3e:	0603      	lsls	r3, r0, #24
 8000f40:	f104 0407 	add.w	r4, r4, #7
 8000f44:	d4f2      	bmi.n	8000f2c <__gnu_unwind_execute+0x1fc>
 8000f46:	2300      	movs	r3, #0
 8000f48:	9903      	ldr	r1, [sp, #12]
 8000f4a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f4e:	40a2      	lsls	r2, r4
 8000f50:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f54:	188c      	adds	r4, r1, r2
 8000f56:	f8cd 9000 	str.w	r9, [sp]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	220d      	movs	r2, #13
 8000f5e:	4630      	mov	r0, r6
 8000f60:	9403      	str	r4, [sp, #12]
 8000f62:	f7ff faed 	bl	8000540 <_Unwind_VRS_Set>
 8000f66:	e6ea      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000f68:	4638      	mov	r0, r7
 8000f6a:	f7ff feb5 	bl	8000cd8 <next_unwind_byte>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	0301      	lsls	r1, r0, #12
 8000f72:	f000 000f 	and.w	r0, r0, #15
 8000f76:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f7a:	18c2      	adds	r2, r0, r3
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	4630      	mov	r0, r6
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fcad 	bl	80008e0 <_Unwind_VRS_Pop>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	f47f af25 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000f8c:	e6d7      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f7ff fea2 	bl	8000cd8 <next_unwind_byte>
 8000f94:	0301      	lsls	r1, r0, #12
 8000f96:	f000 000f 	and.w	r0, r0, #15
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fa0:	1c42      	adds	r2, r0, #1
 8000fa2:	e7eb      	b.n	8000f7c <__gnu_unwind_execute+0x24c>
 8000fa4:	4638      	mov	r0, r7
 8000fa6:	f7ff fe97 	bl	8000cd8 <next_unwind_byte>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	f43f af13 	beq.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000fb0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fb4:	f47f af0f 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f7ff fc8f 	bl	80008e0 <_Unwind_VRS_Pop>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f47f af07 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000fc8:	e6b9      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f000 020f 	and.w	r2, r0, #15
 8000fd0:	3201      	adds	r2, #1
 8000fd2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f7ff fc81 	bl	80008e0 <_Unwind_VRS_Pop>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	f47f aef9 	bne.w	8000dd6 <__gnu_unwind_execute+0xa6>
 8000fe4:	e6ab      	b.n	8000d3e <__gnu_unwind_execute+0xe>
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	f7ff fe76 	bl	8000cd8 <next_unwind_byte>
 8000fec:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000ff0:	f000 030f 	and.w	r3, r0, #15
 8000ff4:	3210      	adds	r2, #16
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000ffc:	e6e4      	b.n	8000dc8 <__gnu_unwind_execute+0x98>
 8000ffe:	bf00      	nop

08001000 <__gnu_unwind_frame>:
 8001000:	b530      	push	{r4, r5, lr}
 8001002:	2403      	movs	r4, #3
 8001004:	460d      	mov	r5, r1
 8001006:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001008:	b085      	sub	sp, #20
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001010:	79dc      	ldrb	r4, [r3, #7]
 8001012:	0212      	lsls	r2, r2, #8
 8001014:	3308      	adds	r3, #8
 8001016:	a901      	add	r1, sp, #4
 8001018:	4628      	mov	r0, r5
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	f7ff fe85 	bl	8000d30 <__gnu_unwind_execute>
 8001026:	b005      	add	sp, #20
 8001028:	bd30      	pop	{r4, r5, pc}
 800102a:	bf00      	nop

0800102c <_Unwind_GetRegionStart>:
 800102c:	b508      	push	{r3, lr}
 800102e:	f7ff fe7d 	bl	8000d2c <unwind_UCB_from_context>
 8001032:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001034:	bd08      	pop	{r3, pc}
 8001036:	bf00      	nop

08001038 <_Unwind_GetLanguageSpecificData>:
 8001038:	b508      	push	{r3, lr}
 800103a:	f7ff fe77 	bl	8000d2c <unwind_UCB_from_context>
 800103e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001040:	79c3      	ldrb	r3, [r0, #7]
 8001042:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001046:	3008      	adds	r0, #8
 8001048:	bd08      	pop	{r3, pc}
 800104a:	bf00      	nop

0800104c <_Unwind_GetTextRelBase>:
 800104c:	b508      	push	{r3, lr}
 800104e:	f002 f93c 	bl	80032ca <abort>
 8001052:	bf00      	nop

08001054 <_Unwind_GetDataRelBase>:
 8001054:	b508      	push	{r3, lr}
 8001056:	f7ff fff9 	bl	800104c <_Unwind_GetTextRelBase>
 800105a:	bf00      	nop

0800105c <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_ADC1_Init+0x64>)
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x68>)
{
 8001060:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001062:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001068:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001070:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 8001074:	2302      	movs	r3, #2
{
 8001076:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001078:	9401      	str	r4, [sp, #4]
 800107a:	9402      	str	r4, [sp, #8]
 800107c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001084:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001086:	f000 fb5f 	bl	8001748 <HAL_ADC_Init>
 800108a:	b108      	cbz	r0, 8001090 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 800108c:	f000 f9a8 	bl	80013e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001090:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	a901      	add	r1, sp, #4
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <MX_ADC1_Init+0x64>)
  sConfig.Channel = ADC_CHANNEL_0;
 8001096:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800109a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	f000 faae 	bl	80015fc <HAL_ADC_ConfigChannel>
 80010a0:	b108      	cbz	r0, 80010a6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80010a2:	f000 f99d 	bl	80013e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_ADC1_Init+0x64>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010b0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	f000 faa3 	bl	80015fc <HAL_ADC_ConfigChannel>
 80010b6:	b108      	cbz	r0, 80010bc <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80010b8:	f000 f992 	bl	80013e0 <Error_Handler>
  }

}
 80010bc:	b005      	add	sp, #20
 80010be:	bd30      	pop	{r4, r5, pc}
 80010c0:	20001030 	.word	0x20001030
 80010c4:	40012400 	.word	0x40012400

080010c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b530      	push	{r4, r5, lr}
 80010ca:	4605      	mov	r5, r0
 80010cc:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	2210      	movs	r2, #16
 80010d0:	2100      	movs	r1, #0
 80010d2:	a802      	add	r0, sp, #8
 80010d4:	f002 f8f1 	bl	80032ba <memset>
  if(adcHandle->Instance==ADC1)
 80010d8:	682a      	ldr	r2, [r5, #0]
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_ADC_MspInit+0x84>)
 80010dc:	429a      	cmp	r2, r3
 80010de:	d133      	bne.n	8001148 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80010e4:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ec:	619a      	str	r2, [r3, #24]
 80010ee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010fc:	4c15      	ldr	r4, [pc, #84]	; (8001154 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	f042 0204 	orr.w	r2, r2, #4
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800110e:	2303      	movs	r3, #3
 8001110:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f000 fcb0 	bl	8001a78 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001120:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001128:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 800112a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112c:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001130:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001132:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001136:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001138:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113a:	f000 fbd9 	bl	80018f0 <HAL_DMA_Init>
 800113e:	b108      	cbz	r0, 8001144 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001140:	f000 f94e 	bl	80013e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001144:	622c      	str	r4, [r5, #32]
 8001146:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001148:	b007      	add	sp, #28
 800114a:	bd30      	pop	{r4, r5, pc}
 800114c:	40012400 	.word	0x40012400
 8001150:	40010800 	.word	0x40010800
 8001154:	20001060 	.word	0x20001060
 8001158:	40020008 	.word	0x40020008

0800115c <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_DMA_Init+0x2c>)
{
 800115e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001160:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001162:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001164:	f042 0201 	orr.w	r2, r2, #1
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001174:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001176:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001178:	f000 fb78 	bl	800186c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f000 fba9 	bl	80018d4 <HAL_NVIC_EnableIRQ>

}
 8001182:	b003      	add	sp, #12
 8001184:	f85d fb04 	ldr.w	pc, [sp], #4
 8001188:	40021000 	.word	0x40021000

0800118c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <vApplicationGetIdleTaskMemory+0x28>)
 800119c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000094 	.word	0x20000094
 80011b8:	200000e8 	.word	0x200000e8

080011bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_FREERTOS_Init+0x30>)
 80011c4:	1d3c      	adds	r4, r7, #4
 80011c6:	461d      	mov	r5, r3
 80011c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fa14 	bl	8002606 <osThreadCreate>
 80011de:	4602      	mov	r2, r0
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <MX_FREERTOS_Init+0x34>)
 80011e2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bdb0      	pop	{r4, r5, r7, pc}
 80011ec:	08003384 	.word	0x08003384
 80011f0:	20000090 	.word	0x20000090

080011f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f001 fa2a 	bl	8002656 <osDelay>
 8001202:	e7fb      	b.n	80011fc <StartDefaultTask+0x8>

08001204 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	2210      	movs	r2, #16
{
 8001206:	b570      	push	{r4, r5, r6, lr}
 8001208:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	eb0d 0002 	add.w	r0, sp, r2
 800120e:	2100      	movs	r1, #0
 8001210:	f002 f853 	bl	80032ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	4d2a      	ldr	r5, [pc, #168]	; (80012c0 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121a:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	f042 0210 	orr.w	r2, r2, #16
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001224:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	f002 0210 	and.w	r2, r2, #16
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	f042 0220 	orr.w	r2, r2, #32
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	f002 0220 	and.w	r2, r2, #32
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	f042 0204 	orr.w	r2, r2, #4
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	f002 0204 	and.w	r2, r2, #4
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	f042 0208 	orr.w	r2, r2, #8
 800125c:	619a      	str	r2, [r3, #24]
 800125e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800126a:	f000 fce7 	bl	8001c3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001276:	a904      	add	r1, sp, #16
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127e:	f000 fbfb 	bl	8001a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001282:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	a904      	add	r1, sp, #16
 8001286:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001288:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f000 fbf3 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001292:	2320      	movs	r3, #32
 8001294:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001298:	a904      	add	r1, sp, #16
 800129a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f000 fbe9 	bl	8001a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012a6:	4622      	mov	r2, r4
 80012a8:	2105      	movs	r1, #5
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f000 fade 	bl	800186c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b0:	2028      	movs	r0, #40	; 0x28
 80012b2:	f000 fb0f 	bl	80018d4 <HAL_NVIC_EnableIRQ>

}
 80012b6:	b008      	add	sp, #32
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	10110000 	.word	0x10110000
 80012c8:	40011000 	.word	0x40011000

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f000 f970 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f80d 	bl	80012f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f7ff ff94 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 80012dc:	f7ff ff3e 	bl	800115c <MX_DMA_Init>
  MX_ADC1_Init();
 80012e0:	f7ff febc 	bl	800105c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80012e4:	f000 f90e 	bl	8001504 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80012e8:	f7ff ff68 	bl	80011bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80012ec:	f001 f986 	bl	80025fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <main+0x24>

080012f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b094      	sub	sp, #80	; 0x50
 80012f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fc:	2228      	movs	r2, #40	; 0x28
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f001 ffda 	bl	80032ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132a:	2310      	movs	r3, #16
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001332:	2300      	movs	r3, #0
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001336:	2300      	movs	r3, #0
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fc8e 	bl	8001c60 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001354:	f000 f844 	bl	80013e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001368:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fe4d 	bl	8002014 <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800138a:	f000 f829 	bl	80013e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800138e:	2302      	movs	r3, #2
 8001390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f000 ff17 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013ae:	f000 f817 	bl	80013e0 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f000 f903 	bl	80015d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_MspInit+0x48>)
{
 80013ee:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	619a      	str	r2, [r3, #24]
 80013fa:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013fc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001400:	f002 0201 	and.w	r2, r2, #1
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800140e:	61da      	str	r2, [r3, #28]
 8001410:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001412:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141c:	f000 fa26 	bl	800186c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_MspInit+0x4c>)
 8001422:	6853      	ldr	r3, [r2, #4]
 8001424:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	b003      	add	sp, #12
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000

0800143c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800143e:	4601      	mov	r1, r0
{
 8001440:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001442:	2200      	movs	r2, #0
 8001444:	2019      	movs	r0, #25
 8001446:	f000 fa11 	bl	800186c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800144a:	2019      	movs	r0, #25
 800144c:	f000 fa42 	bl	80018d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001452:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001454:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001456:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001460:	4c11      	ldr	r4, [pc, #68]	; (80014a8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800146a:	f000 fe91 	bl	8002190 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800146e:	f000 fe7f 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_InitTick+0x70>)
 8001474:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001476:	f240 33e7 	movw	r3, #999	; 0x3e7
 800147a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_InitTick+0x74>)
 800147e:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001482:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001484:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001486:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001488:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800148a:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800148e:	f001 f81f 	bl	80024d0 <HAL_TIM_Base_Init>
 8001492:	b920      	cbnz	r0, 800149e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001494:	4620      	mov	r0, r4
 8001496:	f000 ff13 	bl	80022c0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800149a:	b008      	add	sp, #32
 800149c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800149e:	2001      	movs	r0, #1
 80014a0:	e7fb      	b.n	800149a <HAL_InitTick+0x5e>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	200010a4 	.word	0x200010a4
 80014ac:	40012c00 	.word	0x40012c00
 80014b0:	000f4240 	.word	0x000f4240

080014b4 <NMI_Handler>:
 80014b4:	4770      	bx	lr

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler>

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	4770      	bx	lr

080014c0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c0:	4801      	ldr	r0, [pc, #4]	; (80014c8 <DMA1_Channel1_IRQHandler+0x8>)
 80014c2:	f000 ba45 	b.w	8001950 <HAL_DMA_IRQHandler>
 80014c6:	bf00      	nop
 80014c8:	20001060 	.word	0x20001060

080014cc <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014cc:	4801      	ldr	r0, [pc, #4]	; (80014d4 <TIM1_UP_IRQHandler+0x8>)
 80014ce:	f000 bf25 	b.w	800231c <HAL_TIM_IRQHandler>
 80014d2:	bf00      	nop
 80014d4:	200010a4 	.word	0x200010a4

080014d8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014dc:	f000 bbb4 	b.w	8001c48 <HAL_GPIO_EXTI_IRQHandler>

080014e0 <_getpid>:
 80014e0:	2001      	movs	r0, #1
 80014e2:	4770      	bx	lr

080014e4 <_kill>:
 80014e4:	b508      	push	{r3, lr}
 80014e6:	f001 feb3 	bl	8003250 <__errno>
 80014ea:	2316      	movs	r3, #22
 80014ec:	6003      	str	r3, [r0, #0]
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295
 80014f2:	bd08      	pop	{r3, pc}

080014f4 <_exit>:
 80014f4:	b508      	push	{r3, lr}
 80014f6:	f001 feab 	bl	8003250 <__errno>
 80014fa:	2316      	movs	r3, #22
 80014fc:	6003      	str	r3, [r0, #0]
 80014fe:	e7fe      	b.n	80014fe <_exit+0xa>

08001500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	4770      	bx	lr
	...

08001504 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001504:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8001506:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800150e:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8001510:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001514:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001516:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001518:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800151a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800151c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001522:	f001 f83d 	bl	80025a0 <HAL_UART_Init>
 8001526:	b118      	cbz	r0, 8001530 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800152c:	f7ff bf58 	b.w	80013e0 <Error_Handler>
 8001530:	bd08      	pop	{r3, pc}
 8001532:	bf00      	nop
 8001534:	200010ec 	.word	0x200010ec
 8001538:	40004800 	.word	0x40004800

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	2210      	movs	r2, #16
 8001544:	2100      	movs	r1, #0
 8001546:	a802      	add	r0, sp, #8
 8001548:	f001 feb7 	bl	80032ba <memset>
  if(uartHandle->Instance==USART3)
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0x70>)
 8001550:	429a      	cmp	r2, r3
 8001552:	d128      	bne.n	80015a6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001554:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001558:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 800155c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001560:	61da      	str	r2, [r3, #28]
 8001562:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001566:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800156a:	9200      	str	r2, [sp, #0]
 800156c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	f042 0208 	orr.w	r2, r2, #8
 8001574:	619a      	str	r2, [r3, #24]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f000 fa73 	bl	8001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001596:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001598:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	a902      	add	r1, sp, #8
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f000 fa69 	bl	8001a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015a6:	b006      	add	sp, #24
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	40004800 	.word	0x40004800
 80015b0:	40010c00 	.word	0x40010c00

080015b4 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x20>)
{
 80015b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	f000 f941 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff ff38 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff ff0e 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80015d0:	2000      	movs	r0, #0
 80015d2:	bd08      	pop	{r3, pc}
 80015d4:	40022000 	.word	0x40022000

080015d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_IncTick+0x10>)
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_IncTick+0x14>)
 80015dc:	6811      	ldr	r1, [r2, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	440b      	add	r3, r1
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000112c 	.word	0x2000112c
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015f0:	4b01      	ldr	r3, [pc, #4]	; (80015f8 <HAL_GetTick+0x8>)
 80015f2:	6818      	ldr	r0, [r3, #0]
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	2000112c 	.word	0x2000112c

080015fc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80015fc:	2300      	movs	r3, #0
{ 
 80015fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001600:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001602:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001606:	2b01      	cmp	r3, #1
 8001608:	d074      	beq.n	80016f4 <HAL_ADC_ConfigChannel+0xf8>
 800160a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800160e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001612:	2d06      	cmp	r5, #6
 8001614:	6802      	ldr	r2, [r0, #0]
 8001616:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800161a:	680c      	ldr	r4, [r1, #0]
 800161c:	d825      	bhi.n	800166a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800161e:	442b      	add	r3, r5
 8001620:	251f      	movs	r5, #31
 8001622:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001624:	3b05      	subs	r3, #5
 8001626:	409d      	lsls	r5, r3
 8001628:	ea26 0505 	bic.w	r5, r6, r5
 800162c:	fa04 f303 	lsl.w	r3, r4, r3
 8001630:	432b      	orrs	r3, r5
 8001632:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001634:	2c09      	cmp	r4, #9
 8001636:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800163a:	688d      	ldr	r5, [r1, #8]
 800163c:	d92f      	bls.n	800169e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800163e:	2607      	movs	r6, #7
 8001640:	4423      	add	r3, r4
 8001642:	68d1      	ldr	r1, [r2, #12]
 8001644:	3b1e      	subs	r3, #30
 8001646:	409e      	lsls	r6, r3
 8001648:	ea21 0106 	bic.w	r1, r1, r6
 800164c:	fa05 f303 	lsl.w	r3, r5, r3
 8001650:	430b      	orrs	r3, r1
 8001652:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001654:	f1a4 0310 	sub.w	r3, r4, #16
 8001658:	2b01      	cmp	r3, #1
 800165a:	d92b      	bls.n	80016b4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165e:	2200      	movs	r2, #0
 8001660:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001664:	4618      	mov	r0, r3
 8001666:	b002      	add	sp, #8
 8001668:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800166a:	2d0c      	cmp	r5, #12
 800166c:	d80b      	bhi.n	8001686 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800166e:	442b      	add	r3, r5
 8001670:	251f      	movs	r5, #31
 8001672:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001674:	3b23      	subs	r3, #35	; 0x23
 8001676:	409d      	lsls	r5, r3
 8001678:	ea26 0505 	bic.w	r5, r6, r5
 800167c:	fa04 f303 	lsl.w	r3, r4, r3
 8001680:	432b      	orrs	r3, r5
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	e7d6      	b.n	8001634 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001686:	442b      	add	r3, r5
 8001688:	251f      	movs	r5, #31
 800168a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800168c:	3b41      	subs	r3, #65	; 0x41
 800168e:	409d      	lsls	r5, r3
 8001690:	ea26 0505 	bic.w	r5, r6, r5
 8001694:	fa04 f303 	lsl.w	r3, r4, r3
 8001698:	432b      	orrs	r3, r5
 800169a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800169c:	e7ca      	b.n	8001634 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800169e:	2607      	movs	r6, #7
 80016a0:	6911      	ldr	r1, [r2, #16]
 80016a2:	4423      	add	r3, r4
 80016a4:	409e      	lsls	r6, r3
 80016a6:	ea21 0106 	bic.w	r1, r1, r6
 80016aa:	fa05 f303 	lsl.w	r3, r5, r3
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6113      	str	r3, [r2, #16]
 80016b2:	e7cf      	b.n	8001654 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_ADC_ConfigChannel+0xfc>)
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d116      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	d4cd      	bmi.n	800165c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016c0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016c2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016ca:	d1c7      	bne.n	800165c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_ADC_ConfigChannel+0x100>)
 80016ce:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_ADC_ConfigChannel+0x104>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80016d6:	230a      	movs	r3, #10
 80016d8:	4353      	muls	r3, r2
            wait_loop_index--;
 80016da:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0bc      	beq.n	800165c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	e7f8      	b.n	80016da <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e7b4      	b.n	800165e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80016f4:	2302      	movs	r3, #2
 80016f6:	e7b5      	b.n	8001664 <HAL_ADC_ConfigChannel+0x68>
 80016f8:	40012400 	.word	0x40012400
 80016fc:	20000000 	.word	0x20000000
 8001700:	000f4240 	.word	0x000f4240

08001704 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001704:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001706:	6803      	ldr	r3, [r0, #0]
{
 8001708:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	07d2      	lsls	r2, r2, #31
 800170e:	d401      	bmi.n	8001714 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001710:	2000      	movs	r0, #0
 8001712:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800171c:	f7ff ff68 	bl	80015f0 <HAL_GetTick>
 8001720:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	07db      	lsls	r3, r3, #31
 8001728:	d5f2      	bpl.n	8001710 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800172a:	f7ff ff61 	bl	80015f0 <HAL_GetTick>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	2802      	cmp	r0, #2
 8001732:	d9f6      	bls.n	8001722 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001736:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001746:	bd38      	pop	{r3, r4, r5, pc}

08001748 <HAL_ADC_Init>:
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800174a:	4604      	mov	r4, r0
 800174c:	2800      	cmp	r0, #0
 800174e:	d071      	beq.n	8001834 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001750:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001752:	b923      	cbnz	r3, 800175e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001756:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800175a:	f7ff fcb5 	bl	80010c8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ffd0 	bl	8001704 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001766:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800176c:	d164      	bne.n	8001838 <HAL_ADC_Init+0xf0>
 800176e:	2800      	cmp	r0, #0
 8001770:	d162      	bne.n	8001838 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001772:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001778:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	f023 0302 	bic.w	r3, r3, #2
 800177e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001782:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001784:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001788:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800178a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800178e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001792:	d038      	beq.n	8001806 <HAL_ADC_Init+0xbe>
 8001794:	2901      	cmp	r1, #1
 8001796:	bf14      	ite	ne
 8001798:	4606      	movne	r6, r0
 800179a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800179e:	7d25      	ldrb	r5, [r4, #20]
 80017a0:	2d01      	cmp	r5, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d130      	bne.n	800180a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a8:	69a3      	ldr	r3, [r4, #24]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80017b0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80017b4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80017ba:	685d      	ldr	r5, [r3, #4]
 80017bc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80017c0:	ea45 0506 	orr.w	r5, r5, r6
 80017c4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017c6:	689e      	ldr	r6, [r3, #8]
 80017c8:	4d1d      	ldr	r5, [pc, #116]	; (8001840 <HAL_ADC_Init+0xf8>)
 80017ca:	ea05 0506 	and.w	r5, r5, r6
 80017ce:	ea45 0502 	orr.w	r5, r5, r2
 80017d2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d4:	d001      	beq.n	80017da <HAL_ADC_Init+0x92>
 80017d6:	2901      	cmp	r1, #1
 80017d8:	d120      	bne.n	800181c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017da:	6921      	ldr	r1, [r4, #16]
 80017dc:	3901      	subs	r1, #1
 80017de:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80017e0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80017e2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80017e6:	4329      	orrs	r1, r5
 80017e8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_ADC_Init+0xfc>)
 80017ee:	400b      	ands	r3, r1
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d115      	bne.n	8001820 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	2300      	movs	r3, #0
 80017f6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80017f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	62a3      	str	r3, [r4, #40]	; 0x28
 8001804:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001806:	460e      	mov	r6, r1
 8001808:	e7c9      	b.n	800179e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800181a:	e7cb      	b.n	80017b4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800181c:	2100      	movs	r1, #0
 800181e:	e7df      	b.n	80017e0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001822:	f023 0312 	bic.w	r3, r3, #18
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
}
 8001836:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	62a3      	str	r3, [r4, #40]	; 0x28
 800183e:	e7f9      	b.n	8001834 <HAL_ADC_Init+0xec>
 8001840:	ffe1f7fd 	.word	0xffe1f7fd
 8001844:	ff1f0efe 	.word	0xff1f0efe

08001848 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001856:	041b      	lsls	r3, r3, #16
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001862:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001864:	60d3      	str	r3, [r2, #12]
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b530      	push	{r4, r5, lr}
 8001870:	68dc      	ldr	r4, [r3, #12]
 8001872:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001876:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	2b04      	cmp	r3, #4
 800187e:	bf28      	it	cs
 8001880:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001888:	bf98      	it	ls
 800188a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	fa05 f303 	lsl.w	r3, r5, r3
 8001890:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001894:	bf88      	it	hi
 8001896:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4019      	ands	r1, r3
 800189a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	fa05 f404 	lsl.w	r4, r5, r4
 80018a0:	3c01      	subs	r4, #1
 80018a2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80018a4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a6:	ea42 0201 	orr.w	r2, r2, r1
 80018aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	bfa9      	itett	ge
 80018b0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	4b06      	ldrlt	r3, [pc, #24]	; (80018d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	b2d2      	uxtbge	r2, r2
 80018b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	bfbb      	ittet	lt
 80018be:	f000 000f 	andlt.w	r0, r0, #15
 80018c2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	541a      	strblt	r2, [r3, r0]
 80018ca:	bd30      	pop	{r4, r5, pc}
 80018cc:	e000ed00 	.word	0xe000ed00
 80018d0:	e000ed14 	.word	0xe000ed14

080018d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018d4:	2800      	cmp	r0, #0
 80018d6:	db08      	blt.n	80018ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d8:	2301      	movs	r3, #1
 80018da:	0942      	lsrs	r2, r0, #5
 80018dc:	f000 001f 	and.w	r0, r0, #31
 80018e0:	fa03 f000 	lsl.w	r0, r3, r0
 80018e4:	4b01      	ldr	r3, [pc, #4]	; (80018ec <HAL_NVIC_EnableIRQ+0x18>)
 80018e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f2:	b330      	cbz	r0, 8001942 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018f4:	2214      	movs	r2, #20
 80018f6:	6801      	ldr	r1, [r0, #0]
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018fa:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001908:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800190a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 800190c:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800190e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001912:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001916:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	4323      	orrs	r3, r4
 800191c:	6904      	ldr	r4, [r0, #16]
 800191e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	6944      	ldr	r4, [r0, #20]
 8001922:	4323      	orrs	r3, r4
 8001924:	6984      	ldr	r4, [r0, #24]
 8001926:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001928:	69c4      	ldr	r4, [r0, #28]
 800192a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800192c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800192e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001930:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001934:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001938:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800193a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800193e:	4618      	mov	r0, r3
 8001940:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
}
 8001944:	bd10      	pop	{r4, pc}
 8001946:	bf00      	nop
 8001948:	bffdfff8 	.word	0xbffdfff8
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001950:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001952:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001956:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001958:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800195a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800195c:	4095      	lsls	r5, r2
 800195e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001960:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001962:	d032      	beq.n	80019ca <HAL_DMA_IRQHandler+0x7a>
 8001964:	074d      	lsls	r5, r1, #29
 8001966:	d530      	bpl.n	80019ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800196c:	bf5e      	ittt	pl
 800196e:	681a      	ldrpl	r2, [r3, #0]
 8001970:	f022 0204 	bicpl.w	r2, r2, #4
 8001974:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001976:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_DMA_IRQHandler+0x120>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d019      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x60>
 800197c:	3214      	adds	r2, #20
 800197e:	4293      	cmp	r3, r2
 8001980:	d018      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x64>
 8001982:	3214      	adds	r2, #20
 8001984:	4293      	cmp	r3, r2
 8001986:	d017      	beq.n	80019b8 <HAL_DMA_IRQHandler+0x68>
 8001988:	3214      	adds	r2, #20
 800198a:	4293      	cmp	r3, r2
 800198c:	d017      	beq.n	80019be <HAL_DMA_IRQHandler+0x6e>
 800198e:	3214      	adds	r2, #20
 8001990:	4293      	cmp	r3, r2
 8001992:	d017      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x74>
 8001994:	3214      	adds	r2, #20
 8001996:	4293      	cmp	r3, r2
 8001998:	bf0c      	ite	eq
 800199a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800199e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80019a2:	4a34      	ldr	r2, [pc, #208]	; (8001a74 <HAL_DMA_IRQHandler+0x124>)
 80019a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05e      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80019ac:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80019ae:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b0:	2304      	movs	r3, #4
 80019b2:	e7f6      	b.n	80019a2 <HAL_DMA_IRQHandler+0x52>
 80019b4:	2340      	movs	r3, #64	; 0x40
 80019b6:	e7f4      	b.n	80019a2 <HAL_DMA_IRQHandler+0x52>
 80019b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019bc:	e7f1      	b.n	80019a2 <HAL_DMA_IRQHandler+0x52>
 80019be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c2:	e7ee      	b.n	80019a2 <HAL_DMA_IRQHandler+0x52>
 80019c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019c8:	e7eb      	b.n	80019a2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019ca:	2502      	movs	r5, #2
 80019cc:	4095      	lsls	r5, r2
 80019ce:	4225      	tst	r5, r4
 80019d0:	d035      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xee>
 80019d2:	078d      	lsls	r5, r1, #30
 80019d4:	d533      	bpl.n	8001a3e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	0694      	lsls	r4, r2, #26
 80019da:	d406      	bmi.n	80019ea <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f022 020a 	bic.w	r2, r2, #10
 80019e2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80019e4:	2201      	movs	r2, #1
 80019e6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_DMA_IRQHandler+0x120>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d019      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xd4>
 80019f0:	3214      	adds	r2, #20
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d018      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
 80019f6:	3214      	adds	r2, #20
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d017      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xdc>
 80019fc:	3214      	adds	r2, #20
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d017      	beq.n	8001a32 <HAL_DMA_IRQHandler+0xe2>
 8001a02:	3214      	adds	r2, #20
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d017      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xe8>
 8001a08:	3214      	adds	r2, #20
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	bf0c      	ite	eq
 8001a0e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001a12:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_DMA_IRQHandler+0x124>)
 8001a18:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001a20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a22:	e7c1      	b.n	80019a8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a24:	2302      	movs	r3, #2
 8001a26:	e7f6      	b.n	8001a16 <HAL_DMA_IRQHandler+0xc6>
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e7f4      	b.n	8001a16 <HAL_DMA_IRQHandler+0xc6>
 8001a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a30:	e7f1      	b.n	8001a16 <HAL_DMA_IRQHandler+0xc6>
 8001a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a36:	e7ee      	b.n	8001a16 <HAL_DMA_IRQHandler+0xc6>
 8001a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3c:	e7eb      	b.n	8001a16 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a3e:	2508      	movs	r5, #8
 8001a40:	4095      	lsls	r5, r2
 8001a42:	4225      	tst	r5, r4
 8001a44:	d011      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x11a>
 8001a46:	0709      	lsls	r1, r1, #28
 8001a48:	d50f      	bpl.n	8001a6a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	f021 010e 	bic.w	r1, r1, #14
 8001a50:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a52:	2301      	movs	r3, #1
 8001a54:	fa03 f202 	lsl.w	r2, r3, r2
 8001a58:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a5a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001a60:	2300      	movs	r3, #0
 8001a62:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001a68:	e79e      	b.n	80019a8 <HAL_DMA_IRQHandler+0x58>
}
 8001a6a:	bc70      	pop	{r4, r5, r6}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40020008 	.word	0x40020008
 8001a74:	40020000 	.word	0x40020000

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001a7e:	4626      	mov	r6, r4
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a82:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001c2c <HAL_GPIO_Init+0x1b4>
 8001a86:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001c30 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	680a      	ldr	r2, [r1, #0]
 8001a8c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001a92:	b003      	add	sp, #12
 8001a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a98:	f04f 0801 	mov.w	r8, #1
 8001a9c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001aa4:	4590      	cmp	r8, r2
 8001aa6:	d17f      	bne.n	8001ba8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001aa8:	684d      	ldr	r5, [r1, #4]
 8001aaa:	2d12      	cmp	r5, #18
 8001aac:	f000 80aa 	beq.w	8001c04 <HAL_GPIO_Init+0x18c>
 8001ab0:	f200 8083 	bhi.w	8001bba <HAL_GPIO_Init+0x142>
 8001ab4:	2d02      	cmp	r5, #2
 8001ab6:	f000 80a2 	beq.w	8001bfe <HAL_GPIO_Init+0x186>
 8001aba:	d877      	bhi.n	8001bac <HAL_GPIO_Init+0x134>
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	f000 8089 	beq.w	8001bd4 <HAL_GPIO_Init+0x15c>
 8001ac2:	2d01      	cmp	r5, #1
 8001ac4:	f000 8099 	beq.w	8001bfa <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001acc:	2aff      	cmp	r2, #255	; 0xff
 8001ace:	bf93      	iteet	ls
 8001ad0:	4682      	movls	sl, r0
 8001ad2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001ad6:	3d08      	subhi	r5, #8
 8001ad8:	f8d0 b000 	ldrls.w	fp, [r0]
 8001adc:	bf92      	itee	ls
 8001ade:	00b5      	lslls	r5, r6, #2
 8001ae0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001ae4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae6:	fa09 f805 	lsl.w	r8, r9, r5
 8001aea:	ea2b 0808 	bic.w	r8, fp, r8
 8001aee:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af2:	bf88      	it	hi
 8001af4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	ea48 0505 	orr.w	r5, r8, r5
 8001afc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b00:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001b04:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001b08:	d04e      	beq.n	8001ba8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	4d45      	ldr	r5, [pc, #276]	; (8001c20 <HAL_GPIO_Init+0x1a8>)
 8001b0c:	4f44      	ldr	r7, [pc, #272]	; (8001c20 <HAL_GPIO_Init+0x1a8>)
 8001b0e:	69ad      	ldr	r5, [r5, #24]
 8001b10:	f026 0803 	bic.w	r8, r6, #3
 8001b14:	f045 0501 	orr.w	r5, r5, #1
 8001b18:	61bd      	str	r5, [r7, #24]
 8001b1a:	69bd      	ldr	r5, [r7, #24]
 8001b1c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001b20:	f005 0501 	and.w	r5, r5, #1
 8001b24:	9501      	str	r5, [sp, #4]
 8001b26:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001b34:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b38:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b3c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	4d38      	ldr	r5, [pc, #224]	; (8001c24 <HAL_GPIO_Init+0x1ac>)
 8001b42:	42a8      	cmp	r0, r5
 8001b44:	d063      	beq.n	8001c0e <HAL_GPIO_Init+0x196>
 8001b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b4a:	42a8      	cmp	r0, r5
 8001b4c:	d061      	beq.n	8001c12 <HAL_GPIO_Init+0x19a>
 8001b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b52:	42a8      	cmp	r0, r5
 8001b54:	d05f      	beq.n	8001c16 <HAL_GPIO_Init+0x19e>
 8001b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5a:	42a8      	cmp	r0, r5
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2503      	moveq	r5, #3
 8001b60:	2504      	movne	r5, #4
 8001b62:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b66:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b6e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b70:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b74:	bf14      	ite	ne
 8001b76:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b78:	4395      	biceq	r5, r2
 8001b7a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b7c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b82:	bf14      	ite	ne
 8001b84:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b86:	4395      	biceq	r5, r2
 8001b88:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b90:	bf14      	ite	ne
 8001b92:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b94:	4395      	biceq	r5, r2
 8001b96:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b98:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	bf14      	ite	ne
 8001ba0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba2:	ea25 0202 	biceq.w	r2, r5, r2
 8001ba6:	60da      	str	r2, [r3, #12]
	position++;
 8001ba8:	3601      	adds	r6, #1
 8001baa:	e76e      	b.n	8001a8a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001bac:	2d03      	cmp	r5, #3
 8001bae:	d022      	beq.n	8001bf6 <HAL_GPIO_Init+0x17e>
 8001bb0:	2d11      	cmp	r5, #17
 8001bb2:	d189      	bne.n	8001ac8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb4:	68cc      	ldr	r4, [r1, #12]
 8001bb6:	3404      	adds	r4, #4
          break;
 8001bb8:	e786      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001bba:	4f1b      	ldr	r7, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x1b0>)
 8001bbc:	42bd      	cmp	r5, r7
 8001bbe:	d009      	beq.n	8001bd4 <HAL_GPIO_Init+0x15c>
 8001bc0:	d812      	bhi.n	8001be8 <HAL_GPIO_Init+0x170>
 8001bc2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001c34 <HAL_GPIO_Init+0x1bc>
 8001bc6:	454d      	cmp	r5, r9
 8001bc8:	d004      	beq.n	8001bd4 <HAL_GPIO_Init+0x15c>
 8001bca:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001bce:	454d      	cmp	r5, r9
 8001bd0:	f47f af7a 	bne.w	8001ac8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd4:	688c      	ldr	r4, [r1, #8]
 8001bd6:	b1c4      	cbz	r4, 8001c0a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001bda:	bf0c      	ite	eq
 8001bdc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001be0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2408      	movs	r4, #8
 8001be6:	e76f      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001be8:	4575      	cmp	r5, lr
 8001bea:	d0f3      	beq.n	8001bd4 <HAL_GPIO_Init+0x15c>
 8001bec:	4565      	cmp	r5, ip
 8001bee:	d0f1      	beq.n	8001bd4 <HAL_GPIO_Init+0x15c>
 8001bf0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001c38 <HAL_GPIO_Init+0x1c0>
 8001bf4:	e7eb      	b.n	8001bce <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	e766      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bfa:	68cc      	ldr	r4, [r1, #12]
          break;
 8001bfc:	e764      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bfe:	68cc      	ldr	r4, [r1, #12]
 8001c00:	3408      	adds	r4, #8
          break;
 8001c02:	e761      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c04:	68cc      	ldr	r4, [r1, #12]
 8001c06:	340c      	adds	r4, #12
          break;
 8001c08:	e75e      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c0a:	2404      	movs	r4, #4
 8001c0c:	e75c      	b.n	8001ac8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0e:	2500      	movs	r5, #0
 8001c10:	e7a7      	b.n	8001b62 <HAL_GPIO_Init+0xea>
 8001c12:	2501      	movs	r5, #1
 8001c14:	e7a5      	b.n	8001b62 <HAL_GPIO_Init+0xea>
 8001c16:	2502      	movs	r5, #2
 8001c18:	e7a3      	b.n	8001b62 <HAL_GPIO_Init+0xea>
 8001c1a:	bf00      	nop
 8001c1c:	40010400 	.word	0x40010400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	10210000 	.word	0x10210000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10320000 	.word	0x10320000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	10220000 	.word	0x10220000

08001c3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3c:	b10a      	cbz	r2, 8001c42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c3e:	6101      	str	r1, [r0, #16]
 8001c40:	4770      	bx	lr
 8001c42:	0409      	lsls	r1, r1, #16
 8001c44:	e7fb      	b.n	8001c3e <HAL_GPIO_WritePin+0x2>

08001c46 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c46:	4770      	bx	lr

08001c48 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001c48:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001c4c:	6959      	ldr	r1, [r3, #20]
 8001c4e:	4201      	tst	r1, r0
 8001c50:	d002      	beq.n	8001c58 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c52:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	f7ff fff7 	bl	8001c46 <HAL_GPIO_EXTI_Callback>
 8001c58:	bd08      	pop	{r3, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	4605      	mov	r5, r0
 8001c66:	b908      	cbnz	r0, 8001c6c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
 8001c6a:	e03c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6c:	6803      	ldr	r3, [r0, #0]
 8001c6e:	07db      	lsls	r3, r3, #31
 8001c70:	d410      	bmi.n	8001c94 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	682b      	ldr	r3, [r5, #0]
 8001c74:	079f      	lsls	r7, r3, #30
 8001c76:	d45d      	bmi.n	8001d34 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	0719      	lsls	r1, r3, #28
 8001c7c:	f100 8094 	bmi.w	8001da8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	075a      	lsls	r2, r3, #29
 8001c84:	f100 80be 	bmi.w	8001e04 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c88:	69e8      	ldr	r0, [r5, #28]
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	f040 812c 	bne.w	8001ee8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001c90:	2000      	movs	r0, #0
 8001c92:	e028      	b.n	8001ce6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c94:	4c8f      	ldr	r4, [pc, #572]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d007      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_OscConfig+0x5e>
 8001caa:	6863      	ldr	r3, [r4, #4]
 8001cac:	03de      	lsls	r6, r3, #15
 8001cae:	d506      	bpl.n	8001cbe <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	039c      	lsls	r4, r3, #14
 8001cb4:	d5dd      	bpl.n	8001c72 <HAL_RCC_OscConfig+0x12>
 8001cb6:	686b      	ldr	r3, [r5, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1da      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
 8001cbc:	e7d4      	b.n	8001c68 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	686b      	ldr	r3, [r5, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d112      	bne.n	8001cec <HAL_RCC_OscConfig+0x8c>
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc8f 	bl	80015f0 <HAL_GetTick>
 8001cd2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	0398      	lsls	r0, r3, #14
 8001cd8:	d4cb      	bmi.n	8001c72 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cda:	f7ff fc89 	bl	80015f0 <HAL_GetTick>
 8001cde:	1b80      	subs	r0, r0, r6
 8001ce0:	2864      	cmp	r0, #100	; 0x64
 8001ce2:	d9f7      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001ce4:	2003      	movs	r0, #3
}
 8001ce6:	b002      	add	sp, #8
 8001ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cec:	b99b      	cbnz	r3, 8001d16 <HAL_RCC_OscConfig+0xb6>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fc77 	bl	80015f0 <HAL_GetTick>
 8001d02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	0399      	lsls	r1, r3, #14
 8001d08:	d5b3      	bpl.n	8001c72 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fc71 	bl	80015f0 <HAL_GetTick>
 8001d0e:	1b80      	subs	r0, r0, r6
 8001d10:	2864      	cmp	r0, #100	; 0x64
 8001d12:	d9f7      	bls.n	8001d04 <HAL_RCC_OscConfig+0xa4>
 8001d14:	e7e6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	d103      	bne.n	8001d26 <HAL_RCC_OscConfig+0xc6>
 8001d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d22:	6023      	str	r3, [r4, #0]
 8001d24:	e7cf      	b.n	8001cc6 <HAL_RCC_OscConfig+0x66>
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	6023      	str	r3, [r4, #0]
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	e7cb      	b.n	8001ccc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d34:	4c67      	ldr	r4, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d36:	6863      	ldr	r3, [r4, #4]
 8001d38:	f013 0f0c 	tst.w	r3, #12
 8001d3c:	d007      	beq.n	8001d4e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d110      	bne.n	8001d6a <HAL_RCC_OscConfig+0x10a>
 8001d48:	6863      	ldr	r3, [r4, #4]
 8001d4a:	03da      	lsls	r2, r3, #15
 8001d4c:	d40d      	bmi.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	079b      	lsls	r3, r3, #30
 8001d52:	d502      	bpl.n	8001d5a <HAL_RCC_OscConfig+0xfa>
 8001d54:	692b      	ldr	r3, [r5, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d186      	bne.n	8001c68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	696a      	ldr	r2, [r5, #20]
 8001d5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d66:	6023      	str	r3, [r4, #0]
 8001d68:	e786      	b.n	8001c78 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6a:	692a      	ldr	r2, [r5, #16]
 8001d6c:	4b5a      	ldr	r3, [pc, #360]	; (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001d6e:	b16a      	cbz	r2, 8001d8c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d74:	f7ff fc3c 	bl	80015f0 <HAL_GetTick>
 8001d78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	079f      	lsls	r7, r3, #30
 8001d7e:	d4ec      	bmi.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc36 	bl	80015f0 <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f7      	bls.n	8001d7a <HAL_RCC_OscConfig+0x11a>
 8001d8a:	e7ab      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001d8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc2f 	bl	80015f0 <HAL_GetTick>
 8001d92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	0798      	lsls	r0, r3, #30
 8001d98:	f57f af6e 	bpl.w	8001c78 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc28 	bl	80015f0 <HAL_GetTick>
 8001da0:	1b80      	subs	r0, r0, r6
 8001da2:	2802      	cmp	r0, #2
 8001da4:	d9f6      	bls.n	8001d94 <HAL_RCC_OscConfig+0x134>
 8001da6:	e79d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da8:	69aa      	ldr	r2, [r5, #24]
 8001daa:	4c4a      	ldr	r4, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001dae:	b1da      	cbz	r2, 8001de8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001db4:	f7ff fc1c 	bl	80015f0 <HAL_GetTick>
 8001db8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dbc:	079b      	lsls	r3, r3, #30
 8001dbe:	d50d      	bpl.n	8001ddc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dcc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001dce:	bf00      	nop
  }
  while (Delay --);
 8001dd0:	9b01      	ldr	r3, [sp, #4]
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <HAL_RCC_OscConfig+0x16e>
 8001dda:	e751      	b.n	8001c80 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc08 	bl	80015f0 <HAL_GetTick>
 8001de0:	1b80      	subs	r0, r0, r6
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d9e9      	bls.n	8001dba <HAL_RCC_OscConfig+0x15a>
 8001de6:	e77d      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001de8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001dea:	f7ff fc01 	bl	80015f0 <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001df2:	079f      	lsls	r7, r3, #30
 8001df4:	f57f af44 	bpl.w	8001c80 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fbfa 	bl	80015f0 <HAL_GetTick>
 8001dfc:	1b80      	subs	r0, r0, r6
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d9f6      	bls.n	8001df0 <HAL_RCC_OscConfig+0x190>
 8001e02:	e76f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e04:	4c33      	ldr	r4, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e06:	69e3      	ldr	r3, [r4, #28]
 8001e08:	00d8      	lsls	r0, r3, #3
 8001e0a:	d424      	bmi.n	8001e56 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001e0c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	69e3      	ldr	r3, [r4, #28]
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	61e3      	str	r3, [r4, #28]
 8001e16:	69e3      	ldr	r3, [r4, #28]
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4e30      	ldr	r6, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x284>)
 8001e22:	6833      	ldr	r3, [r6, #0]
 8001e24:	05d9      	lsls	r1, r3, #23
 8001e26:	d518      	bpl.n	8001e5a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	68eb      	ldr	r3, [r5, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d126      	bne.n	8001e7c <HAL_RCC_OscConfig+0x21c>
 8001e2e:	6a23      	ldr	r3, [r4, #32]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e36:	f7ff fbdb 	bl	80015f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e3e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	6a23      	ldr	r3, [r4, #32]
 8001e42:	079b      	lsls	r3, r3, #30
 8001e44:	d53f      	bpl.n	8001ec6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	f43f af1e 	beq.w	8001c88 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	69e3      	ldr	r3, [r4, #28]
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	61e3      	str	r3, [r4, #28]
 8001e54:	e718      	b.n	8001c88 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2700      	movs	r7, #0
 8001e58:	e7e2      	b.n	8001e20 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5a:	6833      	ldr	r3, [r6, #0]
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e62:	f7ff fbc5 	bl	80015f0 <HAL_GetTick>
 8001e66:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	6833      	ldr	r3, [r6, #0]
 8001e6a:	05da      	lsls	r2, r3, #23
 8001e6c:	d4dc      	bmi.n	8001e28 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6e:	f7ff fbbf 	bl	80015f0 <HAL_GetTick>
 8001e72:	eba0 0008 	sub.w	r0, r0, r8
 8001e76:	2864      	cmp	r0, #100	; 0x64
 8001e78:	d9f6      	bls.n	8001e68 <HAL_RCC_OscConfig+0x208>
 8001e7a:	e733      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	b9ab      	cbnz	r3, 8001eaa <HAL_RCC_OscConfig+0x24a>
 8001e7e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6223      	str	r3, [r4, #32]
 8001e8a:	6a23      	ldr	r3, [r4, #32]
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001e92:	f7ff fbad 	bl	80015f0 <HAL_GetTick>
 8001e96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	6a23      	ldr	r3, [r4, #32]
 8001e9a:	0798      	lsls	r0, r3, #30
 8001e9c:	d5d3      	bpl.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fba7 	bl	80015f0 <HAL_GetTick>
 8001ea2:	1b80      	subs	r0, r0, r6
 8001ea4:	4540      	cmp	r0, r8
 8001ea6:	d9f7      	bls.n	8001e98 <HAL_RCC_OscConfig+0x238>
 8001ea8:	e71c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	6a23      	ldr	r3, [r4, #32]
 8001eae:	d103      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x258>
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6223      	str	r3, [r4, #32]
 8001eb6:	e7ba      	b.n	8001e2e <HAL_RCC_OscConfig+0x1ce>
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6223      	str	r3, [r4, #32]
 8001ebe:	6a23      	ldr	r3, [r4, #32]
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	e7b6      	b.n	8001e34 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb93 	bl	80015f0 <HAL_GetTick>
 8001eca:	eba0 0008 	sub.w	r0, r0, r8
 8001ece:	42b0      	cmp	r0, r6
 8001ed0:	d9b6      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1e0>
 8001ed2:	e707      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x334>)
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	461c      	mov	r4, r3
 8001eee:	f002 020c 	and.w	r2, r2, #12
 8001ef2:	2a08      	cmp	r2, #8
 8001ef4:	d03d      	beq.n	8001f72 <HAL_RCC_OscConfig+0x312>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	4e27      	ldr	r6, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001efc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	d12b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb76 	bl	80015f0 <HAL_GetTick>
 8001f04:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	0199      	lsls	r1, r3, #6
 8001f0a:	d41f      	bmi.n	8001f4c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f0c:	6a2b      	ldr	r3, [r5, #32]
 8001f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f14:	6862      	ldr	r2, [r4, #4]
 8001f16:	68a9      	ldr	r1, [r5, #8]
 8001f18:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001f22:	6862      	ldr	r2, [r4, #4]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f2e:	2301      	movs	r3, #1
 8001f30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f32:	f7ff fb5d 	bl	80015f0 <HAL_GetTick>
 8001f36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	019a      	lsls	r2, r3, #6
 8001f3c:	f53f aea8 	bmi.w	8001c90 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fb56 	bl	80015f0 <HAL_GetTick>
 8001f44:	1b40      	subs	r0, r0, r5
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d9f6      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2d8>
 8001f4a:	e6cb      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff fb50 	bl	80015f0 <HAL_GetTick>
 8001f50:	1bc0      	subs	r0, r0, r7
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d9d7      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2a6>
 8001f56:	e6c5      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001f58:	f7ff fb4a 	bl	80015f0 <HAL_GetTick>
 8001f5c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	f57f ae95 	bpl.w	8001c90 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fb43 	bl	80015f0 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d9f6      	bls.n	8001f5e <HAL_RCC_OscConfig+0x2fe>
 8001f70:	e6b8      	b.n	8001ce4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f72:	2801      	cmp	r0, #1
 8001f74:	f43f aeb7 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001f78:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	6a2b      	ldr	r3, [r5, #32]
 8001f7c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f47f ae71 	bne.w	8001c68 <HAL_RCC_OscConfig+0x8>
 8001f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f88:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001f8c:	1ac0      	subs	r0, r0, r3
 8001f8e:	bf18      	it	ne
 8001f90:	2001      	movne	r0, #1
 8001f92:	e6a8      	b.n	8001ce6 <HAL_RCC_OscConfig+0x86>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	42420060 	.word	0x42420060

08001f9c <HAL_RCC_GetSysClockFreq>:
{
 8001f9c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001fa0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa2:	ac02      	add	r4, sp, #8
 8001fa4:	f103 0510 	add.w	r5, r3, #16
 8001fa8:	4622      	mov	r2, r4
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	c203      	stmia	r2!, {r0, r1}
 8001fb2:	42ab      	cmp	r3, r5
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	d1f7      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f88d 3004 	strb.w	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001fc0:	4911      	ldr	r1, [pc, #68]	; (8002008 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001fc6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	f003 020c 	and.w	r2, r3, #12
 8001fcc:	2a08      	cmp	r2, #8
 8001fce:	d117      	bne.n	8002000 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001fd4:	a806      	add	r0, sp, #24
 8001fd6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fda:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fde:	d50c      	bpl.n	8001ffa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fe8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fea:	aa06      	add	r2, sp, #24
 8001fec:	4413      	add	r3, r2
 8001fee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001ff6:	b007      	add	sp, #28
 8001ff8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_RCC_GetSysClockFreq+0x74>)
 8001ffc:	4350      	muls	r0, r2
 8001ffe:	e7fa      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002002:	e7f8      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x5a>
 8002004:	080033a0 	.word	0x080033a0
 8002008:	40021000 	.word	0x40021000
 800200c:	007a1200 	.word	0x007a1200
 8002010:	003d0900 	.word	0x003d0900

08002014 <HAL_RCC_ClockConfig>:
{
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800201a:	4604      	mov	r4, r0
 800201c:	b910      	cbnz	r0, 8002024 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800201e:	2001      	movs	r0, #1
 8002020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4a45      	ldr	r2, [pc, #276]	; (800213c <HAL_RCC_ClockConfig+0x128>)
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	428b      	cmp	r3, r1
 800202e:	d329      	bcc.n	8002084 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	6821      	ldr	r1, [r4, #0]
 8002032:	078e      	lsls	r6, r1, #30
 8002034:	d431      	bmi.n	800209a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	07ca      	lsls	r2, r1, #31
 8002038:	d444      	bmi.n	80020c4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <HAL_RCC_ClockConfig+0x128>)
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	429d      	cmp	r5, r3
 8002044:	d367      	bcc.n	8002116 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	4d3d      	ldr	r5, [pc, #244]	; (8002140 <HAL_RCC_ClockConfig+0x12c>)
 800204a:	f012 0f04 	tst.w	r2, #4
 800204e:	d16e      	bne.n	800212e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	0713      	lsls	r3, r2, #28
 8002052:	d506      	bpl.n	8002062 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002054:	686b      	ldr	r3, [r5, #4]
 8002056:	6922      	ldr	r2, [r4, #16]
 8002058:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800205c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002060:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002062:	f7ff ff9b 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8002066:	686b      	ldr	r3, [r5, #4]
 8002068:	4a36      	ldr	r2, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x130>)
 800206a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	40d8      	lsrs	r0, r3
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HAL_RCC_ClockConfig+0x134>)
 8002074:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCC_ClockConfig+0x138>)
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	f7ff f9df 	bl	800143c <HAL_InitTick>
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
 8002080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	430b      	orrs	r3, r1
 800208c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4299      	cmp	r1, r3
 8002096:	d1c2      	bne.n	800201e <HAL_RCC_ClockConfig+0xa>
 8002098:	e7ca      	b.n	8002030 <HAL_RCC_ClockConfig+0x1c>
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	bf1e      	ittt	ne
 80020a2:	685a      	ldrne	r2, [r3, #4]
 80020a4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80020a8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ac:	bf42      	ittt	mi
 80020ae:	685a      	ldrmi	r2, [r3, #4]
 80020b0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80020b4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	68a0      	ldr	r0, [r4, #8]
 80020ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020be:	4302      	orrs	r2, r0
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e7b8      	b.n	8002036 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	6862      	ldr	r2, [r4, #4]
 80020c6:	4e1e      	ldr	r6, [pc, #120]	; (8002140 <HAL_RCC_ClockConfig+0x12c>)
 80020c8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020cc:	d11b      	bne.n	8002106 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	d0a4      	beq.n	800201e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	4313      	orrs	r3, r2
 80020e0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80020e2:	f7ff fa85 	bl	80015f0 <HAL_GetTick>
 80020e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	6873      	ldr	r3, [r6, #4]
 80020ea:	6862      	ldr	r2, [r4, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020f4:	d0a1      	beq.n	800203a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f6:	f7ff fa7b 	bl	80015f0 <HAL_GetTick>
 80020fa:	1bc0      	subs	r0, r0, r7
 80020fc:	4540      	cmp	r0, r8
 80020fe:	d9f3      	bls.n	80020e8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002100:	2003      	movs	r0, #3
}
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	2a02      	cmp	r2, #2
 8002108:	d102      	bne.n	8002110 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800210e:	e7e0      	b.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	f013 0f02 	tst.w	r3, #2
 8002114:	e7dd      	b.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	f023 0307 	bic.w	r3, r3, #7
 800211c:	432b      	orrs	r3, r5
 800211e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	429d      	cmp	r5, r3
 8002128:	f47f af79 	bne.w	800201e <HAL_RCC_ClockConfig+0xa>
 800212c:	e78b      	b.n	8002046 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212e:	686b      	ldr	r3, [r5, #4]
 8002130:	68e1      	ldr	r1, [r4, #12]
 8002132:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002136:	430b      	orrs	r3, r1
 8002138:	606b      	str	r3, [r5, #4]
 800213a:	e789      	b.n	8002050 <HAL_RCC_ClockConfig+0x3c>
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	080033b0 	.word	0x080033b0
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008

08002150 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800215e:	6810      	ldr	r0, [r2, #0]
}
 8002160:	40d8      	lsrs	r0, r3
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	080033c0 	.word	0x080033c0
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800217e:	6810      	ldr	r0, [r2, #0]
}
 8002180:	40d8      	lsrs	r0, r3
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	080033c0 	.word	0x080033c0
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002190:	230f      	movs	r3, #15
 8002192:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetClockConfig+0x34>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80021a4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80021ac:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetClockConfig+0x38>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	600b      	str	r3, [r1, #0]
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40022000 	.word	0x40022000

080021cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021cc:	6803      	ldr	r3, [r0, #0]
{
 80021ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021d2:	07d9      	lsls	r1, r3, #31
{
 80021d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021d6:	d520      	bpl.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d8:	4c35      	ldr	r4, [pc, #212]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80021da:	69e3      	ldr	r3, [r4, #28]
 80021dc:	00da      	lsls	r2, r3, #3
 80021de:	d432      	bmi.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80021e0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	69e3      	ldr	r3, [r4, #28]
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61e3      	str	r3, [r4, #28]
 80021ea:	69e3      	ldr	r3, [r4, #28]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4e2f      	ldr	r6, [pc, #188]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021f6:	6833      	ldr	r3, [r6, #0]
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	d526      	bpl.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002202:	d136      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002204:	6a23      	ldr	r3, [r4, #32]
 8002206:	686a      	ldr	r2, [r5, #4]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	4313      	orrs	r3, r2
 800220e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002210:	b11f      	cbz	r7, 800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	69e3      	ldr	r3, [r4, #28]
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800221a:	6828      	ldr	r0, [r5, #0]
 800221c:	0783      	lsls	r3, r0, #30
 800221e:	d506      	bpl.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002222:	68a9      	ldr	r1, [r5, #8]
 8002224:	6853      	ldr	r3, [r2, #4]
 8002226:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800222a:	430b      	orrs	r3, r1
 800222c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800222e:	f010 0010 	ands.w	r0, r0, #16
 8002232:	d01b      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002236:	68e9      	ldr	r1, [r5, #12]
 8002238:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800223a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002240:	430b      	orrs	r3, r1
 8002242:	6053      	str	r3, [r2, #4]
 8002244:	e012      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2700      	movs	r7, #0
 8002248:	e7d4      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	6833      	ldr	r3, [r6, #0]
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002252:	f7ff f9cd 	bl	80015f0 <HAL_GetTick>
 8002256:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	05d8      	lsls	r0, r3, #23
 800225c:	d4ce      	bmi.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7ff f9c7 	bl	80015f0 <HAL_GetTick>
 8002262:	eba0 0008 	sub.w	r0, r0, r8
 8002266:	2864      	cmp	r0, #100	; 0x64
 8002268:	d9f6      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
}
 800226c:	b002      	add	sp, #8
 800226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002272:	686a      	ldr	r2, [r5, #4]
 8002274:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002278:	4293      	cmp	r3, r2
 800227a:	d0c3      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800227c:	2001      	movs	r0, #1
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002280:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002282:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002284:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800228a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800228c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800228e:	07d9      	lsls	r1, r3, #31
 8002290:	d5b8      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002292:	f7ff f9ad 	bl	80015f0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800229a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	6a23      	ldr	r3, [r4, #32]
 800229e:	079a      	lsls	r2, r3, #30
 80022a0:	d4b0      	bmi.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff f9a5 	bl	80015f0 <HAL_GetTick>
 80022a6:	1b80      	subs	r0, r0, r6
 80022a8:	4540      	cmp	r0, r8
 80022aa:	d9f7      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80022ac:	e7dd      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42420440 	.word	0x42420440

080022bc <HAL_TIM_Base_MspInit>:
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d120      	bne.n	800230a <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	2302      	movs	r3, #2
 80022ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_TIM_Base_Start_IT+0x50>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00a      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x34>
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d007      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x34>
 80022e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x34>
 80022ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	2a06      	cmp	r2, #6
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2000      	movs	r0, #0
}
 8002308:	4770      	bx	lr
    return HAL_ERROR;
 800230a:	2001      	movs	r0, #1
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00

08002314 <HAL_TIM_OC_DelayElapsedCallback>:
 8002314:	4770      	bx	lr

08002316 <HAL_TIM_IC_CaptureCallback>:
 8002316:	4770      	bx	lr

08002318 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002318:	4770      	bx	lr

0800231a <HAL_TIM_TriggerCallback>:
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800231c:	6803      	ldr	r3, [r0, #0]
{
 800231e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002320:	691a      	ldr	r2, [r3, #16]
{
 8002322:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002324:	0791      	lsls	r1, r2, #30
 8002326:	d50e      	bpl.n	8002346 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	0792      	lsls	r2, r2, #30
 800232c:	d50b      	bpl.n	8002346 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800232e:	f06f 0202 	mvn.w	r2, #2
 8002332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002334:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002336:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002338:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800233a:	079b      	lsls	r3, r3, #30
 800233c:	d077      	beq.n	800242e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233e:	f7ff ffea 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	2300      	movs	r3, #0
 8002344:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	0750      	lsls	r0, r2, #29
 800234c:	d510      	bpl.n	8002370 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	0751      	lsls	r1, r2, #29
 8002352:	d50d      	bpl.n	8002370 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800235c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002364:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002366:	d068      	beq.n	800243a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002368:	f7ff ffd5 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236c:	2300      	movs	r3, #0
 800236e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	0712      	lsls	r2, r2, #28
 8002376:	d50f      	bpl.n	8002398 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	0710      	lsls	r0, r2, #28
 800237c:	d50c      	bpl.n	8002398 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800237e:	f06f 0208 	mvn.w	r2, #8
 8002382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002384:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002386:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002388:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800238e:	d05a      	beq.n	8002446 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002390:	f7ff ffc1 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002394:	2300      	movs	r3, #0
 8002396:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	06d2      	lsls	r2, r2, #27
 800239e:	d510      	bpl.n	80023c2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	06d0      	lsls	r0, r2, #27
 80023a4:	d50d      	bpl.n	80023c2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a6:	f06f 0210 	mvn.w	r2, #16
 80023aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ac:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b8:	d04b      	beq.n	8002452 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	f7ff ffac 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	2300      	movs	r3, #0
 80023c0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	07d1      	lsls	r1, r2, #31
 80023c8:	d508      	bpl.n	80023dc <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	07d2      	lsls	r2, r2, #31
 80023ce:	d505      	bpl.n	80023dc <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d0:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023d8:	f7fe fff0 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	0610      	lsls	r0, r2, #24
 80023e2:	d508      	bpl.n	80023f6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	0611      	lsls	r1, r2, #24
 80023e8:	d505      	bpl.n	80023f6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023f2:	f000 f89a 	bl	800252a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	0652      	lsls	r2, r2, #25
 80023fc:	d508      	bpl.n	8002410 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	0650      	lsls	r0, r2, #25
 8002402:	d505      	bpl.n	8002410 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002404:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002408:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800240c:	f7ff ff85 	bl	800231a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	0691      	lsls	r1, r2, #26
 8002416:	d522      	bpl.n	800245e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	0692      	lsls	r2, r2, #26
 800241c:	d51f      	bpl.n	800245e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002422:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002428:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800242a:	f000 b87d 	b.w	8002528 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	f7ff ff71 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff70 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
 8002438:	e783      	b.n	8002342 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	f7ff ff6b 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ff6a 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
 8002444:	e792      	b.n	800236c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	f7ff ff65 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff ff64 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
 8002450:	e7a0      	b.n	8002394 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	f7ff ff5f 	bl	8002314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff ff5e 	bl	8002318 <HAL_TIM_PWM_PulseFinishedCallback>
 800245c:	e7af      	b.n	80023be <HAL_TIM_IRQHandler+0xa2>
 800245e:	bd10      	pop	{r4, pc}

08002460 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002460:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002462:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002464:	4290      	cmp	r0, r2
 8002466:	d00a      	beq.n	800247e <TIM_Base_SetConfig+0x1e>
 8002468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800246c:	d007      	beq.n	800247e <TIM_Base_SetConfig+0x1e>
 800246e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002472:	4290      	cmp	r0, r2
 8002474:	d003      	beq.n	800247e <TIM_Base_SetConfig+0x1e>
 8002476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800247a:	4290      	cmp	r0, r2
 800247c:	d115      	bne.n	80024aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800247e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002484:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <TIM_Base_SetConfig+0x6c>)
 8002488:	4290      	cmp	r0, r2
 800248a:	d00a      	beq.n	80024a2 <TIM_Base_SetConfig+0x42>
 800248c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0x42>
 8002492:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002496:	4290      	cmp	r0, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0x42>
 800249a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249e:	4290      	cmp	r0, r2
 80024a0:	d103      	bne.n	80024aa <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024aa:	694a      	ldr	r2, [r1, #20]
 80024ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80024b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b4:	688b      	ldr	r3, [r1, #8]
 80024b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024b8:	680b      	ldr	r3, [r1, #0]
 80024ba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <TIM_Base_SetConfig+0x6c>)
 80024be:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c0:	bf04      	itt	eq
 80024c2:	690b      	ldreq	r3, [r1, #16]
 80024c4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024c6:	2301      	movs	r3, #1
 80024c8:	6143      	str	r3, [r0, #20]
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00

080024d0 <HAL_TIM_Base_Init>:
{
 80024d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80024d2:	4604      	mov	r4, r0
 80024d4:	b330      	cbz	r0, 8002524 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024de:	b91b      	cbnz	r3, 80024e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80024e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024e4:	f7ff feea 	bl	80022bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	1d21      	adds	r1, r4, #4
 80024f2:	f7ff ffb5 	bl	8002460 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f6:	2301      	movs	r3, #1
  return HAL_OK;
 80024f8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002502:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002506:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800250a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002516:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800251a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800251e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
}
 8002526:	bd10      	pop	{r4, pc}

08002528 <HAL_TIMEx_CommutCallback>:
 8002528:	4770      	bx	lr

0800252a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800252a:	4770      	bx	lr

0800252c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002530:	6803      	ldr	r3, [r0, #0]
 8002532:	68c1      	ldr	r1, [r0, #12]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800253e:	6882      	ldr	r2, [r0, #8]
 8002540:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002542:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002544:	4302      	orrs	r2, r0
 8002546:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002548:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800254c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002550:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	69a1      	ldr	r1, [r4, #24]
 800255a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800255e:	430a      	orrs	r2, r1
 8002560:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <UART_SetConfig+0x70>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d115      	bne.n	8002594 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002568:	f7ff fe02 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800256c:	2319      	movs	r3, #25
 800256e:	4358      	muls	r0, r3
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	2264      	movs	r2, #100	; 0x64
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	fbb0 f1f2 	udiv	r1, r0, r2
 800257e:	fb02 0311 	mls	r3, r2, r1, r0
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	3332      	adds	r3, #50	; 0x32
 8002586:	fbb3 f3f2 	udiv	r3, r3, r2
 800258a:	6825      	ldr	r5, [r4, #0]
 800258c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002590:	60ab      	str	r3, [r5, #8]
 8002592:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002594:	f7ff fddc 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8002598:	e7e8      	b.n	800256c <UART_SetConfig+0x40>
 800259a:	bf00      	nop
 800259c:	40013800 	.word	0x40013800

080025a0 <HAL_UART_Init>:
{
 80025a0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80025a2:	4604      	mov	r4, r0
 80025a4:	b340      	cbz	r0, 80025f8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ae:	b91b      	cbnz	r3, 80025b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80025b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80025b4:	f7fe ffc2 	bl	800153c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80025ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80025c0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80025c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80025c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025ca:	f7ff ffaf 	bl	800252c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ce:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80025f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025f8:	2001      	movs	r0, #1
}
 80025fa:	bd10      	pop	{r4, pc}

080025fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025fc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80025fe:	f000 fc5b 	bl	8002eb8 <vTaskStartScheduler>
  
  return osOK;
}
 8002602:	2000      	movs	r0, #0
 8002604:	bd08      	pop	{r3, pc}

08002606 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002606:	b570      	push	{r4, r5, r6, lr}
 8002608:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800260a:	6946      	ldr	r6, [r0, #20]
{
 800260c:	460b      	mov	r3, r1
 800260e:	b086      	sub	sp, #24
 8002610:	6840      	ldr	r0, [r0, #4]
 8002612:	6829      	ldr	r1, [r5, #0]
 8002614:	692a      	ldr	r2, [r5, #16]
 8002616:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800261a:	b176      	cbz	r6, 800263a <osThreadCreate+0x34>
 800261c:	69ad      	ldr	r5, [r5, #24]
 800261e:	b165      	cbz	r5, 800263a <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8002620:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002622:	bf0c      	ite	eq
 8002624:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002626:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002628:	9502      	str	r5, [sp, #8]
 800262a:	e88d 0050 	stmia.w	sp, {r4, r6}
 800262e:	f000 fbdf 	bl	8002df0 <xTaskCreateStatic>
 8002632:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002634:	9805      	ldr	r0, [sp, #20]
}
 8002636:	b006      	add	sp, #24
 8002638:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800263a:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800263c:	bf0c      	ite	eq
 800263e:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002640:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002642:	ad05      	add	r5, sp, #20
 8002644:	b292      	uxth	r2, r2
 8002646:	e88d 0030 	stmia.w	sp, {r4, r5}
 800264a:	f000 fc08 	bl	8002e5e <xTaskCreate>
 800264e:	2801      	cmp	r0, #1
 8002650:	d0f0      	beq.n	8002634 <osThreadCreate+0x2e>
      return NULL;
 8002652:	2000      	movs	r0, #0
 8002654:	e7ef      	b.n	8002636 <osThreadCreate+0x30>

08002656 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002656:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002658:	2800      	cmp	r0, #0
 800265a:	bf08      	it	eq
 800265c:	2001      	moveq	r0, #1
 800265e:	f000 fd73 	bl	8003148 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002662:	2000      	movs	r0, #0
 8002664:	bd08      	pop	{r3, pc}

08002666 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002666:	f100 0308 	add.w	r3, r0, #8
 800266a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800266c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002670:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002672:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002674:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002676:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002678:	6003      	str	r3, [r0, #0]
 800267a:	4770      	bx	lr

0800267c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	6103      	str	r3, [r0, #16]
 8002680:	4770      	bx	lr

08002682 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002682:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002684:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002686:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002688:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800268e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002690:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002692:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002694:	3301      	adds	r3, #1
 8002696:	6003      	str	r3, [r0, #0]
 8002698:	4770      	bx	lr

0800269a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800269a:	680a      	ldr	r2, [r1, #0]
{
 800269c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800269e:	1c53      	adds	r3, r2, #1
 80026a0:	d10a      	bne.n	80026b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80026ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80026ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80026b2:	3301      	adds	r3, #1
 80026b4:	6003      	str	r3, [r0, #0]
 80026b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b8:	f100 0308 	add.w	r3, r0, #8
 80026bc:	685c      	ldr	r4, [r3, #4]
 80026be:	6825      	ldr	r5, [r4, #0]
 80026c0:	42aa      	cmp	r2, r5
 80026c2:	d3ef      	bcc.n	80026a4 <vListInsert+0xa>
 80026c4:	4623      	mov	r3, r4
 80026c6:	e7f9      	b.n	80026bc <vListInsert+0x22>

080026c8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026c8:	6841      	ldr	r1, [r0, #4]
 80026ca:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026cc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026d0:	6882      	ldr	r2, [r0, #8]
 80026d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d8:	bf08      	it	eq
 80026da:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026dc:	2200      	movs	r2, #0
 80026de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	3a01      	subs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e6:	6818      	ldr	r0, [r3, #0]
}
 80026e8:	4770      	bx	lr
	...

080026ec <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80026ec:	2300      	movs	r3, #0
{
 80026ee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80026f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <prvTaskExitError+0x3c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	d008      	beq.n	800270c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	e7fe      	b.n	800270a <prvTaskExitError+0x1e>
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800271c:	9b01      	ldr	r3, [sp, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0fc      	beq.n	800271c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002722:	b002      	add	sp, #8
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800272c:	4806      	ldr	r0, [pc, #24]	; (8002748 <prvPortStartFirstTask+0x1c>)
 800272e:	6800      	ldr	r0, [r0, #0]
 8002730:	6800      	ldr	r0, [r0, #0]
 8002732:	f380 8808 	msr	MSP, r0
 8002736:	b662      	cpsie	i
 8002738:	b661      	cpsie	f
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	df00      	svc	0
 8002744:	bf00      	nop
 8002746:	0000      	.short	0x0000
 8002748:	e000ed08 	.word	0xe000ed08

0800274c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800274c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002750:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002756:	f021 0101 	bic.w	r1, r1, #1
 800275a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800275e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002762:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002766:	3840      	subs	r0, #64	; 0x40
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	080026ed 	.word	0x080026ed

08002770 <SVC_Handler>:
	__asm volatile (
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <pxCurrentTCBConst2>)
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	6808      	ldr	r0, [r1, #0]
 8002776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800277a:	f380 8809 	msr	PSP, r0
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f380 8811 	msr	BASEPRI, r0
 800278a:	f04e 0e0d 	orr.w	lr, lr, #13
 800278e:	4770      	bx	lr

08002790 <pxCurrentTCBConst2>:
 8002790:	20000f08 	.word	0x20000f08

08002794 <vPortEnterCritical>:
 8002794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <vPortEnterCritical+0x3c>)
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80027ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80027ae:	d10d      	bne.n	80027cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <vPortEnterCritical+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80027b8:	d008      	beq.n	80027cc <vPortEnterCritical+0x38>
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	e7fe      	b.n	80027ca <vPortEnterCritical+0x36>
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	e000ed04 	.word	0xe000ed04

080027d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80027d8:	4a08      	ldr	r2, [pc, #32]	; (80027fc <vPortExitCritical+0x24>)
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	b943      	cbnz	r3, 80027f0 <vPortExitCritical+0x18>
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	e7fe      	b.n	80027ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027f0:	3b01      	subs	r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027f4:	b90b      	cbnz	r3, 80027fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	4770      	bx	lr
 80027fc:	2000000c 	.word	0x2000000c

08002800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002800:	f3ef 8009 	mrs	r0, PSP
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <pxCurrentTCBConst>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002810:	6010      	str	r0, [r2, #0]
 8002812:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002816:	f04f 0050 	mov.w	r0, #80	; 0x50
 800281a:	f380 8811 	msr	BASEPRI, r0
 800281e:	f000 fcb7 	bl	8003190 <vTaskSwitchContext>
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f380 8811 	msr	BASEPRI, r0
 800282a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	6808      	ldr	r0, [r1, #0]
 8002832:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002836:	f380 8809 	msr	PSP, r0
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	4770      	bx	lr

08002840 <pxCurrentTCBConst>:
 8002840:	20000f08 	.word	0x20000f08

08002844 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002844:	b508      	push	{r3, lr}
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002856:	f000 fb6d 	bl	8002f34 <xTaskIncrementTick>
 800285a:	b118      	cbz	r0, 8002864 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <SysTick_Handler+0x28>)
 8002862:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002864:	2300      	movs	r3, #0
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	bd08      	pop	{r3, pc}
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002874:	4908      	ldr	r1, [pc, #32]	; (8002898 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002878:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800287a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <vPortSetupTimerInterrupt+0x2c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fbb3 f3f1 	udiv	r3, r3, r1
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <vPortSetupTimerInterrupt+0x30>)
 8002888:	3b01      	subs	r3, #1
 800288a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800288c:	2307      	movs	r3, #7
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010
 8002898:	e000e018 	.word	0xe000e018
 800289c:	20000000 	.word	0x20000000
 80028a0:	e000e014 	.word	0xe000e014

080028a4 <xPortStartScheduler>:
{
 80028a4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028a8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028b4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028b6:	4a24      	ldr	r2, [pc, #144]	; (8002948 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028c6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028c8:	2207      	movs	r2, #7
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <xPortStartScheduler+0xa8>)
 80028cc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80028d2:	1e54      	subs	r4, r2, #1
 80028d4:	0600      	lsls	r0, r0, #24
 80028d6:	d40d      	bmi.n	80028f4 <xPortStartScheduler+0x50>
 80028d8:	b101      	cbz	r1, 80028dc <xPortStartScheduler+0x38>
 80028da:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2a03      	cmp	r2, #3
 80028e0:	d011      	beq.n	8002906 <xPortStartScheduler+0x62>
	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	e7fe      	b.n	80028f2 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80028f8:	2101      	movs	r1, #1
 80028fa:	0052      	lsls	r2, r2, #1
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f88d 2003 	strb.w	r2, [sp, #3]
 8002902:	4622      	mov	r2, r4
 8002904:	e7e3      	b.n	80028ce <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8002906:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002908:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800290a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800290e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002910:	9b01      	ldr	r3, [sp, #4]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <xPortStartScheduler+0xa0>)
 8002914:	b2db      	uxtb	r3, r3
 8002916:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <xPortStartScheduler+0xac>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002928:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800292a:	f7ff ffa1 	bl	8002870 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <xPortStartScheduler+0xb0>)
 8002930:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8002932:	f7ff fefb 	bl	800272c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002936:	f000 fc2b 	bl	8003190 <vTaskSwitchContext>
	prvTaskExitError();
 800293a:	f7ff fed7 	bl	80026ec <prvTaskExitError>
}
 800293e:	4620      	mov	r0, r4
 8002940:	b002      	add	sp, #8
 8002942:	bd10      	pop	{r4, pc}
 8002944:	e000e400 	.word	0xe000e400
 8002948:	200002e8 	.word	0x200002e8
 800294c:	200002ec 	.word	0x200002ec
 8002950:	e000ed20 	.word	0xe000ed20
 8002954:	2000000c 	.word	0x2000000c

08002958 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002958:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <prvInsertBlockIntoFreeList+0x40>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4282      	cmp	r2, r0
 8002960:	d318      	bcc.n	8002994 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002962:	685c      	ldr	r4, [r3, #4]
 8002964:	1919      	adds	r1, r3, r4
 8002966:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002968:	bf01      	itttt	eq
 800296a:	6841      	ldreq	r1, [r0, #4]
 800296c:	4618      	moveq	r0, r3
 800296e:	1909      	addeq	r1, r1, r4
 8002970:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002972:	6844      	ldr	r4, [r0, #4]
 8002974:	1901      	adds	r1, r0, r4
 8002976:	428a      	cmp	r2, r1
 8002978:	d107      	bne.n	800298a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <prvInsertBlockIntoFreeList+0x44>)
 800297c:	6809      	ldr	r1, [r1, #0]
 800297e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002980:	bf1f      	itttt	ne
 8002982:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002984:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002986:	1909      	addne	r1, r1, r4
 8002988:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800298a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800298c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800298e:	bf18      	it	ne
 8002990:	6018      	strne	r0, [r3, #0]
 8002992:	bd10      	pop	{r4, pc}
 8002994:	4613      	mov	r3, r2
 8002996:	e7e1      	b.n	800295c <prvInsertBlockIntoFreeList+0x4>
 8002998:	20000f00 	.word	0x20000f00
 800299c:	200002f0 	.word	0x200002f0

080029a0 <pvPortMalloc>:
{
 80029a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80029a6:	f000 fabd 	bl	8002f24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80029aa:	493e      	ldr	r1, [pc, #248]	; (8002aa4 <pvPortMalloc+0x104>)
 80029ac:	4d3e      	ldr	r5, [pc, #248]	; (8002aa8 <pvPortMalloc+0x108>)
 80029ae:	680b      	ldr	r3, [r1, #0]
 80029b0:	bb0b      	cbnz	r3, 80029f6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80029b2:	4a3e      	ldr	r2, [pc, #248]	; (8002aac <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029b4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029b6:	bf1d      	ittte	ne
 80029b8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029ba:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029be:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029c2:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029c6:	bf1c      	itt	ne
 80029c8:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029ca:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80029cc:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029ce:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029d0:	4e37      	ldr	r6, [pc, #220]	; (8002ab0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80029d2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029d4:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80029d8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029da:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80029dc:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029de:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80029e0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029e2:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029e4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029e8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029ea:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <pvPortMalloc+0x118>)
 80029ee:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029f4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029f6:	682f      	ldr	r7, [r5, #0]
 80029f8:	4227      	tst	r7, r4
 80029fa:	d116      	bne.n	8002a2a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80029fc:	2c00      	cmp	r4, #0
 80029fe:	d040      	beq.n	8002a82 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8002a00:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a04:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a06:	bf1c      	itt	ne
 8002a08:	f023 0307 	bicne.w	r3, r3, #7
 8002a0c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a0e:	b163      	cbz	r3, 8002a2a <pvPortMalloc+0x8a>
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <pvPortMalloc+0x118>)
 8002a12:	6816      	ldr	r6, [r2, #0]
 8002a14:	4690      	mov	r8, r2
 8002a16:	42b3      	cmp	r3, r6
 8002a18:	d807      	bhi.n	8002a2a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002a1a:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <pvPortMalloc+0x110>)
 8002a1c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a1e:	6868      	ldr	r0, [r5, #4]
 8002a20:	4283      	cmp	r3, r0
 8002a22:	d804      	bhi.n	8002a2e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002a24:	6809      	ldr	r1, [r1, #0]
 8002a26:	428d      	cmp	r5, r1
 8002a28:	d107      	bne.n	8002a3a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	e029      	b.n	8002a82 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a2e:	682c      	ldr	r4, [r5, #0]
 8002a30:	2c00      	cmp	r4, #0
 8002a32:	d0f7      	beq.n	8002a24 <pvPortMalloc+0x84>
 8002a34:	462a      	mov	r2, r5
 8002a36:	4625      	mov	r5, r4
 8002a38:	e7f1      	b.n	8002a1e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a3a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a3c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a3e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a40:	1ac2      	subs	r2, r0, r3
 8002a42:	2a10      	cmp	r2, #16
 8002a44:	d90f      	bls.n	8002a66 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a46:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a48:	0741      	lsls	r1, r0, #29
 8002a4a:	d008      	beq.n	8002a5e <pvPortMalloc+0xbe>
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	e7fe      	b.n	8002a5c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a5e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a60:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a62:	f7ff ff79 	bl	8002958 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a66:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a68:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a6a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a6c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8002a6e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a70:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a72:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a76:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a78:	bf38      	it	cc
 8002a7a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a7c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a7e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a80:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002a82:	f000 fae9 	bl	8003058 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a86:	0763      	lsls	r3, r4, #29
 8002a88:	d008      	beq.n	8002a9c <pvPortMalloc+0xfc>
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	e7fe      	b.n	8002a9a <pvPortMalloc+0xfa>
}
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200002f0 	.word	0x200002f0
 8002aa8:	20000ef4 	.word	0x20000ef4
 8002aac:	200002f4 	.word	0x200002f4
 8002ab0:	20000f00 	.word	0x20000f00
 8002ab4:	20000efc 	.word	0x20000efc
 8002ab8:	20000ef8 	.word	0x20000ef8

08002abc <vPortFree>:
{
 8002abc:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002abe:	4604      	mov	r4, r0
 8002ac0:	b370      	cbz	r0, 8002b20 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ac2:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <vPortFree+0x68>)
 8002ac4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4213      	tst	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <vPortFree+0x24>
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	e7fe      	b.n	8002ade <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ae0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002ae4:	b141      	cbz	r1, 8002af8 <vPortFree+0x3c>
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	e7fe      	b.n	8002af6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002af8:	ea23 0302 	bic.w	r3, r3, r2
 8002afc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002b00:	f000 fa10 	bl	8002f24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b04:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <vPortFree+0x6c>)
 8002b06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002b0a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b0c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b10:	440b      	add	r3, r1
 8002b12:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b14:	f7ff ff20 	bl	8002958 <prvInsertBlockIntoFreeList>
}
 8002b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002b1c:	f000 ba9c 	b.w	8003058 <xTaskResumeAll>
 8002b20:	bd10      	pop	{r4, pc}
 8002b22:	bf00      	nop
 8002b24:	20000ef4 	.word	0x20000ef4
 8002b28:	20000ef8 	.word	0x20000ef8

08002b2c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b30:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b32:	f7ff fe2f 	bl	8002794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002b38:	4c2d      	ldr	r4, [pc, #180]	; (8002bf0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4f2d      	ldr	r7, [pc, #180]	; (8002bf4 <prvAddNewTaskToReadyList+0xc8>)
 8002b3e:	3201      	adds	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002b42:	6825      	ldr	r5, [r4, #0]
 8002b44:	2d00      	cmp	r5, #0
 8002b46:	d145      	bne.n	8002bd4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b48:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d11c      	bne.n	8002b8a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b50:	1978      	adds	r0, r7, r5
 8002b52:	3514      	adds	r5, #20
 8002b54:	f7ff fd87 	bl	8002666 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b58:	2d8c      	cmp	r5, #140	; 0x8c
 8002b5a:	d1f9      	bne.n	8002b50 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b5c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002c20 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002b60:	4d25      	ldr	r5, [pc, #148]	; (8002bf8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff fd7f 	bl	8002666 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b68:	4628      	mov	r0, r5
 8002b6a:	f7ff fd7c 	bl	8002666 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b6e:	4823      	ldr	r0, [pc, #140]	; (8002bfc <prvAddNewTaskToReadyList+0xd0>)
 8002b70:	f7ff fd79 	bl	8002666 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b74:	4822      	ldr	r0, [pc, #136]	; (8002c00 <prvAddNewTaskToReadyList+0xd4>)
 8002b76:	f7ff fd76 	bl	8002666 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b7a:	4822      	ldr	r0, [pc, #136]	; (8002c04 <prvAddNewTaskToReadyList+0xd8>)
 8002b7c:	f7ff fd73 	bl	8002666 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <prvAddNewTaskToReadyList+0xdc>)
 8002b82:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <prvAddNewTaskToReadyList+0xe0>)
 8002b88:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8002b8c:	4921      	ldr	r1, [pc, #132]	; (8002c14 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002b8e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b90:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002b92:	3301      	adds	r3, #1
 8002b94:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b96:	2301      	movs	r3, #1
 8002b98:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002b9a:	4093      	lsls	r3, r2
 8002b9c:	4303      	orrs	r3, r0
 8002b9e:	2014      	movs	r0, #20
 8002ba0:	600b      	str	r3, [r1, #0]
 8002ba2:	fb00 7002 	mla	r0, r0, r2, r7
 8002ba6:	1d31      	adds	r1, r6, #4
 8002ba8:	f7ff fd6b 	bl	8002682 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002bac:	f7ff fe14 	bl	80027d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <prvAddNewTaskToReadyList+0xec>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	b163      	cbz	r3, 8002bd0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8002bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <prvAddNewTaskToReadyList+0xf0>)
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <prvAddNewTaskToReadyList+0xec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1d6      	bne.n	8002b8a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002be2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002be4:	bf98      	it	ls
 8002be6:	6026      	strls	r6, [r4, #0]
 8002be8:	e7cf      	b.n	8002b8a <prvAddNewTaskToReadyList+0x5e>
 8002bea:	bf00      	nop
 8002bec:	20000fa0 	.word	0x20000fa0
 8002bf0:	20000f08 	.word	0x20000f08
 8002bf4:	20000f14 	.word	0x20000f14
 8002bf8:	20000fcc 	.word	0x20000fcc
 8002bfc:	20000fe8 	.word	0x20000fe8
 8002c00:	20001014 	.word	0x20001014
 8002c04:	20001000 	.word	0x20001000
 8002c08:	20000f0c 	.word	0x20000f0c
 8002c0c:	20000f10 	.word	0x20000f10
 8002c10:	20000fb0 	.word	0x20000fb0
 8002c14:	20000fb4 	.word	0x20000fb4
 8002c18:	20000ffc 	.word	0x20000ffc
 8002c1c:	e000ed04 	.word	0xe000ed04
 8002c20:	20000fb8 	.word	0x20000fb8

08002c24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <prvResetNextTaskUnblockTime+0x1c>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvResetNextTaskUnblockTime+0x20>)
 8002c2c:	b919      	cbnz	r1, 8002c36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c2e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	6852      	ldr	r2, [r2, #4]
 8002c3e:	e7f8      	b.n	8002c32 <prvResetNextTaskUnblockTime+0xe>
 8002c40:	20000f0c 	.word	0x20000f0c
 8002c44:	20000fe0 	.word	0x20000fe0

08002c48 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c4c:	4681      	mov	r9, r0
 8002c4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002c54:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002c56:	3a01      	subs	r2, #1
 8002c58:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002c5c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002c60:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c62:	f026 0607 	bic.w	r6, r6, #7
 8002c66:	1e4b      	subs	r3, r1, #1
 8002c68:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002c6c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c6e:	7858      	ldrb	r0, [r3, #1]
 8002c70:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002c74:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002c78:	b108      	cbz	r0, 8002c7e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c7a:	428b      	cmp	r3, r1
 8002c7c:	d1f7      	bne.n	8002c6e <prvInitialiseNewTask.isra.2+0x26>
 8002c7e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c80:	2700      	movs	r7, #0
 8002c82:	2d06      	cmp	r5, #6
 8002c84:	bf28      	it	cs
 8002c86:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c88:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002c8a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002c8c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c8e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002c92:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c94:	f7ff fcf2 	bl	800267c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c98:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c9c:	f104 0018 	add.w	r0, r4, #24
 8002ca0:	f7ff fcec 	bl	800267c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ca4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ca6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002caa:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cac:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb0:	4652      	mov	r2, sl
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f7ff fd49 	bl	800274c <pxPortInitialiseStack>
 8002cba:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002cbc:	f1b8 0f00 	cmp.w	r8, #0
 8002cc0:	d001      	beq.n	8002cc6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc2:	f8c8 4000 	str.w	r4, [r8]
 8002cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002cca <prvDeleteTCB>:
	{
 8002cca:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ccc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002cd0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cd2:	b93b      	cbnz	r3, 8002ce4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002cd4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002cd6:	f7ff fef1 	bl	8002abc <vPortFree>
				vPortFree( pxTCB );
 8002cda:	4620      	mov	r0, r4
	}
 8002cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002ce0:	f7ff beec 	b.w	8002abc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d0f9      	beq.n	8002cdc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d008      	beq.n	8002cfe <prvDeleteTCB+0x34>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	e7fe      	b.n	8002cfc <prvDeleteTCB+0x32>
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <prvIdleTask>:
{
 8002d00:	b580      	push	{r7, lr}
				taskYIELD();
 8002d02:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002d60 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d06:	4f12      	ldr	r7, [pc, #72]	; (8002d50 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4c12      	ldr	r4, [pc, #72]	; (8002d54 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002d0a:	4d13      	ldr	r5, [pc, #76]	; (8002d58 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	b963      	cbnz	r3, 8002d2a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <prvIdleTask+0x5c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d9f8      	bls.n	8002d0a <prvIdleTask+0xa>
				taskYIELD();
 8002d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d1c:	f8c8 3000 	str.w	r3, [r8]
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	e7ee      	b.n	8002d08 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002d2a:	f7ff fd33 	bl	8002794 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d32:	1d30      	adds	r0, r6, #4
 8002d34:	f7ff fcc8 	bl	80026c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002d44:	f7ff fd48 	bl	80027d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f7ff ffbe 	bl	8002cca <prvDeleteTCB>
 8002d4e:	e7dd      	b.n	8002d0c <prvIdleTask+0xc>
 8002d50:	20001014 	.word	0x20001014
 8002d54:	20000fa4 	.word	0x20000fa4
 8002d58:	20000fa0 	.word	0x20000fa0
 8002d5c:	20000f14 	.word	0x20000f14
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d68:	4e1b      	ldr	r6, [pc, #108]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002d6a:	681d      	ldr	r5, [r3, #0]
{
 8002d6c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d6e:	6830      	ldr	r0, [r6, #0]
{
 8002d70:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d72:	3004      	adds	r0, #4
 8002d74:	f7ff fca8 	bl	80026c8 <uxListRemove>
 8002d78:	4633      	mov	r3, r6
 8002d7a:	b940      	cbnz	r0, 8002d8e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	6831      	ldr	r1, [r6, #0]
 8002d80:	4e16      	ldr	r6, [pc, #88]	; (8002ddc <prvAddCurrentTaskToDelayedList+0x78>)
 8002d82:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002d84:	6832      	ldr	r2, [r6, #0]
 8002d86:	4088      	lsls	r0, r1
 8002d88:	ea22 0200 	bic.w	r2, r2, r0
 8002d8c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d8e:	1c62      	adds	r2, r4, #1
 8002d90:	d107      	bne.n	8002da2 <prvAddCurrentTaskToDelayedList+0x3e>
 8002d92:	b137      	cbz	r7, 8002da2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	4812      	ldr	r0, [pc, #72]	; (8002de0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002d98:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d9e:	f7ff bc70 	b.w	8002682 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002da2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002da4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002da6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002da8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002daa:	d907      	bls.n	8002dbc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <prvAddCurrentTaskToDelayedList+0x80>)
 8002dae:	6810      	ldr	r0, [r2, #0]
 8002db0:	6819      	ldr	r1, [r3, #0]
}
 8002db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db6:	3104      	adds	r1, #4
 8002db8:	f7ff bc6f 	b.w	800269a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x84>)
 8002dbe:	6810      	ldr	r0, [r2, #0]
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	3104      	adds	r1, #4
 8002dc4:	f7ff fc69 	bl	800269a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <prvAddCurrentTaskToDelayedList+0x88>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002dce:	bf38      	it	cc
 8002dd0:	601c      	strcc	r4, [r3, #0]
 8002dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd4:	20001028 	.word	0x20001028
 8002dd8:	20000f08 	.word	0x20000f08
 8002ddc:	20000fb4 	.word	0x20000fb4
 8002de0:	20001000 	.word	0x20001000
 8002de4:	20000f10 	.word	0x20000f10
 8002de8:	20000f0c 	.word	0x20000f0c
 8002dec:	20000fe0 	.word	0x20000fe0

08002df0 <xTaskCreateStatic>:
	{
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002df6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002df8:	b945      	cbnz	r5, 8002e0c <xTaskCreateStatic+0x1c>
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	e7fe      	b.n	8002e0a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002e0c:	b944      	cbnz	r4, 8002e20 <xTaskCreateStatic+0x30>
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	e7fe      	b.n	8002e1e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e20:	2654      	movs	r6, #84	; 0x54
 8002e22:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e24:	9e04      	ldr	r6, [sp, #16]
 8002e26:	2e54      	cmp	r6, #84	; 0x54
 8002e28:	d008      	beq.n	8002e3c <xTaskCreateStatic+0x4c>
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	e7fe      	b.n	8002e3a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e3c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e3e:	2502      	movs	r5, #2
 8002e40:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e44:	ad05      	add	r5, sp, #20
 8002e46:	9501      	str	r5, [sp, #4]
 8002e48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002e4a:	9402      	str	r4, [sp, #8]
 8002e4c:	9500      	str	r5, [sp, #0]
 8002e4e:	f7ff fefb 	bl	8002c48 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7ff fe6a 	bl	8002b2c <prvAddNewTaskToReadyList>
	}
 8002e58:	9805      	ldr	r0, [sp, #20]
 8002e5a:	b006      	add	sp, #24
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}

08002e5e <xTaskCreate>:
	{
 8002e5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e62:	4607      	mov	r7, r0
 8002e64:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e66:	0090      	lsls	r0, r2, #2
	{
 8002e68:	4688      	mov	r8, r1
 8002e6a:	4616      	mov	r6, r2
 8002e6c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6e:	f7ff fd97 	bl	80029a0 <pvPortMalloc>
			if( pxStack != NULL )
 8002e72:	4605      	mov	r5, r0
 8002e74:	b1e8      	cbz	r0, 8002eb2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e76:	2054      	movs	r0, #84	; 0x54
 8002e78:	f7ff fd92 	bl	80029a0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	b1a8      	cbz	r0, 8002eac <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002e88:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e8e:	9002      	str	r0, [sp, #8]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4632      	mov	r2, r6
 8002e94:	464b      	mov	r3, r9
 8002e96:	4641      	mov	r1, r8
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f7ff fed5 	bl	8002c48 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff fe44 	bl	8002b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ea4:	2001      	movs	r0, #1
	}
 8002ea6:	b005      	add	sp, #20
 8002ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002eac:	4628      	mov	r0, r5
 8002eae:	f7ff fe05 	bl	8002abc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eb2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002eb6:	e7f6      	b.n	8002ea6 <xTaskCreate+0x48>

08002eb8 <vTaskStartScheduler>:
{
 8002eb8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002eba:	2400      	movs	r4, #0
{
 8002ebc:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ebe:	aa07      	add	r2, sp, #28
 8002ec0:	a906      	add	r1, sp, #24
 8002ec2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ec4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ec6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ec8:	f7fe f960 	bl	800118c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ecc:	9b05      	ldr	r3, [sp, #20]
 8002ece:	9400      	str	r4, [sp, #0]
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	9b06      	ldr	r3, [sp, #24]
 8002ed4:	9a07      	ldr	r2, [sp, #28]
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	490d      	ldr	r1, [pc, #52]	; (8002f10 <vTaskStartScheduler+0x58>)
 8002eda:	4623      	mov	r3, r4
 8002edc:	480d      	ldr	r0, [pc, #52]	; (8002f14 <vTaskStartScheduler+0x5c>)
 8002ede:	f7ff ff87 	bl	8002df0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002ee2:	b190      	cbz	r0, 8002f0a <vTaskStartScheduler+0x52>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <vTaskStartScheduler+0x60>)
 8002efa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002efc:	2201      	movs	r2, #1
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <vTaskStartScheduler+0x64>)
 8002f00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <vTaskStartScheduler+0x68>)
 8002f04:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002f06:	f7ff fccd 	bl	80028a4 <xPortStartScheduler>
}
 8002f0a:	b008      	add	sp, #32
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	080033c8 	.word	0x080033c8
 8002f14:	08002d01 	.word	0x08002d01
 8002f18:	20000fe0 	.word	0x20000fe0
 8002f1c:	20000ffc 	.word	0x20000ffc
 8002f20:	20001028 	.word	0x20001028

08002f24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <vTaskSuspendAll+0xc>)
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000fac 	.word	0x20000fac

08002f34 <xTaskIncrementTick>:
{
 8002f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <xTaskIncrementTick+0xf8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d153      	bne.n	8002fe8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f40:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <xTaskIncrementTick+0xfc>)
 8002f42:	681c      	ldr	r4, [r3, #0]
 8002f44:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002f46:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f48:	b9bc      	cbnz	r4, 8002f7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <xTaskIncrementTick+0x100>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	b142      	cbz	r2, 8002f64 <xTaskIncrementTick+0x30>
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	e7fe      	b.n	8002f62 <xTaskIncrementTick+0x2e>
 8002f64:	4a34      	ldr	r2, [pc, #208]	; (8003038 <xTaskIncrementTick+0x104>)
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	6810      	ldr	r0, [r2, #0]
 8002f6a:	6018      	str	r0, [r3, #0]
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <xTaskIncrementTick+0x108>)
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	f7ff fe55 	bl	8002c24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f7a:	4d31      	ldr	r5, [pc, #196]	; (8003040 <xTaskIncrementTick+0x10c>)
 8002f7c:	f04f 0b00 	mov.w	fp, #0
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	4f30      	ldr	r7, [pc, #192]	; (8003044 <xTaskIncrementTick+0x110>)
 8002f84:	429c      	cmp	r4, r3
 8002f86:	d33e      	bcc.n	8003006 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f88:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003034 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002f8c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003054 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f90:	f8d8 2000 	ldr.w	r2, [r8]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	bb72      	cbnz	r2, 8002ff6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	602a      	str	r2, [r5, #0]
					break;
 8002f9e:	e032      	b.n	8003006 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fa0:	f106 0a04 	add.w	sl, r6, #4
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	f7ff fb8f 	bl	80026c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002faa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002fac:	b119      	cbz	r1, 8002fb6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fae:	f106 0018 	add.w	r0, r6, #24
 8002fb2:	f7ff fb89 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f04f 0e14 	mov.w	lr, #20
 8002fbc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002fbe:	f8d9 3000 	ldr.w	r3, [r9]
 8002fc2:	fa02 f100 	lsl.w	r1, r2, r0
 8002fc6:	4319      	orrs	r1, r3
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <xTaskIncrementTick+0x114>)
 8002fca:	f8c9 1000 	str.w	r1, [r9]
 8002fce:	fb0e 3000 	mla	r0, lr, r0, r3
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	f7ff fb55 	bl	8002682 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002fdc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	bf28      	it	cs
 8002fe2:	f04f 0b01 	movcs.w	fp, #1
 8002fe6:	e7d3      	b.n	8002f90 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8002fea:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e011      	b.n	800301a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ff6:	f8d8 2000 	ldr.w	r2, [r8]
 8002ffa:	68d2      	ldr	r2, [r2, #12]
 8002ffc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ffe:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003000:	428c      	cmp	r4, r1
 8003002:	d2cd      	bcs.n	8002fa0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003004:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <xTaskIncrementTick+0x114>)
 800300a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800300c:	2214      	movs	r2, #20
 800300e:	434a      	muls	r2, r1
 8003010:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003012:	2a02      	cmp	r2, #2
 8003014:	bf28      	it	cs
 8003016:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800301a:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <xTaskIncrementTick+0x11c>)
 800301c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800301e:	2a00      	cmp	r2, #0
 8003020:	bf18      	it	ne
 8003022:	f04f 0b01 	movne.w	fp, #1
}
 8003026:	4658      	mov	r0, fp
 8003028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302c:	20000fac 	.word	0x20000fac
 8003030:	20001028 	.word	0x20001028
 8003034:	20000f0c 	.word	0x20000f0c
 8003038:	20000f10 	.word	0x20000f10
 800303c:	20000fe4 	.word	0x20000fe4
 8003040:	20000fe0 	.word	0x20000fe0
 8003044:	20000f08 	.word	0x20000f08
 8003048:	20000f14 	.word	0x20000f14
 800304c:	20000fa8 	.word	0x20000fa8
 8003050:	2000102c 	.word	0x2000102c
 8003054:	20000fb4 	.word	0x20000fb4

08003058 <xTaskResumeAll>:
{
 8003058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800305c:	4c31      	ldr	r4, [pc, #196]	; (8003124 <xTaskResumeAll+0xcc>)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	b943      	cbnz	r3, 8003074 <xTaskResumeAll+0x1c>
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	e7fe      	b.n	8003072 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003074:	f7ff fb8e 	bl	8002794 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307e:	6824      	ldr	r4, [r4, #0]
 8003080:	b12c      	cbz	r4, 800308e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003082:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003084:	f7ff fba8 	bl	80027d8 <vPortExitCritical>
}
 8003088:	4620      	mov	r0, r4
 800308a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <xTaskResumeAll+0xd0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f5      	beq.n	8003082 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003096:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003140 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800309a:	4f24      	ldr	r7, [pc, #144]	; (800312c <xTaskResumeAll+0xd4>)
 800309c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003144 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030a0:	f8d9 3000 	ldr.w	r3, [r9]
 80030a4:	b9e3      	cbnz	r3, 80030e0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80030a6:	b10c      	cbz	r4, 80030ac <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80030a8:	f7ff fdbc 	bl	8002c24 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030ac:	4d20      	ldr	r5, [pc, #128]	; (8003130 <xTaskResumeAll+0xd8>)
 80030ae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030b0:	b144      	cbz	r4, 80030c4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80030b2:	2701      	movs	r7, #1
 80030b4:	4e1f      	ldr	r6, [pc, #124]	; (8003134 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80030b6:	f7ff ff3d 	bl	8002f34 <xTaskIncrementTick>
 80030ba:	b100      	cbz	r0, 80030be <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80030bc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030be:	3c01      	subs	r4, #1
 80030c0:	d1f9      	bne.n	80030b6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80030c2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <xTaskResumeAll+0xdc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0da      	beq.n	8003082 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <xTaskResumeAll+0xe0>)
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80030dc:	2401      	movs	r4, #1
 80030de:	e7d1      	b.n	8003084 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80030e4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ea:	f104 0018 	add.w	r0, r4, #24
 80030ee:	f7ff faeb 	bl	80026c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f2:	4630      	mov	r0, r6
 80030f4:	f7ff fae8 	bl	80026c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030f8:	2014      	movs	r0, #20
 80030fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	fa05 f302 	lsl.w	r3, r5, r2
 8003102:	430b      	orrs	r3, r1
 8003104:	fb00 8002 	mla	r0, r0, r2, r8
 8003108:	4631      	mov	r1, r6
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	f7ff fab9 	bl	8002682 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <xTaskResumeAll+0xe4>)
 8003112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800311a:	bf24      	itt	cs
 800311c:	4b05      	ldrcs	r3, [pc, #20]	; (8003134 <xTaskResumeAll+0xdc>)
 800311e:	601d      	strcs	r5, [r3, #0]
 8003120:	e7be      	b.n	80030a0 <xTaskResumeAll+0x48>
 8003122:	bf00      	nop
 8003124:	20000fac 	.word	0x20000fac
 8003128:	20000fa0 	.word	0x20000fa0
 800312c:	20000fb4 	.word	0x20000fb4
 8003130:	20000fa8 	.word	0x20000fa8
 8003134:	2000102c 	.word	0x2000102c
 8003138:	e000ed04 	.word	0xe000ed04
 800313c:	20000f08 	.word	0x20000f08
 8003140:	20000fe8 	.word	0x20000fe8
 8003144:	20000f14 	.word	0x20000f14

08003148 <vTaskDelay>:
	{
 8003148:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800314a:	b940      	cbnz	r0, 800315e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800314c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <vTaskDelay+0x40>)
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <vTaskDelay+0x44>)
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	b141      	cbz	r1, 8003176 <vTaskDelay+0x2e>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	e7fe      	b.n	8003174 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003176:	f7ff fed5 	bl	8002f24 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800317a:	f7ff fdf3 	bl	8002d64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800317e:	f7ff ff6b 	bl	8003058 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003182:	2800      	cmp	r0, #0
 8003184:	d0e2      	beq.n	800314c <vTaskDelay+0x4>
 8003186:	bd08      	pop	{r3, pc}
 8003188:	e000ed04 	.word	0xe000ed04
 800318c:	20000fac 	.word	0x20000fac

08003190 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <vTaskSwitchContext+0x60>)
{
 8003192:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <vTaskSwitchContext+0x64>)
 8003198:	b112      	cbz	r2, 80031a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800319a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80031a0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <vTaskSwitchContext+0x68>)
 80031a4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	2214      	movs	r2, #20
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f1c3 031f 	rsb	r3, r3, #31
 80031b2:	435a      	muls	r2, r3
 80031b4:	4911      	ldr	r1, [pc, #68]	; (80031fc <vTaskSwitchContext+0x6c>)
 80031b6:	588c      	ldr	r4, [r1, r2]
 80031b8:	1888      	adds	r0, r1, r2
 80031ba:	b944      	cbnz	r4, 80031ce <vTaskSwitchContext+0x3e>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	e7fe      	b.n	80031cc <vTaskSwitchContext+0x3c>
 80031ce:	6844      	ldr	r4, [r0, #4]
 80031d0:	3208      	adds	r2, #8
 80031d2:	6864      	ldr	r4, [r4, #4]
 80031d4:	440a      	add	r2, r1
 80031d6:	4294      	cmp	r4, r2
 80031d8:	bf08      	it	eq
 80031da:	6862      	ldreq	r2, [r4, #4]
 80031dc:	6044      	str	r4, [r0, #4]
 80031de:	bf08      	it	eq
 80031e0:	6042      	streq	r2, [r0, #4]
 80031e2:	2214      	movs	r2, #20
 80031e4:	fb02 1303 	mla	r3, r2, r3, r1
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <vTaskSwitchContext+0x70>)
 80031ee:	e7d5      	b.n	800319c <vTaskSwitchContext+0xc>
 80031f0:	20000fac 	.word	0x20000fac
 80031f4:	2000102c 	.word	0x2000102c
 80031f8:	20000fb4 	.word	0x20000fb4
 80031fc:	20000f14 	.word	0x20000f14
 8003200:	20000f08 	.word	0x20000f08

08003204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003204:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003206:	e003      	b.n	8003210 <LoopCopyDataInit>

08003208 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800320a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800320c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800320e:	3104      	adds	r1, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003214:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003216:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003218:	d3f6      	bcc.n	8003208 <CopyDataInit>
  ldr r2, =_sbss
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800321c:	e002      	b.n	8003224 <LoopFillZerobss>

0800321e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003220:	f842 3b04 	str.w	r3, [r2], #4

08003224 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003226:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003228:	d3f9      	bcc.n	800321e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800322a:	f7fe f969 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800322e:	f000 f815 	bl	800325c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003232:	f7fe f84b 	bl	80012cc <main>
  bx lr
 8003236:	4770      	bx	lr
  ldr r3, =_sidata
 8003238:	08003510 	.word	0x08003510
  ldr r0, =_sdata
 800323c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003240:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003244:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8003248:	20001134 	.word	0x20001134

0800324c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800324c:	e7fe      	b.n	800324c <ADC1_2_IRQHandler>
	...

08003250 <__errno>:
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <__errno+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000010 	.word	0x20000010

0800325c <__libc_init_array>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	2500      	movs	r5, #0
 8003260:	4e0c      	ldr	r6, [pc, #48]	; (8003294 <__libc_init_array+0x38>)
 8003262:	4c0d      	ldr	r4, [pc, #52]	; (8003298 <__libc_init_array+0x3c>)
 8003264:	1ba4      	subs	r4, r4, r6
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	42a5      	cmp	r5, r4
 800326a:	d109      	bne.n	8003280 <__libc_init_array+0x24>
 800326c:	f000 f878 	bl	8003360 <_init>
 8003270:	2500      	movs	r5, #0
 8003272:	4e0a      	ldr	r6, [pc, #40]	; (800329c <__libc_init_array+0x40>)
 8003274:	4c0a      	ldr	r4, [pc, #40]	; (80032a0 <__libc_init_array+0x44>)
 8003276:	1ba4      	subs	r4, r4, r6
 8003278:	10a4      	asrs	r4, r4, #2
 800327a:	42a5      	cmp	r5, r4
 800327c:	d105      	bne.n	800328a <__libc_init_array+0x2e>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003284:	4798      	blx	r3
 8003286:	3501      	adds	r5, #1
 8003288:	e7ee      	b.n	8003268 <__libc_init_array+0xc>
 800328a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800328e:	4798      	blx	r3
 8003290:	3501      	adds	r5, #1
 8003292:	e7f2      	b.n	800327a <__libc_init_array+0x1e>
 8003294:	08003508 	.word	0x08003508
 8003298:	08003508 	.word	0x08003508
 800329c:	08003508 	.word	0x08003508
 80032a0:	0800350c 	.word	0x0800350c

080032a4 <memcpy>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	1e43      	subs	r3, r0, #1
 80032a8:	440a      	add	r2, r1
 80032aa:	4291      	cmp	r1, r2
 80032ac:	d100      	bne.n	80032b0 <memcpy+0xc>
 80032ae:	bd10      	pop	{r4, pc}
 80032b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032b8:	e7f7      	b.n	80032aa <memcpy+0x6>

080032ba <memset>:
 80032ba:	4603      	mov	r3, r0
 80032bc:	4402      	add	r2, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	d100      	bne.n	80032c4 <memset+0xa>
 80032c2:	4770      	bx	lr
 80032c4:	f803 1b01 	strb.w	r1, [r3], #1
 80032c8:	e7f9      	b.n	80032be <memset+0x4>

080032ca <abort>:
 80032ca:	b508      	push	{r3, lr}
 80032cc:	2006      	movs	r0, #6
 80032ce:	f000 f82b 	bl	8003328 <raise>
 80032d2:	2001      	movs	r0, #1
 80032d4:	f7fe f90e 	bl	80014f4 <_exit>

080032d8 <_raise_r>:
 80032d8:	291f      	cmp	r1, #31
 80032da:	b538      	push	{r3, r4, r5, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	460d      	mov	r5, r1
 80032e0:	d904      	bls.n	80032ec <_raise_r+0x14>
 80032e2:	2316      	movs	r3, #22
 80032e4:	6003      	str	r3, [r0, #0]
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80032ee:	b112      	cbz	r2, 80032f6 <_raise_r+0x1e>
 80032f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80032f4:	b94b      	cbnz	r3, 800330a <_raise_r+0x32>
 80032f6:	4620      	mov	r0, r4
 80032f8:	f000 f830 	bl	800335c <_getpid_r>
 80032fc:	462a      	mov	r2, r5
 80032fe:	4601      	mov	r1, r0
 8003300:	4620      	mov	r0, r4
 8003302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003306:	f000 b817 	b.w	8003338 <_kill_r>
 800330a:	2b01      	cmp	r3, #1
 800330c:	d00a      	beq.n	8003324 <_raise_r+0x4c>
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	d103      	bne.n	800331a <_raise_r+0x42>
 8003312:	2316      	movs	r3, #22
 8003314:	6003      	str	r3, [r0, #0]
 8003316:	2001      	movs	r0, #1
 8003318:	bd38      	pop	{r3, r4, r5, pc}
 800331a:	2400      	movs	r4, #0
 800331c:	4628      	mov	r0, r5
 800331e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003322:	4798      	blx	r3
 8003324:	2000      	movs	r0, #0
 8003326:	bd38      	pop	{r3, r4, r5, pc}

08003328 <raise>:
 8003328:	4b02      	ldr	r3, [pc, #8]	; (8003334 <raise+0xc>)
 800332a:	4601      	mov	r1, r0
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f7ff bfd3 	b.w	80032d8 <_raise_r>
 8003332:	bf00      	nop
 8003334:	20000010 	.word	0x20000010

08003338 <_kill_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	2300      	movs	r3, #0
 800333c:	4c06      	ldr	r4, [pc, #24]	; (8003358 <_kill_r+0x20>)
 800333e:	4605      	mov	r5, r0
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	f7fe f8cd 	bl	80014e4 <_kill>
 800334a:	1c43      	adds	r3, r0, #1
 800334c:	d102      	bne.n	8003354 <_kill_r+0x1c>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	b103      	cbz	r3, 8003354 <_kill_r+0x1c>
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	bd38      	pop	{r3, r4, r5, pc}
 8003356:	bf00      	nop
 8003358:	20001130 	.word	0x20001130

0800335c <_getpid_r>:
 800335c:	f7fe b8c0 	b.w	80014e0 <_getpid>

08003360 <_init>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr

0800336c <_fini>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr
