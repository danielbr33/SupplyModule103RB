
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e8c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000ec  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000168  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001144  20000080  080054a0  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200011c4  080054a0  000211c4  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001af8a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000045b3  00000000  00000000  0003b033  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001118  00000000  00000000  0003f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001448  00000000  00000000  00040700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009db2  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006551  00000000  00000000  0004b8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00051e4b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ec8  00000000  00000000  00051ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a9ab  00000000  00000000  00055d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f84 	.word	0x08004f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08004f84 	.word	0x08004f84

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <selfrel_offset31>:
 8000164:	6803      	ldr	r3, [r0, #0]
 8000166:	005a      	lsls	r2, r3, #1
 8000168:	bf4c      	ite	mi
 800016a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800016e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000172:	4418      	add	r0, r3
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop

08000178 <search_EIT_table>:
 8000178:	b361      	cbz	r1, 80001d4 <search_EIT_table+0x5c>
 800017a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800017e:	f101 3aff 	add.w	sl, r1, #4294967295
 8000182:	4690      	mov	r8, r2
 8000184:	4606      	mov	r6, r0
 8000186:	46d1      	mov	r9, sl
 8000188:	2700      	movs	r7, #0
 800018a:	eb07 0409 	add.w	r4, r7, r9
 800018e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000192:	1064      	asrs	r4, r4, #1
 8000194:	00e5      	lsls	r5, r4, #3
 8000196:	1971      	adds	r1, r6, r5
 8000198:	4608      	mov	r0, r1
 800019a:	f7ff ffe3 	bl	8000164 <selfrel_offset31>
 800019e:	45a2      	cmp	sl, r4
 80001a0:	4683      	mov	fp, r0
 80001a2:	f105 0008 	add.w	r0, r5, #8
 80001a6:	4430      	add	r0, r6
 80001a8:	d009      	beq.n	80001be <search_EIT_table+0x46>
 80001aa:	f7ff ffdb 	bl	8000164 <selfrel_offset31>
 80001ae:	45c3      	cmp	fp, r8
 80001b0:	f100 30ff 	add.w	r0, r0, #4294967295
 80001b4:	d805      	bhi.n	80001c2 <search_EIT_table+0x4a>
 80001b6:	4540      	cmp	r0, r8
 80001b8:	d209      	bcs.n	80001ce <search_EIT_table+0x56>
 80001ba:	1c67      	adds	r7, r4, #1
 80001bc:	e7e5      	b.n	800018a <search_EIT_table+0x12>
 80001be:	45c3      	cmp	fp, r8
 80001c0:	d905      	bls.n	80001ce <search_EIT_table+0x56>
 80001c2:	42a7      	cmp	r7, r4
 80001c4:	d002      	beq.n	80001cc <search_EIT_table+0x54>
 80001c6:	f104 39ff 	add.w	r9, r4, #4294967295
 80001ca:	e7de      	b.n	800018a <search_EIT_table+0x12>
 80001cc:	2100      	movs	r1, #0
 80001ce:	4608      	mov	r0, r1
 80001d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001d4:	4608      	mov	r0, r1
 80001d6:	4770      	bx	lr

080001d8 <__gnu_unwind_get_pr_addr>:
 80001d8:	2801      	cmp	r0, #1
 80001da:	d007      	beq.n	80001ec <__gnu_unwind_get_pr_addr+0x14>
 80001dc:	2802      	cmp	r0, #2
 80001de:	d007      	beq.n	80001f0 <__gnu_unwind_get_pr_addr+0x18>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__gnu_unwind_get_pr_addr+0x1c>)
 80001e2:	2800      	cmp	r0, #0
 80001e4:	bf0c      	ite	eq
 80001e6:	4618      	moveq	r0, r3
 80001e8:	2000      	movne	r0, #0
 80001ea:	4770      	bx	lr
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <__gnu_unwind_get_pr_addr+0x20>)
 80001ee:	4770      	bx	lr
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <__gnu_unwind_get_pr_addr+0x24>)
 80001f2:	4770      	bx	lr
 80001f4:	080008e9 	.word	0x080008e9
 80001f8:	080008ed 	.word	0x080008ed
 80001fc:	080008f1 	.word	0x080008f1

08000200 <get_eit_entry>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <get_eit_entry+0x98>)
 8000204:	b083      	sub	sp, #12
 8000206:	4604      	mov	r4, r0
 8000208:	1e8d      	subs	r5, r1, #2
 800020a:	b373      	cbz	r3, 800026a <get_eit_entry+0x6a>
 800020c:	a901      	add	r1, sp, #4
 800020e:	4628      	mov	r0, r5
 8000210:	f3af 8000 	nop.w
 8000214:	b318      	cbz	r0, 800025e <get_eit_entry+0x5e>
 8000216:	9901      	ldr	r1, [sp, #4]
 8000218:	462a      	mov	r2, r5
 800021a:	f7ff ffad 	bl	8000178 <search_EIT_table>
 800021e:	4601      	mov	r1, r0
 8000220:	b1e8      	cbz	r0, 800025e <get_eit_entry+0x5e>
 8000222:	f7ff ff9f 	bl	8000164 <selfrel_offset31>
 8000226:	684b      	ldr	r3, [r1, #4]
 8000228:	64a0      	str	r0, [r4, #72]	; 0x48
 800022a:	2b01      	cmp	r3, #1
 800022c:	d011      	beq.n	8000252 <get_eit_entry+0x52>
 800022e:	2b00      	cmp	r3, #0
 8000230:	db22      	blt.n	8000278 <get_eit_entry+0x78>
 8000232:	1d08      	adds	r0, r1, #4
 8000234:	f7ff ff96 	bl	8000164 <selfrel_offset31>
 8000238:	2300      	movs	r3, #0
 800023a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800023c:	6523      	str	r3, [r4, #80]	; 0x50
 800023e:	6803      	ldr	r3, [r0, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	db1e      	blt.n	8000282 <get_eit_entry+0x82>
 8000244:	f7ff ff8e 	bl	8000164 <selfrel_offset31>
 8000248:	2300      	movs	r3, #0
 800024a:	6120      	str	r0, [r4, #16]
 800024c:	4618      	mov	r0, r3
 800024e:	b003      	add	sp, #12
 8000250:	bd30      	pop	{r4, r5, pc}
 8000252:	2305      	movs	r3, #5
 8000254:	2200      	movs	r2, #0
 8000256:	4618      	mov	r0, r3
 8000258:	6122      	str	r2, [r4, #16]
 800025a:	b003      	add	sp, #12
 800025c:	bd30      	pop	{r4, r5, pc}
 800025e:	2309      	movs	r3, #9
 8000260:	2200      	movs	r2, #0
 8000262:	4618      	mov	r0, r3
 8000264:	6122      	str	r2, [r4, #16]
 8000266:	b003      	add	sp, #12
 8000268:	bd30      	pop	{r4, r5, pc}
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <get_eit_entry+0x9c>)
 800026c:	490c      	ldr	r1, [pc, #48]	; (80002a0 <get_eit_entry+0xa0>)
 800026e:	4618      	mov	r0, r3
 8000270:	1ac9      	subs	r1, r1, r3
 8000272:	10c9      	asrs	r1, r1, #3
 8000274:	9101      	str	r1, [sp, #4]
 8000276:	e7cf      	b.n	8000218 <get_eit_entry+0x18>
 8000278:	2301      	movs	r3, #1
 800027a:	1d08      	adds	r0, r1, #4
 800027c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800027e:	6523      	str	r3, [r4, #80]	; 0x50
 8000280:	e7dd      	b.n	800023e <get_eit_entry+0x3e>
 8000282:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000286:	f7ff ffa7 	bl	80001d8 <__gnu_unwind_get_pr_addr>
 800028a:	2800      	cmp	r0, #0
 800028c:	6120      	str	r0, [r4, #16]
 800028e:	bf14      	ite	ne
 8000290:	2300      	movne	r3, #0
 8000292:	2309      	moveq	r3, #9
 8000294:	e7da      	b.n	800024c <get_eit_entry+0x4c>
 8000296:	bf00      	nop
 8000298:	00000000 	.word	0x00000000
 800029c:	080052ac 	.word	0x080052ac
 80002a0:	08005414 	.word	0x08005414

080002a4 <restore_non_core_regs>:
 80002a4:	6803      	ldr	r3, [r0, #0]
 80002a6:	b510      	push	{r4, lr}
 80002a8:	07da      	lsls	r2, r3, #31
 80002aa:	4604      	mov	r4, r0
 80002ac:	d406      	bmi.n	80002bc <restore_non_core_regs+0x18>
 80002ae:	079b      	lsls	r3, r3, #30
 80002b0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002b4:	d509      	bpl.n	80002ca <restore_non_core_regs+0x26>
 80002b6:	f000 fc57 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 80002ba:	6823      	ldr	r3, [r4, #0]
 80002bc:	0759      	lsls	r1, r3, #29
 80002be:	d509      	bpl.n	80002d4 <restore_non_core_regs+0x30>
 80002c0:	071a      	lsls	r2, r3, #28
 80002c2:	d50e      	bpl.n	80002e2 <restore_non_core_regs+0x3e>
 80002c4:	06db      	lsls	r3, r3, #27
 80002c6:	d513      	bpl.n	80002f0 <restore_non_core_regs+0x4c>
 80002c8:	bd10      	pop	{r4, pc}
 80002ca:	f000 fc45 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 80002ce:	6823      	ldr	r3, [r4, #0]
 80002d0:	0759      	lsls	r1, r3, #29
 80002d2:	d4f5      	bmi.n	80002c0 <restore_non_core_regs+0x1c>
 80002d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002d8:	f000 fc4e 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	071a      	lsls	r2, r3, #28
 80002e0:	d4f0      	bmi.n	80002c4 <restore_non_core_regs+0x20>
 80002e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002e6:	f000 fc4f 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 80002ea:	6823      	ldr	r3, [r4, #0]
 80002ec:	06db      	lsls	r3, r3, #27
 80002ee:	d4eb      	bmi.n	80002c8 <restore_non_core_regs+0x24>
 80002f0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002f8:	f000 bc8a 	b.w	8000c10 <__gnu_Unwind_Restore_WMMXC>

080002fc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002fc:	6803      	ldr	r3, [r0, #0]
 80002fe:	b103      	cbz	r3, 8000302 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000300:	4403      	add	r3, r0
 8000302:	4618      	mov	r0, r3
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop

08000308 <__gnu_unwind_24bit.isra.1>:
 8000308:	2009      	movs	r0, #9
 800030a:	4770      	bx	lr

0800030c <_Unwind_DebugHook>:
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <unwind_phase2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4604      	mov	r4, r0
 8000314:	460d      	mov	r5, r1
 8000316:	e008      	b.n	800032a <unwind_phase2+0x1a>
 8000318:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800031a:	6923      	ldr	r3, [r4, #16]
 800031c:	6162      	str	r2, [r4, #20]
 800031e:	4621      	mov	r1, r4
 8000320:	462a      	mov	r2, r5
 8000322:	2001      	movs	r0, #1
 8000324:	4798      	blx	r3
 8000326:	2808      	cmp	r0, #8
 8000328:	d108      	bne.n	800033c <unwind_phase2+0x2c>
 800032a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800032c:	4620      	mov	r0, r4
 800032e:	f7ff ff67 	bl	8000200 <get_eit_entry>
 8000332:	4606      	mov	r6, r0
 8000334:	2800      	cmp	r0, #0
 8000336:	d0ef      	beq.n	8000318 <unwind_phase2+0x8>
 8000338:	f004 fd36 	bl	8004da8 <abort>
 800033c:	2807      	cmp	r0, #7
 800033e:	d1fb      	bne.n	8000338 <unwind_phase2+0x28>
 8000340:	4630      	mov	r0, r6
 8000342:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000344:	f7ff ffe2 	bl	800030c <_Unwind_DebugHook>
 8000348:	1d28      	adds	r0, r5, #4
 800034a:	f000 fbf9 	bl	8000b40 <__restore_core_regs>
 800034e:	bf00      	nop

08000350 <unwind_phase2_forced>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	4605      	mov	r5, r0
 8000356:	2700      	movs	r7, #0
 8000358:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800035c:	ac03      	add	r4, sp, #12
 800035e:	1d0e      	adds	r6, r1, #4
 8000360:	4692      	mov	sl, r2
 8000362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000366:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800036c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000372:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000376:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800037a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800037e:	ac02      	add	r4, sp, #8
 8000380:	4628      	mov	r0, r5
 8000382:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000384:	6027      	str	r7, [r4, #0]
 8000386:	f7ff ff3b 	bl	8000200 <get_eit_entry>
 800038a:	f1ba 0f00 	cmp.w	sl, #0
 800038e:	4607      	mov	r7, r0
 8000390:	bf14      	ite	ne
 8000392:	260a      	movne	r6, #10
 8000394:	2609      	moveq	r6, #9
 8000396:	b17f      	cbz	r7, 80003b8 <unwind_phase2_forced+0x68>
 8000398:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800039a:	f046 0110 	orr.w	r1, r6, #16
 800039e:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003a2:	462a      	mov	r2, r5
 80003a4:	6463      	str	r3, [r4, #68]	; 0x44
 80003a6:	2001      	movs	r0, #1
 80003a8:	462b      	mov	r3, r5
 80003aa:	47c0      	blx	r8
 80003ac:	bb78      	cbnz	r0, 800040e <unwind_phase2_forced+0xbe>
 80003ae:	4638      	mov	r0, r7
 80003b0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003be:	616b      	str	r3, [r5, #20]
 80003c0:	4621      	mov	r1, r4
 80003c2:	a87a      	add	r0, sp, #488	; 0x1e8
 80003c4:	f004 fd38 	bl	8004e38 <memcpy>
 80003c8:	692b      	ldr	r3, [r5, #16]
 80003ca:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003cc:	4629      	mov	r1, r5
 80003ce:	4630      	mov	r0, r6
 80003d0:	4798      	blx	r3
 80003d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003d4:	4682      	mov	sl, r0
 80003d6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003da:	4631      	mov	r1, r6
 80003dc:	6463      	str	r3, [r4, #68]	; 0x44
 80003de:	462a      	mov	r2, r5
 80003e0:	462b      	mov	r3, r5
 80003e2:	2001      	movs	r0, #1
 80003e4:	47c0      	blx	r8
 80003e6:	b990      	cbnz	r0, 800040e <unwind_phase2_forced+0xbe>
 80003e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ec:	a97a      	add	r1, sp, #488	; 0x1e8
 80003ee:	4620      	mov	r0, r4
 80003f0:	f004 fd22 	bl	8004e38 <memcpy>
 80003f4:	f1ba 0f08 	cmp.w	sl, #8
 80003f8:	d106      	bne.n	8000408 <unwind_phase2_forced+0xb8>
 80003fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003fc:	4628      	mov	r0, r5
 80003fe:	f7ff feff 	bl	8000200 <get_eit_entry>
 8000402:	2609      	movs	r6, #9
 8000404:	4607      	mov	r7, r0
 8000406:	e7c6      	b.n	8000396 <unwind_phase2_forced+0x46>
 8000408:	f1ba 0f07 	cmp.w	sl, #7
 800040c:	d005      	beq.n	800041a <unwind_phase2_forced+0xca>
 800040e:	2709      	movs	r7, #9
 8000410:	4638      	mov	r0, r7
 8000412:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	4638      	mov	r0, r7
 800041c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800041e:	f7ff ff75 	bl	800030c <_Unwind_DebugHook>
 8000422:	a803      	add	r0, sp, #12
 8000424:	f000 fb8c 	bl	8000b40 <__restore_core_regs>

08000428 <_Unwind_GetCFA>:
 8000428:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800042a:	4770      	bx	lr

0800042c <__gnu_Unwind_RaiseException>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	f04f 3eff 	mov.w	lr, #4294967295
 8000432:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000434:	b0f9      	sub	sp, #484	; 0x1e4
 8000436:	640b      	str	r3, [r1, #64]	; 0x40
 8000438:	1d0e      	adds	r6, r1, #4
 800043a:	ad01      	add	r5, sp, #4
 800043c:	460f      	mov	r7, r1
 800043e:	4604      	mov	r4, r0
 8000440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000448:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800044a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800044c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000450:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000454:	f8cd e000 	str.w	lr, [sp]
 8000458:	e006      	b.n	8000468 <__gnu_Unwind_RaiseException+0x3c>
 800045a:	6923      	ldr	r3, [r4, #16]
 800045c:	466a      	mov	r2, sp
 800045e:	4621      	mov	r1, r4
 8000460:	4798      	blx	r3
 8000462:	2808      	cmp	r0, #8
 8000464:	4605      	mov	r5, r0
 8000466:	d108      	bne.n	800047a <__gnu_Unwind_RaiseException+0x4e>
 8000468:	9910      	ldr	r1, [sp, #64]	; 0x40
 800046a:	4620      	mov	r0, r4
 800046c:	f7ff fec8 	bl	8000200 <get_eit_entry>
 8000470:	2800      	cmp	r0, #0
 8000472:	d0f2      	beq.n	800045a <__gnu_Unwind_RaiseException+0x2e>
 8000474:	2009      	movs	r0, #9
 8000476:	b079      	add	sp, #484	; 0x1e4
 8000478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047a:	4668      	mov	r0, sp
 800047c:	f7ff ff12 	bl	80002a4 <restore_non_core_regs>
 8000480:	2d06      	cmp	r5, #6
 8000482:	d1f7      	bne.n	8000474 <__gnu_Unwind_RaiseException+0x48>
 8000484:	4639      	mov	r1, r7
 8000486:	4620      	mov	r0, r4
 8000488:	f7ff ff42 	bl	8000310 <unwind_phase2>

0800048c <__gnu_Unwind_ForcedUnwind>:
 800048c:	b430      	push	{r4, r5}
 800048e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000490:	60c1      	str	r1, [r0, #12]
 8000492:	6182      	str	r2, [r0, #24]
 8000494:	4619      	mov	r1, r3
 8000496:	641d      	str	r5, [r3, #64]	; 0x40
 8000498:	2200      	movs	r2, #0
 800049a:	bc30      	pop	{r4, r5}
 800049c:	e758      	b.n	8000350 <unwind_phase2_forced>
 800049e:	bf00      	nop

080004a0 <__gnu_Unwind_Resume>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	6943      	ldr	r3, [r0, #20]
 80004a4:	68c6      	ldr	r6, [r0, #12]
 80004a6:	640b      	str	r3, [r1, #64]	; 0x40
 80004a8:	b126      	cbz	r6, 80004b4 <__gnu_Unwind_Resume+0x14>
 80004aa:	2201      	movs	r2, #1
 80004ac:	f7ff ff50 	bl	8000350 <unwind_phase2_forced>
 80004b0:	f004 fc7a 	bl	8004da8 <abort>
 80004b4:	6903      	ldr	r3, [r0, #16]
 80004b6:	460a      	mov	r2, r1
 80004b8:	4604      	mov	r4, r0
 80004ba:	460d      	mov	r5, r1
 80004bc:	4601      	mov	r1, r0
 80004be:	2002      	movs	r0, #2
 80004c0:	4798      	blx	r3
 80004c2:	2807      	cmp	r0, #7
 80004c4:	d007      	beq.n	80004d6 <__gnu_Unwind_Resume+0x36>
 80004c6:	2808      	cmp	r0, #8
 80004c8:	d103      	bne.n	80004d2 <__gnu_Unwind_Resume+0x32>
 80004ca:	4629      	mov	r1, r5
 80004cc:	4620      	mov	r0, r4
 80004ce:	f7ff ff1f 	bl	8000310 <unwind_phase2>
 80004d2:	f004 fc69 	bl	8004da8 <abort>
 80004d6:	4630      	mov	r0, r6
 80004d8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004da:	f7ff ff17 	bl	800030c <_Unwind_DebugHook>
 80004de:	1d28      	adds	r0, r5, #4
 80004e0:	f000 fb2e 	bl	8000b40 <__restore_core_regs>

080004e4 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e4:	68c2      	ldr	r2, [r0, #12]
 80004e6:	b12a      	cbz	r2, 80004f4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e8:	b410      	push	{r4}
 80004ea:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004ec:	2200      	movs	r2, #0
 80004ee:	640c      	str	r4, [r1, #64]	; 0x40
 80004f0:	bc10      	pop	{r4}
 80004f2:	e72d      	b.n	8000350 <unwind_phase2_forced>
 80004f4:	e79a      	b.n	800042c <__gnu_Unwind_RaiseException>
 80004f6:	bf00      	nop

080004f8 <_Unwind_Complete>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <_Unwind_DeleteException>:
 80004fc:	6883      	ldr	r3, [r0, #8]
 80004fe:	b113      	cbz	r3, 8000506 <_Unwind_DeleteException+0xa>
 8000500:	4601      	mov	r1, r0
 8000502:	2001      	movs	r0, #1
 8000504:	4718      	bx	r3
 8000506:	4770      	bx	lr

08000508 <_Unwind_VRS_Get>:
 8000508:	b500      	push	{lr}
 800050a:	2904      	cmp	r1, #4
 800050c:	d807      	bhi.n	800051e <_Unwind_VRS_Get+0x16>
 800050e:	e8df f001 	tbb	[pc, r1]
 8000512:	0903      	.short	0x0903
 8000514:	0906      	.short	0x0906
 8000516:	09          	.byte	0x09
 8000517:	00          	.byte	0x00
 8000518:	b90b      	cbnz	r3, 800051e <_Unwind_VRS_Get+0x16>
 800051a:	2a0f      	cmp	r2, #15
 800051c:	d905      	bls.n	800052a <_Unwind_VRS_Get+0x22>
 800051e:	2002      	movs	r0, #2
 8000520:	f85d fb04 	ldr.w	pc, [sp], #4
 8000524:	2001      	movs	r0, #1
 8000526:	f85d fb04 	ldr.w	pc, [sp], #4
 800052a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800052e:	6852      	ldr	r2, [r2, #4]
 8000530:	4618      	mov	r0, r3
 8000532:	9b01      	ldr	r3, [sp, #4]
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	f85d fb04 	ldr.w	pc, [sp], #4
 800053a:	bf00      	nop

0800053c <_Unwind_GetGR>:
 800053c:	2300      	movs	r3, #0
 800053e:	b510      	push	{r4, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	ac03      	add	r4, sp, #12
 8000544:	460a      	mov	r2, r1
 8000546:	9400      	str	r4, [sp, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f7ff ffdd 	bl	8000508 <_Unwind_VRS_Get>
 800054e:	9803      	ldr	r0, [sp, #12]
 8000550:	b004      	add	sp, #16
 8000552:	bd10      	pop	{r4, pc}

08000554 <_Unwind_VRS_Set>:
 8000554:	b500      	push	{lr}
 8000556:	2904      	cmp	r1, #4
 8000558:	d807      	bhi.n	800056a <_Unwind_VRS_Set+0x16>
 800055a:	e8df f001 	tbb	[pc, r1]
 800055e:	0903      	.short	0x0903
 8000560:	0906      	.short	0x0906
 8000562:	09          	.byte	0x09
 8000563:	00          	.byte	0x00
 8000564:	b90b      	cbnz	r3, 800056a <_Unwind_VRS_Set+0x16>
 8000566:	2a0f      	cmp	r2, #15
 8000568:	d905      	bls.n	8000576 <_Unwind_VRS_Set+0x22>
 800056a:	2002      	movs	r0, #2
 800056c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000570:	2001      	movs	r0, #1
 8000572:	f85d fb04 	ldr.w	pc, [sp], #4
 8000576:	9901      	ldr	r1, [sp, #4]
 8000578:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800057c:	6809      	ldr	r1, [r1, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	6051      	str	r1, [r2, #4]
 8000582:	f85d fb04 	ldr.w	pc, [sp], #4
 8000586:	bf00      	nop

08000588 <_Unwind_SetGR>:
 8000588:	2300      	movs	r3, #0
 800058a:	b510      	push	{r4, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	ac04      	add	r4, sp, #16
 8000590:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000594:	9400      	str	r4, [sp, #0]
 8000596:	460a      	mov	r2, r1
 8000598:	4619      	mov	r1, r3
 800059a:	f7ff ffdb 	bl	8000554 <_Unwind_VRS_Set>
 800059e:	b004      	add	sp, #16
 80005a0:	bd10      	pop	{r4, pc}
 80005a2:	bf00      	nop

080005a4 <__gnu_Unwind_Backtrace>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	f04f 3eff 	mov.w	lr, #4294967295
 80005aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005ac:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
 80005b2:	1d15      	adds	r5, r2, #4
 80005b4:	ac17      	add	r4, sp, #92	; 0x5c
 80005b6:	4607      	mov	r7, r0
 80005b8:	460e      	mov	r6, r1
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ce:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005d2:	e012      	b.n	80005fa <__gnu_Unwind_Backtrace+0x56>
 80005d4:	210c      	movs	r1, #12
 80005d6:	a816      	add	r0, sp, #88	; 0x58
 80005d8:	466a      	mov	r2, sp
 80005da:	f7ff ffd5 	bl	8000588 <_Unwind_SetGR>
 80005de:	4631      	mov	r1, r6
 80005e0:	a816      	add	r0, sp, #88	; 0x58
 80005e2:	47b8      	blx	r7
 80005e4:	b978      	cbnz	r0, 8000606 <__gnu_Unwind_Backtrace+0x62>
 80005e6:	9b04      	ldr	r3, [sp, #16]
 80005e8:	aa16      	add	r2, sp, #88	; 0x58
 80005ea:	4669      	mov	r1, sp
 80005ec:	2008      	movs	r0, #8
 80005ee:	4798      	blx	r3
 80005f0:	2805      	cmp	r0, #5
 80005f2:	4604      	mov	r4, r0
 80005f4:	d008      	beq.n	8000608 <__gnu_Unwind_Backtrace+0x64>
 80005f6:	2809      	cmp	r0, #9
 80005f8:	d005      	beq.n	8000606 <__gnu_Unwind_Backtrace+0x62>
 80005fa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005fc:	4668      	mov	r0, sp
 80005fe:	f7ff fdff 	bl	8000200 <get_eit_entry>
 8000602:	2800      	cmp	r0, #0
 8000604:	d0e6      	beq.n	80005d4 <__gnu_Unwind_Backtrace+0x30>
 8000606:	2409      	movs	r4, #9
 8000608:	a816      	add	r0, sp, #88	; 0x58
 800060a:	f7ff fe4b 	bl	80002a4 <restore_non_core_regs>
 800060e:	4620      	mov	r0, r4
 8000610:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop

08000618 <__gnu_unwind_pr_common>:
 8000618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800061c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800061e:	4691      	mov	r9, r2
 8000620:	6822      	ldr	r2, [r4, #0]
 8000622:	b08b      	sub	sp, #44	; 0x2c
 8000624:	3404      	adds	r4, #4
 8000626:	460d      	mov	r5, r1
 8000628:	9207      	str	r2, [sp, #28]
 800062a:	9408      	str	r4, [sp, #32]
 800062c:	f000 0b03 	and.w	fp, r0, #3
 8000630:	461e      	mov	r6, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d160      	bne.n	80006f8 <__gnu_unwind_pr_common+0xe0>
 8000636:	2303      	movs	r3, #3
 8000638:	0212      	lsls	r2, r2, #8
 800063a:	9207      	str	r2, [sp, #28]
 800063c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000640:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000644:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000646:	f1bb 0f02 	cmp.w	fp, #2
 800064a:	bf08      	it	eq
 800064c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800064e:	f013 0301 	ands.w	r3, r3, #1
 8000652:	d140      	bne.n	80006d6 <__gnu_unwind_pr_common+0xbe>
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f000 0308 	and.w	r3, r0, #8
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	f8d4 8000 	ldr.w	r8, [r4]
 8000660:	f1b8 0f00 	cmp.w	r8, #0
 8000664:	d039      	beq.n	80006da <__gnu_unwind_pr_common+0xc2>
 8000666:	2e02      	cmp	r6, #2
 8000668:	d043      	beq.n	80006f2 <__gnu_unwind_pr_common+0xda>
 800066a:	f8b4 8000 	ldrh.w	r8, [r4]
 800066e:	8867      	ldrh	r7, [r4, #2]
 8000670:	3404      	adds	r4, #4
 8000672:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000674:	f027 0a01 	bic.w	sl, r7, #1
 8000678:	210f      	movs	r1, #15
 800067a:	4648      	mov	r0, r9
 800067c:	449a      	add	sl, r3
 800067e:	f7ff ff5d 	bl	800053c <_Unwind_GetGR>
 8000682:	4582      	cmp	sl, r0
 8000684:	d833      	bhi.n	80006ee <__gnu_unwind_pr_common+0xd6>
 8000686:	f028 0301 	bic.w	r3, r8, #1
 800068a:	449a      	add	sl, r3
 800068c:	4550      	cmp	r0, sl
 800068e:	bf2c      	ite	cs
 8000690:	2000      	movcs	r0, #0
 8000692:	2001      	movcc	r0, #1
 8000694:	007f      	lsls	r7, r7, #1
 8000696:	f007 0702 	and.w	r7, r7, #2
 800069a:	f008 0801 	and.w	r8, r8, #1
 800069e:	ea47 0708 	orr.w	r7, r7, r8
 80006a2:	2f01      	cmp	r7, #1
 80006a4:	d03e      	beq.n	8000724 <__gnu_unwind_pr_common+0x10c>
 80006a6:	d335      	bcc.n	8000714 <__gnu_unwind_pr_common+0xfc>
 80006a8:	2f02      	cmp	r7, #2
 80006aa:	d11c      	bne.n	80006e6 <__gnu_unwind_pr_common+0xce>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006b2:	9202      	str	r2, [sp, #8]
 80006b4:	f1bb 0f00 	cmp.w	fp, #0
 80006b8:	d176      	bne.n	80007a8 <__gnu_unwind_pr_common+0x190>
 80006ba:	b128      	cbz	r0, 80006c8 <__gnu_unwind_pr_common+0xb0>
 80006bc:	9903      	ldr	r1, [sp, #12]
 80006be:	2900      	cmp	r1, #0
 80006c0:	d07e      	beq.n	80007c0 <__gnu_unwind_pr_common+0x1a8>
 80006c2:	2a00      	cmp	r2, #0
 80006c4:	f000 80a6 	beq.w	8000814 <__gnu_unwind_pr_common+0x1fc>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db77      	blt.n	80007bc <__gnu_unwind_pr_common+0x1a4>
 80006cc:	9b02      	ldr	r3, [sp, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006d4:	e7c2      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2e02      	cmp	r6, #2
 80006dc:	dd3e      	ble.n	800075c <__gnu_unwind_pr_common+0x144>
 80006de:	f7ff fe13 	bl	8000308 <__gnu_unwind_24bit.isra.1>
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d040      	beq.n	8000768 <__gnu_unwind_pr_common+0x150>
 80006e6:	2009      	movs	r0, #9
 80006e8:	b00b      	add	sp, #44	; 0x2c
 80006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ee:	2000      	movs	r0, #0
 80006f0:	e7d0      	b.n	8000694 <__gnu_unwind_pr_common+0x7c>
 80006f2:	6867      	ldr	r7, [r4, #4]
 80006f4:	3408      	adds	r4, #8
 80006f6:	e7bc      	b.n	8000672 <__gnu_unwind_pr_common+0x5a>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	dca3      	bgt.n	8000644 <__gnu_unwind_pr_common+0x2c>
 80006fc:	2102      	movs	r1, #2
 80006fe:	0c13      	lsrs	r3, r2, #16
 8000700:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000704:	0412      	lsls	r2, r2, #16
 8000706:	b2db      	uxtb	r3, r3
 8000708:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800070c:	9207      	str	r2, [sp, #28]
 800070e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000712:	e797      	b.n	8000644 <__gnu_unwind_pr_common+0x2c>
 8000714:	f1bb 0f00 	cmp.w	fp, #0
 8000718:	d002      	beq.n	8000720 <__gnu_unwind_pr_common+0x108>
 800071a:	2800      	cmp	r0, #0
 800071c:	f040 80bd 	bne.w	800089a <__gnu_unwind_pr_common+0x282>
 8000720:	3404      	adds	r4, #4
 8000722:	e79b      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 8000724:	f1bb 0f00 	cmp.w	fp, #0
 8000728:	d125      	bne.n	8000776 <__gnu_unwind_pr_common+0x15e>
 800072a:	b1a8      	cbz	r0, 8000758 <__gnu_unwind_pr_common+0x140>
 800072c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000730:	1c99      	adds	r1, r3, #2
 8000732:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000736:	d0d6      	beq.n	80006e6 <__gnu_unwind_pr_common+0xce>
 8000738:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800073c:	3301      	adds	r3, #1
 800073e:	9106      	str	r1, [sp, #24]
 8000740:	f000 80a3 	beq.w	800088a <__gnu_unwind_pr_common+0x272>
 8000744:	1d20      	adds	r0, r4, #4
 8000746:	f7ff fdd9 	bl	80002fc <_Unwind_decode_typeinfo_ptr.isra.0>
 800074a:	ab06      	add	r3, sp, #24
 800074c:	4601      	mov	r1, r0
 800074e:	4628      	mov	r0, r5
 8000750:	f003 fec8 	bl	80044e4 <__cxa_type_match>
 8000754:	2800      	cmp	r0, #0
 8000756:	d177      	bne.n	8000848 <__gnu_unwind_pr_common+0x230>
 8000758:	3408      	adds	r4, #8
 800075a:	e77f      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 800075c:	a907      	add	r1, sp, #28
 800075e:	4648      	mov	r0, r9
 8000760:	f000 faf0 	bl	8000d44 <__gnu_unwind_execute>
 8000764:	2800      	cmp	r0, #0
 8000766:	d1be      	bne.n	80006e6 <__gnu_unwind_pr_common+0xce>
 8000768:	9b01      	ldr	r3, [sp, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d15c      	bne.n	8000828 <__gnu_unwind_pr_common+0x210>
 800076e:	2008      	movs	r0, #8
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000776:	210d      	movs	r1, #13
 8000778:	4648      	mov	r0, r9
 800077a:	6a2f      	ldr	r7, [r5, #32]
 800077c:	f7ff fede 	bl	800053c <_Unwind_GetGR>
 8000780:	4287      	cmp	r7, r0
 8000782:	d1e9      	bne.n	8000758 <__gnu_unwind_pr_common+0x140>
 8000784:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000786:	429c      	cmp	r4, r3
 8000788:	d1e6      	bne.n	8000758 <__gnu_unwind_pr_common+0x140>
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff fcea 	bl	8000164 <selfrel_offset31>
 8000790:	210f      	movs	r1, #15
 8000792:	4602      	mov	r2, r0
 8000794:	4648      	mov	r0, r9
 8000796:	f7ff fef7 	bl	8000588 <_Unwind_SetGR>
 800079a:	4648      	mov	r0, r9
 800079c:	462a      	mov	r2, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	f7ff fef2 	bl	8000588 <_Unwind_SetGR>
 80007a4:	2007      	movs	r0, #7
 80007a6:	e79f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80007a8:	210d      	movs	r1, #13
 80007aa:	4648      	mov	r0, r9
 80007ac:	6a2f      	ldr	r7, [r5, #32]
 80007ae:	f7ff fec5 	bl	800053c <_Unwind_GetGR>
 80007b2:	4287      	cmp	r7, r0
 80007b4:	d058      	beq.n	8000868 <__gnu_unwind_pr_common+0x250>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	da87      	bge.n	80006cc <__gnu_unwind_pr_common+0xb4>
 80007bc:	3404      	adds	r4, #4
 80007be:	e785      	b.n	80006cc <__gnu_unwind_pr_common+0xb4>
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	b33b      	cbz	r3, 8000814 <__gnu_unwind_pr_common+0x1fc>
 80007c4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007c8:	1d27      	adds	r7, r4, #4
 80007ca:	f8cd b010 	str.w	fp, [sp, #16]
 80007ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007d2:	46a3      	mov	fp, r4
 80007d4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007d8:	461c      	mov	r4, r3
 80007da:	9605      	str	r6, [sp, #20]
 80007dc:	e002      	b.n	80007e4 <__gnu_unwind_pr_common+0x1cc>
 80007de:	45b2      	cmp	sl, r6
 80007e0:	46b0      	mov	r8, r6
 80007e2:	d016      	beq.n	8000812 <__gnu_unwind_pr_common+0x1fa>
 80007e4:	4638      	mov	r0, r7
 80007e6:	9406      	str	r4, [sp, #24]
 80007e8:	f7ff fd88 	bl	80002fc <_Unwind_decode_typeinfo_ptr.isra.0>
 80007ec:	ab06      	add	r3, sp, #24
 80007ee:	4601      	mov	r1, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	4628      	mov	r0, r5
 80007f4:	f003 fe76 	bl	80044e4 <__cxa_type_match>
 80007f8:	f108 0601 	add.w	r6, r8, #1
 80007fc:	3704      	adds	r7, #4
 80007fe:	2800      	cmp	r0, #0
 8000800:	d0ed      	beq.n	80007de <__gnu_unwind_pr_common+0x1c6>
 8000802:	9b02      	ldr	r3, [sp, #8]
 8000804:	465c      	mov	r4, fp
 8000806:	4543      	cmp	r3, r8
 8000808:	f8dd b010 	ldr.w	fp, [sp, #16]
 800080c:	9e05      	ldr	r6, [sp, #20]
 800080e:	d1d2      	bne.n	80007b6 <__gnu_unwind_pr_common+0x19e>
 8000810:	e000      	b.n	8000814 <__gnu_unwind_pr_common+0x1fc>
 8000812:	465c      	mov	r4, fp
 8000814:	4648      	mov	r0, r9
 8000816:	210d      	movs	r1, #13
 8000818:	f7ff fe90 	bl	800053c <_Unwind_GetGR>
 800081c:	9b06      	ldr	r3, [sp, #24]
 800081e:	6228      	str	r0, [r5, #32]
 8000820:	62ac      	str	r4, [r5, #40]	; 0x28
 8000822:	626b      	str	r3, [r5, #36]	; 0x24
 8000824:	2006      	movs	r0, #6
 8000826:	e75f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000828:	210f      	movs	r1, #15
 800082a:	4648      	mov	r0, r9
 800082c:	f7ff fe86 	bl	800053c <_Unwind_GetGR>
 8000830:	210e      	movs	r1, #14
 8000832:	4602      	mov	r2, r0
 8000834:	4648      	mov	r0, r9
 8000836:	f7ff fea7 	bl	8000588 <_Unwind_SetGR>
 800083a:	4648      	mov	r0, r9
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <__gnu_unwind_pr_common+0x2cc>)
 800083e:	210f      	movs	r1, #15
 8000840:	f7ff fea2 	bl	8000588 <_Unwind_SetGR>
 8000844:	2007      	movs	r0, #7
 8000846:	e74f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000848:	4607      	mov	r7, r0
 800084a:	210d      	movs	r1, #13
 800084c:	4648      	mov	r0, r9
 800084e:	f7ff fe75 	bl	800053c <_Unwind_GetGR>
 8000852:	2f02      	cmp	r7, #2
 8000854:	6228      	str	r0, [r5, #32]
 8000856:	d11d      	bne.n	8000894 <__gnu_unwind_pr_common+0x27c>
 8000858:	462b      	mov	r3, r5
 800085a:	9a06      	ldr	r2, [sp, #24]
 800085c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000860:	626b      	str	r3, [r5, #36]	; 0x24
 8000862:	62ac      	str	r4, [r5, #40]	; 0x28
 8000864:	2006      	movs	r0, #6
 8000866:	e73f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000868:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800086a:	429c      	cmp	r4, r3
 800086c:	d1a3      	bne.n	80007b6 <__gnu_unwind_pr_common+0x19e>
 800086e:	2204      	movs	r2, #4
 8000870:	2700      	movs	r7, #0
 8000872:	9902      	ldr	r1, [sp, #8]
 8000874:	18a3      	adds	r3, r4, r2
 8000876:	62a9      	str	r1, [r5, #40]	; 0x28
 8000878:	62ef      	str	r7, [r5, #44]	; 0x2c
 800087a:	632a      	str	r2, [r5, #48]	; 0x30
 800087c:	636b      	str	r3, [r5, #52]	; 0x34
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	42bb      	cmp	r3, r7
 8000882:	db1d      	blt.n	80008c0 <__gnu_unwind_pr_common+0x2a8>
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	e720      	b.n	80006cc <__gnu_unwind_pr_common+0xb4>
 800088a:	4648      	mov	r0, r9
 800088c:	210d      	movs	r1, #13
 800088e:	f7ff fe55 	bl	800053c <_Unwind_GetGR>
 8000892:	6228      	str	r0, [r5, #32]
 8000894:	9b06      	ldr	r3, [sp, #24]
 8000896:	626b      	str	r3, [r5, #36]	; 0x24
 8000898:	e7e3      	b.n	8000862 <__gnu_unwind_pr_common+0x24a>
 800089a:	4620      	mov	r0, r4
 800089c:	f7ff fc62 	bl	8000164 <selfrel_offset31>
 80008a0:	3404      	adds	r4, #4
 80008a2:	4606      	mov	r6, r0
 80008a4:	63ac      	str	r4, [r5, #56]	; 0x38
 80008a6:	4628      	mov	r0, r5
 80008a8:	f003 fe7a 	bl	80045a0 <__cxa_begin_cleanup>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	f43f af1a 	beq.w	80006e6 <__gnu_unwind_pr_common+0xce>
 80008b2:	4648      	mov	r0, r9
 80008b4:	4632      	mov	r2, r6
 80008b6:	210f      	movs	r1, #15
 80008b8:	f7ff fe66 	bl	8000588 <_Unwind_SetGR>
 80008bc:	2007      	movs	r0, #7
 80008be:	e713      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80008c0:	4608      	mov	r0, r1
 80008c2:	3001      	adds	r0, #1
 80008c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008c8:	f7ff fc4c 	bl	8000164 <selfrel_offset31>
 80008cc:	210f      	movs	r1, #15
 80008ce:	4602      	mov	r2, r0
 80008d0:	4648      	mov	r0, r9
 80008d2:	f7ff fe59 	bl	8000588 <_Unwind_SetGR>
 80008d6:	4648      	mov	r0, r9
 80008d8:	462a      	mov	r2, r5
 80008da:	4639      	mov	r1, r7
 80008dc:	f7ff fe54 	bl	8000588 <_Unwind_SetGR>
 80008e0:	2007      	movs	r0, #7
 80008e2:	e701      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80008e4:	08004ca1 	.word	0x08004ca1

080008e8 <__aeabi_unwind_cpp_pr0>:
 80008e8:	2300      	movs	r3, #0
 80008ea:	e695      	b.n	8000618 <__gnu_unwind_pr_common>

080008ec <__aeabi_unwind_cpp_pr1>:
 80008ec:	2301      	movs	r3, #1
 80008ee:	e693      	b.n	8000618 <__gnu_unwind_pr_common>

080008f0 <__aeabi_unwind_cpp_pr2>:
 80008f0:	2302      	movs	r3, #2
 80008f2:	e691      	b.n	8000618 <__gnu_unwind_pr_common>

080008f4 <_Unwind_VRS_Pop>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	b0c5      	sub	sp, #276	; 0x114
 80008fa:	2904      	cmp	r1, #4
 80008fc:	d80d      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 80008fe:	e8df f001 	tbb	[pc, r1]
 8000902:	0355      	.short	0x0355
 8000904:	310c      	.short	0x310c
 8000906:	0f          	.byte	0x0f
 8000907:	00          	.byte	0x00
 8000908:	2b01      	cmp	r3, #1
 800090a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800090e:	b295      	uxth	r5, r2
 8000910:	d164      	bne.n	80009dc <_Unwind_VRS_Pop+0xe8>
 8000912:	1972      	adds	r2, r6, r5
 8000914:	2a10      	cmp	r2, #16
 8000916:	f240 809d 	bls.w	8000a54 <_Unwind_VRS_Pop+0x160>
 800091a:	2002      	movs	r0, #2
 800091c:	b045      	add	sp, #276	; 0x114
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1fa      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 8000924:	2a10      	cmp	r2, #16
 8000926:	d8f8      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	06d8      	lsls	r0, r3, #27
 800092c:	f100 80c8 	bmi.w	8000ac0 <_Unwind_VRS_Pop+0x1cc>
 8000930:	ae22      	add	r6, sp, #136	; 0x88
 8000932:	4630      	mov	r0, r6
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	2501      	movs	r5, #1
 8000938:	f000 f974 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 800093c:	2300      	movs	r3, #0
 800093e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000940:	9a01      	ldr	r2, [sp, #4]
 8000942:	fa05 f103 	lsl.w	r1, r5, r3
 8000946:	4211      	tst	r1, r2
 8000948:	d003      	beq.n	8000952 <_Unwind_VRS_Pop+0x5e>
 800094a:	6801      	ldr	r1, [r0, #0]
 800094c:	3004      	adds	r0, #4
 800094e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000952:	3301      	adds	r3, #1
 8000954:	2b04      	cmp	r3, #4
 8000956:	d1f4      	bne.n	8000942 <_Unwind_VRS_Pop+0x4e>
 8000958:	63a0      	str	r0, [r4, #56]	; 0x38
 800095a:	4630      	mov	r0, r6
 800095c:	f000 f958 	bl	8000c10 <__gnu_Unwind_Restore_WMMXC>
 8000960:	2000      	movs	r0, #0
 8000962:	e7db      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 8000964:	2b03      	cmp	r3, #3
 8000966:	d1d8      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 8000968:	0c15      	lsrs	r5, r2, #16
 800096a:	b297      	uxth	r7, r2
 800096c:	19eb      	adds	r3, r5, r7
 800096e:	2b10      	cmp	r3, #16
 8000970:	d8d3      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	071e      	lsls	r6, r3, #28
 8000976:	f100 80b7 	bmi.w	8000ae8 <_Unwind_VRS_Pop+0x1f4>
 800097a:	ae22      	add	r6, sp, #136	; 0x88
 800097c:	4630      	mov	r0, r6
 800097e:	f000 f925 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000982:	00ed      	lsls	r5, r5, #3
 8000984:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000986:	b15f      	cbz	r7, 80009a0 <_Unwind_VRS_Pop+0xac>
 8000988:	3d04      	subs	r5, #4
 800098a:	4603      	mov	r3, r0
 800098c:	1971      	adds	r1, r6, r5
 800098e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000992:	f853 2b04 	ldr.w	r2, [r3], #4
 8000996:	4283      	cmp	r3, r0
 8000998:	f841 2f04 	str.w	r2, [r1, #4]!
 800099c:	d1f9      	bne.n	8000992 <_Unwind_VRS_Pop+0x9e>
 800099e:	4618      	mov	r0, r3
 80009a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80009a2:	4630      	mov	r0, r6
 80009a4:	f000 f8f0 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7b7      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1b4      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 80009b0:	2701      	movs	r7, #1
 80009b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80009b4:	b296      	uxth	r6, r2
 80009b6:	1d20      	adds	r0, r4, #4
 80009b8:	fa07 f103 	lsl.w	r1, r7, r3
 80009bc:	4231      	tst	r1, r6
 80009be:	f103 0301 	add.w	r3, r3, #1
 80009c2:	d002      	beq.n	80009ca <_Unwind_VRS_Pop+0xd6>
 80009c4:	6829      	ldr	r1, [r5, #0]
 80009c6:	3504      	adds	r5, #4
 80009c8:	6001      	str	r1, [r0, #0]
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	f100 0004 	add.w	r0, r0, #4
 80009d0:	d1f2      	bne.n	80009b8 <_Unwind_VRS_Pop+0xc4>
 80009d2:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009d6:	d13b      	bne.n	8000a50 <_Unwind_VRS_Pop+0x15c>
 80009d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80009da:	e79f      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 80009dc:	2b05      	cmp	r3, #5
 80009de:	d19c      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 80009e0:	1977      	adds	r7, r6, r5
 80009e2:	2f20      	cmp	r7, #32
 80009e4:	d899      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 80009e6:	2e0f      	cmp	r6, #15
 80009e8:	d966      	bls.n	8000ab8 <_Unwind_VRS_Pop+0x1c4>
 80009ea:	462f      	mov	r7, r5
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d13a      	bne.n	8000a66 <_Unwind_VRS_Pop+0x172>
 80009f0:	462a      	mov	r2, r5
 80009f2:	2700      	movs	r7, #0
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009f8:	dd72      	ble.n	8000ae0 <_Unwind_VRS_Pop+0x1ec>
 80009fa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009fe:	4601      	mov	r1, r0
 8000a00:	a844      	add	r0, sp, #272	; 0x110
 8000a02:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a06:	388c      	subs	r0, #140	; 0x8c
 8000a08:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a0c:	4291      	cmp	r1, r2
 8000a0e:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a12:	d1f9      	bne.n	8000a08 <_Unwind_VRS_Pop+0x114>
 8000a14:	4608      	mov	r0, r1
 8000a16:	b197      	cbz	r7, 8000a3e <_Unwind_VRS_Pop+0x14a>
 8000a18:	2e10      	cmp	r6, #16
 8000a1a:	4632      	mov	r2, r6
 8000a1c:	bf38      	it	cc
 8000a1e:	2210      	movcc	r2, #16
 8000a20:	a944      	add	r1, sp, #272	; 0x110
 8000a22:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a26:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a2a:	0079      	lsls	r1, r7, #1
 8000a2c:	3a04      	subs	r2, #4
 8000a2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a32:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a36:	4288      	cmp	r0, r1
 8000a38:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a3c:	d1f9      	bne.n	8000a32 <_Unwind_VRS_Pop+0x13e>
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d048      	beq.n	8000ad4 <_Unwind_VRS_Pop+0x1e0>
 8000a42:	2e0f      	cmp	r6, #15
 8000a44:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a46:	d933      	bls.n	8000ab0 <_Unwind_VRS_Pop+0x1bc>
 8000a48:	b117      	cbz	r7, 8000a50 <_Unwind_VRS_Pop+0x15c>
 8000a4a:	a802      	add	r0, sp, #8
 8000a4c:	f000 f894 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e763      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 8000a54:	2e0f      	cmp	r6, #15
 8000a56:	f63f af60 	bhi.w	800091a <_Unwind_VRS_Pop+0x26>
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	6822      	ldr	r2, [r4, #0]
 8000a5e:	07d1      	lsls	r1, r2, #31
 8000a60:	d417      	bmi.n	8000a92 <_Unwind_VRS_Pop+0x19e>
 8000a62:	2f00      	cmp	r7, #0
 8000a64:	d060      	beq.n	8000b28 <_Unwind_VRS_Pop+0x234>
 8000a66:	6822      	ldr	r2, [r4, #0]
 8000a68:	0751      	lsls	r1, r2, #29
 8000a6a:	d445      	bmi.n	8000af8 <_Unwind_VRS_Pop+0x204>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d04d      	beq.n	8000b0c <_Unwind_VRS_Pop+0x218>
 8000a70:	2e0f      	cmp	r6, #15
 8000a72:	d806      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x18e>
 8000a74:	a822      	add	r0, sp, #136	; 0x88
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	f000 f87a 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000a7c:	9b01      	ldr	r3, [sp, #4]
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d0b6      	beq.n	80009f0 <_Unwind_VRS_Pop+0xfc>
 8000a82:	a802      	add	r0, sp, #8
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	f000 f87b 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a8a:	9b01      	ldr	r3, [sp, #4]
 8000a8c:	f1c6 0210 	rsb	r2, r6, #16
 8000a90:	e7b0      	b.n	80009f4 <_Unwind_VRS_Pop+0x100>
 8000a92:	f022 0101 	bic.w	r1, r2, #1
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	6021      	str	r1, [r4, #0]
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	d03b      	beq.n	8000b18 <_Unwind_VRS_Pop+0x224>
 8000aa0:	f022 0203 	bic.w	r2, r2, #3
 8000aa4:	f840 2b48 	str.w	r2, [r0], #72
 8000aa8:	f000 f85a 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000aac:	9b01      	ldr	r3, [sp, #4]
 8000aae:	e7d8      	b.n	8000a62 <_Unwind_VRS_Pop+0x16e>
 8000ab0:	a822      	add	r0, sp, #136	; 0x88
 8000ab2:	f000 f859 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 8000ab6:	e7c7      	b.n	8000a48 <_Unwind_VRS_Pop+0x154>
 8000ab8:	2f10      	cmp	r7, #16
 8000aba:	d9ce      	bls.n	8000a5a <_Unwind_VRS_Pop+0x166>
 8000abc:	3f10      	subs	r7, #16
 8000abe:	e7cd      	b.n	8000a5c <_Unwind_VRS_Pop+0x168>
 8000ac0:	f023 0310 	bic.w	r3, r3, #16
 8000ac4:	6023      	str	r3, [r4, #0]
 8000ac6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000aca:	9201      	str	r2, [sp, #4]
 8000acc:	f000 f8aa 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 8000ad0:	9a01      	ldr	r2, [sp, #4]
 8000ad2:	e72d      	b.n	8000930 <_Unwind_VRS_Pop+0x3c>
 8000ad4:	3104      	adds	r1, #4
 8000ad6:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ad8:	a822      	add	r0, sp, #136	; 0x88
 8000ada:	f000 f83d 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 8000ade:	e7b7      	b.n	8000a50 <_Unwind_VRS_Pop+0x15c>
 8000ae0:	2f00      	cmp	r7, #0
 8000ae2:	d199      	bne.n	8000a18 <_Unwind_VRS_Pop+0x124>
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	e7aa      	b.n	8000a3e <_Unwind_VRS_Pop+0x14a>
 8000ae8:	f023 0308 	bic.w	r3, r3, #8
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000af2:	f000 f86b 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000af6:	e740      	b.n	800097a <_Unwind_VRS_Pop+0x86>
 8000af8:	4620      	mov	r0, r4
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	f840 2bd0 	str.w	r2, [r0], #208
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	f000 f83c 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	e7af      	b.n	8000a6c <_Unwind_VRS_Pop+0x178>
 8000b0c:	a822      	add	r0, sp, #136	; 0x88
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	f000 f826 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	e7b9      	b.n	8000a8c <_Unwind_VRS_Pop+0x198>
 8000b18:	f041 0102 	orr.w	r1, r1, #2
 8000b1c:	f840 1b48 	str.w	r1, [r0], #72
 8000b20:	f000 f826 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	e79c      	b.n	8000a62 <_Unwind_VRS_Pop+0x16e>
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d003      	beq.n	8000b34 <_Unwind_VRS_Pop+0x240>
 8000b2c:	2e0f      	cmp	r6, #15
 8000b2e:	f63f af5f 	bhi.w	80009f0 <_Unwind_VRS_Pop+0xfc>
 8000b32:	e79f      	b.n	8000a74 <_Unwind_VRS_Pop+0x180>
 8000b34:	a822      	add	r0, sp, #136	; 0x88
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f000 f812 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000b3c:	9b01      	ldr	r3, [sp, #4]
 8000b3e:	e757      	b.n	80009f0 <_Unwind_VRS_Pop+0xfc>

08000b40 <__restore_core_regs>:
 8000b40:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b44:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b48:	469c      	mov	ip, r3
 8000b4a:	46a6      	mov	lr, r4
 8000b4c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b50:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b54:	46e5      	mov	sp, ip
 8000b56:	bd00      	pop	{pc}

08000b58 <__gnu_Unwind_Restore_VFP>:
 8000b58:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__gnu_Unwind_Save_VFP>:
 8000b60:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gnu_Unwind_Restore_VFP_D>:
 8000b68:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__gnu_Unwind_Save_VFP_D>:
 8000b70:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b78:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b80:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__gnu_Unwind_Restore_WMMXD>:
 8000b88:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b8c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b90:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b94:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b98:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b9c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ba0:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba4:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ba8:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bac:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bb0:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb4:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bb8:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bbc:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bc0:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc4:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Save_WMMXD>:
 8000bcc:	ece0 0102 	stfe	f0, [r0], #8
 8000bd0:	ece0 1102 	stfe	f1, [r0], #8
 8000bd4:	ece0 2102 	stfe	f2, [r0], #8
 8000bd8:	ece0 3102 	stfe	f3, [r0], #8
 8000bdc:	ece0 4102 	stfe	f4, [r0], #8
 8000be0:	ece0 5102 	stfe	f5, [r0], #8
 8000be4:	ece0 6102 	stfe	f6, [r0], #8
 8000be8:	ece0 7102 	stfe	f7, [r0], #8
 8000bec:	ece0 8102 	stfp	f0, [r0], #8
 8000bf0:	ece0 9102 	stfp	f1, [r0], #8
 8000bf4:	ece0 a102 	stfp	f2, [r0], #8
 8000bf8:	ece0 b102 	stfp	f3, [r0], #8
 8000bfc:	ece0 c102 	stfp	f4, [r0], #8
 8000c00:	ece0 d102 	stfp	f5, [r0], #8
 8000c04:	ece0 e102 	stfp	f6, [r0], #8
 8000c08:	ece0 f102 	stfp	f7, [r0], #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Restore_WMMXC>:
 8000c10:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c14:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c18:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c1c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__gnu_Unwind_Save_WMMXC>:
 8000c24:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c28:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c2c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c30:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <_Unwind_RaiseException>:
 8000c38:	46ec      	mov	ip, sp
 8000c3a:	b500      	push	{lr}
 8000c3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c4c:	a901      	add	r1, sp, #4
 8000c4e:	f7ff fbed 	bl	800042c <__gnu_Unwind_RaiseException>
 8000c52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c56:	b012      	add	sp, #72	; 0x48
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <_Unwind_Resume>:
 8000c5c:	46ec      	mov	ip, sp
 8000c5e:	b500      	push	{lr}
 8000c60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c70:	a901      	add	r1, sp, #4
 8000c72:	f7ff fc15 	bl	80004a0 <__gnu_Unwind_Resume>
 8000c76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c7a:	b012      	add	sp, #72	; 0x48
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <_Unwind_Resume_or_Rethrow>:
 8000c80:	46ec      	mov	ip, sp
 8000c82:	b500      	push	{lr}
 8000c84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c94:	a901      	add	r1, sp, #4
 8000c96:	f7ff fc25 	bl	80004e4 <__gnu_Unwind_Resume_or_Rethrow>
 8000c9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9e:	b012      	add	sp, #72	; 0x48
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_Unwind_ForcedUnwind>:
 8000ca4:	46ec      	mov	ip, sp
 8000ca6:	b500      	push	{lr}
 8000ca8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb8:	ab01      	add	r3, sp, #4
 8000cba:	f7ff fbe7 	bl	800048c <__gnu_Unwind_ForcedUnwind>
 8000cbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc2:	b012      	add	sp, #72	; 0x48
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <_Unwind_Backtrace>:
 8000cc8:	46ec      	mov	ip, sp
 8000cca:	b500      	push	{lr}
 8000ccc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cdc:	aa01      	add	r2, sp, #4
 8000cde:	f7ff fc61 	bl	80005a4 <__gnu_Unwind_Backtrace>
 8000ce2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce6:	b012      	add	sp, #72	; 0x48
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <next_unwind_byte>:
 8000cec:	7a02      	ldrb	r2, [r0, #8]
 8000cee:	b91a      	cbnz	r2, 8000cf8 <next_unwind_byte+0xc>
 8000cf0:	7a43      	ldrb	r3, [r0, #9]
 8000cf2:	b943      	cbnz	r3, 8000d06 <next_unwind_byte+0x1a>
 8000cf4:	20b0      	movs	r0, #176	; 0xb0
 8000cf6:	4770      	bx	lr
 8000cf8:	6803      	ldr	r3, [r0, #0]
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	7202      	strb	r2, [r0, #8]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	6002      	str	r2, [r0, #0]
 8000d02:	0e18      	lsrs	r0, r3, #24
 8000d04:	4770      	bx	lr
 8000d06:	2103      	movs	r1, #3
 8000d08:	6842      	ldr	r2, [r0, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b410      	push	{r4}
 8000d0e:	7243      	strb	r3, [r0, #9]
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	1d14      	adds	r4, r2, #4
 8000d14:	7201      	strb	r1, [r0, #8]
 8000d16:	021a      	lsls	r2, r3, #8
 8000d18:	6044      	str	r4, [r0, #4]
 8000d1a:	6002      	str	r2, [r0, #0]
 8000d1c:	bc10      	pop	{r4}
 8000d1e:	0e18      	lsrs	r0, r3, #24
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <_Unwind_GetGR.constprop.0>:
 8000d24:	2300      	movs	r3, #0
 8000d26:	b500      	push	{lr}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	aa03      	add	r2, sp, #12
 8000d2c:	9200      	str	r2, [sp, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	220c      	movs	r2, #12
 8000d32:	f7ff fbe9 	bl	8000508 <_Unwind_VRS_Get>
 8000d36:	9803      	ldr	r0, [sp, #12]
 8000d38:	b005      	add	sp, #20
 8000d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3e:	bf00      	nop

08000d40 <unwind_UCB_from_context>:
 8000d40:	e7f0      	b.n	8000d24 <_Unwind_GetGR.constprop.0>
 8000d42:	bf00      	nop

08000d44 <__gnu_unwind_execute>:
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	4606      	mov	r6, r0
 8000d4a:	460f      	mov	r7, r1
 8000d4c:	f04f 0800 	mov.w	r8, #0
 8000d50:	b085      	sub	sp, #20
 8000d52:	4638      	mov	r0, r7
 8000d54:	f7ff ffca 	bl	8000cec <next_unwind_byte>
 8000d58:	28b0      	cmp	r0, #176	; 0xb0
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	d023      	beq.n	8000da6 <__gnu_unwind_execute+0x62>
 8000d5e:	0605      	lsls	r5, r0, #24
 8000d60:	d427      	bmi.n	8000db2 <__gnu_unwind_execute+0x6e>
 8000d62:	2300      	movs	r3, #0
 8000d64:	f10d 090c 	add.w	r9, sp, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	0085      	lsls	r5, r0, #2
 8000d6c:	220d      	movs	r2, #13
 8000d6e:	f8cd 9000 	str.w	r9, [sp]
 8000d72:	4630      	mov	r0, r6
 8000d74:	f7ff fbc8 	bl	8000508 <_Unwind_VRS_Get>
 8000d78:	b2ed      	uxtb	r5, r5
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	0660      	lsls	r0, r4, #25
 8000d7e:	f105 0504 	add.w	r5, r5, #4
 8000d82:	bf4c      	ite	mi
 8000d84:	1b5d      	submi	r5, r3, r5
 8000d86:	18ed      	addpl	r5, r5, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	220d      	movs	r2, #13
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f8cd 9000 	str.w	r9, [sp]
 8000d92:	4630      	mov	r0, r6
 8000d94:	9503      	str	r5, [sp, #12]
 8000d96:	f7ff fbdd 	bl	8000554 <_Unwind_VRS_Set>
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	f7ff ffa6 	bl	8000cec <next_unwind_byte>
 8000da0:	28b0      	cmp	r0, #176	; 0xb0
 8000da2:	4604      	mov	r4, r0
 8000da4:	d1db      	bne.n	8000d5e <__gnu_unwind_execute+0x1a>
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	f000 8094 	beq.w	8000ed6 <__gnu_unwind_execute+0x192>
 8000dae:	2000      	movs	r0, #0
 8000db0:	e01c      	b.n	8000dec <__gnu_unwind_execute+0xa8>
 8000db2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000db6:	2b80      	cmp	r3, #128	; 0x80
 8000db8:	d05c      	beq.n	8000e74 <__gnu_unwind_execute+0x130>
 8000dba:	2b90      	cmp	r3, #144	; 0x90
 8000dbc:	d019      	beq.n	8000df2 <__gnu_unwind_execute+0xae>
 8000dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8000dc0:	d02c      	beq.n	8000e1c <__gnu_unwind_execute+0xd8>
 8000dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8000dc4:	d03e      	beq.n	8000e44 <__gnu_unwind_execute+0x100>
 8000dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8000dc8:	d06b      	beq.n	8000ea2 <__gnu_unwind_execute+0x15e>
 8000dca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dce:	2bd0      	cmp	r3, #208	; 0xd0
 8000dd0:	d10b      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000dd2:	f000 0207 	and.w	r2, r0, #7
 8000dd6:	3201      	adds	r2, #1
 8000dd8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ddc:	2305      	movs	r3, #5
 8000dde:	2101      	movs	r1, #1
 8000de0:	4630      	mov	r0, r6
 8000de2:	f7ff fd87 	bl	80008f4 <_Unwind_VRS_Pop>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d0b3      	beq.n	8000d52 <__gnu_unwind_execute+0xe>
 8000dea:	2009      	movs	r0, #9
 8000dec:	b005      	add	sp, #20
 8000dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df2:	f000 030d 	and.w	r3, r0, #13
 8000df6:	2b0d      	cmp	r3, #13
 8000df8:	d0f7      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	ad03      	add	r5, sp, #12
 8000dfe:	f000 020f 	and.w	r2, r0, #15
 8000e02:	4619      	mov	r1, r3
 8000e04:	9500      	str	r5, [sp, #0]
 8000e06:	4630      	mov	r0, r6
 8000e08:	f7ff fb7e 	bl	8000508 <_Unwind_VRS_Get>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9500      	str	r5, [sp, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	220d      	movs	r2, #13
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff fb9d 	bl	8000554 <_Unwind_VRS_Set>
 8000e1a:	e79a      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e1c:	43c3      	mvns	r3, r0
 8000e1e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	411a      	asrs	r2, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	0701      	lsls	r1, r0, #28
 8000e2c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e30:	bf48      	it	mi
 8000e32:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e36:	4619      	mov	r1, r3
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fd5b 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d1d3      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e42:	e786      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e44:	28b1      	cmp	r0, #177	; 0xb1
 8000e46:	d057      	beq.n	8000ef8 <__gnu_unwind_execute+0x1b4>
 8000e48:	28b2      	cmp	r0, #178	; 0xb2
 8000e4a:	d068      	beq.n	8000f1e <__gnu_unwind_execute+0x1da>
 8000e4c:	28b3      	cmp	r0, #179	; 0xb3
 8000e4e:	f000 8095 	beq.w	8000f7c <__gnu_unwind_execute+0x238>
 8000e52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e56:	2bb4      	cmp	r3, #180	; 0xb4
 8000e58:	d0c7      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 0207 	and.w	r2, r0, #7
 8000e60:	441a      	add	r2, r3
 8000e62:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e66:	4619      	mov	r1, r3
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f7ff fd43 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d1bb      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e72:	e76e      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e74:	4638      	mov	r0, r7
 8000e76:	f7ff ff39 	bl	8000cec <next_unwind_byte>
 8000e7a:	0224      	lsls	r4, r4, #8
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e82:	d0b2      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e84:	2300      	movs	r3, #0
 8000e86:	0124      	lsls	r4, r4, #4
 8000e88:	b2a2      	uxth	r2, r4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f7ff fd31 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d1a9      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e96:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e9a:	bf18      	it	ne
 8000e9c:	f04f 0801 	movne.w	r8, #1
 8000ea0:	e757      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000ea2:	28c6      	cmp	r0, #198	; 0xc6
 8000ea4:	d07d      	beq.n	8000fa2 <__gnu_unwind_execute+0x25e>
 8000ea6:	28c7      	cmp	r0, #199	; 0xc7
 8000ea8:	f000 8086 	beq.w	8000fb8 <__gnu_unwind_execute+0x274>
 8000eac:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8000eb2:	f000 8094 	beq.w	8000fde <__gnu_unwind_execute+0x29a>
 8000eb6:	28c8      	cmp	r0, #200	; 0xc8
 8000eb8:	f000 809f 	beq.w	8000ffa <__gnu_unwind_execute+0x2b6>
 8000ebc:	28c9      	cmp	r0, #201	; 0xc9
 8000ebe:	d194      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f7ff ff13 	bl	8000cec <next_unwind_byte>
 8000ec6:	0302      	lsls	r2, r0, #12
 8000ec8:	f000 000f 	and.w	r0, r0, #15
 8000ecc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	4302      	orrs	r2, r0
 8000ed4:	e782      	b.n	8000ddc <__gnu_unwind_execute+0x98>
 8000ed6:	ac03      	add	r4, sp, #12
 8000ed8:	4643      	mov	r3, r8
 8000eda:	220e      	movs	r2, #14
 8000edc:	4641      	mov	r1, r8
 8000ede:	9400      	str	r4, [sp, #0]
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff fb11 	bl	8000508 <_Unwind_VRS_Get>
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	4630      	mov	r0, r6
 8000eea:	4643      	mov	r3, r8
 8000eec:	220f      	movs	r2, #15
 8000eee:	4641      	mov	r1, r8
 8000ef0:	f7ff fb30 	bl	8000554 <_Unwind_VRS_Set>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e779      	b.n	8000dec <__gnu_unwind_execute+0xa8>
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f7ff fef7 	bl	8000cec <next_unwind_byte>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f43f af73 	beq.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f04:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f08:	f47f af6f 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4630      	mov	r0, r6
 8000f12:	f7ff fcef 	bl	80008f4 <_Unwind_VRS_Pop>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	f47f af67 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f1c:	e719      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f10d 090c 	add.w	r9, sp, #12
 8000f24:	220d      	movs	r2, #13
 8000f26:	4619      	mov	r1, r3
 8000f28:	f8cd 9000 	str.w	r9, [sp]
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f7ff faeb 	bl	8000508 <_Unwind_VRS_Get>
 8000f32:	4638      	mov	r0, r7
 8000f34:	f7ff feda 	bl	8000cec <next_unwind_byte>
 8000f38:	0602      	lsls	r2, r0, #24
 8000f3a:	f04f 0402 	mov.w	r4, #2
 8000f3e:	d50c      	bpl.n	8000f5a <__gnu_unwind_execute+0x216>
 8000f40:	9b03      	ldr	r3, [sp, #12]
 8000f42:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f46:	40a0      	lsls	r0, r4
 8000f48:	4403      	add	r3, r0
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	9303      	str	r3, [sp, #12]
 8000f4e:	f7ff fecd 	bl	8000cec <next_unwind_byte>
 8000f52:	0603      	lsls	r3, r0, #24
 8000f54:	f104 0407 	add.w	r4, r4, #7
 8000f58:	d4f2      	bmi.n	8000f40 <__gnu_unwind_execute+0x1fc>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9903      	ldr	r1, [sp, #12]
 8000f5e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f62:	40a2      	lsls	r2, r4
 8000f64:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f68:	188c      	adds	r4, r1, r2
 8000f6a:	f8cd 9000 	str.w	r9, [sp]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	220d      	movs	r2, #13
 8000f72:	4630      	mov	r0, r6
 8000f74:	9403      	str	r4, [sp, #12]
 8000f76:	f7ff faed 	bl	8000554 <_Unwind_VRS_Set>
 8000f7a:	e6ea      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f7ff feb5 	bl	8000cec <next_unwind_byte>
 8000f82:	2301      	movs	r3, #1
 8000f84:	0301      	lsls	r1, r0, #12
 8000f86:	f000 000f 	and.w	r0, r0, #15
 8000f8a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f8e:	18c2      	adds	r2, r0, r3
 8000f90:	430a      	orrs	r2, r1
 8000f92:	4630      	mov	r0, r6
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fcad 	bl	80008f4 <_Unwind_VRS_Pop>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	f47f af25 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fa0:	e6d7      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f7ff fea2 	bl	8000cec <next_unwind_byte>
 8000fa8:	0301      	lsls	r1, r0, #12
 8000faa:	f000 000f 	and.w	r0, r0, #15
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fb4:	1c42      	adds	r2, r0, #1
 8000fb6:	e7eb      	b.n	8000f90 <__gnu_unwind_execute+0x24c>
 8000fb8:	4638      	mov	r0, r7
 8000fba:	f7ff fe97 	bl	8000cec <next_unwind_byte>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f43f af13 	beq.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fc4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc8:	f47f af0f 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f7ff fc8f 	bl	80008f4 <_Unwind_VRS_Pop>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f47f af07 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fdc:	e6b9      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f000 020f 	and.w	r2, r0, #15
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fea:	4619      	mov	r1, r3
 8000fec:	4630      	mov	r0, r6
 8000fee:	f7ff fc81 	bl	80008f4 <_Unwind_VRS_Pop>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	f47f aef9 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000ff8:	e6ab      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	f7ff fe76 	bl	8000cec <next_unwind_byte>
 8001000:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001004:	f000 030f 	and.w	r3, r0, #15
 8001008:	3210      	adds	r2, #16
 800100a:	3301      	adds	r3, #1
 800100c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001010:	e6e4      	b.n	8000ddc <__gnu_unwind_execute+0x98>
 8001012:	bf00      	nop

08001014 <__gnu_unwind_frame>:
 8001014:	b530      	push	{r4, r5, lr}
 8001016:	2403      	movs	r4, #3
 8001018:	460d      	mov	r5, r1
 800101a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800101c:	b085      	sub	sp, #20
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	f88d 400c 	strb.w	r4, [sp, #12]
 8001024:	79dc      	ldrb	r4, [r3, #7]
 8001026:	0212      	lsls	r2, r2, #8
 8001028:	3308      	adds	r3, #8
 800102a:	a901      	add	r1, sp, #4
 800102c:	4628      	mov	r0, r5
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	f88d 400d 	strb.w	r4, [sp, #13]
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	f7ff fe85 	bl	8000d44 <__gnu_unwind_execute>
 800103a:	b005      	add	sp, #20
 800103c:	bd30      	pop	{r4, r5, pc}
 800103e:	bf00      	nop

08001040 <_Unwind_GetRegionStart>:
 8001040:	b508      	push	{r3, lr}
 8001042:	f7ff fe7d 	bl	8000d40 <unwind_UCB_from_context>
 8001046:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001048:	bd08      	pop	{r3, pc}
 800104a:	bf00      	nop

0800104c <_Unwind_GetLanguageSpecificData>:
 800104c:	b508      	push	{r3, lr}
 800104e:	f7ff fe77 	bl	8000d40 <unwind_UCB_from_context>
 8001052:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001054:	79c3      	ldrb	r3, [r0, #7]
 8001056:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800105a:	3008      	adds	r0, #8
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop

08001060 <_Unwind_GetTextRelBase>:
 8001060:	b508      	push	{r3, lr}
 8001062:	f003 fea1 	bl	8004da8 <abort>
 8001066:	bf00      	nop

08001068 <_Unwind_GetDataRelBase>:
 8001068:	b508      	push	{r3, lr}
 800106a:	f7ff fff9 	bl	8001060 <_Unwind_GetTextRelBase>
 800106e:	bf00      	nop

08001070 <_Z13AllTasks_initv>:
float per, volt, perAvrg, voltAvrg ;
uint8_t RXdata;



void AllTasks_init(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <_Z13AllTasks_initv+0x60>)
 8001078:	f107 041c 	add.w	r4, r7, #28
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f9aa 	bl	80033ea <osThreadCreate>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <_Z13AllTasks_initv+0x64>)
 800109a:	601a      	str	r2, [r3, #0]

	  osThreadDef(LedUpTask, StartLedUpTask, osPriorityBelowNormal, 0, 256);
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <_Z13AllTasks_initv+0x68>)
 800109e:	463c      	mov	r4, r7
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  LedUpHandle = osThreadCreate(osThread(LedUpTask), NULL);
 80010ae:	463b      	mov	r3, r7
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f999 	bl	80033ea <osThreadCreate>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_Z13AllTasks_initv+0x6c>)
 80010bc:	601a      	str	r2, [r3, #0]


	  HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <_Z13AllTasks_initv+0x70>)
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <_Z13AllTasks_initv+0x74>)
 80010c4:	f002 f880 	bl	80031c8 <HAL_UART_Receive_IT>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	08004fb0 	.word	0x08004fb0
 80010d4:	2000009c 	.word	0x2000009c
 80010d8:	08004fd8 	.word	0x08004fd8
 80010dc:	200000a0 	.word	0x200000a0
 80010e0:	200000bc 	.word	0x200000bc
 80010e4:	2000117c 	.word	0x2000117c

080010e8 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]


	uint32_t counter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
//	LipoCell lipo;
	HAL_ADC_Start(&hadc1);
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <_Z23StartBatteryManagerTaskPKv+0x24>)
 80010f6:	f000 fe77 	bl	8001de8 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, receiveADC, 2);
 80010fa:	2202      	movs	r2, #2
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <_Z23StartBatteryManagerTaskPKv+0x28>)
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <_Z23StartBatteryManagerTaskPKv+0x24>)
 8001100:	f000 fed4 	bl	8001eac <HAL_ADC_Start_DMA>
//		volt= lipo.getVoltage();
//		perAvrg = lipo.getPercentageAvrg();
//		voltAvrg= lipo.getVoltageAvrg();


		osDelay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f002 f998 	bl	800343a <osDelay>
 800110a:	e7fb      	b.n	8001104 <_Z23StartBatteryManagerTaskPKv+0x1c>
 800110c:	20001078 	.word	0x20001078
 8001110:	200000a4 	.word	0x200000a4

08001114 <_Z14StartLedUpTaskPKv>:


	}
}

void StartLedUpTask(void const * argument){
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
	LedNotifier led(LD2_GPIO_Port, LD2_Pin, &htim4);
 800111c:	f107 0018 	add.w	r0, r7, #24
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <_Z14StartLedUpTaskPKv+0x88>)
 8001126:	2220      	movs	r2, #32
 8001128:	491d      	ldr	r1, [pc, #116]	; (80011a0 <_Z14StartLedUpTaskPKv+0x8c>)
 800112a:	f000 f989 	bl	8001440 <_ZN11LedNotifierC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefh>

	for(;;){
		osEvent evt = osSignalWait(0x01 | 0x02 | 0x04| 0x08,osWaitForever);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	210f      	movs	r1, #15
 8001138:	4618      	mov	r0, r3
 800113a:	f002 f9b1 	bl	80034a0 <osSignalWait>
			if      (evt.value.signals == 0x01){
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <_Z14StartLedUpTaskPKv+0x3c>
				led.on();
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f895 	bl	8001278 <_ZN11LedNotifier2onEv>
 800114e:	e01a      	b.n	8001186 <_Z14StartLedUpTaskPKv+0x72>

			}
			else if (evt.value.signals == 0x02){
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d105      	bne.n	8001162 <_Z14StartLedUpTaskPKv+0x4e>
				led.off();
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f8ab 	bl	80012b6 <_ZN11LedNotifier3offEv>
 8001160:	e011      	b.n	8001186 <_Z14StartLedUpTaskPKv+0x72>

			}
			else if (evt.value.signals == 0x04){
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b04      	cmp	r3, #4
 8001166:	d106      	bne.n	8001176 <_Z14StartLedUpTaskPKv+0x62>
				led.blink_config(100);
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	2164      	movs	r1, #100	; 0x64
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f8c0 	bl	80012f4 <_ZN11LedNotifier12blink_configEm>
 8001174:	e007      	b.n	8001186 <_Z14StartLedUpTaskPKv+0x72>

			}
			else if (evt.value.signals== 0x08){
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b08      	cmp	r3, #8
 800117a:	d104      	bne.n	8001186 <_Z14StartLedUpTaskPKv+0x72>
				led.blink_process();
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8e1 	bl	8001348 <_ZN11LedNotifier13blink_processEv>

			}


		osDelay(50);
 8001186:	2032      	movs	r0, #50	; 0x32
 8001188:	f002 f957 	bl	800343a <osDelay>

	}
 800118c:	e7cf      	b.n	800112e <_Z14StartLedUpTaskPKv+0x1a>
	LedNotifier led(LD2_GPIO_Port, LD2_Pin, &htim4);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f984 	bl	80014a0 <_ZN11LedNotifierD1Ev>
 8001198:	f003 f980 	bl	800449c <__cxa_end_cleanup>
 800119c:	20001134 	.word	0x20001134
 80011a0:	40010800 	.word	0x40010800

080011a4 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	//static uint16_t per =500;
	if	   (RXdata == 'n') osSignalSet(LedUpHandle, 1 << 0);
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_RxCpltCallback+0x5c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b6e      	cmp	r3, #110	; 0x6e
 80011b2:	d106      	bne.n	80011c2 <HAL_UART_RxCpltCallback+0x1e>
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_UART_RxCpltCallback+0x60>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f946 	bl	800344c <osSignalSet>
 80011c0:	e014      	b.n	80011ec <HAL_UART_RxCpltCallback+0x48>
	else if(RXdata == 'f') osSignalSet(LedUpHandle, 1 << 1);
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_UART_RxCpltCallback+0x5c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b66      	cmp	r3, #102	; 0x66
 80011c8:	d106      	bne.n	80011d8 <HAL_UART_RxCpltCallback+0x34>
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_UART_RxCpltCallback+0x60>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 f93b 	bl	800344c <osSignalSet>
 80011d6:	e009      	b.n	80011ec <HAL_UART_RxCpltCallback+0x48>
	else if(RXdata == 'b') osSignalSet(LedUpHandle, 1 << 2);
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_UART_RxCpltCallback+0x5c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b62      	cmp	r3, #98	; 0x62
 80011de:	d105      	bne.n	80011ec <HAL_UART_RxCpltCallback+0x48>
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_UART_RxCpltCallback+0x60>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2104      	movs	r1, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f930 	bl	800344c <osSignalSet>


	HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	4904      	ldr	r1, [pc, #16]	; (8001200 <HAL_UART_RxCpltCallback+0x5c>)
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_UART_RxCpltCallback+0x64>)
 80011f2:	f001 ffe9 	bl	80031c8 <HAL_UART_Receive_IT>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000bc 	.word	0x200000bc
 8001204:	200000a0 	.word	0x200000a0
 8001208:	2000117c 	.word	0x2000117c

0800120c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fcd9 	bl	8001bd4 <HAL_IncTick>
  }
  if(htim->Instance == TIM4){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d105      	bne.n	8001238 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  osSignalSet(LedUpHandle, 0x08);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2108      	movs	r1, #8
 8001232:	4618      	mov	r0, r3
 8001234:	f002 f90a 	bl	800344c <osSignalSet>
  }

}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40000800 	.word	0x40000800
 8001248:	200000a0 	.word	0x200000a0

0800124c <_ZN11LedNotifier13getONPinStateEv>:
	LedState curState;

	uint8_t isReversed;   								/** flag of reversed led logic */
	GPIO_PinState onState; 								/** state consider as ON */
	GPIO_PinState offState; 							/** state consider as OFF */
	GPIO_PinState getONPinState(){ return onState;};  	/** return real ON state */
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7edb      	ldrb	r3, [r3, #27]
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <_ZN11LedNotifier14getOFFPinStateEv>:
	GPIO_PinState getOFFPinState(){return offState; }; 	/** return real OFF state */
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f1b      	ldrb	r3, [r3, #28]
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <_ZN11LedNotifier2onEv>:
 *      Author: Igor
 */

#include <LedNotifier.h>

void LedNotifier::on(){
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	if(curState == BLINK) timerSTOP();
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e5b      	ldrb	r3, [r3, #25]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d102      	bne.n	800128e <_ZN11LedNotifier2onEv+0x16>
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f8ab 	bl	80013e4 <_ZN11LedNotifier9timerSTOPEv>
	curState = ON;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(Port,Pin, getONPinState());
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685c      	ldr	r4, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	891d      	ldrh	r5, [r3, #8]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffd5 	bl	800124c <_ZN11LedNotifier13getONPinStateEv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f001 f9af 	bl	800260c <HAL_GPIO_WritePin>

}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}

080012b6 <_ZN11LedNotifier3offEv>:

void LedNotifier::off(){
 80012b6:	b5b0      	push	{r4, r5, r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	if(curState == BLINK) timerSTOP();
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d102      	bne.n	80012cc <_ZN11LedNotifier3offEv+0x16>
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f88c 	bl	80013e4 <_ZN11LedNotifier9timerSTOPEv>
	curState = OFF;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(Port,Pin, getOFFPinState());
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685c      	ldr	r4, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	891d      	ldrh	r5, [r3, #8]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffc1 	bl	8001262 <_ZN11LedNotifier14getOFFPinStateEv>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4629      	mov	r1, r5
 80012e6:	4620      	mov	r0, r4
 80012e8:	f001 f990 	bl	800260c <HAL_GPIO_WritePin>

}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}

080012f4 <_ZN11LedNotifier12blink_configEm>:

void LedNotifier::blink_config( uint32_t perON){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	blink_config(perON,perON);
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f804 	bl	8001310 <_ZN11LedNotifier12blink_configEmm>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN11LedNotifier12blink_configEmm>:

void LedNotifier::blink_config( uint32_t perON, uint32_t perOFF){
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	// initial state of led in blinking mode
	on();
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff ffab 	bl	8001278 <_ZN11LedNotifier2onEv>
	// update led state
	curState = BLINK;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2202      	movs	r2, #2
 8001326:	765a      	strb	r2, [r3, #25]
	blink_state = blinkOn;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	761a      	strb	r2, [r3, #24]

	// saving required periods
	blinkPeriodON = perON;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	611a      	str	r2, [r3, #16]
	blinkPeriodOFF = perOFF;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	615a      	str	r2, [r3, #20]

	timerSTART();
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f864 	bl	8001408 <_ZN11LedNotifier10timerSTARTEv>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZN11LedNotifier13blink_processEv>:

void LedNotifier::blink_process(){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// process called by timer interrupt (not directly)
	if(curState == BLINK){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7e5b      	ldrb	r3, [r3, #25]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d10b      	bne.n	8001370 <_ZN11LedNotifier13blink_processEv+0x28>
		timerSTOP();
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f843 	bl	80013e4 <_ZN11LedNotifier9timerSTOPEv>
		toggle();
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f80a 	bl	8001378 <_ZN11LedNotifier6toggleEv>
		toggle_blinkstate();
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f817 	bl	8001398 <_ZN11LedNotifier17toggle_blinkstateEv>
		timerSTART();
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f84c 	bl	8001408 <_ZN11LedNotifier10timerSTARTEv>
	}
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN11LedNotifier6toggleEv>:

void LedNotifier::toggle(){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Port,Pin);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	891b      	ldrh	r3, [r3, #8]
 8001388:	4619      	mov	r1, r3
 800138a:	4610      	mov	r0, r2
 800138c:	f001 f943 	bl	8002616 <HAL_GPIO_TogglePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZN11LedNotifier17toggle_blinkstateEv>:

void LedNotifier::toggle_blinkstate(){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (blink_state == blinkOff) blink_state = blinkOn;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e1b      	ldrb	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <_ZN11LedNotifier17toggle_blinkstateEv+0x18>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	761a      	strb	r2, [r3, #24]
	else 						 blink_state = blinkOff;
}
 80013ae:	e002      	b.n	80013b6 <_ZN11LedNotifier17toggle_blinkstateEv+0x1e>
	else 						 blink_state = blinkOff;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	761a      	strb	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <_ZN11LedNotifier9getPeriodEv>:

uint32_t LedNotifier::getPeriod(){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if(blink_state == blinkOff) return blinkPeriodOFF;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e1b      	ldrb	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_ZN11LedNotifier9getPeriodEv+0x16>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	e001      	b.n	80013da <_ZN11LedNotifier9getPeriodEv+0x1a>
	else 						return blinkPeriodON;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <_ZN11LedNotifier9timerSTOPEv>:


void LedNotifier::timerSTOP(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(timer);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fc7f 	bl	8002cf4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SetCounter(timer, 0 );
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZN11LedNotifier10timerSTARTEv>:

void LedNotifier::timerSTART(){
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(timer, getPeriod());
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	681c      	ldr	r4, [r3, #0]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffd2 	bl	80013c0 <_ZN11LedNotifier9getPeriodEv>
 800141c:	4603      	mov	r3, r0
 800141e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68dc      	ldr	r4, [r3, #12]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffcb 	bl	80013c0 <_ZN11LedNotifier9getPeriodEv>
 800142a:	4603      	mov	r3, r0
 800142c:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Start_IT(timer);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fc34 	bl	8002ca0 <HAL_TIM_Base_Start_IT>
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}

08001440 <_ZN11LedNotifierC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefh>:
LedNotifier::LedState LedNotifier::getState(){
	return curState;
}


LedNotifier::LedNotifier(GPIO_TypeDef *port, uint16_t pin,TIM_HandleTypeDef* tim,uint8_t rev):
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	80fb      	strh	r3, [r7, #6]
	Port(port), Pin(pin), timer(tim){
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <_ZN11LedNotifierC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefh+0x5c>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	811a      	strh	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	60da      	str	r2, [r3, #12]
	isReversed = rev;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	7e3a      	ldrb	r2, [r7, #24]
 800146c:	769a      	strb	r2, [r3, #26]
	if(isReversed){ onState = GPIO_PIN_RESET; offState= GPIO_PIN_SET;}
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	7e9b      	ldrb	r3, [r3, #26]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <_ZN11LedNotifierC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefh+0x44>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	76da      	strb	r2, [r3, #27]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	771a      	strb	r2, [r3, #28]
 8001482:	e005      	b.n	8001490 <_ZN11LedNotifierC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefh+0x50>
	else          { onState = GPIO_PIN_SET;   offState= GPIO_PIN_RESET;}
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	76da      	strb	r2, [r3, #27]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	771a      	strb	r2, [r3, #28]

}
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	08004ffc 	.word	0x08004ffc

080014a0 <_ZN11LedNotifierD1Ev>:

LedNotifier::~LedNotifier() {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <_ZN11LedNotifierD1Ev+0x1c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	08004ffc 	.word	0x08004ffc

080014c0 <_ZN11LedNotifierD0Ev>:
LedNotifier::~LedNotifier() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
}
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe9 	bl	80014a0 <_ZN11LedNotifierD1Ev>
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f002 ffdd 	bl	800448e <_ZdlPv>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <_ZN8TimeToolC1Ev>:
		microsInitDone = 1;
	}
}


TimeTool::TimeTool(): microsInitDone(0) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_ZN8TimeToolC1Ev+0x20>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	08005024 	.word	0x08005024

08001504 <_ZN8TimeToolD1Ev>:

TimeTool::~TimeTool() {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <_ZN8TimeToolD1Ev+0x1c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	08005024 	.word	0x08005024

08001524 <_ZN8TimeToolD0Ev>:
TimeTool::~TimeTool() {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
}
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe9 	bl	8001504 <_ZN8TimeToolD1Ev>
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f002 ffab 	bl	800448e <_ZdlPv>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <_Z41__static_initialization_and_destruction_0ii>:
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10c      	bne.n	800156e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	4293      	cmp	r3, r2
 800155c:	d107      	bne.n	800156e <_Z41__static_initialization_and_destruction_0ii+0x2a>
TimeTool time_tool;
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001560:	f7ff ffbe 	bl	80014e0 <_ZN8TimeToolC1Ev>
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001566:	4906      	ldr	r1, [pc, #24]	; (8001580 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800156a:	f002 ff92 	bl	8004492 <__aeabi_atexit>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000c0 	.word	0x200000c0
 800157c:	20000000 	.word	0x20000000
 8001580:	08001505 	.word	0x08001505

08001584 <_GLOBAL__sub_I_time_tool>:
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
 8001588:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff ffd9 	bl	8001544 <_Z41__static_initialization_and_destruction_0ii>
 8001592:	bd80      	pop	{r7, pc}

08001594 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <MX_ADC1_Init+0x68>)
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_ADC1_Init+0x6c>)
{
 8001598:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 800159a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800159c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a6:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a8:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015aa:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80015ac:	2302      	movs	r3, #2
{
 80015ae:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80015b0:	9401      	str	r4, [sp, #4]
 80015b2:	9402      	str	r4, [sp, #8]
 80015b4:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b6:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b8:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ba:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 80015bc:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015be:	f000 fd25 	bl	800200c <HAL_ADC_Init>
 80015c2:	b108      	cbz	r0, 80015c8 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 80015c4:	f000 f9b1 	bl	800192a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015c8:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	a901      	add	r1, sp, #4
 80015cc:	480b      	ldr	r0, [pc, #44]	; (80015fc <MX_ADC1_Init+0x68>)
  sConfig.Channel = ADC_CHANNEL_0;
 80015ce:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d0:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015d2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	f000 fb4c 	bl	8001c70 <HAL_ADC_ConfigChannel>
 80015d8:	b108      	cbz	r0, 80015de <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80015da:	f000 f9a6 	bl	800192a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015de:	2301      	movs	r3, #1
 80015e0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015e6:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e8:	a901      	add	r1, sp, #4
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_ADC1_Init+0x68>)
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80015ec:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ee:	f000 fb3f 	bl	8001c70 <HAL_ADC_ConfigChannel>
 80015f2:	b108      	cbz	r0, 80015f8 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 80015f4:	f000 f999 	bl	800192a <Error_Handler>
  }

}
 80015f8:	b005      	add	sp, #20
 80015fa:	bd30      	pop	{r4, r5, pc}
 80015fc:	20001078 	.word	0x20001078
 8001600:	40012400 	.word	0x40012400

08001604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001604:	b530      	push	{r4, r5, lr}
 8001606:	4605      	mov	r5, r0
 8001608:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	2210      	movs	r2, #16
 800160c:	2100      	movs	r1, #0
 800160e:	a802      	add	r0, sp, #8
 8001610:	f003 fc1d 	bl	8004e4e <memset>
  if(adcHandle->Instance==ADC1)
 8001614:	682a      	ldr	r2, [r5, #0]
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_ADC_MspInit+0x84>)
 8001618:	429a      	cmp	r2, r3
 800161a:	d133      	bne.n	8001684 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001620:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	481a      	ldr	r0, [pc, #104]	; (800168c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001628:	619a      	str	r2, [r3, #24]
 800162a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800162e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001638:	4c15      	ldr	r4, [pc, #84]	; (8001690 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	f042 0204 	orr.w	r2, r2, #4
 800163e:	619a      	str	r2, [r3, #24]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800164a:	2303      	movs	r3, #3
 800164c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f000 fefa 	bl	8002448 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800165e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001664:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001666:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001668:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166c:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001672:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001674:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001676:	f000 fd9d 	bl	80021b4 <HAL_DMA_Init>
 800167a:	b108      	cbz	r0, 8001680 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 800167c:	f000 f955 	bl	800192a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001680:	622c      	str	r4, [r5, #32]
 8001682:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001684:	b007      	add	sp, #28
 8001686:	bd30      	pop	{r4, r5, pc}
 8001688:	40012400 	.word	0x40012400
 800168c:	40010800 	.word	0x40010800
 8001690:	200010a8 	.word	0x200010a8
 8001694:	40020008 	.word	0x40020008

08001698 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MX_DMA_Init+0x2c>)
{
 800169a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800169e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016a8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016b0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016b4:	f000 fd3c 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f000 fd6d 	bl	8002198 <HAL_NVIC_EnableIRQ>

}
 80016be:	b003      	add	sp, #12
 80016c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016c4:	40021000 	.word	0x40021000

080016c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <vApplicationGetIdleTaskMemory+0x28>)
 80016d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	200000cc 	.word	0x200000cc
 80016f4:	20000120 	.word	0x20000120

080016f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_FREERTOS_Init+0x34>)
 8001700:	1d3c      	adds	r4, r7, #4
 8001702:	461d      	mov	r5, r3
 8001704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800170c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fe68 	bl	80033ea <osThreadCreate>
 800171a:	4602      	mov	r2, r0
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <MX_FREERTOS_Init+0x38>)
 800171e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  AllTasks_init();
 8001720:	f7ff fca6 	bl	8001070 <_Z13AllTasks_initv>
  /* USER CODE END RTOS_THREADS */

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	0800504c 	.word	0x0800504c
 8001730:	200000c8 	.word	0x200000c8

08001734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f001 fe7c 	bl	800343a <osDelay>
 8001742:	e7fb      	b.n	800173c <StartDefaultTask+0x8>

08001744 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	2210      	movs	r2, #16
{
 8001746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800174a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	eb0d 0002 	add.w	r0, sp, r2
 8001750:	2100      	movs	r1, #0
 8001752:	f003 fb7c 	bl	8004e4e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001758:	4f34      	ldr	r7, [pc, #208]	; (800182c <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800175c:	4e34      	ldr	r6, [pc, #208]	; (8001830 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	619a      	str	r2, [r3, #24]
 8001764:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001766:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001768:	f002 0210 	and.w	r2, r2, #16
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001772:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	f002 0220 	and.w	r2, r2, #32
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	f042 0204 	orr.w	r2, r2, #4
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	f002 0204 	and.w	r2, r2, #4
 800179a:	9202      	str	r2, [sp, #8]
 800179c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	f042 0208 	orr.w	r2, r2, #8
 80017a4:	619a      	str	r2, [r3, #24]
 80017a6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	9303      	str	r3, [sp, #12]
 80017b0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017b2:	f000 ff2b 	bl	800260c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	4630      	mov	r0, r6
 80017ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017be:	f000 ff25 	bl	800260c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_GPIO_Init+0xf0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ca:	a904      	add	r1, sp, #16
 80017cc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f000 fe39 	bl	8002448 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017d6:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	a904      	add	r1, sp, #16
 80017da:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f000 fe31 	bl	8002448 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80017e6:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e8:	a904      	add	r1, sp, #16
 80017ea:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f000 fe27 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80017fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	a904      	add	r1, sp, #16
 8001800:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001802:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f000 fe1c 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001810:	4622      	mov	r2, r4
 8001812:	2105      	movs	r1, #5
 8001814:	2028      	movs	r0, #40	; 0x28
 8001816:	f000 fc8b 	bl	8002130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800181a:	2028      	movs	r0, #40	; 0x28
 800181c:	f000 fcbc 	bl	8002198 <HAL_NVIC_EnableIRQ>

}
 8001820:	b008      	add	sp, #32
 8001822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800
 8001830:	40011000 	.word	0x40011000
 8001834:	10110000 	.word	0x10110000

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183c:	f000 f9b8 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001840:	f000 f80f 	bl	8001862 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001844:	f7ff ff7e 	bl	8001744 <MX_GPIO_Init>
  MX_DMA_Init();
 8001848:	f7ff ff26 	bl	8001698 <MX_DMA_Init>
  MX_ADC1_Init();
 800184c:	f7ff fea2 	bl	8001594 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001850:	f000 f94e 	bl	8001af0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM4_Init();
 8001854:	f000 f902 	bl	8001a5c <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001858:	f7ff ff4e 	bl	80016f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800185c:	f001 fdc0 	bl	80033e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001860:	e7fe      	b.n	8001860 <main+0x28>

08001862 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b094      	sub	sp, #80	; 0x50
 8001866:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186c:	2228      	movs	r2, #40	; 0x28
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f003 faec 	bl	8004e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001892:	2302      	movs	r3, #2
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001896:	2301      	movs	r3, #1
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189a:	2310      	movs	r3, #16
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018a2:	2300      	movs	r3, #0
 80018a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fec8 	bl	8002644 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018c4:	f000 f831 	bl	800192a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f887 	bl	80029f8 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018fa:	f000 f816 	bl	800192a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018fe:	2302      	movs	r3, #2
 8001900:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4618      	mov	r0, r3
 800190a:	f001 f951 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800191e:	f000 f804 	bl	800192a <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	; 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_MspInit+0x48>)
{
 800193a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001948:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 800194c:	f002 0201 	and.w	r2, r2, #1
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800195a:	61da      	str	r2, [r3, #28]
 800195c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800195e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001968:	f000 fbe2 	bl	8002130 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_MspInit+0x4c>)
 800196e:	6853      	ldr	r3, [r2, #4]
 8001970:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	b003      	add	sp, #12
 800197c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800198a:	4601      	mov	r1, r0
{
 800198c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800198e:	2200      	movs	r2, #0
 8001990:	2019      	movs	r0, #25
 8001992:	f000 fbcd 	bl	8002130 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001996:	2019      	movs	r0, #25
 8001998:	f000 fbfe 	bl	8002198 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800199e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a0:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019ac:	4c11      	ldr	r4, [pc, #68]	; (80019f4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b6:	f001 f8dd 	bl	8002b74 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019ba:	f001 f8cb 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_InitTick+0x70>)
 80019c0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80019c2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80019c6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_InitTick+0x74>)
 80019ca:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80019ce:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019d0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80019d2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019d4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80019d6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019da:	f001 fa81 	bl	8002ee0 <HAL_TIM_Base_Init>
 80019de:	b920      	cbnz	r0, 80019ea <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019e0:	4620      	mov	r0, r4
 80019e2:	f001 f95d 	bl	8002ca0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80019e6:	b008      	add	sp, #32
 80019e8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7fb      	b.n	80019e6 <HAL_InitTick+0x5e>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	200010ec 	.word	0x200010ec
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	000f4240 	.word	0x000f4240

08001a00 <NMI_Handler>:
 8001a00:	4770      	bx	lr

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	e7fe      	b.n	8001a06 <BusFault_Handler>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler>

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	4770      	bx	lr

08001a0c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a0c:	4801      	ldr	r0, [pc, #4]	; (8001a14 <DMA1_Channel1_IRQHandler+0x8>)
 8001a0e:	f000 bc87 	b.w	8002320 <HAL_DMA_IRQHandler>
 8001a12:	bf00      	nop
 8001a14:	200010a8 	.word	0x200010a8

08001a18 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a18:	4801      	ldr	r0, [pc, #4]	; (8001a20 <TIM1_UP_IRQHandler+0x8>)
 8001a1a:	f001 b987 	b.w	8002d2c <HAL_TIM_IRQHandler>
 8001a1e:	bf00      	nop
 8001a20:	200010ec 	.word	0x200010ec

08001a24 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a24:	4801      	ldr	r0, [pc, #4]	; (8001a2c <USART3_IRQHandler+0x8>)
 8001a26:	f001 bc33 	b.w	8003290 <HAL_UART_IRQHandler>
 8001a2a:	bf00      	nop
 8001a2c:	2000117c 	.word	0x2000117c

08001a30 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a34:	f000 bdfa 	b.w	800262c <HAL_GPIO_EXTI_IRQHandler>

08001a38 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a38:	2001      	movs	r0, #1
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a3e:	f003 f9c9 	bl	8004dd4 <__errno>
 8001a42:	2316      	movs	r3, #22
 8001a44:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a46:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4a:	bd08      	pop	{r3, pc}

08001a4c <_exit>:

void _exit (int status)
{
 8001a4c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a4e:	f003 f9c1 	bl	8004dd4 <__errno>
 8001a52:	2316      	movs	r3, #22
 8001a54:	6003      	str	r3, [r0, #0]
 8001a56:	e7fe      	b.n	8001a56 <_exit+0xa>

08001a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a58:	4770      	bx	lr
	...

08001a5c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	2210      	movs	r2, #16
 8001a60:	2100      	movs	r1, #0
 8001a62:	a802      	add	r0, sp, #8
 8001a64:	f003 f9f3 	bl	8004e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8000-1;
 8001a68:	f641 723f 	movw	r2, #7999	; 0x1f3f
  htim4.Instance = TIM4;
 8001a6c:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 8000-1;
 8001a6e:	4915      	ldr	r1, [pc, #84]	; (8001ac4 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 8000-1;
 8001a72:	e880 0006 	stmia.w	r0, {r1, r2}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0xffff;
 8001a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0xffff;
 8001a80:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a86:	f001 fa2b 	bl	8002ee0 <HAL_TIM_Base_Init>
 8001a8a:	b108      	cbz	r0, 8001a90 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8001a8c:	f7ff ff4d 	bl	800192a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a94:	a902      	add	r1, sp, #8
 8001a96:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a98:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f001 fa57 	bl	8002f4c <HAL_TIM_ConfigClockSource>
 8001a9e:	b108      	cbz	r0, 8001aa4 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8001aa0:	f7ff ff43 	bl	800192a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	4669      	mov	r1, sp
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aae:	f001 fae1 	bl	8003074 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	b108      	cbz	r0, 8001ab8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f7ff ff39 	bl	800192a <Error_Handler>
  }

}
 8001ab8:	b007      	add	sp, #28
 8001aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001abe:	bf00      	nop
 8001ac0:	20001134 	.word	0x20001134
 8001ac4:	40000800 	.word	0x40000800

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_TIM_Base_MspInit+0x24>)
{
 8001acc:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	61da      	str	r2, [r3, #28]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ae8:	b002      	add	sp, #8
 8001aea:	4770      	bx	lr
 8001aec:	40000800 	.word	0x40000800

08001af0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001af0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8001af2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001afa:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8001afc:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b00:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b02:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b04:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b06:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b08:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0e:	f001 fb2d 	bl	800316c <HAL_UART_Init>
 8001b12:	b118      	cbz	r0, 8001b1c <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b18:	f7ff bf07 	b.w	800192a <Error_Handler>
 8001b1c:	bd08      	pop	{r3, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000117c 	.word	0x2000117c
 8001b24:	40004800 	.word	0x40004800

08001b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	2210      	movs	r2, #16
 8001b30:	2100      	movs	r1, #0
 8001b32:	a802      	add	r0, sp, #8
 8001b34:	f003 f98b 	bl	8004e4e <memset>
  if(uartHandle->Instance==USART3)
 8001b38:	6822      	ldr	r2, [r4, #0]
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_UART_MspInit+0x80>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d130      	bne.n	8001ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b40:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001b44:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b4c:	61da      	str	r2, [r3, #28]
 8001b4e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b52:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	f042 0208 	orr.w	r2, r2, #8
 8001b62:	619a      	str	r2, [r3, #24]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f000 fc64 	bl	8002448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	a902      	add	r1, sp, #8
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f000 fc5b 	bl	8002448 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001b92:	2027      	movs	r0, #39	; 0x27
 8001b94:	4622      	mov	r2, r4
 8001b96:	2105      	movs	r1, #5
 8001b98:	f000 faca 	bl	8002130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b9c:	2027      	movs	r0, #39	; 0x27
 8001b9e:	f000 fafb 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba2:	b006      	add	sp, #24
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	40010c00 	.word	0x40010c00

08001bb0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x20>)
{
 8001bb2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbe:	f000 faa5 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fee0 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff feb6 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	bd08      	pop	{r3, pc}
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x10>)
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_IncTick+0x14>)
 8001bd8:	6811      	ldr	r1, [r2, #0]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	440b      	add	r3, r1
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	200011bc 	.word	0x200011bc
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bec:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <HAL_GetTick+0x8>)
 8001bee:	6818      	ldr	r0, [r3, #0]
}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200011bc 	.word	0x200011bc

08001bf8 <HAL_ADC_ConvCpltCallback>:
 8001bf8:	4770      	bx	lr

08001bfa <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001bfc:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c00:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001c04:	d11b      	bne.n	8001c3e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	6892      	ldr	r2, [r2, #8]
 8001c12:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c16:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001c1a:	d10c      	bne.n	8001c36 <ADC_DMAConvCplt+0x3c>
 8001c1c:	7b1a      	ldrb	r2, [r3, #12]
 8001c1e:	b952      	cbnz	r2, 8001c36 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c2a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c2c:	bf5e      	ittt	pl
 8001c2e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001c30:	f042 0201 	orrpl.w	r2, r2, #1
 8001c34:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
 8001c3c:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4718      	bx	r3

08001c48 <HAL_ADC_ConvHalfCpltCallback>:
 8001c48:	4770      	bx	lr

08001c4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c4a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001c4e:	f7ff fffb 	bl	8001c48 <HAL_ADC_ConvHalfCpltCallback>
 8001c52:	bd08      	pop	{r3, pc}

08001c54 <HAL_ADC_ErrorCallback>:
{
 8001c54:	4770      	bx	lr

08001c56 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c56:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001c58:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c60:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c6a:	f7ff fff3 	bl	8001c54 <HAL_ADC_ErrorCallback>
 8001c6e:	bd08      	pop	{r3, pc}

08001c70 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001c70:	2300      	movs	r3, #0
{ 
 8001c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001c74:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001c76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d074      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0xf8>
 8001c7e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001c80:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001c82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001c86:	2d06      	cmp	r5, #6
 8001c88:	6802      	ldr	r2, [r0, #0]
 8001c8a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001c8e:	680c      	ldr	r4, [r1, #0]
 8001c90:	d825      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c92:	442b      	add	r3, r5
 8001c94:	251f      	movs	r5, #31
 8001c96:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	409d      	lsls	r5, r3
 8001c9c:	ea26 0505 	bic.w	r5, r6, r5
 8001ca0:	fa04 f303 	lsl.w	r3, r4, r3
 8001ca4:	432b      	orrs	r3, r5
 8001ca6:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ca8:	2c09      	cmp	r4, #9
 8001caa:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001cae:	688d      	ldr	r5, [r1, #8]
 8001cb0:	d92f      	bls.n	8001d12 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cb2:	2607      	movs	r6, #7
 8001cb4:	4423      	add	r3, r4
 8001cb6:	68d1      	ldr	r1, [r2, #12]
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	409e      	lsls	r6, r3
 8001cbc:	ea21 0106 	bic.w	r1, r1, r6
 8001cc0:	fa05 f303 	lsl.w	r3, r5, r3
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc8:	f1a4 0310 	sub.w	r3, r4, #16
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d92b      	bls.n	8001d28 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001cde:	2d0c      	cmp	r5, #12
 8001ce0:	d80b      	bhi.n	8001cfa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ce2:	442b      	add	r3, r5
 8001ce4:	251f      	movs	r5, #31
 8001ce6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001ce8:	3b23      	subs	r3, #35	; 0x23
 8001cea:	409d      	lsls	r5, r3
 8001cec:	ea26 0505 	bic.w	r5, r6, r5
 8001cf0:	fa04 f303 	lsl.w	r3, r4, r3
 8001cf4:	432b      	orrs	r3, r5
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	e7d6      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cfa:	442b      	add	r3, r5
 8001cfc:	251f      	movs	r5, #31
 8001cfe:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001d00:	3b41      	subs	r3, #65	; 0x41
 8001d02:	409d      	lsls	r5, r3
 8001d04:	ea26 0505 	bic.w	r5, r6, r5
 8001d08:	fa04 f303 	lsl.w	r3, r4, r3
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d10:	e7ca      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d12:	2607      	movs	r6, #7
 8001d14:	6911      	ldr	r1, [r2, #16]
 8001d16:	4423      	add	r3, r4
 8001d18:	409e      	lsls	r6, r3
 8001d1a:	ea21 0106 	bic.w	r1, r1, r6
 8001d1e:	fa05 f303 	lsl.w	r3, r5, r3
 8001d22:	430b      	orrs	r3, r1
 8001d24:	6113      	str	r3, [r2, #16]
 8001d26:	e7cf      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0xfc>)
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d116      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d2e:	6893      	ldr	r3, [r2, #8]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	d4cd      	bmi.n	8001cd0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d34:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d36:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d3e:	d1c7      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_ADC_ConfigChannel+0x100>)
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_ADC_ConfigChannel+0x104>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	4353      	muls	r3, r2
            wait_loop_index--;
 8001d4e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001d50:	9b01      	ldr	r3, [sp, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0bc      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	e7f8      	b.n	8001d4e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e7b4      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e7b5      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x68>
 8001d6c:	40012400 	.word	0x40012400
 8001d70:	20000004 	.word	0x20000004
 8001d74:	000f4240 	.word	0x000f4240

08001d78 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001d78:	2300      	movs	r3, #0
{
 8001d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001d7c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d7e:	6803      	ldr	r3, [r0, #0]
{
 8001d80:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	07d2      	lsls	r2, r2, #31
 8001d86:	d502      	bpl.n	8001d8e <ADC_Enable+0x16>
  return HAL_OK;
 8001d88:	2000      	movs	r0, #0
}
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <ADC_Enable+0x68>)
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <ADC_Enable+0x6c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001da0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	b9c3      	cbnz	r3, 8001dd8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001da6:	f7ff ff21 	bl	8001bec <HAL_GetTick>
 8001daa:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	689d      	ldr	r5, [r3, #8]
 8001db0:	f015 0501 	ands.w	r5, r5, #1
 8001db4:	d1e8      	bne.n	8001d88 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001db6:	f7ff ff19 	bl	8001bec <HAL_GetTick>
 8001dba:	1b80      	subs	r0, r0, r6
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9f5      	bls.n	8001dac <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001dc2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001dce:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dd6:	e7d8      	b.n	8001d8a <ADC_Enable+0x12>
      wait_loop_index--;
 8001dd8:	9b01      	ldr	r3, [sp, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	e7e0      	b.n	8001da0 <ADC_Enable+0x28>
 8001dde:	bf00      	nop
 8001de0:	20000004 	.word	0x20000004
 8001de4:	000f4240 	.word	0x000f4240

08001de8 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001de8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001dec:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001dee:	2b01      	cmp	r3, #1
{
 8001df0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001df2:	d054      	beq.n	8001e9e <HAL_ADC_Start+0xb6>
 8001df4:	2301      	movs	r3, #1
 8001df6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001dfa:	f7ff ffbd 	bl	8001d78 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d149      	bne.n	8001e96 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d104      	bne.n	8001e24 <HAL_ADC_Start+0x3c>
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <HAL_ADC_Start+0xc0>)
 8001e1c:	684a      	ldr	r2, [r1, #4]
 8001e1e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001e22:	d12e      	bne.n	8001e82 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e2a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e2c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e2e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e30:	bf41      	itttt	mi
 8001e32:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8001e34:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001e38:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001e3c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e44:	bf1c      	itt	ne
 8001e46:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001e48:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e54:	f06f 0202 	mvn.w	r2, #2
 8001e58:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001e60:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001e64:	d113      	bne.n	8001e8e <HAL_ADC_Start+0xa6>
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_ADC_Start+0xbc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e6c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001e70:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e72:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001e76:	d10a      	bne.n	8001e8e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e88:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e8a:	684a      	ldr	r2, [r1, #4]
 8001e8c:	e7cf      	b.n	8001e2e <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e94:	e7f3      	b.n	8001e7e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001e96:	2300      	movs	r3, #0
 8001e98:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001e9c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001e9e:	2002      	movs	r0, #2
}
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40012800 	.word	0x40012800
 8001ea8:	40012400 	.word	0x40012400

08001eac <HAL_ADC_Start_DMA>:
{
 8001eac:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001eb0:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <HAL_ADC_Start_DMA+0x108>)
 8001eb4:	6802      	ldr	r2, [r0, #0]
{
 8001eb6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001eb8:	429a      	cmp	r2, r3
{
 8001eba:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ebc:	d002      	beq.n	8001ec4 <HAL_ADC_Start_DMA+0x18>
 8001ebe:	493e      	ldr	r1, [pc, #248]	; (8001fb8 <HAL_ADC_Start_DMA+0x10c>)
 8001ec0:	428a      	cmp	r2, r1
 8001ec2:	d103      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x20>
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001eca:	d16e      	bne.n	8001faa <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001ecc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d06c      	beq.n	8001fae <HAL_ADC_Start_DMA+0x102>
 8001ed4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001ed6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001ed8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001edc:	f7ff ff4c 	bl	8001d78 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ee0:	4606      	mov	r6, r0
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d15d      	bne.n	8001fa2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ee8:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001eea:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	f020 0001 	bic.w	r0, r0, #1
 8001ef4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ef8:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001efa:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001efc:	d104      	bne.n	8001f08 <HAL_ADC_Start_DMA+0x5c>
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_ADC_Start_DMA+0x108>)
 8001f00:	6853      	ldr	r3, [r2, #4]
 8001f02:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001f06:	d13e      	bne.n	8001f86 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f0e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f10:	684b      	ldr	r3, [r1, #4]
 8001f12:	055a      	lsls	r2, r3, #21
 8001f14:	d505      	bpl.n	8001f22 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f20:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f24:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f26:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2a:	bf18      	it	ne
 8001f2c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f2e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f30:	bf18      	it	ne
 8001f32:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001f36:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f40:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f42:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_ADC_Start_DMA+0x114>)
 8001f46:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_ADC_Start_DMA+0x118>)
 8001f4a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f4c:	f06f 0302 	mvn.w	r3, #2
 8001f50:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f54:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f60:	4643      	mov	r3, r8
 8001f62:	f000 f957 	bl	8002214 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001f6e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	bf0c      	ite	eq
 8001f76:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f7a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001f7e:	609a      	str	r2, [r3, #8]
}
 8001f80:	4630      	mov	r0, r6
 8001f82:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f8e:	6853      	ldr	r3, [r2, #4]
 8001f90:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f92:	bf41      	itttt	mi
 8001f94:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001f96:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001f9a:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001f9e:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001fa0:	e7bf      	b.n	8001f22 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001fa8:	e7ea      	b.n	8001f80 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001faa:	2601      	movs	r6, #1
 8001fac:	e7e8      	b.n	8001f80 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001fae:	2602      	movs	r6, #2
 8001fb0:	e7e6      	b.n	8001f80 <HAL_ADC_Start_DMA+0xd4>
 8001fb2:	bf00      	nop
 8001fb4:	40012400 	.word	0x40012400
 8001fb8:	40012800 	.word	0x40012800
 8001fbc:	08001bfb 	.word	0x08001bfb
 8001fc0:	08001c4b 	.word	0x08001c4b
 8001fc4:	08001c57 	.word	0x08001c57

08001fc8 <ADC_ConversionStop_Disable>:
{
 8001fc8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fca:	6803      	ldr	r3, [r0, #0]
{
 8001fcc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	07d2      	lsls	r2, r2, #31
 8001fd2:	d401      	bmi.n	8001fd8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001fe0:	f7ff fe04 	bl	8001bec <HAL_GetTick>
 8001fe4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	07db      	lsls	r3, r3, #31
 8001fec:	d5f2      	bpl.n	8001fd4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fee:	f7ff fdfd 	bl	8001bec <HAL_GetTick>
 8001ff2:	1b40      	subs	r0, r0, r5
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	d9f6      	bls.n	8001fe6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffc:	f043 0310 	orr.w	r3, r3, #16
 8002000:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800200a:	bd38      	pop	{r3, r4, r5, pc}

0800200c <HAL_ADC_Init>:
{
 800200c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800200e:	4604      	mov	r4, r0
 8002010:	2800      	cmp	r0, #0
 8002012:	d071      	beq.n	80020f8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002014:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002016:	b923      	cbnz	r3, 8002022 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800201a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800201e:	f7ff faf1 	bl	8001604 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff ffd0 	bl	8001fc8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800202a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800202e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002030:	d164      	bne.n	80020fc <HAL_ADC_Init+0xf0>
 8002032:	2800      	cmp	r0, #0
 8002034:	d162      	bne.n	80020fc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002036:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800203c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002046:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002048:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800204c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800204e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002052:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002056:	d038      	beq.n	80020ca <HAL_ADC_Init+0xbe>
 8002058:	2901      	cmp	r1, #1
 800205a:	bf14      	ite	ne
 800205c:	4606      	movne	r6, r0
 800205e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002062:	7d25      	ldrb	r5, [r4, #20]
 8002064:	2d01      	cmp	r5, #1
 8002066:	d107      	bne.n	8002078 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002068:	2b00      	cmp	r3, #0
 800206a:	d130      	bne.n	80020ce <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800206c:	69a3      	ldr	r3, [r4, #24]
 800206e:	3b01      	subs	r3, #1
 8002070:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8002074:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002078:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800207a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800207e:	685d      	ldr	r5, [r3, #4]
 8002080:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8002084:	ea45 0506 	orr.w	r5, r5, r6
 8002088:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800208a:	689e      	ldr	r6, [r3, #8]
 800208c:	4d1d      	ldr	r5, [pc, #116]	; (8002104 <HAL_ADC_Init+0xf8>)
 800208e:	ea05 0506 	and.w	r5, r5, r6
 8002092:	ea45 0502 	orr.w	r5, r5, r2
 8002096:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002098:	d001      	beq.n	800209e <HAL_ADC_Init+0x92>
 800209a:	2901      	cmp	r1, #1
 800209c:	d120      	bne.n	80020e0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800209e:	6921      	ldr	r1, [r4, #16]
 80020a0:	3901      	subs	r1, #1
 80020a2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80020a4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80020a6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80020aa:	4329      	orrs	r1, r5
 80020ac:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_ADC_Init+0xfc>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d115      	bne.n	80020e4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	2300      	movs	r3, #0
 80020ba:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80020bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020ca:	460e      	mov	r6, r1
 80020cc:	e7c9      	b.n	8002062 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020de:	e7cb      	b.n	8002078 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80020e0:	2100      	movs	r1, #0
 80020e2:	e7df      	b.n	80020a4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80020e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020e6:	f023 0312 	bic.w	r3, r3, #18
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
}
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	62a3      	str	r3, [r4, #40]	; 0x28
 8002102:	e7f9      	b.n	80020f8 <HAL_ADC_Init+0xec>
 8002104:	ffe1f7fd 	.word	0xffe1f7fd
 8002108:	ff1f0efe 	.word	0xff1f0efe

0800210c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002112:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002126:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002128:	60d3      	str	r3, [r2, #12]
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	68dc      	ldr	r4, [r3, #12]
 8002136:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	2b04      	cmp	r3, #4
 8002142:	bf28      	it	cs
 8002144:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214c:	bf98      	it	ls
 800214e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	fa05 f303 	lsl.w	r3, r5, r3
 8002154:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002158:	bf88      	it	hi
 800215a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4019      	ands	r1, r3
 800215e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	fa05 f404 	lsl.w	r4, r5, r4
 8002164:	3c01      	subs	r4, #1
 8002166:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002168:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216a:	ea42 0201 	orr.w	r2, r2, r1
 800216e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	bfa9      	itett	ge
 8002174:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	4b06      	ldrlt	r3, [pc, #24]	; (8002194 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	b2d2      	uxtbge	r2, r2
 800217c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	bfbb      	ittet	lt
 8002182:	f000 000f 	andlt.w	r0, r0, #15
 8002186:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	541a      	strblt	r2, [r3, r0]
 800218e:	bd30      	pop	{r4, r5, pc}
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	e000ed14 	.word	0xe000ed14

08002198 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002198:	2800      	cmp	r0, #0
 800219a:	db08      	blt.n	80021ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219c:	2301      	movs	r3, #1
 800219e:	0942      	lsrs	r2, r0, #5
 80021a0:	f000 001f 	and.w	r0, r0, #31
 80021a4:	fa03 f000 	lsl.w	r0, r3, r0
 80021a8:	4b01      	ldr	r3, [pc, #4]	; (80021b0 <HAL_NVIC_EnableIRQ+0x18>)
 80021aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021b6:	b330      	cbz	r0, 8002206 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021b8:	2214      	movs	r2, #20
 80021ba:	6801      	ldr	r1, [r0, #0]
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021be:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80021cc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80021ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80021d0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021d2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80021d6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021da:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	4323      	orrs	r3, r4
 80021e0:	6904      	ldr	r4, [r0, #16]
 80021e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e4:	6944      	ldr	r4, [r0, #20]
 80021e6:	4323      	orrs	r3, r4
 80021e8:	6984      	ldr	r4, [r0, #24]
 80021ea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ec:	69c4      	ldr	r4, [r0, #28]
 80021ee:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80021f0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021f2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021f4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80021f8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021fe:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8002202:	4618      	mov	r0, r3
 8002204:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
}
 8002208:	bd10      	pop	{r4, pc}
 800220a:	bf00      	nop
 800220c:	bffdfff8 	.word	0xbffdfff8
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002216:	f890 4020 	ldrb.w	r4, [r0, #32]
 800221a:	2c01      	cmp	r4, #1
 800221c:	d035      	beq.n	800228a <HAL_DMA_Start_IT+0x76>
 800221e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002220:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002224:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002228:	42a5      	cmp	r5, r4
 800222a:	f04f 0600 	mov.w	r6, #0
 800222e:	f04f 0402 	mov.w	r4, #2
 8002232:	d128      	bne.n	8002286 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002234:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002238:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800223c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800223e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002240:	f026 0601 	bic.w	r6, r6, #1
 8002244:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002246:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002248:	40bd      	lsls	r5, r7
 800224a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	6843      	ldr	r3, [r0, #4]
 8002250:	6805      	ldr	r5, [r0, #0]
 8002252:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002254:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002256:	bf0b      	itete	eq
 8002258:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800225a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800225c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800225e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002260:	b14b      	cbz	r3, 8002276 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002268:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800226a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	f043 030a 	orr.w	r3, r3, #10
 8002284:	e7f0      	b.n	8002268 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8002286:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800228a:	2002      	movs	r0, #2
}
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002290 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002290:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002294:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229a:	2304      	movs	r3, #4
 800229c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800229e:	2001      	movs	r0, #1
 80022a0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a2:	6803      	ldr	r3, [r0, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f022 020e 	bic.w	r2, r2, #14
 80022aa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022b4:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_DMA_Abort_IT+0x88>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_DMA_Abort_IT+0x6a>
 80022ba:	3214      	adds	r2, #20
 80022bc:	4293      	cmp	r3, r2
 80022be:	d01e      	beq.n	80022fe <HAL_DMA_Abort_IT+0x6e>
 80022c0:	3214      	adds	r2, #20
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Abort_IT+0x72>
 80022c6:	3214      	adds	r2, #20
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01d      	beq.n	8002308 <HAL_DMA_Abort_IT+0x78>
 80022cc:	3214      	adds	r2, #20
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_Abort_IT+0x7e>
 80022d2:	3214      	adds	r2, #20
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf0c      	ite	eq
 80022d8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80022dc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80022e2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022e4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80022ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80022ee:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80022f2:	b17b      	cbz	r3, 8002314 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80022f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	4620      	mov	r0, r4
 80022f8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022fa:	2301      	movs	r3, #1
 80022fc:	e7f0      	b.n	80022e0 <HAL_DMA_Abort_IT+0x50>
 80022fe:	2310      	movs	r3, #16
 8002300:	e7ee      	b.n	80022e0 <HAL_DMA_Abort_IT+0x50>
 8002302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002306:	e7eb      	b.n	80022e0 <HAL_DMA_Abort_IT+0x50>
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	e7e8      	b.n	80022e0 <HAL_DMA_Abort_IT+0x50>
 800230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002312:	e7e5      	b.n	80022e0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	4618      	mov	r0, r3
}
 8002316:	bd10      	pop	{r4, pc}
 8002318:	40020008 	.word	0x40020008
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_DMA_IRQHandler>:
{
 8002320:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002322:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002324:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002326:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002328:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800232a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800232c:	4095      	lsls	r5, r2
 800232e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002330:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002332:	d032      	beq.n	800239a <HAL_DMA_IRQHandler+0x7a>
 8002334:	074d      	lsls	r5, r1, #29
 8002336:	d530      	bpl.n	800239a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800233c:	bf5e      	ittt	pl
 800233e:	681a      	ldrpl	r2, [r3, #0]
 8002340:	f022 0204 	bicpl.w	r2, r2, #4
 8002344:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002346:	4a3e      	ldr	r2, [pc, #248]	; (8002440 <HAL_DMA_IRQHandler+0x120>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d019      	beq.n	8002380 <HAL_DMA_IRQHandler+0x60>
 800234c:	3214      	adds	r2, #20
 800234e:	4293      	cmp	r3, r2
 8002350:	d018      	beq.n	8002384 <HAL_DMA_IRQHandler+0x64>
 8002352:	3214      	adds	r2, #20
 8002354:	4293      	cmp	r3, r2
 8002356:	d017      	beq.n	8002388 <HAL_DMA_IRQHandler+0x68>
 8002358:	3214      	adds	r2, #20
 800235a:	4293      	cmp	r3, r2
 800235c:	d017      	beq.n	800238e <HAL_DMA_IRQHandler+0x6e>
 800235e:	3214      	adds	r2, #20
 8002360:	4293      	cmp	r3, r2
 8002362:	d017      	beq.n	8002394 <HAL_DMA_IRQHandler+0x74>
 8002364:	3214      	adds	r2, #20
 8002366:	4293      	cmp	r3, r2
 8002368:	bf0c      	ite	eq
 800236a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800236e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <HAL_DMA_IRQHandler+0x124>)
 8002374:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002376:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05e      	beq.n	800243a <HAL_DMA_IRQHandler+0x11a>
}
 800237c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800237e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002380:	2304      	movs	r3, #4
 8002382:	e7f6      	b.n	8002372 <HAL_DMA_IRQHandler+0x52>
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	e7f4      	b.n	8002372 <HAL_DMA_IRQHandler+0x52>
 8002388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238c:	e7f1      	b.n	8002372 <HAL_DMA_IRQHandler+0x52>
 800238e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002392:	e7ee      	b.n	8002372 <HAL_DMA_IRQHandler+0x52>
 8002394:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002398:	e7eb      	b.n	8002372 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800239a:	2502      	movs	r5, #2
 800239c:	4095      	lsls	r5, r2
 800239e:	4225      	tst	r5, r4
 80023a0:	d035      	beq.n	800240e <HAL_DMA_IRQHandler+0xee>
 80023a2:	078d      	lsls	r5, r1, #30
 80023a4:	d533      	bpl.n	800240e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	0694      	lsls	r4, r2, #26
 80023aa:	d406      	bmi.n	80023ba <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f022 020a 	bic.w	r2, r2, #10
 80023b2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80023b4:	2201      	movs	r2, #1
 80023b6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_DMA_IRQHandler+0x120>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d019      	beq.n	80023f4 <HAL_DMA_IRQHandler+0xd4>
 80023c0:	3214      	adds	r2, #20
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
 80023c6:	3214      	adds	r2, #20
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d017      	beq.n	80023fc <HAL_DMA_IRQHandler+0xdc>
 80023cc:	3214      	adds	r2, #20
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d017      	beq.n	8002402 <HAL_DMA_IRQHandler+0xe2>
 80023d2:	3214      	adds	r2, #20
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d017      	beq.n	8002408 <HAL_DMA_IRQHandler+0xe8>
 80023d8:	3214      	adds	r2, #20
 80023da:	4293      	cmp	r3, r2
 80023dc:	bf0c      	ite	eq
 80023de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80023e2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_DMA_IRQHandler+0x124>)
 80023e8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80023ea:	2300      	movs	r3, #0
 80023ec:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80023f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023f2:	e7c1      	b.n	8002378 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f4:	2302      	movs	r3, #2
 80023f6:	e7f6      	b.n	80023e6 <HAL_DMA_IRQHandler+0xc6>
 80023f8:	2320      	movs	r3, #32
 80023fa:	e7f4      	b.n	80023e6 <HAL_DMA_IRQHandler+0xc6>
 80023fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002400:	e7f1      	b.n	80023e6 <HAL_DMA_IRQHandler+0xc6>
 8002402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002406:	e7ee      	b.n	80023e6 <HAL_DMA_IRQHandler+0xc6>
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	e7eb      	b.n	80023e6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800240e:	2508      	movs	r5, #8
 8002410:	4095      	lsls	r5, r2
 8002412:	4225      	tst	r5, r4
 8002414:	d011      	beq.n	800243a <HAL_DMA_IRQHandler+0x11a>
 8002416:	0709      	lsls	r1, r1, #28
 8002418:	d50f      	bpl.n	800243a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	f021 010e 	bic.w	r1, r1, #14
 8002420:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002422:	2301      	movs	r3, #1
 8002424:	fa03 f202 	lsl.w	r2, r3, r2
 8002428:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800242a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800242c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002430:	2300      	movs	r3, #0
 8002432:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002436:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002438:	e79e      	b.n	8002378 <HAL_DMA_IRQHandler+0x58>
}
 800243a:	bc70      	pop	{r4, r5, r6}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40020008 	.word	0x40020008
 8002444:	40020000 	.word	0x40020000

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800244c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800244e:	4626      	mov	r6, r4
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002452:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80025fc <HAL_GPIO_Init+0x1b4>
 8002456:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8002600 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	680a      	ldr	r2, [r1, #0]
 800245c:	fa32 f506 	lsrs.w	r5, r2, r6
 8002460:	d102      	bne.n	8002468 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002462:	b003      	add	sp, #12
 8002464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002468:	f04f 0801 	mov.w	r8, #1
 800246c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002470:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002474:	4590      	cmp	r8, r2
 8002476:	d17f      	bne.n	8002578 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8002478:	684d      	ldr	r5, [r1, #4]
 800247a:	2d12      	cmp	r5, #18
 800247c:	f000 80aa 	beq.w	80025d4 <HAL_GPIO_Init+0x18c>
 8002480:	f200 8083 	bhi.w	800258a <HAL_GPIO_Init+0x142>
 8002484:	2d02      	cmp	r5, #2
 8002486:	f000 80a2 	beq.w	80025ce <HAL_GPIO_Init+0x186>
 800248a:	d877      	bhi.n	800257c <HAL_GPIO_Init+0x134>
 800248c:	2d00      	cmp	r5, #0
 800248e:	f000 8089 	beq.w	80025a4 <HAL_GPIO_Init+0x15c>
 8002492:	2d01      	cmp	r5, #1
 8002494:	f000 8099 	beq.w	80025ca <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002498:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800249c:	2aff      	cmp	r2, #255	; 0xff
 800249e:	bf93      	iteet	ls
 80024a0:	4682      	movls	sl, r0
 80024a2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80024a6:	3d08      	subhi	r5, #8
 80024a8:	f8d0 b000 	ldrls.w	fp, [r0]
 80024ac:	bf92      	itee	ls
 80024ae:	00b5      	lslls	r5, r6, #2
 80024b0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80024b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b6:	fa09 f805 	lsl.w	r8, r9, r5
 80024ba:	ea2b 0808 	bic.w	r8, fp, r8
 80024be:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c2:	bf88      	it	hi
 80024c4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c8:	ea48 0505 	orr.w	r5, r8, r5
 80024cc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80024d4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80024d8:	d04e      	beq.n	8002578 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024da:	4d45      	ldr	r5, [pc, #276]	; (80025f0 <HAL_GPIO_Init+0x1a8>)
 80024dc:	4f44      	ldr	r7, [pc, #272]	; (80025f0 <HAL_GPIO_Init+0x1a8>)
 80024de:	69ad      	ldr	r5, [r5, #24]
 80024e0:	f026 0803 	bic.w	r8, r6, #3
 80024e4:	f045 0501 	orr.w	r5, r5, #1
 80024e8:	61bd      	str	r5, [r7, #24]
 80024ea:	69bd      	ldr	r5, [r7, #24]
 80024ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80024f0:	f005 0501 	and.w	r5, r5, #1
 80024f4:	9501      	str	r5, [sp, #4]
 80024f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024fa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024fe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002500:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002504:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002508:	fa09 f90b 	lsl.w	r9, r9, fp
 800250c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002510:	4d38      	ldr	r5, [pc, #224]	; (80025f4 <HAL_GPIO_Init+0x1ac>)
 8002512:	42a8      	cmp	r0, r5
 8002514:	d063      	beq.n	80025de <HAL_GPIO_Init+0x196>
 8002516:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800251a:	42a8      	cmp	r0, r5
 800251c:	d061      	beq.n	80025e2 <HAL_GPIO_Init+0x19a>
 800251e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002522:	42a8      	cmp	r0, r5
 8002524:	d05f      	beq.n	80025e6 <HAL_GPIO_Init+0x19e>
 8002526:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800252a:	42a8      	cmp	r0, r5
 800252c:	bf0c      	ite	eq
 800252e:	2503      	moveq	r5, #3
 8002530:	2504      	movne	r5, #4
 8002532:	fa05 f50b 	lsl.w	r5, r5, fp
 8002536:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800253e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002540:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002544:	bf14      	ite	ne
 8002546:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002548:	4395      	biceq	r5, r2
 800254a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800254c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002552:	bf14      	ite	ne
 8002554:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002556:	4395      	biceq	r5, r2
 8002558:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800255a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800255c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002560:	bf14      	ite	ne
 8002562:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002564:	4395      	biceq	r5, r2
 8002566:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002568:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800256a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800256e:	bf14      	ite	ne
 8002570:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002572:	ea25 0202 	biceq.w	r2, r5, r2
 8002576:	60da      	str	r2, [r3, #12]
	position++;
 8002578:	3601      	adds	r6, #1
 800257a:	e76e      	b.n	800245a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800257c:	2d03      	cmp	r5, #3
 800257e:	d022      	beq.n	80025c6 <HAL_GPIO_Init+0x17e>
 8002580:	2d11      	cmp	r5, #17
 8002582:	d189      	bne.n	8002498 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002584:	68cc      	ldr	r4, [r1, #12]
 8002586:	3404      	adds	r4, #4
          break;
 8002588:	e786      	b.n	8002498 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800258a:	4f1b      	ldr	r7, [pc, #108]	; (80025f8 <HAL_GPIO_Init+0x1b0>)
 800258c:	42bd      	cmp	r5, r7
 800258e:	d009      	beq.n	80025a4 <HAL_GPIO_Init+0x15c>
 8002590:	d812      	bhi.n	80025b8 <HAL_GPIO_Init+0x170>
 8002592:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002604 <HAL_GPIO_Init+0x1bc>
 8002596:	454d      	cmp	r5, r9
 8002598:	d004      	beq.n	80025a4 <HAL_GPIO_Init+0x15c>
 800259a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800259e:	454d      	cmp	r5, r9
 80025a0:	f47f af7a 	bne.w	8002498 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025a4:	688c      	ldr	r4, [r1, #8]
 80025a6:	b1c4      	cbz	r4, 80025da <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80025aa:	bf0c      	ite	eq
 80025ac:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80025b0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2408      	movs	r4, #8
 80025b6:	e76f      	b.n	8002498 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80025b8:	4575      	cmp	r5, lr
 80025ba:	d0f3      	beq.n	80025a4 <HAL_GPIO_Init+0x15c>
 80025bc:	4565      	cmp	r5, ip
 80025be:	d0f1      	beq.n	80025a4 <HAL_GPIO_Init+0x15c>
 80025c0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002608 <HAL_GPIO_Init+0x1c0>
 80025c4:	e7eb      	b.n	800259e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c6:	2400      	movs	r4, #0
 80025c8:	e766      	b.n	8002498 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ca:	68cc      	ldr	r4, [r1, #12]
          break;
 80025cc:	e764      	b.n	8002498 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ce:	68cc      	ldr	r4, [r1, #12]
 80025d0:	3408      	adds	r4, #8
          break;
 80025d2:	e761      	b.n	8002498 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d4:	68cc      	ldr	r4, [r1, #12]
 80025d6:	340c      	adds	r4, #12
          break;
 80025d8:	e75e      	b.n	8002498 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025da:	2404      	movs	r4, #4
 80025dc:	e75c      	b.n	8002498 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025de:	2500      	movs	r5, #0
 80025e0:	e7a7      	b.n	8002532 <HAL_GPIO_Init+0xea>
 80025e2:	2501      	movs	r5, #1
 80025e4:	e7a5      	b.n	8002532 <HAL_GPIO_Init+0xea>
 80025e6:	2502      	movs	r5, #2
 80025e8:	e7a3      	b.n	8002532 <HAL_GPIO_Init+0xea>
 80025ea:	bf00      	nop
 80025ec:	40010400 	.word	0x40010400
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	10210000 	.word	0x10210000
 80025fc:	10310000 	.word	0x10310000
 8002600:	10320000 	.word	0x10320000
 8002604:	10110000 	.word	0x10110000
 8002608:	10220000 	.word	0x10220000

0800260c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800260c:	b10a      	cbz	r2, 8002612 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260e:	6101      	str	r1, [r0, #16]
 8002610:	4770      	bx	lr
 8002612:	0409      	lsls	r1, r1, #16
 8002614:	e7fb      	b.n	800260e <HAL_GPIO_WritePin+0x2>

08002616 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002616:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002618:	ea03 0201 	and.w	r2, r3, r1
 800261c:	ea21 0103 	bic.w	r1, r1, r3
 8002620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002624:	6101      	str	r1, [r0, #16]
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_EXTI_IRQHandler>:
{
 800262c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	4201      	tst	r1, r0
 8002634:	d002      	beq.n	800263c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002636:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002638:	f7ff fff6 	bl	8002628 <HAL_GPIO_EXTI_Callback>
 800263c:	bd08      	pop	{r3, pc}
 800263e:	bf00      	nop
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	4605      	mov	r5, r0
 800264a:	b908      	cbnz	r0, 8002650 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800264c:	2001      	movs	r0, #1
 800264e:	e03c      	b.n	80026ca <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	07db      	lsls	r3, r3, #31
 8002654:	d410      	bmi.n	8002678 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	079f      	lsls	r7, r3, #30
 800265a:	d45d      	bmi.n	8002718 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	0719      	lsls	r1, r3, #28
 8002660:	f100 8094 	bmi.w	800278c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	075a      	lsls	r2, r3, #29
 8002668:	f100 80be 	bmi.w	80027e8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266c:	69e8      	ldr	r0, [r5, #28]
 800266e:	2800      	cmp	r0, #0
 8002670:	f040 812c 	bne.w	80028cc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002674:	2000      	movs	r0, #0
 8002676:	e028      	b.n	80026ca <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4c8f      	ldr	r4, [pc, #572]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800267a:	6863      	ldr	r3, [r4, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d007      	beq.n	8002694 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002684:	6863      	ldr	r3, [r4, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	03de      	lsls	r6, r3, #15
 8002692:	d506      	bpl.n	80026a2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	039c      	lsls	r4, r3, #14
 8002698:	d5dd      	bpl.n	8002656 <HAL_RCC_OscConfig+0x12>
 800269a:	686b      	ldr	r3, [r5, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1da      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
 80026a0:	e7d4      	b.n	800264c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	686b      	ldr	r3, [r5, #4]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x8c>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026b2:	f7ff fa9b 	bl	8001bec <HAL_GetTick>
 80026b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	0398      	lsls	r0, r3, #14
 80026bc:	d4cb      	bmi.n	8002656 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026be:	f7ff fa95 	bl	8001bec <HAL_GetTick>
 80026c2:	1b80      	subs	r0, r0, r6
 80026c4:	2864      	cmp	r0, #100	; 0x64
 80026c6:	d9f7      	bls.n	80026b8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80026c8:	2003      	movs	r0, #3
}
 80026ca:	b002      	add	sp, #8
 80026cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	b99b      	cbnz	r3, 80026fa <HAL_RCC_OscConfig+0xb6>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026e2:	f7ff fa83 	bl	8001bec <HAL_GetTick>
 80026e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	0399      	lsls	r1, r3, #14
 80026ec:	d5b3      	bpl.n	8002656 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ee:	f7ff fa7d 	bl	8001bec <HAL_GetTick>
 80026f2:	1b80      	subs	r0, r0, r6
 80026f4:	2864      	cmp	r0, #100	; 0x64
 80026f6:	d9f7      	bls.n	80026e8 <HAL_RCC_OscConfig+0xa4>
 80026f8:	e7e6      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	d103      	bne.n	800270a <HAL_RCC_OscConfig+0xc6>
 8002702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	e7cf      	b.n	80026aa <HAL_RCC_OscConfig+0x66>
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002716:	e7cb      	b.n	80026b0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002718:	4c67      	ldr	r4, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 800271a:	6863      	ldr	r3, [r4, #4]
 800271c:	f013 0f0c 	tst.w	r3, #12
 8002720:	d007      	beq.n	8002732 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d110      	bne.n	800274e <HAL_RCC_OscConfig+0x10a>
 800272c:	6863      	ldr	r3, [r4, #4]
 800272e:	03da      	lsls	r2, r3, #15
 8002730:	d40d      	bmi.n	800274e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	079b      	lsls	r3, r3, #30
 8002736:	d502      	bpl.n	800273e <HAL_RCC_OscConfig+0xfa>
 8002738:	692b      	ldr	r3, [r5, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d186      	bne.n	800264c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	696a      	ldr	r2, [r5, #20]
 8002742:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002746:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800274a:	6023      	str	r3, [r4, #0]
 800274c:	e786      	b.n	800265c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274e:	692a      	ldr	r2, [r5, #16]
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x278>)
 8002752:	b16a      	cbz	r2, 8002770 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002758:	f7ff fa48 	bl	8001bec <HAL_GetTick>
 800275c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	079f      	lsls	r7, r3, #30
 8002762:	d4ec      	bmi.n	800273e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff fa42 	bl	8001bec <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	2802      	cmp	r0, #2
 800276c:	d9f7      	bls.n	800275e <HAL_RCC_OscConfig+0x11a>
 800276e:	e7ab      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002770:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002772:	f7ff fa3b 	bl	8001bec <HAL_GetTick>
 8002776:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	0798      	lsls	r0, r3, #30
 800277c:	f57f af6e 	bpl.w	800265c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7ff fa34 	bl	8001bec <HAL_GetTick>
 8002784:	1b80      	subs	r0, r0, r6
 8002786:	2802      	cmp	r0, #2
 8002788:	d9f6      	bls.n	8002778 <HAL_RCC_OscConfig+0x134>
 800278a:	e79d      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278c:	69aa      	ldr	r2, [r5, #24]
 800278e:	4c4a      	ldr	r4, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCC_OscConfig+0x27c>)
 8002792:	b1da      	cbz	r2, 80027cc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002798:	f7ff fa28 	bl	8001bec <HAL_GetTick>
 800279c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027a0:	079b      	lsls	r3, r3, #30
 80027a2:	d50d      	bpl.n	80027c0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80027b2:	bf00      	nop
  }
  while (Delay --);
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	9201      	str	r2, [sp, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <HAL_RCC_OscConfig+0x16e>
 80027be:	e751      	b.n	8002664 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7ff fa14 	bl	8001bec <HAL_GetTick>
 80027c4:	1b80      	subs	r0, r0, r6
 80027c6:	2802      	cmp	r0, #2
 80027c8:	d9e9      	bls.n	800279e <HAL_RCC_OscConfig+0x15a>
 80027ca:	e77d      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80027cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027ce:	f7ff fa0d 	bl	8001bec <HAL_GetTick>
 80027d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027d6:	079f      	lsls	r7, r3, #30
 80027d8:	f57f af44 	bpl.w	8002664 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff fa06 	bl	8001bec <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	2802      	cmp	r0, #2
 80027e4:	d9f6      	bls.n	80027d4 <HAL_RCC_OscConfig+0x190>
 80027e6:	e76f      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4c33      	ldr	r4, [pc, #204]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 80027ea:	69e3      	ldr	r3, [r4, #28]
 80027ec:	00d8      	lsls	r0, r3, #3
 80027ee:	d424      	bmi.n	800283a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80027f0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	69e3      	ldr	r3, [r4, #28]
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61e3      	str	r3, [r4, #28]
 80027fa:	69e3      	ldr	r3, [r4, #28]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4e30      	ldr	r6, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x284>)
 8002806:	6833      	ldr	r3, [r6, #0]
 8002808:	05d9      	lsls	r1, r3, #23
 800280a:	d518      	bpl.n	800283e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	68eb      	ldr	r3, [r5, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d126      	bne.n	8002860 <HAL_RCC_OscConfig+0x21c>
 8002812:	6a23      	ldr	r3, [r4, #32]
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800281a:	f7ff f9e7 	bl	8001bec <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002822:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	6a23      	ldr	r3, [r4, #32]
 8002826:	079b      	lsls	r3, r3, #30
 8002828:	d53f      	bpl.n	80028aa <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800282a:	2f00      	cmp	r7, #0
 800282c:	f43f af1e 	beq.w	800266c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	69e3      	ldr	r3, [r4, #28]
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	61e3      	str	r3, [r4, #28]
 8002838:	e718      	b.n	800266c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2700      	movs	r7, #0
 800283c:	e7e2      	b.n	8002804 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	6833      	ldr	r3, [r6, #0]
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002846:	f7ff f9d1 	bl	8001bec <HAL_GetTick>
 800284a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	6833      	ldr	r3, [r6, #0]
 800284e:	05da      	lsls	r2, r3, #23
 8002850:	d4dc      	bmi.n	800280c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7ff f9cb 	bl	8001bec <HAL_GetTick>
 8002856:	eba0 0008 	sub.w	r0, r0, r8
 800285a:	2864      	cmp	r0, #100	; 0x64
 800285c:	d9f6      	bls.n	800284c <HAL_RCC_OscConfig+0x208>
 800285e:	e733      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	b9ab      	cbnz	r3, 800288e <HAL_RCC_OscConfig+0x24a>
 8002862:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6223      	str	r3, [r4, #32]
 800286e:	6a23      	ldr	r3, [r4, #32]
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002876:	f7ff f9b9 	bl	8001bec <HAL_GetTick>
 800287a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	6a23      	ldr	r3, [r4, #32]
 800287e:	0798      	lsls	r0, r3, #30
 8002880:	d5d3      	bpl.n	800282a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff f9b3 	bl	8001bec <HAL_GetTick>
 8002886:	1b80      	subs	r0, r0, r6
 8002888:	4540      	cmp	r0, r8
 800288a:	d9f7      	bls.n	800287c <HAL_RCC_OscConfig+0x238>
 800288c:	e71c      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288e:	2b05      	cmp	r3, #5
 8002890:	6a23      	ldr	r3, [r4, #32]
 8002892:	d103      	bne.n	800289c <HAL_RCC_OscConfig+0x258>
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6223      	str	r3, [r4, #32]
 800289a:	e7ba      	b.n	8002812 <HAL_RCC_OscConfig+0x1ce>
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6223      	str	r3, [r4, #32]
 80028a2:	6a23      	ldr	r3, [r4, #32]
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	e7b6      	b.n	8002818 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7ff f99f 	bl	8001bec <HAL_GetTick>
 80028ae:	eba0 0008 	sub.w	r0, r0, r8
 80028b2:	42b0      	cmp	r0, r6
 80028b4:	d9b6      	bls.n	8002824 <HAL_RCC_OscConfig+0x1e0>
 80028b6:	e707      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	42420000 	.word	0x42420000
 80028c0:	42420480 	.word	0x42420480
 80028c4:	20000004 	.word	0x20000004
 80028c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x334>)
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	461c      	mov	r4, r3
 80028d2:	f002 020c 	and.w	r2, r2, #12
 80028d6:	2a08      	cmp	r2, #8
 80028d8:	d03d      	beq.n	8002956 <HAL_RCC_OscConfig+0x312>
 80028da:	2300      	movs	r3, #0
 80028dc:	4e27      	ldr	r6, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80028e0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	d12b      	bne.n	800293c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80028e4:	f7ff f982 	bl	8001bec <HAL_GetTick>
 80028e8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	0199      	lsls	r1, r3, #6
 80028ee:	d41f      	bmi.n	8002930 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028f0:	6a2b      	ldr	r3, [r5, #32]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f8:	6862      	ldr	r2, [r4, #4]
 80028fa:	68a9      	ldr	r1, [r5, #8]
 80028fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002900:	430a      	orrs	r2, r1
 8002902:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002906:	6862      	ldr	r2, [r4, #4]
 8002908:	430b      	orrs	r3, r1
 800290a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800290e:	4313      	orrs	r3, r2
 8002910:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002912:	2301      	movs	r3, #1
 8002914:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002916:	f7ff f969 	bl	8001bec <HAL_GetTick>
 800291a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	019a      	lsls	r2, r3, #6
 8002920:	f53f aea8 	bmi.w	8002674 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f962 	bl	8001bec <HAL_GetTick>
 8002928:	1b40      	subs	r0, r0, r5
 800292a:	2802      	cmp	r0, #2
 800292c:	d9f6      	bls.n	800291c <HAL_RCC_OscConfig+0x2d8>
 800292e:	e6cb      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff f95c 	bl	8001bec <HAL_GetTick>
 8002934:	1bc0      	subs	r0, r0, r7
 8002936:	2802      	cmp	r0, #2
 8002938:	d9d7      	bls.n	80028ea <HAL_RCC_OscConfig+0x2a6>
 800293a:	e6c5      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800293c:	f7ff f956 	bl	8001bec <HAL_GetTick>
 8002940:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	f57f ae95 	bpl.w	8002674 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff f94f 	bl	8001bec <HAL_GetTick>
 800294e:	1b40      	subs	r0, r0, r5
 8002950:	2802      	cmp	r0, #2
 8002952:	d9f6      	bls.n	8002942 <HAL_RCC_OscConfig+0x2fe>
 8002954:	e6b8      	b.n	80026c8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002956:	2801      	cmp	r0, #1
 8002958:	f43f aeb7 	beq.w	80026ca <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800295c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	6a2b      	ldr	r3, [r5, #32]
 8002960:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002964:	429a      	cmp	r2, r3
 8002966:	f47f ae71 	bne.w	800264c <HAL_RCC_OscConfig+0x8>
 800296a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800296c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002970:	1ac0      	subs	r0, r0, r3
 8002972:	bf18      	it	ne
 8002974:	2001      	movne	r0, #1
 8002976:	e6a8      	b.n	80026ca <HAL_RCC_OscConfig+0x86>
 8002978:	40021000 	.word	0x40021000
 800297c:	42420060 	.word	0x42420060

08002980 <HAL_RCC_GetSysClockFreq>:
{
 8002980:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002984:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002986:	ac02      	add	r4, sp, #8
 8002988:	f103 0510 	add.w	r5, r3, #16
 800298c:	4622      	mov	r2, r4
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	3308      	adds	r3, #8
 8002994:	c203      	stmia	r2!, {r0, r1}
 8002996:	42ab      	cmp	r3, r5
 8002998:	4614      	mov	r4, r2
 800299a:	d1f7      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800299c:	2301      	movs	r3, #1
 800299e:	f88d 3004 	strb.w	r3, [sp, #4]
 80029a2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80029a4:	4911      	ldr	r1, [pc, #68]	; (80029ec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029a6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80029aa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80029ac:	f003 020c 	and.w	r2, r3, #12
 80029b0:	2a08      	cmp	r2, #8
 80029b2:	d117      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80029b8:	a806      	add	r0, sp, #24
 80029ba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029bc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c2:	d50c      	bpl.n	80029de <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c6:	480a      	ldr	r0, [pc, #40]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ce:	aa06      	add	r2, sp, #24
 80029d0:	4413      	add	r3, r2
 80029d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029d6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80029da:	b007      	add	sp, #28
 80029dc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x74>)
 80029e0:	4350      	muls	r0, r2
 80029e2:	e7fa      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80029e6:	e7f8      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x5a>
 80029e8:	08005068 	.word	0x08005068
 80029ec:	40021000 	.word	0x40021000
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	003d0900 	.word	0x003d0900

080029f8 <HAL_RCC_ClockConfig>:
{
 80029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029fc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80029fe:	4604      	mov	r4, r0
 8002a00:	b910      	cbnz	r0, 8002a08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4a45      	ldr	r2, [pc, #276]	; (8002b20 <HAL_RCC_ClockConfig+0x128>)
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d329      	bcc.n	8002a68 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	6821      	ldr	r1, [r4, #0]
 8002a16:	078e      	lsls	r6, r1, #30
 8002a18:	d431      	bmi.n	8002a7e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	07ca      	lsls	r2, r1, #31
 8002a1c:	d444      	bmi.n	8002aa8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_RCC_ClockConfig+0x128>)
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	429d      	cmp	r5, r3
 8002a28:	d367      	bcc.n	8002afa <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	4d3d      	ldr	r5, [pc, #244]	; (8002b24 <HAL_RCC_ClockConfig+0x12c>)
 8002a2e:	f012 0f04 	tst.w	r2, #4
 8002a32:	d16e      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	0713      	lsls	r3, r2, #28
 8002a36:	d506      	bpl.n	8002a46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a38:	686b      	ldr	r3, [r5, #4]
 8002a3a:	6922      	ldr	r2, [r4, #16]
 8002a3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a46:	f7ff ff9b 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 8002a4a:	686b      	ldr	r3, [r5, #4]
 8002a4c:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <HAL_RCC_ClockConfig+0x130>)
 8002a4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	40d8      	lsrs	r0, r3
 8002a56:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCC_ClockConfig+0x134>)
 8002a58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002a5a:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_ClockConfig+0x138>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	f7fe ff93 	bl	8001988 <HAL_InitTick>
  return HAL_OK;
 8002a62:	2000      	movs	r0, #0
 8002a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f023 0307 	bic.w	r3, r3, #7
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4299      	cmp	r1, r3
 8002a7a:	d1c2      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xa>
 8002a7c:	e7ca      	b.n	8002a14 <HAL_RCC_ClockConfig+0x1c>
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	bf1e      	ittt	ne
 8002a86:	685a      	ldrne	r2, [r3, #4]
 8002a88:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002a8c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	bf42      	ittt	mi
 8002a92:	685a      	ldrmi	r2, [r3, #4]
 8002a94:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002a98:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68a0      	ldr	r0, [r4, #8]
 8002a9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002aa2:	4302      	orrs	r2, r0
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e7b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa8:	6862      	ldr	r2, [r4, #4]
 8002aaa:	4e1e      	ldr	r6, [pc, #120]	; (8002b24 <HAL_RCC_ClockConfig+0x12c>)
 8002aac:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab0:	d11b      	bne.n	8002aea <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	d0a4      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002ac6:	f7ff f891 	bl	8001bec <HAL_GetTick>
 8002aca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002acc:	6873      	ldr	r3, [r6, #4]
 8002ace:	6862      	ldr	r2, [r4, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ad8:	d0a1      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ada:	f7ff f887 	bl	8001bec <HAL_GetTick>
 8002ade:	1bc0      	subs	r0, r0, r7
 8002ae0:	4540      	cmp	r0, r8
 8002ae2:	d9f3      	bls.n	8002acc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002ae4:	2003      	movs	r0, #3
}
 8002ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aea:	2a02      	cmp	r2, #2
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002af2:	e7e0      	b.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	f013 0f02 	tst.w	r3, #2
 8002af8:	e7dd      	b.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f023 0307 	bic.w	r3, r3, #7
 8002b00:	432b      	orrs	r3, r5
 8002b02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	429d      	cmp	r5, r3
 8002b0c:	f47f af79 	bne.w	8002a02 <HAL_RCC_ClockConfig+0xa>
 8002b10:	e78b      	b.n	8002a2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b12:	686b      	ldr	r3, [r5, #4]
 8002b14:	68e1      	ldr	r1, [r4, #12]
 8002b16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	606b      	str	r3, [r5, #4]
 8002b1e:	e789      	b.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08005078 	.word	0x08005078
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	2000000c 	.word	0x2000000c

08002b34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b42:	6810      	ldr	r0, [r2, #0]
}
 8002b44:	40d8      	lsrs	r0, r3
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08005088 	.word	0x08005088
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b62:	6810      	ldr	r0, [r2, #0]
}
 8002b64:	40d8      	lsrs	r0, r3
 8002b66:	4770      	bx	lr
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08005088 	.word	0x08005088
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b74:	230f      	movs	r3, #15
 8002b76:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetClockConfig+0x34>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	f002 0203 	and.w	r2, r2, #3
 8002b80:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002b88:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002b90:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b9a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_GetClockConfig+0x38>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bb0:	6803      	ldr	r3, [r0, #0]
{
 8002bb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bb6:	07d9      	lsls	r1, r3, #31
{
 8002bb8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bba:	d520      	bpl.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbc:	4c35      	ldr	r4, [pc, #212]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002bbe:	69e3      	ldr	r3, [r4, #28]
 8002bc0:	00da      	lsls	r2, r3, #3
 8002bc2:	d432      	bmi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002bc4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	69e3      	ldr	r3, [r4, #28]
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	61e3      	str	r3, [r4, #28]
 8002bce:	69e3      	ldr	r3, [r4, #28]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4e2f      	ldr	r6, [pc, #188]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bda:	6833      	ldr	r3, [r6, #0]
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	d526      	bpl.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002be6:	d136      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be8:	6a23      	ldr	r3, [r4, #32]
 8002bea:	686a      	ldr	r2, [r5, #4]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf4:	b11f      	cbz	r7, 8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	69e3      	ldr	r3, [r4, #28]
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfe:	6828      	ldr	r0, [r5, #0]
 8002c00:	0783      	lsls	r3, r0, #30
 8002c02:	d506      	bpl.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c04:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002c06:	68a9      	ldr	r1, [r5, #8]
 8002c08:	6853      	ldr	r3, [r2, #4]
 8002c0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c12:	f010 0010 	ands.w	r0, r0, #16
 8002c16:	d01b      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002c1a:	68e9      	ldr	r1, [r5, #12]
 8002c1c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c1e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6053      	str	r3, [r2, #4]
 8002c28:	e012      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2700      	movs	r7, #0
 8002c2c:	e7d4      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	6833      	ldr	r3, [r6, #0]
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c36:	f7fe ffd9 	bl	8001bec <HAL_GetTick>
 8002c3a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	6833      	ldr	r3, [r6, #0]
 8002c3e:	05d8      	lsls	r0, r3, #23
 8002c40:	d4ce      	bmi.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe ffd3 	bl	8001bec <HAL_GetTick>
 8002c46:	eba0 0008 	sub.w	r0, r0, r8
 8002c4a:	2864      	cmp	r0, #100	; 0x64
 8002c4c:	d9f6      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002c4e:	2003      	movs	r0, #3
}
 8002c50:	b002      	add	sp, #8
 8002c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c56:	686a      	ldr	r2, [r5, #4]
 8002c58:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d0c3      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c60:	2001      	movs	r0, #1
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c64:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c68:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002c70:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c72:	07d9      	lsls	r1, r3, #31
 8002c74:	d5b8      	bpl.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002c76:	f7fe ffb9 	bl	8001bec <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	6a23      	ldr	r3, [r4, #32]
 8002c82:	079a      	lsls	r2, r3, #30
 8002c84:	d4b0      	bmi.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe ffb1 	bl	8001bec <HAL_GetTick>
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	4540      	cmp	r0, r8
 8002c8e:	d9f7      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002c90:	e7dd      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	42420440 	.word	0x42420440

08002ca0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d120      	bne.n	8002cea <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cae:	6803      	ldr	r3, [r0, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_TIM_Base_Start_IT+0x50>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x34>
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x34>
 8002cc4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x34>
 8002ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	2a06      	cmp	r2, #6
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
}
 8002ce8:	4770      	bx	lr
    return HAL_ERROR;
 8002cea:	2001      	movs	r0, #1
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00

08002cf4 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cfe:	f241 1211 	movw	r2, #4369	; 0x1111
 8002d02:	6a19      	ldr	r1, [r3, #32]
 8002d04:	4211      	tst	r1, r2
 8002d06:	d108      	bne.n	8002d1a <HAL_TIM_Base_Stop_IT+0x26>
 8002d08:	f240 4244 	movw	r2, #1092	; 0x444
 8002d0c:	6a19      	ldr	r1, [r3, #32]
 8002d0e:	4211      	tst	r1, r2
 8002d10:	bf02      	ittt	eq
 8002d12:	681a      	ldreq	r2, [r3, #0]
 8002d14:	f022 0201 	biceq.w	r2, r2, #1
 8002d18:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002d20:	2000      	movs	r0, #0
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_OC_DelayElapsedCallback>:
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_IC_CaptureCallback>:
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_TriggerCallback>:
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2c:	6803      	ldr	r3, [r0, #0]
{
 8002d2e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d30:	691a      	ldr	r2, [r3, #16]
{
 8002d32:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d34:	0791      	lsls	r1, r2, #30
 8002d36:	d50e      	bpl.n	8002d56 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	0792      	lsls	r2, r2, #30
 8002d3c:	d50b      	bpl.n	8002d56 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d3e:	f06f 0202 	mvn.w	r2, #2
 8002d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d44:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d48:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d4a:	079b      	lsls	r3, r3, #30
 8002d4c:	d077      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	f7ff ffea 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	2300      	movs	r3, #0
 8002d54:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	0750      	lsls	r0, r2, #29
 8002d5c:	d510      	bpl.n	8002d80 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	0751      	lsls	r1, r2, #29
 8002d62:	d50d      	bpl.n	8002d80 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d64:	f06f 0204 	mvn.w	r2, #4
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6a:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d70:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d76:	d068      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d78:	f7ff ffd5 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	0712      	lsls	r2, r2, #28
 8002d86:	d50f      	bpl.n	8002da8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	0710      	lsls	r0, r2, #28
 8002d8c:	d50c      	bpl.n	8002da8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d8e:	f06f 0208 	mvn.w	r2, #8
 8002d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d94:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9e:	d05a      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002da0:	f7ff ffc1 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da4:	2300      	movs	r3, #0
 8002da6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	06d2      	lsls	r2, r2, #27
 8002dae:	d510      	bpl.n	8002dd2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	06d0      	lsls	r0, r2, #27
 8002db4:	d50d      	bpl.n	8002dd2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db6:	f06f 0210 	mvn.w	r2, #16
 8002dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbc:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc8:	d04b      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	f7ff ffac 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	07d1      	lsls	r1, r2, #31
 8002dd8:	d508      	bpl.n	8002dec <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	07d2      	lsls	r2, r2, #31
 8002dde:	d505      	bpl.n	8002dec <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de0:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de8:	f7fe fa10 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	0610      	lsls	r0, r2, #24
 8002df2:	d508      	bpl.n	8002e06 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	0611      	lsls	r1, r2, #24
 8002df8:	d505      	bpl.n	8002e06 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	f000 f96a 	bl	80030da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	0652      	lsls	r2, r2, #25
 8002e0c:	d508      	bpl.n	8002e20 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	0650      	lsls	r0, r2, #25
 8002e12:	d505      	bpl.n	8002e20 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e1c:	f7ff ff85 	bl	8002d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	0691      	lsls	r1, r2, #26
 8002e26:	d522      	bpl.n	8002e6e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	0692      	lsls	r2, r2, #26
 8002e2c:	d51f      	bpl.n	8002e6e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e2e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e32:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002e3a:	f000 b94d 	b.w	80030d8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	f7ff ff71 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff ff70 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e48:	e783      	b.n	8002d52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	f7ff ff6b 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7ff ff6a 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e54:	e792      	b.n	8002d7c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	f7ff ff65 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff ff64 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e60:	e7a0      	b.n	8002da4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	f7ff ff5f 	bl	8002d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff ff5e 	bl	8002d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e6c:	e7af      	b.n	8002dce <HAL_TIM_IRQHandler+0xa2>
 8002e6e:	bd10      	pop	{r4, pc}

08002e70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e70:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002e72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	4290      	cmp	r0, r2
 8002e76:	d00a      	beq.n	8002e8e <TIM_Base_SetConfig+0x1e>
 8002e78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x1e>
 8002e7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e82:	4290      	cmp	r0, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x1e>
 8002e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e8a:	4290      	cmp	r0, r2
 8002e8c:	d115      	bne.n	8002eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002e8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <TIM_Base_SetConfig+0x6c>)
 8002e98:	4290      	cmp	r0, r2
 8002e9a:	d00a      	beq.n	8002eb2 <TIM_Base_SetConfig+0x42>
 8002e9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ea0:	d007      	beq.n	8002eb2 <TIM_Base_SetConfig+0x42>
 8002ea2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ea6:	4290      	cmp	r0, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_Base_SetConfig+0x42>
 8002eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eae:	4290      	cmp	r0, r2
 8002eb0:	d103      	bne.n	8002eba <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eba:	694a      	ldr	r2, [r1, #20]
 8002ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ec2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec4:	688b      	ldr	r3, [r1, #8]
 8002ec6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec8:	680b      	ldr	r3, [r1, #0]
 8002eca:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <TIM_Base_SetConfig+0x6c>)
 8002ece:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	bf04      	itt	eq
 8002ed2:	690b      	ldreq	r3, [r1, #16]
 8002ed4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	6143      	str	r3, [r0, #20]
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <HAL_TIM_Base_Init>:
{
 8002ee0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b330      	cbz	r0, 8002f34 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eee:	b91b      	cbnz	r3, 8002ef8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002ef0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ef4:	f7fe fde8 	bl	8001ac8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	1d21      	adds	r1, r4, #4
 8002f02:	f7ff ffb5 	bl	8002e70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f06:	2301      	movs	r3, #1
  return HAL_OK;
 8002f08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f34:	2001      	movs	r0, #1
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f38:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f3c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f42:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f48:	6083      	str	r3, [r0, #8]
 8002f4a:	bd10      	pop	{r4, pc}

08002f4c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002f52:	2b01      	cmp	r3, #1
{
 8002f54:	4604      	mov	r4, r0
 8002f56:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002f5a:	d019      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x44>
 8002f5c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f62:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002f64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f72:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d065      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xfa>
 8002f7a:	d815      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x5c>
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d00c      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x4e>
 8002f80:	d807      	bhi.n	8002f92 <HAL_TIM_ConfigClockSource+0x46>
 8002f82:	b153      	cbz	r3, 8002f9a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f8c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x4e>
 8002f96:	2b30      	cmp	r3, #48	; 0x30
 8002f98:	d1f4      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002f9a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	e01a      	b.n	8002fde <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d034      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xca>
 8002fac:	d819      	bhi.n	8002fe2 <HAL_TIM_ConfigClockSource+0x96>
 8002fae:	2b50      	cmp	r3, #80	; 0x50
 8002fb0:	d1e8      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	684a      	ldr	r2, [r1, #4]
 8002fb4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fb6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fba:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fbe:	f025 0501 	bic.w	r5, r5, #1
 8002fc2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002fc6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fcc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fd0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fd2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fd4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002fde:	6083      	str	r3, [r0, #8]
 8002fe0:	e7d0      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002fe2:	2b70      	cmp	r3, #112	; 0x70
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0xb4>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	d1cb      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	68cb      	ldr	r3, [r1, #12]
 8002fee:	684a      	ldr	r2, [r1, #4]
 8002ff0:	6889      	ldr	r1, [r1, #8]
 8002ff2:	f7ff ffa1 	bl	8002f38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	6893      	ldr	r3, [r2, #8]
 8002ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffe:	e008      	b.n	8003012 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003000:	68cb      	ldr	r3, [r1, #12]
 8003002:	684a      	ldr	r2, [r1, #4]
 8003004:	6889      	ldr	r1, [r1, #8]
 8003006:	f7ff ff97 	bl	8002f38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800300e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003012:	6093      	str	r3, [r2, #8]
      break;
 8003014:	e7b6      	b.n	8002f84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003016:	684d      	ldr	r5, [r1, #4]
 8003018:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800301a:	6a01      	ldr	r1, [r0, #32]
 800301c:	f021 0110 	bic.w	r1, r1, #16
 8003020:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003024:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003026:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800302e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003032:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003036:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003038:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800303a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003040:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003044:	e7cb      	b.n	8002fde <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	684a      	ldr	r2, [r1, #4]
 8003048:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800304a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003052:	f025 0501 	bic.w	r5, r5, #1
 8003056:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003058:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800305a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800305c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003064:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003066:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003068:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003072:	e7b4      	b.n	8002fde <HAL_TIM_ConfigClockSource+0x92>

08003074 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003074:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003078:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800307a:	2b01      	cmp	r3, #1
 800307c:	f04f 0302 	mov.w	r3, #2
 8003080:	d025      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003082:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003088:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800308a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800308c:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 800308e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8003092:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003096:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003098:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	4c0d      	ldr	r4, [pc, #52]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800309e:	42a3      	cmp	r3, r4
 80030a0:	d00a      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d007      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80030a8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d003      	beq.n	80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80030b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	d104      	bne.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030be:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c8:	2300      	movs	r3, #0
 80030ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80030ce:	4618      	mov	r0, r3

  return HAL_OK;
}
 80030d0:	bd30      	pop	{r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	40012c00 	.word	0x40012c00

080030d8 <HAL_TIMEx_CommutCallback>:
 80030d8:	4770      	bx	lr

080030da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030da:	4770      	bx	lr

080030dc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030dc:	6803      	ldr	r3, [r0, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ee:	2320      	movs	r3, #32
 80030f0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80030f4:	4770      	bx	lr
	...

080030f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	6803      	ldr	r3, [r0, #0]
 80030fe:	68c1      	ldr	r1, [r0, #12]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003106:	430a      	orrs	r2, r1
 8003108:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800310a:	6882      	ldr	r2, [r0, #8]
 800310c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800310e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003110:	4302      	orrs	r2, r0
 8003112:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003114:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003118:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800311e:	430a      	orrs	r2, r1
 8003120:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	69a1      	ldr	r1, [r4, #24]
 8003126:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800312a:	430a      	orrs	r2, r1
 800312c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <UART_SetConfig+0x70>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d115      	bne.n	8003160 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7ff fd0e 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	2319      	movs	r3, #25
 800313a:	4358      	muls	r0, r3
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	2264      	movs	r2, #100	; 0x64
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	fbb0 f0f3 	udiv	r0, r0, r3
 8003146:	fbb0 f1f2 	udiv	r1, r0, r2
 800314a:	fb02 0311 	mls	r3, r2, r1, r0
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	; 0x32
 8003152:	fbb3 f3f2 	udiv	r3, r3, r2
 8003156:	6825      	ldr	r5, [r4, #0]
 8003158:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800315c:	60ab      	str	r3, [r5, #8]
 800315e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003160:	f7ff fce8 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003164:	e7e8      	b.n	8003138 <UART_SetConfig+0x40>
 8003166:	bf00      	nop
 8003168:	40013800 	.word	0x40013800

0800316c <HAL_UART_Init>:
{
 800316c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800316e:	4604      	mov	r4, r0
 8003170:	b340      	cbz	r0, 80031c4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800317a:	b91b      	cbnz	r3, 8003184 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800317c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003180:	f7fe fcd2 	bl	8001b28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003186:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003188:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800318c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800318e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003194:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003196:	f7ff ffaf 	bl	80030f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ac:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80031b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80031c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031c4:	2001      	movs	r0, #1
}
 80031c6:	bd10      	pop	{r4, pc}

080031c8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d120      	bne.n	8003212 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80031d0:	b1e9      	cbz	r1, 800320e <HAL_UART_Receive_IT+0x46>
 80031d2:	b1e2      	cbz	r2, 800320e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80031d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d01a      	beq.n	8003212 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80031dc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80031de:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031ea:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80031ec:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031ee:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80031f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031f4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80031f8:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031fa:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80031fc:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031fe:	f041 0101 	orr.w	r1, r1, #1
 8003202:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003204:	68d1      	ldr	r1, [r2, #12]
 8003206:	f041 0120 	orr.w	r1, r1, #32
 800320a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800320c:	4770      	bx	lr
      return HAL_ERROR;
 800320e:	2001      	movs	r0, #1
 8003210:	4770      	bx	lr
    return HAL_BUSY;
 8003212:	2002      	movs	r0, #2
}
 8003214:	4770      	bx	lr

08003216 <HAL_UART_TxCpltCallback>:
 8003216:	4770      	bx	lr

08003218 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003218:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800321c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800321e:	2b22      	cmp	r3, #34	; 0x22
 8003220:	d132      	bne.n	8003288 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003222:	6881      	ldr	r1, [r0, #8]
 8003224:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003226:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800322a:	6802      	ldr	r2, [r0, #0]
 800322c:	d120      	bne.n	8003270 <UART_Receive_IT+0x58>
 800322e:	6901      	ldr	r1, [r0, #16]
 8003230:	bb09      	cbnz	r1, 8003276 <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003232:	6852      	ldr	r2, [r2, #4]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 800323c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 800323e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003240:	3c01      	subs	r4, #1
 8003242:	b2a4      	uxth	r4, r4
 8003244:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003246:	b98c      	cbnz	r4, 800326c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003248:	6803      	ldr	r3, [r0, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	f022 0220 	bic.w	r2, r2, #32
 8003250:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003258:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003262:	2320      	movs	r3, #32
 8003264:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003268:	f7fd ff9c 	bl	80011a4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800326c:	2000      	movs	r0, #0
}
 800326e:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003270:	b931      	cbnz	r1, 8003280 <UART_Receive_IT+0x68>
 8003272:	6901      	ldr	r1, [r0, #16]
 8003274:	b921      	cbnz	r1, 8003280 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003276:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003278:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 800327a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800327c:	3301      	adds	r3, #1
 800327e:	e7dd      	b.n	800323c <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003280:	6852      	ldr	r2, [r2, #4]
 8003282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003286:	e7f7      	b.n	8003278 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8003288:	2002      	movs	r0, #2
 800328a:	bd10      	pop	{r4, pc}

0800328c <HAL_UART_ErrorCallback>:
 800328c:	4770      	bx	lr
	...

08003290 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003290:	6803      	ldr	r3, [r0, #0]
{
 8003292:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003294:	681a      	ldr	r2, [r3, #0]
{
 8003296:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003298:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800329a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800329c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800329e:	d107      	bne.n	80032b0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a0:	0696      	lsls	r6, r2, #26
 80032a2:	d55c      	bpl.n	800335e <HAL_UART_IRQHandler+0xce>
 80032a4:	068d      	lsls	r5, r1, #26
 80032a6:	d55a      	bpl.n	800335e <HAL_UART_IRQHandler+0xce>
}
 80032a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80032ac:	f7ff bfb4 	b.w	8003218 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032b0:	f015 0501 	ands.w	r5, r5, #1
 80032b4:	d102      	bne.n	80032bc <HAL_UART_IRQHandler+0x2c>
 80032b6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80032ba:	d050      	beq.n	800335e <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032bc:	07d0      	lsls	r0, r2, #31
 80032be:	d505      	bpl.n	80032cc <HAL_UART_IRQHandler+0x3c>
 80032c0:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032c2:	bf42      	ittt	mi
 80032c4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80032c6:	f043 0301 	orrmi.w	r3, r3, #1
 80032ca:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032cc:	0756      	lsls	r6, r2, #29
 80032ce:	d504      	bpl.n	80032da <HAL_UART_IRQHandler+0x4a>
 80032d0:	b11d      	cbz	r5, 80032da <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032da:	0790      	lsls	r0, r2, #30
 80032dc:	d504      	bpl.n	80032e8 <HAL_UART_IRQHandler+0x58>
 80032de:	b11d      	cbz	r5, 80032e8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032e8:	0713      	lsls	r3, r2, #28
 80032ea:	d506      	bpl.n	80032fa <HAL_UART_IRQHandler+0x6a>
 80032ec:	068e      	lsls	r6, r1, #26
 80032ee:	d400      	bmi.n	80032f2 <HAL_UART_IRQHandler+0x62>
 80032f0:	b11d      	cbz	r5, 80032fa <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d064      	beq.n	80033ca <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003300:	0695      	lsls	r5, r2, #26
 8003302:	d504      	bpl.n	800330e <HAL_UART_IRQHandler+0x7e>
 8003304:	0688      	lsls	r0, r1, #26
 8003306:	d502      	bpl.n	800330e <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff ff85 	bl	8003218 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003310:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003312:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003314:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003316:	0711      	lsls	r1, r2, #28
 8003318:	d402      	bmi.n	8003320 <HAL_UART_IRQHandler+0x90>
 800331a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800331e:	d01a      	beq.n	8003356 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8003320:	f7ff fedc 	bl	80030dc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	0652      	lsls	r2, r2, #25
 800332a:	d510      	bpl.n	800334e <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800332e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003336:	b150      	cbz	r0, 800334e <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_UART_IRQHandler+0x13c>)
 800333a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333c:	f7fe ffa8 	bl	8002290 <HAL_DMA_Abort_IT>
 8003340:	2800      	cmp	r0, #0
 8003342:	d042      	beq.n	80033ca <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003344:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800334c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff ff9c 	bl	800328c <HAL_UART_ErrorCallback>
 8003354:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003356:	f7ff ff99 	bl	800328c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800335c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800335e:	0616      	lsls	r6, r2, #24
 8003360:	d525      	bpl.n	80033ae <HAL_UART_IRQHandler+0x11e>
 8003362:	060d      	lsls	r5, r1, #24
 8003364:	d523      	bpl.n	80033ae <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003366:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800336a:	2a21      	cmp	r2, #33	; 0x21
 800336c:	d12d      	bne.n	80033ca <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	68a2      	ldr	r2, [r4, #8]
 8003370:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003374:	6a22      	ldr	r2, [r4, #32]
 8003376:	d115      	bne.n	80033a4 <HAL_UART_IRQHandler+0x114>
 8003378:	6921      	ldr	r1, [r4, #16]
 800337a:	b999      	cbnz	r1, 80033a4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800337c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003380:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003384:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003386:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003388:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800338a:	3a01      	subs	r2, #1
 800338c:	b292      	uxth	r2, r2
 800338e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003390:	b9da      	cbnz	r2, 80033ca <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003398:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033a4:	1c51      	adds	r1, r2, #1
 80033a6:	6221      	str	r1, [r4, #32]
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e7ec      	b.n	8003388 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033ae:	0650      	lsls	r0, r2, #25
 80033b0:	d50b      	bpl.n	80033ca <HAL_UART_IRQHandler+0x13a>
 80033b2:	064a      	lsls	r2, r1, #25
 80033b4:	d509      	bpl.n	80033ca <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033b6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80033b8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033be:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	2320      	movs	r3, #32
 80033c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80033c6:	f7ff ff26 	bl	8003216 <HAL_UART_TxCpltCallback>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	080033d1 	.word	0x080033d1

080033d0 <UART_DMAAbortOnError>:
{
 80033d0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80033d2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80033d6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033d8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80033da:	f7ff ff57 	bl	800328c <HAL_UART_ErrorCallback>
 80033de:	bd08      	pop	{r3, pc}

080033e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80033e2:	f000 fcd7 	bl	8003d94 <vTaskStartScheduler>
  
  return osOK;
}
 80033e6:	2000      	movs	r0, #0
 80033e8:	bd08      	pop	{r3, pc}

080033ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033ea:	b570      	push	{r4, r5, r6, lr}
 80033ec:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033ee:	6946      	ldr	r6, [r0, #20]
{
 80033f0:	460b      	mov	r3, r1
 80033f2:	b086      	sub	sp, #24
 80033f4:	6840      	ldr	r0, [r0, #4]
 80033f6:	6829      	ldr	r1, [r5, #0]
 80033f8:	692a      	ldr	r2, [r5, #16]
 80033fa:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033fe:	b176      	cbz	r6, 800341e <osThreadCreate+0x34>
 8003400:	69ad      	ldr	r5, [r5, #24]
 8003402:	b165      	cbz	r5, 800341e <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003404:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003406:	bf0c      	ite	eq
 8003408:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800340a:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800340c:	9502      	str	r5, [sp, #8]
 800340e:	e88d 0050 	stmia.w	sp, {r4, r6}
 8003412:	f000 fc5b 	bl	8003ccc <xTaskCreateStatic>
 8003416:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003418:	9805      	ldr	r0, [sp, #20]
}
 800341a:	b006      	add	sp, #24
 800341c:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800341e:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003420:	bf0c      	ite	eq
 8003422:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8003424:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003426:	ad05      	add	r5, sp, #20
 8003428:	b292      	uxth	r2, r2
 800342a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800342e:	f000 fc84 	bl	8003d3a <xTaskCreate>
 8003432:	2801      	cmp	r0, #1
 8003434:	d0f0      	beq.n	8003418 <osThreadCreate+0x2e>
      return NULL;
 8003436:	2000      	movs	r0, #0
 8003438:	e7ef      	b.n	800341a <osThreadCreate+0x30>

0800343a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800343a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800343c:	2800      	cmp	r0, #0
 800343e:	bf08      	it	eq
 8003440:	2001      	moveq	r0, #1
 8003442:	f000 fdef 	bl	8004024 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003446:	2000      	movs	r0, #0
 8003448:	bd08      	pop	{r3, pc}
	...

0800344c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800344c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800344e:	2200      	movs	r2, #0
  uint32_t ulPreviousNotificationValue = 0;
 8003450:	ab04      	add	r3, sp, #16
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003452:	9202      	str	r2, [sp, #8]
  uint32_t ulPreviousNotificationValue = 0;
 8003454:	f843 2d04 	str.w	r2, [r3, #-4]!
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003458:	f3ef 8205 	mrs	r2, IPSR
  
  if (inHandlerMode())
 800345c:	b1ba      	cbz	r2, 800348e <osSignalSet+0x42>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800345e:	aa02      	add	r2, sp, #8
 8003460:	9200      	str	r2, [sp, #0]
 8003462:	2201      	movs	r2, #1
 8003464:	f000 fee8 	bl	8004238 <xTaskGenericNotifyFromISR>
 8003468:	2801      	cmp	r0, #1
 800346a:	d004      	beq.n	8003476 <osSignalSet+0x2a>
      return 0x80000000;
 800346c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003470:	b005      	add	sp, #20
 8003472:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003476:	9b02      	ldr	r3, [sp, #8]
 8003478:	b13b      	cbz	r3, 800348a <osSignalSet+0x3e>
 800347a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <osSignalSet+0x50>)
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 800348a:	9803      	ldr	r0, [sp, #12]
 800348c:	e7f0      	b.n	8003470 <osSignalSet+0x24>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800348e:	2201      	movs	r2, #1
 8003490:	f000 fe6a 	bl	8004168 <xTaskGenericNotify>
 8003494:	2801      	cmp	r0, #1
 8003496:	d0f8      	beq.n	800348a <osSignalSet+0x3e>
 8003498:	e7e8      	b.n	800346c <osSignalSet+0x20>
 800349a:	bf00      	nop
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80034a0:	2300      	movs	r3, #0
{
 80034a2:	b530      	push	{r4, r5, lr}
 80034a4:	b085      	sub	sp, #20
 80034a6:	4604      	mov	r4, r0
 80034a8:	4615      	mov	r5, r2
  ret.value.signals = 0;  
 80034aa:	9302      	str	r3, [sp, #8]
 80034ac:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80034b0:	b110      	cbz	r0, 80034b8 <osSignalWait+0x18>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80034b2:	2382      	movs	r3, #130	; 0x82
    }
    else if(ret.value.signals < 0)
    {
      ret.status =  osErrorValue;     
    }
    else  ret.status =  osEventSignal;
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	e007      	b.n	80034c8 <osSignalWait+0x28>
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80034b8:	4613      	mov	r3, r2
 80034ba:	aa02      	add	r2, sp, #8
 80034bc:	f000 fe10 	bl	80040e0 <xTaskNotifyWait>
 80034c0:	2801      	cmp	r0, #1
 80034c2:	d00b      	beq.n	80034dc <osSignalWait+0x3c>
      if(ticks == 0)  ret.status = osOK;
 80034c4:	b945      	cbnz	r5, 80034d8 <osSignalWait+0x38>
 80034c6:	9501      	str	r5, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80034c8:	ab04      	add	r3, sp, #16
 80034ca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80034ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034d2:	4620      	mov	r0, r4
 80034d4:	b005      	add	sp, #20
 80034d6:	bd30      	pop	{r4, r5, pc}
      else  ret.status = osEventTimeout;
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	e7eb      	b.n	80034b4 <osSignalWait+0x14>
    else if(ret.value.signals < 0)
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	2b00      	cmp	r3, #0
      ret.status =  osErrorValue;     
 80034e0:	bfb4      	ite	lt
 80034e2:	2386      	movlt	r3, #134	; 0x86
    else  ret.status =  osEventSignal;
 80034e4:	2308      	movge	r3, #8
 80034e6:	e7e5      	b.n	80034b4 <osSignalWait+0x14>

080034e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	f100 0308 	add.w	r3, r0, #8
 80034ec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034f6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034f8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034fa:	6003      	str	r3, [r0, #0]
 80034fc:	4770      	bx	lr

080034fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	6103      	str	r3, [r0, #16]
 8003502:	4770      	bx	lr

08003504 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003504:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003506:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003508:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800350a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003510:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003512:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003514:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003516:	3301      	adds	r3, #1
 8003518:	6003      	str	r3, [r0, #0]
 800351a:	4770      	bx	lr

0800351c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800351c:	680a      	ldr	r2, [r1, #0]
{
 800351e:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003520:	1c53      	adds	r3, r2, #1
 8003522:	d10a      	bne.n	800353a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003524:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800352a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800352c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800352e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003530:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003532:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003534:	3301      	adds	r3, #1
 8003536:	6003      	str	r3, [r0, #0]
 8003538:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353a:	f100 0308 	add.w	r3, r0, #8
 800353e:	685c      	ldr	r4, [r3, #4]
 8003540:	6825      	ldr	r5, [r4, #0]
 8003542:	42aa      	cmp	r2, r5
 8003544:	d3ef      	bcc.n	8003526 <vListInsert+0xa>
 8003546:	4623      	mov	r3, r4
 8003548:	e7f9      	b.n	800353e <vListInsert+0x22>

0800354a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800354a:	6841      	ldr	r1, [r0, #4]
 800354c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800354e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003550:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003552:	6882      	ldr	r2, [r0, #8]
 8003554:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800355a:	bf08      	it	eq
 800355c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800355e:	2200      	movs	r2, #0
 8003560:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	3a01      	subs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003568:	6818      	ldr	r0, [r3, #0]
}
 800356a:	4770      	bx	lr

0800356c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800356c:	2300      	movs	r3, #0
{
 800356e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8003570:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <prvTaskExitError+0x3c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	d008      	beq.n	800358c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	e7fe      	b.n	800358a <prvTaskExitError+0x1e>
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0fc      	beq.n	800359c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035a2:	b002      	add	sp, #8
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000010 	.word	0x20000010

080035ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035ac:	4806      	ldr	r0, [pc, #24]	; (80035c8 <prvPortStartFirstTask+0x1c>)
 80035ae:	6800      	ldr	r0, [r0, #0]
 80035b0:	6800      	ldr	r0, [r0, #0]
 80035b2:	f380 8808 	msr	MSP, r0
 80035b6:	b662      	cpsie	i
 80035b8:	b661      	cpsie	f
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	df00      	svc	0
 80035c4:	bf00      	nop
 80035c6:	0000      	.short	0x0000
 80035c8:	e000ed08 	.word	0xe000ed08

080035cc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035d6:	f021 0101 	bic.w	r1, r1, #1
 80035da:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035de:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035e2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80035e6:	3840      	subs	r0, #64	; 0x40
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	0800356d 	.word	0x0800356d

080035f0 <SVC_Handler>:
	__asm volatile (
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <pxCurrentTCBConst2>)
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6808      	ldr	r0, [r1, #0]
 80035f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035fa:	f380 8809 	msr	PSP, r0
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f380 8811 	msr	BASEPRI, r0
 800360a:	f04e 0e0d 	orr.w	lr, lr, #13
 800360e:	4770      	bx	lr

08003610 <pxCurrentTCBConst2>:
 8003610:	20000f40 	.word	0x20000f40

08003614 <vPortEnterCritical>:
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003624:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <vPortEnterCritical+0x3c>)
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800362a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800362c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800362e:	d10d      	bne.n	800364c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <vPortEnterCritical+0x40>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003638:	d008      	beq.n	800364c <vPortEnterCritical+0x38>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	e7fe      	b.n	800364a <vPortEnterCritical+0x36>
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000010 	.word	0x20000010
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003658:	4a08      	ldr	r2, [pc, #32]	; (800367c <vPortExitCritical+0x24>)
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	b943      	cbnz	r3, 8003670 <vPortExitCritical+0x18>
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	e7fe      	b.n	800366e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003670:	3b01      	subs	r3, #1
 8003672:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003674:	b90b      	cbnz	r3, 800367a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	4770      	bx	lr
 800367c:	20000010 	.word	0x20000010

08003680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003680:	f3ef 8009 	mrs	r0, PSP
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <pxCurrentTCBConst>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003690:	6010      	str	r0, [r2, #0]
 8003692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003696:	f04f 0050 	mov.w	r0, #80	; 0x50
 800369a:	f380 8811 	msr	BASEPRI, r0
 800369e:	f000 fce5 	bl	800406c <vTaskSwitchContext>
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f380 8811 	msr	BASEPRI, r0
 80036aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	6808      	ldr	r0, [r1, #0]
 80036b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036b6:	f380 8809 	msr	PSP, r0
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	4770      	bx	lr

080036c0 <pxCurrentTCBConst>:
 80036c0:	20000f40 	.word	0x20000f40

080036c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036c4:	b508      	push	{r3, lr}
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036d6:	f000 fb9b 	bl	8003e10 <xTaskIncrementTick>
 80036da:	b118      	cbz	r0, 80036e4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	4b02      	ldr	r3, [pc, #8]	; (80036ec <SysTick_Handler+0x28>)
 80036e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80036e4:	2300      	movs	r3, #0
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	bd08      	pop	{r3, pc}
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036f4:	4908      	ldr	r1, [pc, #32]	; (8003718 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036f8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <vPortSetupTimerInterrupt+0x2c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fbb3 f3f1 	udiv	r3, r3, r1
 8003706:	4906      	ldr	r1, [pc, #24]	; (8003720 <vPortSetupTimerInterrupt+0x30>)
 8003708:	3b01      	subs	r3, #1
 800370a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800370c:	2307      	movs	r3, #7
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010
 8003718:	e000e018 	.word	0xe000e018
 800371c:	20000004 	.word	0x20000004
 8003720:	e000e014 	.word	0xe000e014

08003724 <xPortStartScheduler>:
{
 8003724:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003728:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003730:	22ff      	movs	r2, #255	; 0xff
 8003732:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003734:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003736:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800373e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003742:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003746:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003748:	2207      	movs	r2, #7
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <xPortStartScheduler+0xa8>)
 800374c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800374e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003752:	1e54      	subs	r4, r2, #1
 8003754:	0600      	lsls	r0, r0, #24
 8003756:	d40d      	bmi.n	8003774 <xPortStartScheduler+0x50>
 8003758:	b101      	cbz	r1, 800375c <xPortStartScheduler+0x38>
 800375a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2a03      	cmp	r2, #3
 8003760:	d011      	beq.n	8003786 <xPortStartScheduler+0x62>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	e7fe      	b.n	8003772 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003774:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003778:	2101      	movs	r1, #1
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003782:	4622      	mov	r2, r4
 8003784:	e7e3      	b.n	800374e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003786:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003788:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800378a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800378e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003790:	9b01      	ldr	r3, [sp, #4]
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <xPortStartScheduler+0xa0>)
 8003794:	b2db      	uxtb	r3, r3
 8003796:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <xPortStartScheduler+0xac>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80037a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80037a8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80037aa:	f7ff ffa1 	bl	80036f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <xPortStartScheduler+0xb0>)
 80037b0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80037b2:	f7ff fefb 	bl	80035ac <prvPortStartFirstTask>
	vTaskSwitchContext();
 80037b6:	f000 fc59 	bl	800406c <vTaskSwitchContext>
	prvTaskExitError();
 80037ba:	f7ff fed7 	bl	800356c <prvTaskExitError>
}
 80037be:	4620      	mov	r0, r4
 80037c0:	b002      	add	sp, #8
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	e000e400 	.word	0xe000e400
 80037c8:	20000320 	.word	0x20000320
 80037cc:	20000324 	.word	0x20000324
 80037d0:	e000ed20 	.word	0xe000ed20
 80037d4:	20000010 	.word	0x20000010

080037d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80037d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d90e      	bls.n	80037fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037e0:	4a10      	ldr	r2, [pc, #64]	; (8003824 <vPortValidateInterruptPriority+0x4c>)
 80037e2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037e4:	4a10      	ldr	r2, [pc, #64]	; (8003828 <vPortValidateInterruptPriority+0x50>)
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d908      	bls.n	80037fe <vPortValidateInterruptPriority+0x26>
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	e7fe      	b.n	80037fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <vPortValidateInterruptPriority+0x54>)
 8003800:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <vPortValidateInterruptPriority+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800380a:	4293      	cmp	r3, r2
 800380c:	d908      	bls.n	8003820 <vPortValidateInterruptPriority+0x48>
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	e7fe      	b.n	800381e <vPortValidateInterruptPriority+0x46>
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000e3f0 	.word	0xe000e3f0
 8003828:	20000320 	.word	0x20000320
 800382c:	e000ed0c 	.word	0xe000ed0c
 8003830:	20000324 	.word	0x20000324

08003834 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003834:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <prvInsertBlockIntoFreeList+0x40>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4282      	cmp	r2, r0
 800383c:	d318      	bcc.n	8003870 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800383e:	685c      	ldr	r4, [r3, #4]
 8003840:	1919      	adds	r1, r3, r4
 8003842:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003844:	bf01      	itttt	eq
 8003846:	6841      	ldreq	r1, [r0, #4]
 8003848:	4618      	moveq	r0, r3
 800384a:	1909      	addeq	r1, r1, r4
 800384c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800384e:	6844      	ldr	r4, [r0, #4]
 8003850:	1901      	adds	r1, r0, r4
 8003852:	428a      	cmp	r2, r1
 8003854:	d107      	bne.n	8003866 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003856:	4908      	ldr	r1, [pc, #32]	; (8003878 <prvInsertBlockIntoFreeList+0x44>)
 8003858:	6809      	ldr	r1, [r1, #0]
 800385a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800385c:	bf1f      	itttt	ne
 800385e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003860:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003862:	1909      	addne	r1, r1, r4
 8003864:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003866:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003868:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800386a:	bf18      	it	ne
 800386c:	6018      	strne	r0, [r3, #0]
 800386e:	bd10      	pop	{r4, pc}
 8003870:	4613      	mov	r3, r2
 8003872:	e7e1      	b.n	8003838 <prvInsertBlockIntoFreeList+0x4>
 8003874:	20000f38 	.word	0x20000f38
 8003878:	20000328 	.word	0x20000328

0800387c <pvPortMalloc>:
{
 800387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003880:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003882:	f000 fabd 	bl	8003e00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003886:	493e      	ldr	r1, [pc, #248]	; (8003980 <pvPortMalloc+0x104>)
 8003888:	4d3e      	ldr	r5, [pc, #248]	; (8003984 <pvPortMalloc+0x108>)
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	bb0b      	cbnz	r3, 80038d2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800388e:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003890:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003892:	bf1d      	ittte	ne
 8003894:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003896:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800389a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800389e:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038a2:	bf1c      	itt	ne
 80038a4:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038a6:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80038a8:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038aa:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038ac:	4e37      	ldr	r6, [pc, #220]	; (800398c <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80038ae:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038b0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80038b4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038b6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80038b8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038ba:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80038bc:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038be:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038c0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038c2:	4b33      	ldr	r3, [pc, #204]	; (8003990 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038c4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038c6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038c8:	4b32      	ldr	r3, [pc, #200]	; (8003994 <pvPortMalloc+0x118>)
 80038ca:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038d0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038d2:	682f      	ldr	r7, [r5, #0]
 80038d4:	4227      	tst	r7, r4
 80038d6:	d116      	bne.n	8003906 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80038d8:	2c00      	cmp	r4, #0
 80038da:	d040      	beq.n	800395e <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80038dc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038e0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038e2:	bf1c      	itt	ne
 80038e4:	f023 0307 	bicne.w	r3, r3, #7
 80038e8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038ea:	b163      	cbz	r3, 8003906 <pvPortMalloc+0x8a>
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <pvPortMalloc+0x118>)
 80038ee:	6816      	ldr	r6, [r2, #0]
 80038f0:	4690      	mov	r8, r2
 80038f2:	42b3      	cmp	r3, r6
 80038f4:	d807      	bhi.n	8003906 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80038f6:	4a25      	ldr	r2, [pc, #148]	; (800398c <pvPortMalloc+0x110>)
 80038f8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038fa:	6868      	ldr	r0, [r5, #4]
 80038fc:	4283      	cmp	r3, r0
 80038fe:	d804      	bhi.n	800390a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003900:	6809      	ldr	r1, [r1, #0]
 8003902:	428d      	cmp	r5, r1
 8003904:	d107      	bne.n	8003916 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003906:	2400      	movs	r4, #0
 8003908:	e029      	b.n	800395e <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390a:	682c      	ldr	r4, [r5, #0]
 800390c:	2c00      	cmp	r4, #0
 800390e:	d0f7      	beq.n	8003900 <pvPortMalloc+0x84>
 8003910:	462a      	mov	r2, r5
 8003912:	4625      	mov	r5, r4
 8003914:	e7f1      	b.n	80038fa <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003916:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003918:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800391a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800391c:	1ac2      	subs	r2, r0, r3
 800391e:	2a10      	cmp	r2, #16
 8003920:	d90f      	bls.n	8003942 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003922:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003924:	0741      	lsls	r1, r0, #29
 8003926:	d008      	beq.n	800393a <pvPortMalloc+0xbe>
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	e7fe      	b.n	8003938 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800393a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800393c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800393e:	f7ff ff79 	bl	8003834 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003942:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003944:	4912      	ldr	r1, [pc, #72]	; (8003990 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003946:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003948:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800394a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800394c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800394e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003952:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003954:	bf38      	it	cc
 8003956:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003958:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800395a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800395c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800395e:	f000 fae9 	bl	8003f34 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003962:	0763      	lsls	r3, r4, #29
 8003964:	d008      	beq.n	8003978 <pvPortMalloc+0xfc>
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	e7fe      	b.n	8003976 <pvPortMalloc+0xfa>
}
 8003978:	4620      	mov	r0, r4
 800397a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800397e:	bf00      	nop
 8003980:	20000328 	.word	0x20000328
 8003984:	20000f2c 	.word	0x20000f2c
 8003988:	2000032c 	.word	0x2000032c
 800398c:	20000f38 	.word	0x20000f38
 8003990:	20000f34 	.word	0x20000f34
 8003994:	20000f30 	.word	0x20000f30

08003998 <vPortFree>:
{
 8003998:	b510      	push	{r4, lr}
	if( pv != NULL )
 800399a:	4604      	mov	r4, r0
 800399c:	b370      	cbz	r0, 80039fc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800399e:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <vPortFree+0x68>)
 80039a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	4213      	tst	r3, r2
 80039a8:	d108      	bne.n	80039bc <vPortFree+0x24>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	e7fe      	b.n	80039ba <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80039c0:	b141      	cbz	r1, 80039d4 <vPortFree+0x3c>
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	e7fe      	b.n	80039d2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039d4:	ea23 0302 	bic.w	r3, r3, r2
 80039d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80039dc:	f000 fa10 	bl	8003e00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <vPortFree+0x6c>)
 80039e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80039e6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039e8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80039ec:	440b      	add	r3, r1
 80039ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039f0:	f7ff ff20 	bl	8003834 <prvInsertBlockIntoFreeList>
}
 80039f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80039f8:	f000 ba9c 	b.w	8003f34 <xTaskResumeAll>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	bf00      	nop
 8003a00:	20000f2c 	.word	0x20000f2c
 8003a04:	20000f30 	.word	0x20000f30

08003a08 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a0e:	f7ff fe01 	bl	8003614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003a14:	4c2d      	ldr	r4, [pc, #180]	; (8003acc <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4f2d      	ldr	r7, [pc, #180]	; (8003ad0 <prvAddNewTaskToReadyList+0xc8>)
 8003a1a:	3201      	adds	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003a1e:	6825      	ldr	r5, [r4, #0]
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d145      	bne.n	8003ab0 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a24:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d11c      	bne.n	8003a66 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a2c:	1978      	adds	r0, r7, r5
 8003a2e:	3514      	adds	r5, #20
 8003a30:	f7ff fd5a 	bl	80034e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a34:	2d8c      	cmp	r5, #140	; 0x8c
 8003a36:	d1f9      	bne.n	8003a2c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003afc <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003a3c:	4d25      	ldr	r5, [pc, #148]	; (8003ad4 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7ff fd52 	bl	80034e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a44:	4628      	mov	r0, r5
 8003a46:	f7ff fd4f 	bl	80034e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a4a:	4823      	ldr	r0, [pc, #140]	; (8003ad8 <prvAddNewTaskToReadyList+0xd0>)
 8003a4c:	f7ff fd4c 	bl	80034e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a50:	4822      	ldr	r0, [pc, #136]	; (8003adc <prvAddNewTaskToReadyList+0xd4>)
 8003a52:	f7ff fd49 	bl	80034e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a56:	4822      	ldr	r0, [pc, #136]	; (8003ae0 <prvAddNewTaskToReadyList+0xd8>)
 8003a58:	f7ff fd46 	bl	80034e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <prvAddNewTaskToReadyList+0xdc>)
 8003a5e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <prvAddNewTaskToReadyList+0xe0>)
 8003a64:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003a66:	4a21      	ldr	r2, [pc, #132]	; (8003aec <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003a68:	4921      	ldr	r1, [pc, #132]	; (8003af0 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003a6a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003a6c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003a6e:	3301      	adds	r3, #1
 8003a70:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003a72:	2301      	movs	r3, #1
 8003a74:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003a76:	4093      	lsls	r3, r2
 8003a78:	4303      	orrs	r3, r0
 8003a7a:	2014      	movs	r0, #20
 8003a7c:	600b      	str	r3, [r1, #0]
 8003a7e:	fb00 7002 	mla	r0, r0, r2, r7
 8003a82:	1d31      	adds	r1, r6, #4
 8003a84:	f7ff fd3e 	bl	8003504 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003a88:	f7ff fde6 	bl	8003658 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <prvAddNewTaskToReadyList+0xec>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b163      	cbz	r3, 8003aac <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a96:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <prvAddNewTaskToReadyList+0xf0>)
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <prvAddNewTaskToReadyList+0xec>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1d6      	bne.n	8003a66 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003abe:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003ac0:	bf98      	it	ls
 8003ac2:	6026      	strls	r6, [r4, #0]
 8003ac4:	e7cf      	b.n	8003a66 <prvAddNewTaskToReadyList+0x5e>
 8003ac6:	bf00      	nop
 8003ac8:	20000fd8 	.word	0x20000fd8
 8003acc:	20000f40 	.word	0x20000f40
 8003ad0:	20000f4c 	.word	0x20000f4c
 8003ad4:	20001004 	.word	0x20001004
 8003ad8:	20001020 	.word	0x20001020
 8003adc:	2000104c 	.word	0x2000104c
 8003ae0:	20001038 	.word	0x20001038
 8003ae4:	20000f44 	.word	0x20000f44
 8003ae8:	20000f48 	.word	0x20000f48
 8003aec:	20000fe8 	.word	0x20000fe8
 8003af0:	20000fec 	.word	0x20000fec
 8003af4:	20001034 	.word	0x20001034
 8003af8:	e000ed04 	.word	0xe000ed04
 8003afc:	20000ff0 	.word	0x20000ff0

08003b00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b00:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <prvResetNextTaskUnblockTime+0x1c>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <prvResetNextTaskUnblockTime+0x20>)
 8003b08:	b919      	cbnz	r1, 8003b12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b16:	68d2      	ldr	r2, [r2, #12]
 8003b18:	6852      	ldr	r2, [r2, #4]
 8003b1a:	e7f8      	b.n	8003b0e <prvResetNextTaskUnblockTime+0xe>
 8003b1c:	20000f44 	.word	0x20000f44
 8003b20:	20001018 	.word	0x20001018

08003b24 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b28:	4681      	mov	r9, r0
 8003b2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003b30:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003b32:	3a01      	subs	r2, #1
 8003b34:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003b38:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003b3c:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b3e:	f026 0607 	bic.w	r6, r6, #7
 8003b42:	1e4b      	subs	r3, r1, #1
 8003b44:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003b48:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b4a:	7858      	ldrb	r0, [r3, #1]
 8003b4c:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003b50:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003b54:	b108      	cbz	r0, 8003b5a <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d1f7      	bne.n	8003b4a <prvInitialiseNewTask.isra.2+0x26>
 8003b5a:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b5c:	2700      	movs	r7, #0
 8003b5e:	2d06      	cmp	r5, #6
 8003b60:	bf28      	it	cs
 8003b62:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b64:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003b66:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003b68:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b6a:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003b6e:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b70:	f7ff fcc5 	bl	80034fe <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b74:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b78:	f104 0018 	add.w	r0, r4, #24
 8003b7c:	f7ff fcbf 	bl	80034fe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003b80:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b82:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b86:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b88:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4630      	mov	r0, r6
 8003b92:	f7ff fd1b 	bl	80035cc <pxPortInitialiseStack>
 8003b96:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003b98:	f1b8 0f00 	cmp.w	r8, #0
 8003b9c:	d001      	beq.n	8003ba2 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b9e:	f8c8 4000 	str.w	r4, [r8]
 8003ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003ba6 <prvDeleteTCB>:
	{
 8003ba6:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ba8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003bac:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bae:	b93b      	cbnz	r3, 8003bc0 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003bb0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003bb2:	f7ff fef1 	bl	8003998 <vPortFree>
				vPortFree( pxTCB );
 8003bb6:	4620      	mov	r0, r4
	}
 8003bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003bbc:	f7ff beec 	b.w	8003998 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d0f9      	beq.n	8003bb8 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d008      	beq.n	8003bda <prvDeleteTCB+0x34>
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	e7fe      	b.n	8003bd8 <prvDeleteTCB+0x32>
 8003bda:	bd10      	pop	{r4, pc}

08003bdc <prvIdleTask>:
{
 8003bdc:	b580      	push	{r7, lr}
				taskYIELD();
 8003bde:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003c3c <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003be2:	4f12      	ldr	r7, [pc, #72]	; (8003c2c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be4:	4c12      	ldr	r4, [pc, #72]	; (8003c30 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003be6:	4d13      	ldr	r5, [pc, #76]	; (8003c34 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	b963      	cbnz	r3, 8003c06 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <prvIdleTask+0x5c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d9f8      	bls.n	8003be6 <prvIdleTask+0xa>
				taskYIELD();
 8003bf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bf8:	f8c8 3000 	str.w	r3, [r8]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	e7ee      	b.n	8003be4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003c06:	f7ff fd05 	bl	8003614 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0e:	1d30      	adds	r0, r6, #4
 8003c10:	f7ff fc9b 	bl	800354a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003c20:	f7ff fd1a 	bl	8003658 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003c24:	4630      	mov	r0, r6
 8003c26:	f7ff ffbe 	bl	8003ba6 <prvDeleteTCB>
 8003c2a:	e7dd      	b.n	8003be8 <prvIdleTask+0xc>
 8003c2c:	2000104c 	.word	0x2000104c
 8003c30:	20000fdc 	.word	0x20000fdc
 8003c34:	20000fd8 	.word	0x20000fd8
 8003c38:	20000f4c 	.word	0x20000f4c
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c44:	4e1b      	ldr	r6, [pc, #108]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003c46:	681d      	ldr	r5, [r3, #0]
{
 8003c48:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4a:	6830      	ldr	r0, [r6, #0]
{
 8003c4c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c4e:	3004      	adds	r0, #4
 8003c50:	f7ff fc7b 	bl	800354a <uxListRemove>
 8003c54:	4633      	mov	r3, r6
 8003c56:	b940      	cbnz	r0, 8003c6a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c58:	2001      	movs	r0, #1
 8003c5a:	6831      	ldr	r1, [r6, #0]
 8003c5c:	4e16      	ldr	r6, [pc, #88]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0x78>)
 8003c5e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003c60:	6832      	ldr	r2, [r6, #0]
 8003c62:	4088      	lsls	r0, r1
 8003c64:	ea22 0200 	bic.w	r2, r2, r0
 8003c68:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c6a:	1c62      	adds	r2, r4, #1
 8003c6c:	d107      	bne.n	8003c7e <prvAddCurrentTaskToDelayedList+0x3e>
 8003c6e:	b137      	cbz	r7, 8003c7e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c70:	6819      	ldr	r1, [r3, #0]
 8003c72:	4812      	ldr	r0, [pc, #72]	; (8003cbc <prvAddCurrentTaskToDelayedList+0x7c>)
 8003c74:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c7a:	f7ff bc43 	b.w	8003504 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c7e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c80:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003c82:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c84:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003c86:	d907      	bls.n	8003c98 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <prvAddCurrentTaskToDelayedList+0x80>)
 8003c8a:	6810      	ldr	r0, [r2, #0]
 8003c8c:	6819      	ldr	r1, [r3, #0]
}
 8003c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c92:	3104      	adds	r1, #4
 8003c94:	f7ff bc42 	b.w	800351c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c9a:	6810      	ldr	r0, [r2, #0]
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	3104      	adds	r1, #4
 8003ca0:	f7ff fc3c 	bl	800351c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0x88>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003caa:	bf38      	it	cc
 8003cac:	601c      	strcc	r4, [r3, #0]
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	20001060 	.word	0x20001060
 8003cb4:	20000f40 	.word	0x20000f40
 8003cb8:	20000fec 	.word	0x20000fec
 8003cbc:	20001038 	.word	0x20001038
 8003cc0:	20000f48 	.word	0x20000f48
 8003cc4:	20000f44 	.word	0x20000f44
 8003cc8:	20001018 	.word	0x20001018

08003ccc <xTaskCreateStatic>:
	{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003cd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003cd4:	b945      	cbnz	r5, 8003ce8 <xTaskCreateStatic+0x1c>
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	e7fe      	b.n	8003ce6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003ce8:	b944      	cbnz	r4, 8003cfc <xTaskCreateStatic+0x30>
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	e7fe      	b.n	8003cfa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cfc:	2654      	movs	r6, #84	; 0x54
 8003cfe:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d00:	9e04      	ldr	r6, [sp, #16]
 8003d02:	2e54      	cmp	r6, #84	; 0x54
 8003d04:	d008      	beq.n	8003d18 <xTaskCreateStatic+0x4c>
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	e7fe      	b.n	8003d16 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d18:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d1a:	2502      	movs	r5, #2
 8003d1c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d20:	ad05      	add	r5, sp, #20
 8003d22:	9501      	str	r5, [sp, #4]
 8003d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003d26:	9402      	str	r4, [sp, #8]
 8003d28:	9500      	str	r5, [sp, #0]
 8003d2a:	f7ff fefb 	bl	8003b24 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff fe6a 	bl	8003a08 <prvAddNewTaskToReadyList>
	}
 8003d34:	9805      	ldr	r0, [sp, #20]
 8003d36:	b006      	add	sp, #24
 8003d38:	bd70      	pop	{r4, r5, r6, pc}

08003d3a <xTaskCreate>:
	{
 8003d3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d3e:	4607      	mov	r7, r0
 8003d40:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d42:	0090      	lsls	r0, r2, #2
	{
 8003d44:	4688      	mov	r8, r1
 8003d46:	4616      	mov	r6, r2
 8003d48:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4a:	f7ff fd97 	bl	800387c <pvPortMalloc>
			if( pxStack != NULL )
 8003d4e:	4605      	mov	r5, r0
 8003d50:	b1e8      	cbz	r0, 8003d8e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d52:	2054      	movs	r0, #84	; 0x54
 8003d54:	f7ff fd92 	bl	800387c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003d58:	4604      	mov	r4, r0
 8003d5a:	b1a8      	cbz	r0, 8003d88 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003d64:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d6a:	9002      	str	r0, [sp, #8]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	4632      	mov	r2, r6
 8003d70:	464b      	mov	r3, r9
 8003d72:	4641      	mov	r1, r8
 8003d74:	4638      	mov	r0, r7
 8003d76:	f7ff fed5 	bl	8003b24 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff fe44 	bl	8003a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d80:	2001      	movs	r0, #1
	}
 8003d82:	b005      	add	sp, #20
 8003d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f7ff fe05 	bl	8003998 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d8e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003d92:	e7f6      	b.n	8003d82 <xTaskCreate+0x48>

08003d94 <vTaskStartScheduler>:
{
 8003d94:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d96:	2400      	movs	r4, #0
{
 8003d98:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d9a:	aa07      	add	r2, sp, #28
 8003d9c:	a906      	add	r1, sp, #24
 8003d9e:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003da0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003da2:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003da4:	f7fd fc90 	bl	80016c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003da8:	9b05      	ldr	r3, [sp, #20]
 8003daa:	9400      	str	r4, [sp, #0]
 8003dac:	9302      	str	r3, [sp, #8]
 8003dae:	9b06      	ldr	r3, [sp, #24]
 8003db0:	9a07      	ldr	r2, [sp, #28]
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	490d      	ldr	r1, [pc, #52]	; (8003dec <vTaskStartScheduler+0x58>)
 8003db6:	4623      	mov	r3, r4
 8003db8:	480d      	ldr	r0, [pc, #52]	; (8003df0 <vTaskStartScheduler+0x5c>)
 8003dba:	f7ff ff87 	bl	8003ccc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003dbe:	b190      	cbz	r0, 8003de6 <vTaskStartScheduler+0x52>
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <vTaskStartScheduler+0x60>)
 8003dd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <vTaskStartScheduler+0x64>)
 8003ddc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <vTaskStartScheduler+0x68>)
 8003de0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003de2:	f7ff fc9f 	bl	8003724 <xPortStartScheduler>
}
 8003de6:	b008      	add	sp, #32
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	08005090 	.word	0x08005090
 8003df0:	08003bdd 	.word	0x08003bdd
 8003df4:	20001018 	.word	0x20001018
 8003df8:	20001034 	.word	0x20001034
 8003dfc:	20001060 	.word	0x20001060

08003e00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003e00:	4a02      	ldr	r2, [pc, #8]	; (8003e0c <vTaskSuspendAll+0xc>)
 8003e02:	6813      	ldr	r3, [r2, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000fe4 	.word	0x20000fe4

08003e10 <xTaskIncrementTick>:
{
 8003e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e14:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <xTaskIncrementTick+0xf8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d153      	bne.n	8003ec4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <xTaskIncrementTick+0xfc>)
 8003e1e:	681c      	ldr	r4, [r3, #0]
 8003e20:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003e22:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e24:	b9bc      	cbnz	r4, 8003e56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003e26:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <xTaskIncrementTick+0x100>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	b142      	cbz	r2, 8003e40 <xTaskIncrementTick+0x30>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	e7fe      	b.n	8003e3e <xTaskIncrementTick+0x2e>
 8003e40:	4a34      	ldr	r2, [pc, #208]	; (8003f14 <xTaskIncrementTick+0x104>)
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	6810      	ldr	r0, [r2, #0]
 8003e46:	6018      	str	r0, [r3, #0]
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	4a33      	ldr	r2, [pc, #204]	; (8003f18 <xTaskIncrementTick+0x108>)
 8003e4c:	6813      	ldr	r3, [r2, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	f7ff fe55 	bl	8003b00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e56:	4d31      	ldr	r5, [pc, #196]	; (8003f1c <xTaskIncrementTick+0x10c>)
 8003e58:	f04f 0b00 	mov.w	fp, #0
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	4f30      	ldr	r7, [pc, #192]	; (8003f20 <xTaskIncrementTick+0x110>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d33e      	bcc.n	8003ee2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e64:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003f10 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003e68:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003f30 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6c:	f8d8 2000 	ldr.w	r2, [r8]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	bb72      	cbnz	r2, 8003ed2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	602a      	str	r2, [r5, #0]
					break;
 8003e7a:	e032      	b.n	8003ee2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e7c:	f106 0a04 	add.w	sl, r6, #4
 8003e80:	4650      	mov	r0, sl
 8003e82:	f7ff fb62 	bl	800354a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003e88:	b119      	cbz	r1, 8003e92 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e8a:	f106 0018 	add.w	r0, r6, #24
 8003e8e:	f7ff fb5c 	bl	800354a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e92:	2201      	movs	r2, #1
 8003e94:	f04f 0e14 	mov.w	lr, #20
 8003e98:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8003e9e:	fa02 f100 	lsl.w	r1, r2, r0
 8003ea2:	4319      	orrs	r1, r3
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <xTaskIncrementTick+0x114>)
 8003ea6:	f8c9 1000 	str.w	r1, [r9]
 8003eaa:	fb0e 3000 	mla	r0, lr, r0, r3
 8003eae:	4651      	mov	r1, sl
 8003eb0:	f7ff fb28 	bl	8003504 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb4:	6838      	ldr	r0, [r7, #0]
 8003eb6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003eb8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	bf28      	it	cs
 8003ebe:	f04f 0b01 	movcs.w	fp, #1
 8003ec2:	e7d3      	b.n	8003e6c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003ec6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003eca:	6813      	ldr	r3, [r2, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e011      	b.n	8003ef6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ed2:	f8d8 2000 	ldr.w	r2, [r8]
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eda:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003edc:	428c      	cmp	r4, r1
 8003ede:	d2cd      	bcs.n	8003e7c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003ee0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <xTaskIncrementTick+0x114>)
 8003ee6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ee8:	2214      	movs	r2, #20
 8003eea:	434a      	muls	r2, r1
 8003eec:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003eee:	2a02      	cmp	r2, #2
 8003ef0:	bf28      	it	cs
 8003ef2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <xTaskIncrementTick+0x11c>)
 8003ef8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	bf18      	it	ne
 8003efe:	f04f 0b01 	movne.w	fp, #1
}
 8003f02:	4658      	mov	r0, fp
 8003f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f08:	20000fe4 	.word	0x20000fe4
 8003f0c:	20001060 	.word	0x20001060
 8003f10:	20000f44 	.word	0x20000f44
 8003f14:	20000f48 	.word	0x20000f48
 8003f18:	2000101c 	.word	0x2000101c
 8003f1c:	20001018 	.word	0x20001018
 8003f20:	20000f40 	.word	0x20000f40
 8003f24:	20000f4c 	.word	0x20000f4c
 8003f28:	20000fe0 	.word	0x20000fe0
 8003f2c:	20001064 	.word	0x20001064
 8003f30:	20000fec 	.word	0x20000fec

08003f34 <xTaskResumeAll>:
{
 8003f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003f38:	4c31      	ldr	r4, [pc, #196]	; (8004000 <xTaskResumeAll+0xcc>)
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	b943      	cbnz	r3, 8003f50 <xTaskResumeAll+0x1c>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	e7fe      	b.n	8003f4e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003f50:	f7ff fb60 	bl	8003614 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5a:	6824      	ldr	r4, [r4, #0]
 8003f5c:	b12c      	cbz	r4, 8003f6a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003f60:	f7ff fb7a 	bl	8003658 <vPortExitCritical>
}
 8003f64:	4620      	mov	r0, r4
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f6a:	4b26      	ldr	r3, [pc, #152]	; (8004004 <xTaskResumeAll+0xd0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f5      	beq.n	8003f5e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f72:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800401c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003f76:	4f24      	ldr	r7, [pc, #144]	; (8004008 <xTaskResumeAll+0xd4>)
 8003f78:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004020 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7c:	f8d9 3000 	ldr.w	r3, [r9]
 8003f80:	b9e3      	cbnz	r3, 8003fbc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003f82:	b10c      	cbz	r4, 8003f88 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003f84:	f7ff fdbc 	bl	8003b00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f88:	4d20      	ldr	r5, [pc, #128]	; (800400c <xTaskResumeAll+0xd8>)
 8003f8a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f8c:	b144      	cbz	r4, 8003fa0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003f8e:	2701      	movs	r7, #1
 8003f90:	4e1f      	ldr	r6, [pc, #124]	; (8004010 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003f92:	f7ff ff3d 	bl	8003e10 <xTaskIncrementTick>
 8003f96:	b100      	cbz	r0, 8003f9a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003f98:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f9a:	3c01      	subs	r4, #1
 8003f9c:	d1f9      	bne.n	8003f92 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003f9e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <xTaskResumeAll+0xdc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0da      	beq.n	8003f5e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <xTaskResumeAll+0xe0>)
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003fb8:	2401      	movs	r4, #1
 8003fba:	e7d1      	b.n	8003f60 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003fbc:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003fc0:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003fc2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc4:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc6:	f104 0018 	add.w	r0, r4, #24
 8003fca:	f7ff fabe 	bl	800354a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff fabb 	bl	800354a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fd4:	2014      	movs	r0, #20
 8003fd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	fa05 f302 	lsl.w	r3, r5, r2
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	fb00 8002 	mla	r0, r0, r2, r8
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	f7ff fa8c 	bl	8003504 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <xTaskResumeAll+0xe4>)
 8003fee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003ff6:	bf24      	itt	cs
 8003ff8:	4b05      	ldrcs	r3, [pc, #20]	; (8004010 <xTaskResumeAll+0xdc>)
 8003ffa:	601d      	strcs	r5, [r3, #0]
 8003ffc:	e7be      	b.n	8003f7c <xTaskResumeAll+0x48>
 8003ffe:	bf00      	nop
 8004000:	20000fe4 	.word	0x20000fe4
 8004004:	20000fd8 	.word	0x20000fd8
 8004008:	20000fec 	.word	0x20000fec
 800400c:	20000fe0 	.word	0x20000fe0
 8004010:	20001064 	.word	0x20001064
 8004014:	e000ed04 	.word	0xe000ed04
 8004018:	20000f40 	.word	0x20000f40
 800401c:	20001020 	.word	0x20001020
 8004020:	20000f4c 	.word	0x20000f4c

08004024 <vTaskDelay>:
	{
 8004024:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004026:	b940      	cbnz	r0, 800403a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <vTaskDelay+0x40>)
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <vTaskDelay+0x44>)
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	b141      	cbz	r1, 8004052 <vTaskDelay+0x2e>
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	e7fe      	b.n	8004050 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004052:	f7ff fed5 	bl	8003e00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004056:	f7ff fdf3 	bl	8003c40 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800405a:	f7ff ff6b 	bl	8003f34 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800405e:	2800      	cmp	r0, #0
 8004060:	d0e2      	beq.n	8004028 <vTaskDelay+0x4>
 8004062:	bd08      	pop	{r3, pc}
 8004064:	e000ed04 	.word	0xe000ed04
 8004068:	20000fe4 	.word	0x20000fe4

0800406c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <vTaskSwitchContext+0x60>)
{
 800406e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <vTaskSwitchContext+0x64>)
 8004074:	b112      	cbz	r2, 800407c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004076:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800407c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <vTaskSwitchContext+0x68>)
 8004080:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	2214      	movs	r2, #20
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f1c3 031f 	rsb	r3, r3, #31
 800408e:	435a      	muls	r2, r3
 8004090:	4911      	ldr	r1, [pc, #68]	; (80040d8 <vTaskSwitchContext+0x6c>)
 8004092:	588c      	ldr	r4, [r1, r2]
 8004094:	1888      	adds	r0, r1, r2
 8004096:	b944      	cbnz	r4, 80040aa <vTaskSwitchContext+0x3e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	e7fe      	b.n	80040a8 <vTaskSwitchContext+0x3c>
 80040aa:	6844      	ldr	r4, [r0, #4]
 80040ac:	3208      	adds	r2, #8
 80040ae:	6864      	ldr	r4, [r4, #4]
 80040b0:	440a      	add	r2, r1
 80040b2:	4294      	cmp	r4, r2
 80040b4:	bf08      	it	eq
 80040b6:	6862      	ldreq	r2, [r4, #4]
 80040b8:	6044      	str	r4, [r0, #4]
 80040ba:	bf08      	it	eq
 80040bc:	6042      	streq	r2, [r0, #4]
 80040be:	2214      	movs	r2, #20
 80040c0:	fb02 1303 	mla	r3, r2, r3, r1
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <vTaskSwitchContext+0x70>)
 80040ca:	e7d5      	b.n	8004078 <vTaskSwitchContext+0xc>
 80040cc:	20000fe4 	.word	0x20000fe4
 80040d0:	20001064 	.word	0x20001064
 80040d4:	20000fec 	.word	0x20000fec
 80040d8:	20000f4c 	.word	0x20000f4c
 80040dc:	20000f40 	.word	0x20000f40

080040e0 <xTaskNotifyWait>:
	{
 80040e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80040e4:	4c1e      	ldr	r4, [pc, #120]	; (8004160 <xTaskNotifyWait+0x80>)
	{
 80040e6:	461e      	mov	r6, r3
 80040e8:	4680      	mov	r8, r0
 80040ea:	460f      	mov	r7, r1
 80040ec:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80040ee:	f7ff fa91 	bl	8003614 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d014      	beq.n	8004126 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80040fc:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004102:	ea22 0208 	bic.w	r2, r2, r8
 8004106:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 800410e:	b156      	cbz	r6, 8004126 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004110:	4630      	mov	r0, r6
 8004112:	f7ff fd95 	bl	8003c40 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8004116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <xTaskNotifyWait+0x84>)
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8004126:	f7ff fa97 	bl	8003658 <vPortExitCritical>
		taskENTER_CRITICAL();
 800412a:	f7ff fa73 	bl	8003614 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800412e:	b115      	cbz	r5, 8004136 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004136:	6823      	ldr	r3, [r4, #0]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004138:	2200      	movs	r2, #0
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800413a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800413e:	2b02      	cmp	r3, #2
				xReturn = pdTRUE;
 8004140:	bf09      	itett	eq
 8004142:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8004144:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004146:	6823      	ldreq	r3, [r4, #0]
 8004148:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 800414a:	bf04      	itt	eq
 800414c:	43b9      	biceq	r1, r7
 800414e:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8004156:	f7ff fa7f 	bl	8003658 <vPortExitCritical>
	}
 800415a:	4628      	mov	r0, r5
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004160:	20000f40 	.word	0x20000f40
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <xTaskGenericNotify>:
	{
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	460f      	mov	r7, r1
 800416c:	4616      	mov	r6, r2
 800416e:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8004170:	4604      	mov	r4, r0
 8004172:	b940      	cbnz	r0, 8004186 <xTaskGenericNotify+0x1e>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	e7fe      	b.n	8004184 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8004186:	f7ff fa45 	bl	8003614 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800418a:	b10d      	cbz	r5, 8004190 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800418c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800418e:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004190:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004192:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			switch( eAction )
 8004196:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004198:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800419a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 800419e:	2a03      	cmp	r2, #3
 80041a0:	d80a      	bhi.n	80041b8 <xTaskGenericNotify+0x50>
 80041a2:	e8df f002 	tbb	[pc, r2]
 80041a6:	0602      	.short	0x0602
 80041a8:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 80041aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80041ac:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
 80041ae:	64e7      	str	r7, [r4, #76]	; 0x4c
 80041b0:	e002      	b.n	80041b8 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 80041b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041b4:	3301      	adds	r3, #1
 80041b6:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80041b8:	2d01      	cmp	r5, #1
 80041ba:	d008      	beq.n	80041ce <xTaskGenericNotify+0x66>
	{
 80041bc:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 80041be:	f7ff fa4b 	bl	8003658 <vPortExitCritical>
	}
 80041c2:	4628      	mov	r0, r5
 80041c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80041c6:	2d02      	cmp	r5, #2
 80041c8:	d1f1      	bne.n	80041ae <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 80041ca:	2500      	movs	r5, #0
 80041cc:	e7f7      	b.n	80041be <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ce:	1d26      	adds	r6, r4, #4
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff f9ba 	bl	800354a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80041d6:	4914      	ldr	r1, [pc, #80]	; (8004228 <xTaskGenericNotify+0xc0>)
 80041d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041da:	6808      	ldr	r0, [r1, #0]
 80041dc:	fa05 f302 	lsl.w	r3, r5, r2
 80041e0:	4303      	orrs	r3, r0
 80041e2:	2014      	movs	r0, #20
 80041e4:	600b      	str	r3, [r1, #0]
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <xTaskGenericNotify+0xc4>)
 80041e8:	4631      	mov	r1, r6
 80041ea:	fb00 3002 	mla	r0, r0, r2, r3
 80041ee:	f7ff f989 	bl	8003504 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80041f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041f4:	b143      	cbz	r3, 8004208 <xTaskGenericNotify+0xa0>
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	e7fe      	b.n	8004206 <xTaskGenericNotify+0x9e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <xTaskGenericNotify+0xc8>)
 800420a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	429a      	cmp	r2, r3
 8004212:	d9d3      	bls.n	80041bc <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8004214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <xTaskGenericNotify+0xcc>)
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	e7cb      	b.n	80041be <xTaskGenericNotify+0x56>
 8004226:	bf00      	nop
 8004228:	20000fec 	.word	0x20000fec
 800422c:	20000f4c 	.word	0x20000f4c
 8004230:	20000f40 	.word	0x20000f40
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <xTaskGenericNotifyFromISR>:
	{
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	9f08      	ldr	r7, [sp, #32]
 800423e:	4689      	mov	r9, r1
 8004240:	4690      	mov	r8, r2
 8004242:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8004244:	4604      	mov	r4, r0
 8004246:	b940      	cbnz	r0, 800425a <xTaskGenericNotifyFromISR+0x22>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	e7fe      	b.n	8004258 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800425a:	f7ff fabd 	bl	80037d8 <vPortValidateInterruptPriority>
	__asm volatile
 800425e:	f3ef 8611 	mrs	r6, BASEPRI
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8004272:	b10d      	cbz	r5, 8004278 <xTaskGenericNotifyFromISR+0x40>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004274:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004276:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004278:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800427a:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			switch( eAction )
 800427e:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004282:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004284:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 8004288:	2a03      	cmp	r2, #3
 800428a:	d807      	bhi.n	800429c <xTaskGenericNotifyFromISR+0x64>
 800428c:	e8df f002 	tbb	[pc, r2]
 8004290:	11130d02 	.word	0x11130d02
					pxTCB->ulNotifiedValue |= ulValue;
 8004294:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004296:	ea41 0109 	orr.w	r1, r1, r9
 800429a:	64e1      	str	r1, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800429c:	2d01      	cmp	r5, #1
 800429e:	d00d      	beq.n	80042bc <xTaskGenericNotifyFromISR+0x84>
	{
 80042a0:	2001      	movs	r0, #1
	__asm volatile
 80042a2:	f386 8811 	msr	BASEPRI, r6
	}
 80042a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 80042aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80042ac:	3301      	adds	r3, #1
 80042ae:	64e3      	str	r3, [r4, #76]	; 0x4c
					break;
 80042b0:	e7f4      	b.n	800429c <xTaskGenericNotifyFromISR+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80042b2:	2d02      	cmp	r5, #2
 80042b4:	d033      	beq.n	800431e <xTaskGenericNotifyFromISR+0xe6>
						pxTCB->ulNotifiedValue = ulValue;
 80042b6:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
 80042ba:	e7ef      	b.n	800429c <xTaskGenericNotifyFromISR+0x64>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80042bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042be:	b143      	cbz	r3, 80042d2 <xTaskGenericNotifyFromISR+0x9a>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	e7fe      	b.n	80042d0 <xTaskGenericNotifyFromISR+0x98>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <xTaskGenericNotifyFromISR+0xec>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b9db      	cbnz	r3, 8004310 <xTaskGenericNotifyFromISR+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d8:	f104 0804 	add.w	r8, r4, #4
 80042dc:	4640      	mov	r0, r8
 80042de:	f7ff f934 	bl	800354a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042e2:	4a11      	ldr	r2, [pc, #68]	; (8004328 <xTaskGenericNotifyFromISR+0xf0>)
 80042e4:	2014      	movs	r0, #20
 80042e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042e8:	6811      	ldr	r1, [r2, #0]
 80042ea:	409d      	lsls	r5, r3
 80042ec:	430d      	orrs	r5, r1
 80042ee:	4641      	mov	r1, r8
 80042f0:	6015      	str	r5, [r2, #0]
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <xTaskGenericNotifyFromISR+0xf4>)
 80042f4:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80042f8:	f7ff f904 	bl	8003504 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <xTaskGenericNotifyFromISR+0xf8>)
 80042fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d9cb      	bls.n	80042a0 <xTaskGenericNotifyFromISR+0x68>
 8004308:	2001      	movs	r0, #1
					if( pxHigherPriorityTaskWoken != NULL )
 800430a:	b12f      	cbz	r7, 8004318 <xTaskGenericNotifyFromISR+0xe0>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800430c:	6038      	str	r0, [r7, #0]
 800430e:	e7c8      	b.n	80042a2 <xTaskGenericNotifyFromISR+0x6a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004310:	f104 0118 	add.w	r1, r4, #24
 8004314:	4807      	ldr	r0, [pc, #28]	; (8004334 <xTaskGenericNotifyFromISR+0xfc>)
 8004316:	e7ef      	b.n	80042f8 <xTaskGenericNotifyFromISR+0xc0>
						xYieldPending = pdTRUE;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <xTaskGenericNotifyFromISR+0x100>)
 800431a:	6018      	str	r0, [r3, #0]
 800431c:	e7c1      	b.n	80042a2 <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
 800431e:	2000      	movs	r0, #0
 8004320:	e7bf      	b.n	80042a2 <xTaskGenericNotifyFromISR+0x6a>
 8004322:	bf00      	nop
 8004324:	20000fe4 	.word	0x20000fe4
 8004328:	20000fec 	.word	0x20000fec
 800432c:	20000f4c 	.word	0x20000f4c
 8004330:	20000f40 	.word	0x20000f40
 8004334:	20001020 	.word	0x20001020
 8004338:	20001064 	.word	0x20001064

0800433c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800433c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800433e:	e003      	b.n	8004348 <LoopCopyDataInit>

08004340 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004342:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004344:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004346:	3104      	adds	r1, #4

08004348 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004348:	480a      	ldr	r0, [pc, #40]	; (8004374 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800434c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800434e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004350:	d3f6      	bcc.n	8004340 <CopyDataInit>
  ldr r2, =_sbss
 8004352:	4a0a      	ldr	r2, [pc, #40]	; (800437c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004354:	e002      	b.n	800435c <LoopFillZerobss>

08004356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004356:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004358:	f842 3b04 	str.w	r3, [r2], #4

0800435c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800435e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004360:	d3f9      	bcc.n	8004356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004362:	f7fd fb79 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004366:	f000 fd3b 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800436a:	f7fd fa65 	bl	8001838 <main>
  bx lr
 800436e:	4770      	bx	lr
  ldr r3, =_sidata
 8004370:	08005420 	.word	0x08005420
  ldr r0, =_sdata
 8004374:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004378:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 800437c:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8004380:	200011c4 	.word	0x200011c4

08004384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004384:	e7fe      	b.n	8004384 <ADC1_2_IRQHandler>
	...

08004388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
 800438c:	4b02      	ldr	r3, [pc, #8]	; (8004398 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800438e:	6003      	str	r3, [r0, #0]
 8004390:	f000 fbf0 	bl	8004b74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004394:	4620      	mov	r0, r4
 8004396:	bd10      	pop	{r4, pc}
 8004398:	080050d4 	.word	0x080050d4

0800439c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800439c:	b510      	push	{r4, lr}
 800439e:	4604      	mov	r4, r0
 80043a0:	f7ff fff2 	bl	8004388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80043a4:	4620      	mov	r0, r4
 80043a6:	210c      	movs	r1, #12
 80043a8:	f000 fbc2 	bl	8004b30 <_ZdlPvj>
 80043ac:	4620      	mov	r0, r4
 80043ae:	bd10      	pop	{r4, pc}

080043b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80043b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	9e06      	ldr	r6, [sp, #24]
 80043b6:	4680      	mov	r8, r0
 80043b8:	4296      	cmp	r6, r2
 80043ba:	460f      	mov	r7, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	d103      	bne.n	80043ca <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80043c2:	4619      	mov	r1, r3
 80043c4:	f000 fc2a 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 80043c8:	b958      	cbnz	r0, 80043e2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80043ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80043ce:	4622      	mov	r2, r4
 80043d0:	6803      	ldr	r3, [r0, #0]
 80043d2:	9606      	str	r6, [sp, #24]
 80043d4:	6a1e      	ldr	r6, [r3, #32]
 80043d6:	4639      	mov	r1, r7
 80043d8:	462b      	mov	r3, r5
 80043da:	46b4      	mov	ip, r6
 80043dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e0:	4760      	bx	ip
 80043e2:	2006      	movs	r0, #6
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80043e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	460e      	mov	r6, r1
 80043ee:	4619      	mov	r1, r3
 80043f0:	4683      	mov	fp, r0
 80043f2:	4617      	mov	r7, r2
 80043f4:	4699      	mov	r9, r3
 80043f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043f8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80043fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004400:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004402:	f000 fc0b 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 8004406:	b190      	cbz	r0, 800442e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8004408:	2e00      	cmp	r6, #0
 800440a:	602c      	str	r4, [r5, #0]
 800440c:	712f      	strb	r7, [r5, #4]
 800440e:	db09      	blt.n	8004424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8004410:	4434      	add	r4, r6
 8004412:	45a0      	cmp	r8, r4
 8004414:	bf0c      	ite	eq
 8004416:	2406      	moveq	r4, #6
 8004418:	2401      	movne	r4, #1
 800441a:	71ac      	strb	r4, [r5, #6]
 800441c:	2000      	movs	r0, #0
 800441e:	b001      	add	sp, #4
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	3602      	adds	r6, #2
 8004426:	d1f9      	bne.n	800441c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8004428:	2301      	movs	r3, #1
 800442a:	71ab      	strb	r3, [r5, #6]
 800442c:	e7f6      	b.n	800441c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800442e:	4544      	cmp	r4, r8
 8004430:	d104      	bne.n	800443c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004432:	4651      	mov	r1, sl
 8004434:	4658      	mov	r0, fp
 8004436:	f000 fbf1 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 800443a:	b988      	cbnz	r0, 8004460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 800443c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004440:	463a      	mov	r2, r7
 8004442:	6803      	ldr	r3, [r0, #0]
 8004444:	950d      	str	r5, [sp, #52]	; 0x34
 8004446:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800444a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800444e:	940a      	str	r4, [sp, #40]	; 0x28
 8004450:	69dc      	ldr	r4, [r3, #28]
 8004452:	4631      	mov	r1, r6
 8004454:	464b      	mov	r3, r9
 8004456:	46a4      	mov	ip, r4
 8004458:	b001      	add	sp, #4
 800445a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445e:	4760      	bx	ip
 8004460:	716f      	strb	r7, [r5, #5]
 8004462:	e7db      	b.n	800441c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08004464 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004468:	4604      	mov	r4, r0
 800446a:	460d      	mov	r5, r1
 800446c:	4616      	mov	r6, r2
 800446e:	461f      	mov	r7, r3
 8004470:	f000 fb94 	bl	8004b9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8004474:	b948      	cbnz	r0, 800448a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8004476:	68a0      	ldr	r0, [r4, #8]
 8004478:	4632      	mov	r2, r6
 800447a:	6803      	ldr	r3, [r0, #0]
 800447c:	4629      	mov	r1, r5
 800447e:	699c      	ldr	r4, [r3, #24]
 8004480:	463b      	mov	r3, r7
 8004482:	46a4      	mov	ip, r4
 8004484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004488:	4760      	bx	ip
 800448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800448e <_ZdlPv>:
 800448e:	f000 bccb 	b.w	8004e28 <free>

08004492 <__aeabi_atexit>:
 8004492:	460b      	mov	r3, r1
 8004494:	4601      	mov	r1, r0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 bc8e 	b.w	8004db8 <__cxa_atexit>

0800449c <__cxa_end_cleanup>:
 800449c:	b41e      	push	{r1, r2, r3, r4}
 800449e:	f000 f89c 	bl	80045da <__gnu_end_cleanup>
 80044a2:	bc1e      	pop	{r1, r2, r3, r4}
 80044a4:	f7fc fbda 	bl	8000c5c <_Unwind_Resume>

080044a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80044a8:	7803      	ldrb	r3, [r0, #0]
 80044aa:	2b47      	cmp	r3, #71	; 0x47
 80044ac:	d117      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044ae:	7843      	ldrb	r3, [r0, #1]
 80044b0:	2b4e      	cmp	r3, #78	; 0x4e
 80044b2:	d114      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044b4:	7883      	ldrb	r3, [r0, #2]
 80044b6:	2b55      	cmp	r3, #85	; 0x55
 80044b8:	d111      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044ba:	78c3      	ldrb	r3, [r0, #3]
 80044bc:	2b43      	cmp	r3, #67	; 0x43
 80044be:	d10e      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044c0:	7903      	ldrb	r3, [r0, #4]
 80044c2:	2b43      	cmp	r3, #67	; 0x43
 80044c4:	d10b      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044c6:	7943      	ldrb	r3, [r0, #5]
 80044c8:	2b2b      	cmp	r3, #43	; 0x2b
 80044ca:	d108      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044cc:	7983      	ldrb	r3, [r0, #6]
 80044ce:	2b2b      	cmp	r3, #43	; 0x2b
 80044d0:	d105      	bne.n	80044de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80044d2:	79c0      	ldrb	r0, [r0, #7]
 80044d4:	2801      	cmp	r0, #1
 80044d6:	bf8c      	ite	hi
 80044d8:	2000      	movhi	r0, #0
 80044da:	2001      	movls	r0, #1
 80044dc:	4770      	bx	lr
 80044de:	2000      	movs	r0, #0
 80044e0:	4770      	bx	lr
	...

080044e4 <__cxa_type_match>:
 80044e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80044e8:	461e      	mov	r6, r3
 80044ea:	7803      	ldrb	r3, [r0, #0]
 80044ec:	460d      	mov	r5, r1
 80044ee:	2b47      	cmp	r3, #71	; 0x47
 80044f0:	4602      	mov	r2, r0
 80044f2:	79c1      	ldrb	r1, [r0, #7]
 80044f4:	d147      	bne.n	8004586 <__cxa_type_match+0xa2>
 80044f6:	7843      	ldrb	r3, [r0, #1]
 80044f8:	2b4e      	cmp	r3, #78	; 0x4e
 80044fa:	d144      	bne.n	8004586 <__cxa_type_match+0xa2>
 80044fc:	7883      	ldrb	r3, [r0, #2]
 80044fe:	2b55      	cmp	r3, #85	; 0x55
 8004500:	d141      	bne.n	8004586 <__cxa_type_match+0xa2>
 8004502:	78c3      	ldrb	r3, [r0, #3]
 8004504:	2b43      	cmp	r3, #67	; 0x43
 8004506:	d13e      	bne.n	8004586 <__cxa_type_match+0xa2>
 8004508:	7903      	ldrb	r3, [r0, #4]
 800450a:	2b46      	cmp	r3, #70	; 0x46
 800450c:	d13b      	bne.n	8004586 <__cxa_type_match+0xa2>
 800450e:	7943      	ldrb	r3, [r0, #5]
 8004510:	2b4f      	cmp	r3, #79	; 0x4f
 8004512:	d138      	bne.n	8004586 <__cxa_type_match+0xa2>
 8004514:	7983      	ldrb	r3, [r0, #6]
 8004516:	2b52      	cmp	r3, #82	; 0x52
 8004518:	d135      	bne.n	8004586 <__cxa_type_match+0xa2>
 800451a:	2900      	cmp	r1, #0
 800451c:	d133      	bne.n	8004586 <__cxa_type_match+0xa2>
 800451e:	2301      	movs	r3, #1
 8004520:	4608      	mov	r0, r1
 8004522:	2400      	movs	r4, #0
 8004524:	9401      	str	r4, [sp, #4]
 8004526:	bb33      	cbnz	r3, 8004576 <__cxa_type_match+0x92>
 8004528:	bb38      	cbnz	r0, 800457a <__cxa_type_match+0x96>
 800452a:	2901      	cmp	r1, #1
 800452c:	bf0a      	itet	eq
 800452e:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8004532:	f1a2 0320 	subne.w	r3, r2, #32
 8004536:	3b78      	subeq	r3, #120	; 0x78
 8004538:	2901      	cmp	r1, #1
 800453a:	bf0c      	ite	eq
 800453c:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004540:	3258      	addne	r2, #88	; 0x58
 8004542:	681c      	ldr	r4, [r3, #0]
 8004544:	9201      	str	r2, [sp, #4]
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	4620      	mov	r0, r4
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4798      	blx	r3
 800454e:	b1b0      	cbz	r0, 800457e <__cxa_type_match+0x9a>
 8004550:	2702      	movs	r7, #2
 8004552:	9b01      	ldr	r3, [sp, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	aa01      	add	r2, sp, #4
 800455c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004560:	4621      	mov	r1, r4
 8004562:	2301      	movs	r3, #1
 8004564:	4628      	mov	r0, r5
 8004566:	47c0      	blx	r8
 8004568:	b158      	cbz	r0, 8004582 <__cxa_type_match+0x9e>
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	4638      	mov	r0, r7
 8004570:	b002      	add	sp, #8
 8004572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004576:	4c08      	ldr	r4, [pc, #32]	; (8004598 <__cxa_type_match+0xb4>)
 8004578:	e7e5      	b.n	8004546 <__cxa_type_match+0x62>
 800457a:	4c08      	ldr	r4, [pc, #32]	; (800459c <__cxa_type_match+0xb8>)
 800457c:	e7e3      	b.n	8004546 <__cxa_type_match+0x62>
 800457e:	2701      	movs	r7, #1
 8004580:	e7ea      	b.n	8004558 <__cxa_type_match+0x74>
 8004582:	4607      	mov	r7, r0
 8004584:	e7f3      	b.n	800456e <__cxa_type_match+0x8a>
 8004586:	4610      	mov	r0, r2
 8004588:	f7ff ff8e 	bl	80044a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800458c:	f080 0001 	eor.w	r0, r0, #1
 8004590:	b2c0      	uxtb	r0, r0
 8004592:	2300      	movs	r3, #0
 8004594:	e7c5      	b.n	8004522 <__cxa_type_match+0x3e>
 8004596:	bf00      	nop
 8004598:	0800516c 	.word	0x0800516c
 800459c:	08005174 	.word	0x08005174

080045a0 <__cxa_begin_cleanup>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	f000 fbfc 	bl	8004da0 <__cxa_get_globals>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4620      	mov	r0, r4
 80045ac:	f1a4 0120 	sub.w	r1, r4, #32
 80045b0:	f7ff ff7a 	bl	80044a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80045b4:	b160      	cbz	r0, 80045d0 <__cxa_begin_cleanup+0x30>
 80045b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80045ba:	3301      	adds	r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f844 3c04 	str.w	r3, [r4, #-4]
 80045c2:	d103      	bne.n	80045cc <__cxa_begin_cleanup+0x2c>
 80045c4:	6893      	ldr	r3, [r2, #8]
 80045c6:	f844 3c08 	str.w	r3, [r4, #-8]
 80045ca:	6091      	str	r1, [r2, #8]
 80045cc:	2001      	movs	r0, #1
 80045ce:	bd10      	pop	{r4, pc}
 80045d0:	6893      	ldr	r3, [r2, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f9      	beq.n	80045ca <__cxa_begin_cleanup+0x2a>
 80045d6:	f000 fbcb 	bl	8004d70 <_ZSt9terminatev>

080045da <__gnu_end_cleanup>:
 80045da:	b510      	push	{r4, lr}
 80045dc:	f000 fbe0 	bl	8004da0 <__cxa_get_globals>
 80045e0:	6882      	ldr	r2, [r0, #8]
 80045e2:	4601      	mov	r1, r0
 80045e4:	b90a      	cbnz	r2, 80045ea <__gnu_end_cleanup+0x10>
 80045e6:	f000 fbc3 	bl	8004d70 <_ZSt9terminatev>
 80045ea:	f102 0420 	add.w	r4, r2, #32
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff ff5a 	bl	80044a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80045f4:	b140      	cbz	r0, 8004608 <__gnu_end_cleanup+0x2e>
 80045f6:	69d3      	ldr	r3, [r2, #28]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	61d3      	str	r3, [r2, #28]
 80045fc:	b913      	cbnz	r3, 8004604 <__gnu_end_cleanup+0x2a>
 80045fe:	6990      	ldr	r0, [r2, #24]
 8004600:	6088      	str	r0, [r1, #8]
 8004602:	6193      	str	r3, [r2, #24]
 8004604:	4620      	mov	r0, r4
 8004606:	bd10      	pop	{r4, pc}
 8004608:	6088      	str	r0, [r1, #8]
 800460a:	e7fb      	b.n	8004604 <__gnu_end_cleanup+0x2a>

0800460c <_ZL12read_uleb128PKhPm>:
 800460c:	2300      	movs	r3, #0
 800460e:	b570      	push	{r4, r5, r6, lr}
 8004610:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8004614:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8004618:	f810 5b01 	ldrb.w	r5, [r0], #1
 800461c:	1994      	adds	r4, r2, r6
 800461e:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8004622:	40a2      	lsls	r2, r4
 8004624:	4313      	orrs	r3, r2
 8004626:	062a      	lsls	r2, r5, #24
 8004628:	d4f4      	bmi.n	8004614 <_ZL12read_uleb128PKhPm+0x8>
 800462a:	600b      	str	r3, [r1, #0]
 800462c:	bd70      	pop	{r4, r5, r6, pc}

0800462e <_ZL12read_sleb128PKhPl>:
 800462e:	2300      	movs	r3, #0
 8004630:	461a      	mov	r2, r3
 8004632:	b530      	push	{r4, r5, lr}
 8004634:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004638:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800463c:	4095      	lsls	r5, r2
 800463e:	432b      	orrs	r3, r5
 8004640:	0625      	lsls	r5, r4, #24
 8004642:	f102 0207 	add.w	r2, r2, #7
 8004646:	d4f5      	bmi.n	8004634 <_ZL12read_sleb128PKhPl+0x6>
 8004648:	2a1f      	cmp	r2, #31
 800464a:	d806      	bhi.n	800465a <_ZL12read_sleb128PKhPl+0x2c>
 800464c:	0664      	lsls	r4, r4, #25
 800464e:	bf42      	ittt	mi
 8004650:	f04f 34ff 	movmi.w	r4, #4294967295
 8004654:	fa04 f202 	lslmi.w	r2, r4, r2
 8004658:	4313      	orrmi	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	bd30      	pop	{r4, r5, pc}

0800465e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800465e:	2850      	cmp	r0, #80	; 0x50
 8004660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	460e      	mov	r6, r1
 8004666:	4614      	mov	r4, r2
 8004668:	461f      	mov	r7, r3
 800466a:	d107      	bne.n	800467c <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 800466c:	1cd0      	adds	r0, r2, #3
 800466e:	f020 0003 	bic.w	r0, r0, #3
 8004672:	f850 3b04 	ldr.w	r3, [r0], #4
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	b003      	add	sp, #12
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467c:	f000 030f 	and.w	r3, r0, #15
 8004680:	2b0c      	cmp	r3, #12
 8004682:	d82e      	bhi.n	80046e2 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8004684:	e8df f003 	tbb	[pc, r3]
 8004688:	251d0725 	.word	0x251d0725
 800468c:	2d2d2d29 	.word	0x2d2d2d29
 8004690:	2521182d 	.word	0x2521182d
 8004694:	29          	.byte	0x29
 8004695:	00          	.byte	0x00
 8004696:	a901      	add	r1, sp, #4
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff ffb7 	bl	800460c <_ZL12read_uleb128PKhPm>
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0e8      	beq.n	8004676 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80046a4:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80046a8:	2a10      	cmp	r2, #16
 80046aa:	bf08      	it	eq
 80046ac:	4626      	moveq	r6, r4
 80046ae:	062a      	lsls	r2, r5, #24
 80046b0:	4433      	add	r3, r6
 80046b2:	bf48      	it	mi
 80046b4:	681b      	ldrmi	r3, [r3, #0]
 80046b6:	e7de      	b.n	8004676 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80046b8:	a901      	add	r1, sp, #4
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ffb7 	bl	800462e <_ZL12read_sleb128PKhPl>
 80046c0:	e7ed      	b.n	800469e <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80046c2:	4620      	mov	r0, r4
 80046c4:	f830 3b02 	ldrh.w	r3, [r0], #2
 80046c8:	e7ea      	b.n	80046a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80046ca:	4620      	mov	r0, r4
 80046cc:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80046d0:	e7e6      	b.n	80046a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80046d2:	4620      	mov	r0, r4
 80046d4:	f850 3b04 	ldr.w	r3, [r0], #4
 80046d8:	e7e2      	b.n	80046a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80046da:	4620      	mov	r0, r4
 80046dc:	f850 3b08 	ldr.w	r3, [r0], #8
 80046e0:	e7de      	b.n	80046a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80046e2:	f000 fb61 	bl	8004da8 <abort>

080046e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80046e6:	b508      	push	{r3, lr}
 80046e8:	4603      	mov	r3, r0
 80046ea:	2bff      	cmp	r3, #255	; 0xff
 80046ec:	4608      	mov	r0, r1
 80046ee:	d007      	beq.n	8004700 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80046f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d00d      	beq.n	8004714 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80046f8:	d804      	bhi.n	8004704 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80046fa:	b10b      	cbz	r3, 8004700 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d107      	bne.n	8004710 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8004700:	2000      	movs	r0, #0
 8004702:	bd08      	pop	{r3, pc}
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d00d      	beq.n	8004724 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8004708:	2b50      	cmp	r3, #80	; 0x50
 800470a:	d0f9      	beq.n	8004700 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d005      	beq.n	800471c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8004710:	f000 fb4a 	bl	8004da8 <abort>
 8004714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004718:	f7fc bca2 	b.w	8001060 <_Unwind_GetTextRelBase>
 800471c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004720:	f7fc bca2 	b.w	8001068 <_Unwind_GetDataRelBase>
 8004724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004728:	f7fc bc8a 	b.w	8001040 <_Unwind_GetRegionStart>

0800472c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	4601      	mov	r1, r0
 8004732:	4620      	mov	r0, r4
 8004734:	4615      	mov	r5, r2
 8004736:	461e      	mov	r6, r3
 8004738:	f7ff ffd5 	bl	80046e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800473c:	4633      	mov	r3, r6
 800473e:	462a      	mov	r2, r5
 8004740:	4601      	mov	r1, r0
 8004742:	4620      	mov	r0, r4
 8004744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004748:	f7ff bf89 	b.w	800465e <_ZL28read_encoded_value_with_basehjPKhPj>

0800474c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800474c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800474e:	460e      	mov	r6, r1
 8004750:	4614      	mov	r4, r2
 8004752:	4605      	mov	r5, r0
 8004754:	b318      	cbz	r0, 800479e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 8004756:	f7fc fc73 	bl	8001040 <_Unwind_GetRegionStart>
 800475a:	6020      	str	r0, [r4, #0]
 800475c:	7831      	ldrb	r1, [r6, #0]
 800475e:	1c72      	adds	r2, r6, #1
 8004760:	29ff      	cmp	r1, #255	; 0xff
 8004762:	d01d      	beq.n	80047a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8004764:	1d23      	adds	r3, r4, #4
 8004766:	4628      	mov	r0, r5
 8004768:	f7ff ffe0 	bl	800472c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800476c:	4602      	mov	r2, r0
 800476e:	7813      	ldrb	r3, [r2, #0]
 8004770:	1c50      	adds	r0, r2, #1
 8004772:	2bff      	cmp	r3, #255	; 0xff
 8004774:	7523      	strb	r3, [r4, #20]
 8004776:	d015      	beq.n	80047a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8004778:	2310      	movs	r3, #16
 800477a:	a901      	add	r1, sp, #4
 800477c:	7523      	strb	r3, [r4, #20]
 800477e:	f7ff ff45 	bl	800460c <_ZL12read_uleb128PKhPm>
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	4403      	add	r3, r0
 8004786:	60e3      	str	r3, [r4, #12]
 8004788:	7803      	ldrb	r3, [r0, #0]
 800478a:	a901      	add	r1, sp, #4
 800478c:	7563      	strb	r3, [r4, #21]
 800478e:	3001      	adds	r0, #1
 8004790:	f7ff ff3c 	bl	800460c <_ZL12read_uleb128PKhPm>
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	4403      	add	r3, r0
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	b002      	add	sp, #8
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	e7dc      	b.n	800475a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	e7e4      	b.n	800476e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80047a4:	2300      	movs	r3, #0
 80047a6:	e7ee      	b.n	8004786 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080047a8 <_Unwind_GetGR>:
 80047a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	460a      	mov	r2, r1
 80047b2:	4619      	mov	r1, r3
 80047b4:	f7fb fea8 	bl	8000508 <_Unwind_VRS_Get>
 80047b8:	9803      	ldr	r0, [sp, #12]
 80047ba:	b005      	add	sp, #20
 80047bc:	f85d fb04 	ldr.w	pc, [sp], #4

080047c0 <__gxx_personality_v0>:
 80047c0:	2300      	movs	r3, #0
 80047c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	b091      	sub	sp, #68	; 0x44
 80047c8:	9304      	str	r3, [sp, #16]
 80047ca:	f000 0303 	and.w	r3, r0, #3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	4607      	mov	r7, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	4616      	mov	r6, r2
 80047d6:	d011      	beq.n	80047fc <__gxx_personality_v0+0x3c>
 80047d8:	d303      	bcc.n	80047e2 <__gxx_personality_v0+0x22>
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d003      	beq.n	80047e6 <__gxx_personality_v0+0x26>
 80047de:	f000 fae3 	bl	8004da8 <abort>
 80047e2:	0702      	lsls	r2, r0, #28
 80047e4:	d51a      	bpl.n	800481c <__gxx_personality_v0+0x5c>
 80047e6:	4631      	mov	r1, r6
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fc fc13 	bl	8001014 <__gnu_unwind_frame>
 80047ee:	b118      	cbz	r0, 80047f8 <__gxx_personality_v0+0x38>
 80047f0:	2009      	movs	r0, #9
 80047f2:	b011      	add	sp, #68	; 0x44
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	2008      	movs	r0, #8
 80047fa:	e7fa      	b.n	80047f2 <__gxx_personality_v0+0x32>
 80047fc:	f000 0508 	and.w	r5, r0, #8
 8004800:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8004804:	bb85      	cbnz	r5, 8004868 <__gxx_personality_v0+0xa8>
 8004806:	f8d1 9020 	ldr.w	r9, [r1, #32]
 800480a:	4610      	mov	r0, r2
 800480c:	210d      	movs	r1, #13
 800480e:	f7ff ffcb 	bl	80047a8 <_Unwind_GetGR>
 8004812:	4581      	cmp	r9, r0
 8004814:	f040 8140 	bne.w	8004a98 <__gxx_personality_v0+0x2d8>
 8004818:	2506      	movs	r5, #6
 800481a:	e000      	b.n	800481e <__gxx_personality_v0+0x5e>
 800481c:	2501      	movs	r5, #1
 800481e:	ab10      	add	r3, sp, #64	; 0x40
 8004820:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	f007 0708 	and.w	r7, r7, #8
 800482c:	433d      	orrs	r5, r7
 800482e:	220c      	movs	r2, #12
 8004830:	4619      	mov	r1, r3
 8004832:	4630      	mov	r0, r6
 8004834:	f7fb fe8e 	bl	8000554 <_Unwind_VRS_Set>
 8004838:	2d06      	cmp	r5, #6
 800483a:	f040 8139 	bne.w	8004ab0 <__gxx_personality_v0+0x2f0>
 800483e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8004842:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004844:	f1b8 0f00 	cmp.w	r8, #0
 8004848:	bf0c      	ite	eq
 800484a:	f04f 0a01 	moveq.w	sl, #1
 800484e:	f04f 0a03 	movne.w	sl, #3
 8004852:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004854:	f015 0508 	ands.w	r5, r5, #8
 8004858:	f000 80ce 	beq.w	80049f8 <__gxx_personality_v0+0x238>
 800485c:	f1ba 0f01 	cmp.w	sl, #1
 8004860:	f040 80c6 	bne.w	80049f0 <__gxx_personality_v0+0x230>
 8004864:	f000 fa84 	bl	8004d70 <_ZSt9terminatev>
 8004868:	2502      	movs	r5, #2
 800486a:	e7d8      	b.n	800481e <__gxx_personality_v0+0x5e>
 800486c:	9a07      	ldr	r2, [sp, #28]
 800486e:	4413      	add	r3, r2
 8004870:	429f      	cmp	r7, r3
 8004872:	f080 8137 	bcs.w	8004ae4 <__gxx_personality_v0+0x324>
 8004876:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800487a:	f1b8 0f00 	cmp.w	r8, #0
 800487e:	d001      	beq.n	8004884 <__gxx_personality_v0+0xc4>
 8004880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004882:	4498      	add	r8, r3
 8004884:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004886:	b117      	cbz	r7, 800488e <__gxx_personality_v0+0xce>
 8004888:	1e78      	subs	r0, r7, #1
 800488a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800488c:	4407      	add	r7, r0
 800488e:	f1b8 0f00 	cmp.w	r8, #0
 8004892:	d0a8      	beq.n	80047e6 <__gxx_personality_v0+0x26>
 8004894:	2f00      	cmp	r7, #0
 8004896:	f000 80a1 	beq.w	80049dc <__gxx_personality_v0+0x21c>
 800489a:	f015 0308 	ands.w	r3, r5, #8
 800489e:	9302      	str	r3, [sp, #8]
 80048a0:	d036      	beq.n	8004910 <__gxx_personality_v0+0x150>
 80048a2:	2347      	movs	r3, #71	; 0x47
 80048a4:	7023      	strb	r3, [r4, #0]
 80048a6:	234e      	movs	r3, #78	; 0x4e
 80048a8:	7063      	strb	r3, [r4, #1]
 80048aa:	2355      	movs	r3, #85	; 0x55
 80048ac:	70a3      	strb	r3, [r4, #2]
 80048ae:	2343      	movs	r3, #67	; 0x43
 80048b0:	70e3      	strb	r3, [r4, #3]
 80048b2:	2346      	movs	r3, #70	; 0x46
 80048b4:	7123      	strb	r3, [r4, #4]
 80048b6:	234f      	movs	r3, #79	; 0x4f
 80048b8:	7163      	strb	r3, [r4, #5]
 80048ba:	2352      	movs	r3, #82	; 0x52
 80048bc:	71a3      	strb	r3, [r4, #6]
 80048be:	2300      	movs	r3, #0
 80048c0:	71e3      	strb	r3, [r4, #7]
 80048c2:	f04f 0a00 	mov.w	sl, #0
 80048c6:	f06f 0b03 	mvn.w	fp, #3
 80048ca:	a907      	add	r1, sp, #28
 80048cc:	4638      	mov	r0, r7
 80048ce:	f7ff feae 	bl	800462e <_ZL12read_sleb128PKhPl>
 80048d2:	a908      	add	r1, sp, #32
 80048d4:	9003      	str	r0, [sp, #12]
 80048d6:	f7ff feaa 	bl	800462e <_ZL12read_sleb128PKhPl>
 80048da:	9a07      	ldr	r2, [sp, #28]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d076      	beq.n	80049ce <__gxx_personality_v0+0x20e>
 80048e0:	dd3d      	ble.n	800495e <__gxx_personality_v0+0x19e>
 80048e2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80048e6:	28ff      	cmp	r0, #255	; 0xff
 80048e8:	d035      	beq.n	8004956 <__gxx_personality_v0+0x196>
 80048ea:	f000 0307 	and.w	r3, r0, #7
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	f63f af75 	bhi.w	80047de <__gxx_personality_v0+0x1e>
 80048f4:	a101      	add	r1, pc, #4	; (adr r1, 80048fc <__gxx_personality_v0+0x13c>)
 80048f6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	0800495b 	.word	0x0800495b
 8004900:	080047df 	.word	0x080047df
 8004904:	08004923 	.word	0x08004923
 8004908:	0800495b 	.word	0x0800495b
 800490c:	08004953 	.word	0x08004953
 8004910:	79e3      	ldrb	r3, [r4, #7]
 8004912:	2b01      	cmp	r3, #1
 8004914:	bf0c      	ite	eq
 8004916:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800491a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800491e:	9304      	str	r3, [sp, #16]
 8004920:	e7cf      	b.n	80048c2 <__gxx_personality_v0+0x102>
 8004922:	2702      	movs	r7, #2
 8004924:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004926:	ab09      	add	r3, sp, #36	; 0x24
 8004928:	fb07 1212 	mls	r2, r7, r2, r1
 800492c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800492e:	f7ff fe96 	bl	800465e <_ZL28read_encoded_value_with_basehjPKhPj>
 8004932:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004934:	b369      	cbz	r1, 8004992 <__gxx_personality_v0+0x1d2>
 8004936:	b12c      	cbz	r4, 8004944 <__gxx_personality_v0+0x184>
 8004938:	ab04      	add	r3, sp, #16
 800493a:	2200      	movs	r2, #0
 800493c:	4620      	mov	r0, r4
 800493e:	f7ff fdd1 	bl	80044e4 <__cxa_type_match>
 8004942:	bb30      	cbnz	r0, 8004992 <__gxx_personality_v0+0x1d2>
 8004944:	9f08      	ldr	r7, [sp, #32]
 8004946:	2f00      	cmp	r7, #0
 8004948:	d044      	beq.n	80049d4 <__gxx_personality_v0+0x214>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	443b      	add	r3, r7
 800494e:	461f      	mov	r7, r3
 8004950:	e7bb      	b.n	80048ca <__gxx_personality_v0+0x10a>
 8004952:	2708      	movs	r7, #8
 8004954:	e7e6      	b.n	8004924 <__gxx_personality_v0+0x164>
 8004956:	2700      	movs	r7, #0
 8004958:	e7e4      	b.n	8004924 <__gxx_personality_v0+0x164>
 800495a:	2704      	movs	r7, #4
 800495c:	e7e2      	b.n	8004924 <__gxx_personality_v0+0x164>
 800495e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004960:	3201      	adds	r2, #1
 8004962:	b36c      	cbz	r4, 80049c0 <__gxx_personality_v0+0x200>
 8004964:	9b02      	ldr	r3, [sp, #8]
 8004966:	bb5b      	cbnz	r3, 80049c0 <__gxx_personality_v0+0x200>
 8004968:	fb0b 7202 	mla	r2, fp, r2, r7
 800496c:	9b04      	ldr	r3, [sp, #16]
 800496e:	1f17      	subs	r7, r2, #4
 8004970:	9306      	str	r3, [sp, #24]
 8004972:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004976:	b141      	cbz	r1, 800498a <__gxx_personality_v0+0x1ca>
 8004978:	ab06      	add	r3, sp, #24
 800497a:	2200      	movs	r2, #0
 800497c:	4439      	add	r1, r7
 800497e:	4620      	mov	r0, r4
 8004980:	f7ff fdb0 	bl	80044e4 <__cxa_type_match>
 8004984:	2800      	cmp	r0, #0
 8004986:	d0f4      	beq.n	8004972 <__gxx_personality_v0+0x1b2>
 8004988:	2101      	movs	r1, #1
 800498a:	f081 0101 	eor.w	r1, r1, #1
 800498e:	2900      	cmp	r1, #0
 8004990:	d0d8      	beq.n	8004944 <__gxx_personality_v0+0x184>
 8004992:	f04f 0a03 	mov.w	sl, #3
 8004996:	9f07      	ldr	r7, [sp, #28]
 8004998:	07eb      	lsls	r3, r5, #31
 800499a:	d527      	bpl.n	80049ec <__gxx_personality_v0+0x22c>
 800499c:	f1ba 0f02 	cmp.w	sl, #2
 80049a0:	f43f af21 	beq.w	80047e6 <__gxx_personality_v0+0x26>
 80049a4:	210d      	movs	r1, #13
 80049a6:	4630      	mov	r0, r6
 80049a8:	9d04      	ldr	r5, [sp, #16]
 80049aa:	f7ff fefd 	bl	80047a8 <_Unwind_GetGR>
 80049ae:	6265      	str	r5, [r4, #36]	; 0x24
 80049b0:	6220      	str	r0, [r4, #32]
 80049b2:	62a7      	str	r7, [r4, #40]	; 0x28
 80049b4:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80049b8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80049bc:	2006      	movs	r0, #6
 80049be:	e718      	b.n	80047f2 <__gxx_personality_v0+0x32>
 80049c0:	fb0b f202 	mul.w	r2, fp, r2
 80049c4:	58b9      	ldr	r1, [r7, r2]
 80049c6:	fab1 f181 	clz	r1, r1
 80049ca:	0949      	lsrs	r1, r1, #5
 80049cc:	e7df      	b.n	800498e <__gxx_personality_v0+0x1ce>
 80049ce:	f04f 0a01 	mov.w	sl, #1
 80049d2:	e7b7      	b.n	8004944 <__gxx_personality_v0+0x184>
 80049d4:	f1ba 0f00 	cmp.w	sl, #0
 80049d8:	f43f af05 	beq.w	80047e6 <__gxx_personality_v0+0x26>
 80049dc:	f04f 0a02 	mov.w	sl, #2
 80049e0:	e7da      	b.n	8004998 <__gxx_personality_v0+0x1d8>
 80049e2:	2700      	movs	r7, #0
 80049e4:	f04f 0a01 	mov.w	sl, #1
 80049e8:	46b8      	mov	r8, r7
 80049ea:	e7d5      	b.n	8004998 <__gxx_personality_v0+0x1d8>
 80049ec:	4649      	mov	r1, r9
 80049ee:	e731      	b.n	8004854 <__gxx_personality_v0+0x94>
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	da23      	bge.n	8004a3c <__gxx_personality_v0+0x27c>
 80049f4:	f000 f9ce 	bl	8004d94 <_ZSt10unexpectedv>
 80049f8:	f1ba 0f01 	cmp.w	sl, #1
 80049fc:	d102      	bne.n	8004a04 <__gxx_personality_v0+0x244>
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f93f 	bl	8004c82 <__cxa_call_terminate>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	da19      	bge.n	8004a3c <__gxx_personality_v0+0x27c>
 8004a08:	aa0a      	add	r2, sp, #40	; 0x28
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff fe9e 	bl	800474c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004a10:	4631      	mov	r1, r6
 8004a12:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004a16:	f7ff fe66 	bl	80046e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004a1a:	f06f 0303 	mvn.w	r3, #3
 8004a1e:	fb07 3203 	mla	r2, r7, r3, r3
 8004a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a24:	900c      	str	r0, [sp, #48]	; 0x30
 8004a26:	4413      	add	r3, r2
 8004a28:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004a2c:	b10a      	cbz	r2, 8004a32 <__gxx_personality_v0+0x272>
 8004a2e:	3501      	adds	r5, #1
 8004a30:	e7fa      	b.n	8004a28 <__gxx_personality_v0+0x268>
 8004a32:	2204      	movs	r2, #4
 8004a34:	62a5      	str	r5, [r4, #40]	; 0x28
 8004a36:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004a38:	6322      	str	r2, [r4, #48]	; 0x30
 8004a3a:	6363      	str	r3, [r4, #52]	; 0x34
 8004a3c:	ab10      	add	r3, sp, #64	; 0x40
 8004a3e:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	4630      	mov	r0, r6
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f7fb fd82 	bl	8000554 <_Unwind_VRS_Set>
 8004a50:	ab10      	add	r3, sp, #64	; 0x40
 8004a52:	f843 7d20 	str.w	r7, [r3, #-32]!
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7fb fd78 	bl	8000554 <_Unwind_VRS_Set>
 8004a64:	210f      	movs	r1, #15
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff fe9e 	bl	80047a8 <_Unwind_GetGR>
 8004a6c:	f000 0001 	and.w	r0, r0, #1
 8004a70:	ab10      	add	r3, sp, #64	; 0x40
 8004a72:	ea40 0008 	orr.w	r0, r0, r8
 8004a76:	f843 0d24 	str.w	r0, [r3, #-36]!
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	220f      	movs	r2, #15
 8004a80:	4619      	mov	r1, r3
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7fb fd66 	bl	8000554 <_Unwind_VRS_Set>
 8004a88:	f1ba 0f02 	cmp.w	sl, #2
 8004a8c:	d102      	bne.n	8004a94 <__gxx_personality_v0+0x2d4>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7ff fd86 	bl	80045a0 <__cxa_begin_cleanup>
 8004a94:	2007      	movs	r0, #7
 8004a96:	e6ac      	b.n	80047f2 <__gxx_personality_v0+0x32>
 8004a98:	aa10      	add	r2, sp, #64	; 0x40
 8004a9a:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8004a9e:	9200      	str	r2, [sp, #0]
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f045 0502 	orr.w	r5, r5, #2
 8004aac:	f7fb fd52 	bl	8000554 <_Unwind_VRS_Set>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7fc facb 	bl	800104c <_Unwind_GetLanguageSpecificData>
 8004ab6:	4681      	mov	r9, r0
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	f43f ae94 	beq.w	80047e6 <__gxx_personality_v0+0x26>
 8004abe:	aa0a      	add	r2, sp, #40	; 0x28
 8004ac0:	4601      	mov	r1, r0
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff fe42 	bl	800474c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4680      	mov	r8, r0
 8004acc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004ad0:	f7ff fe09 	bl	80046e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004ad4:	210f      	movs	r1, #15
 8004ad6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff fe65 	bl	80047a8 <_Unwind_GetGR>
 8004ade:	f020 0001 	bic.w	r0, r0, #1
 8004ae2:	1e47      	subs	r7, r0, #1
 8004ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae6:	4598      	cmp	r8, r3
 8004ae8:	f4bf af7b 	bcs.w	80049e2 <__gxx_personality_v0+0x222>
 8004aec:	4642      	mov	r2, r8
 8004aee:	ab06      	add	r3, sp, #24
 8004af0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004af4:	2000      	movs	r0, #0
 8004af6:	f7ff fe19 	bl	800472c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004afa:	ab07      	add	r3, sp, #28
 8004afc:	4602      	mov	r2, r0
 8004afe:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7ff fe12 	bl	800472c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004b08:	ab08      	add	r3, sp, #32
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7ff fe0b 	bl	800472c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004b16:	a909      	add	r1, sp, #36	; 0x24
 8004b18:	f7ff fd78 	bl	800460c <_ZL12read_uleb128PKhPm>
 8004b1c:	9a06      	ldr	r2, [sp, #24]
 8004b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b20:	4680      	mov	r8, r0
 8004b22:	4413      	add	r3, r2
 8004b24:	429f      	cmp	r7, r3
 8004b26:	f4bf aea1 	bcs.w	800486c <__gxx_personality_v0+0xac>
 8004b2a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004b2e:	e7d9      	b.n	8004ae4 <__gxx_personality_v0+0x324>

08004b30 <_ZdlPvj>:
 8004b30:	f7ff bcad 	b.w	800448e <_ZdlPv>

08004b34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004b36:	2310      	movs	r3, #16
 8004b38:	2400      	movs	r4, #0
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	6803      	ldr	r3, [r0, #0]
 8004b3e:	4615      	mov	r5, r2
 8004b40:	699e      	ldr	r6, [r3, #24]
 8004b42:	9400      	str	r4, [sp, #0]
 8004b44:	466b      	mov	r3, sp
 8004b46:	f88d 4004 	strb.w	r4, [sp, #4]
 8004b4a:	9403      	str	r4, [sp, #12]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	47b0      	blx	r6
 8004b50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b54:	f003 0306 	and.w	r3, r3, #6
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	bf09      	itett	eq
 8004b5c:	2001      	moveq	r0, #1
 8004b5e:	4620      	movne	r0, r4
 8004b60:	9b00      	ldreq	r3, [sp, #0]
 8004b62:	602b      	streq	r3, [r5, #0]
 8004b64:	b004      	add	sp, #16
 8004b66:	bd70      	pop	{r4, r5, r6, pc}

08004b68 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004b68:	9800      	ldr	r0, [sp, #0]
 8004b6a:	4290      	cmp	r0, r2
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2006      	moveq	r0, #6
 8004b70:	2001      	movne	r0, #1
 8004b72:	4770      	bx	lr

08004b74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8004b7a:	6003      	str	r3, [r0, #0]
 8004b7c:	f000 f84b 	bl	8004c16 <_ZNSt9type_infoD1Ev>
 8004b80:	4620      	mov	r0, r4
 8004b82:	bd10      	pop	{r4, pc}
 8004b84:	08005130 	.word	0x08005130

08004b88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	f7ff fff2 	bl	8004b74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004b90:	4620      	mov	r0, r4
 8004b92:	2108      	movs	r1, #8
 8004b94:	f7ff ffcc 	bl	8004b30 <_ZdlPvj>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd10      	pop	{r4, pc}

08004b9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	4615      	mov	r5, r2
 8004ba0:	461c      	mov	r4, r3
 8004ba2:	f000 f83b 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 8004ba6:	b120      	cbz	r0, 8004bb2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	60e3      	str	r3, [r4, #12]
 8004bac:	2306      	movs	r3, #6
 8004bae:	6025      	str	r5, [r4, #0]
 8004bb0:	7123      	strb	r3, [r4, #4]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}

08004bb4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	4605      	mov	r5, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	f000 f82c 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 8004bc4:	b948      	cbnz	r0, 8004bda <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004bc6:	2f03      	cmp	r7, #3
 8004bc8:	d807      	bhi.n	8004bda <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	4632      	mov	r2, r6
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4718      	bx	r3
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be2:	9e06      	ldr	r6, [sp, #24]
 8004be4:	4698      	mov	r8, r3
 8004be6:	9b08      	ldr	r3, [sp, #32]
 8004be8:	4607      	mov	r7, r0
 8004bea:	429e      	cmp	r6, r3
 8004bec:	4615      	mov	r5, r2
 8004bee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bf0:	d103      	bne.n	8004bfa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8004bf2:	9907      	ldr	r1, [sp, #28]
 8004bf4:	f000 f812 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 8004bf8:	b958      	cbnz	r0, 8004c12 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	4638      	mov	r0, r7
 8004bfe:	f000 f80d 	bl	8004c1c <_ZNKSt9type_infoeqERKS_>
 8004c02:	b118      	cbz	r0, 8004c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8004c04:	2301      	movs	r3, #1
 8004c06:	6026      	str	r6, [r4, #0]
 8004c08:	7125      	strb	r5, [r4, #4]
 8004c0a:	71a3      	strb	r3, [r4, #6]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c12:	7165      	strb	r5, [r4, #5]
 8004c14:	e7fa      	b.n	8004c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08004c16 <_ZNSt9type_infoD1Ev>:
 8004c16:	4770      	bx	lr

08004c18 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004c18:	2000      	movs	r0, #0
 8004c1a:	4770      	bx	lr

08004c1c <_ZNKSt9type_infoeqERKS_>:
 8004c1c:	4281      	cmp	r1, r0
 8004c1e:	b508      	push	{r3, lr}
 8004c20:	d00e      	beq.n	8004c40 <_ZNKSt9type_infoeqERKS_+0x24>
 8004c22:	6840      	ldr	r0, [r0, #4]
 8004c24:	7803      	ldrb	r3, [r0, #0]
 8004c26:	2b2a      	cmp	r3, #42	; 0x2a
 8004c28:	d00c      	beq.n	8004c44 <_ZNKSt9type_infoeqERKS_+0x28>
 8004c2a:	6849      	ldr	r1, [r1, #4]
 8004c2c:	780b      	ldrb	r3, [r1, #0]
 8004c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c30:	bf08      	it	eq
 8004c32:	3101      	addeq	r1, #1
 8004c34:	f7fb fa8c 	bl	8000150 <strcmp>
 8004c38:	fab0 f080 	clz	r0, r0
 8004c3c:	0940      	lsrs	r0, r0, #5
 8004c3e:	bd08      	pop	{r3, pc}
 8004c40:	2001      	movs	r0, #1
 8004c42:	bd08      	pop	{r3, pc}
 8004c44:	2000      	movs	r0, #0
 8004c46:	bd08      	pop	{r3, pc}

08004c48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004c48:	7803      	ldrb	r3, [r0, #0]
 8004c4a:	2b47      	cmp	r3, #71	; 0x47
 8004c4c:	d117      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c4e:	7843      	ldrb	r3, [r0, #1]
 8004c50:	2b4e      	cmp	r3, #78	; 0x4e
 8004c52:	d114      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c54:	7883      	ldrb	r3, [r0, #2]
 8004c56:	2b55      	cmp	r3, #85	; 0x55
 8004c58:	d111      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c5a:	78c3      	ldrb	r3, [r0, #3]
 8004c5c:	2b43      	cmp	r3, #67	; 0x43
 8004c5e:	d10e      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c60:	7903      	ldrb	r3, [r0, #4]
 8004c62:	2b43      	cmp	r3, #67	; 0x43
 8004c64:	d10b      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c66:	7943      	ldrb	r3, [r0, #5]
 8004c68:	2b2b      	cmp	r3, #43	; 0x2b
 8004c6a:	d108      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c6c:	7983      	ldrb	r3, [r0, #6]
 8004c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8004c70:	d105      	bne.n	8004c7e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c72:	79c0      	ldrb	r0, [r0, #7]
 8004c74:	2801      	cmp	r0, #1
 8004c76:	bf8c      	ite	hi
 8004c78:	2000      	movhi	r0, #0
 8004c7a:	2001      	movls	r0, #1
 8004c7c:	4770      	bx	lr
 8004c7e:	2000      	movs	r0, #0
 8004c80:	4770      	bx	lr

08004c82 <__cxa_call_terminate>:
 8004c82:	b510      	push	{r4, lr}
 8004c84:	4604      	mov	r4, r0
 8004c86:	b148      	cbz	r0, 8004c9c <__cxa_call_terminate+0x1a>
 8004c88:	f000 f83b 	bl	8004d02 <__cxa_begin_catch>
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff ffdb 	bl	8004c48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004c92:	b118      	cbz	r0, 8004c9c <__cxa_call_terminate+0x1a>
 8004c94:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8004c98:	f000 f85d 	bl	8004d56 <_ZN10__cxxabiv111__terminateEPFvvE>
 8004c9c:	f000 f868 	bl	8004d70 <_ZSt9terminatev>

08004ca0 <__cxa_call_unexpected>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	f7ff ffd0 	bl	8004c48 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004ca8:	b140      	cbz	r0, 8004cbc <__cxa_call_unexpected+0x1c>
 8004caa:	2500      	movs	r5, #0
 8004cac:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 f826 	bl	8004d02 <__cxa_begin_catch>
 8004cb6:	b125      	cbz	r5, 8004cc2 <__cxa_call_unexpected+0x22>
 8004cb8:	f000 f86c 	bl	8004d94 <_ZSt10unexpectedv>
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	2501      	movs	r5, #1
 8004cc0:	e7f6      	b.n	8004cb0 <__cxa_call_unexpected+0x10>
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f859 	bl	8004d7a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004cc8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004cc8:	7803      	ldrb	r3, [r0, #0]
 8004cca:	2b47      	cmp	r3, #71	; 0x47
 8004ccc:	d117      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004cce:	7843      	ldrb	r3, [r0, #1]
 8004cd0:	2b4e      	cmp	r3, #78	; 0x4e
 8004cd2:	d114      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004cd4:	7883      	ldrb	r3, [r0, #2]
 8004cd6:	2b55      	cmp	r3, #85	; 0x55
 8004cd8:	d111      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004cda:	78c3      	ldrb	r3, [r0, #3]
 8004cdc:	2b43      	cmp	r3, #67	; 0x43
 8004cde:	d10e      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ce0:	7903      	ldrb	r3, [r0, #4]
 8004ce2:	2b43      	cmp	r3, #67	; 0x43
 8004ce4:	d10b      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ce6:	7943      	ldrb	r3, [r0, #5]
 8004ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8004cea:	d108      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004cec:	7983      	ldrb	r3, [r0, #6]
 8004cee:	2b2b      	cmp	r3, #43	; 0x2b
 8004cf0:	d105      	bne.n	8004cfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004cf2:	79c0      	ldrb	r0, [r0, #7]
 8004cf4:	2801      	cmp	r0, #1
 8004cf6:	bf8c      	ite	hi
 8004cf8:	2000      	movhi	r0, #0
 8004cfa:	2001      	movls	r0, #1
 8004cfc:	4770      	bx	lr
 8004cfe:	2000      	movs	r0, #0
 8004d00:	4770      	bx	lr

08004d02 <__cxa_begin_catch>:
 8004d02:	b538      	push	{r3, r4, r5, lr}
 8004d04:	4605      	mov	r5, r0
 8004d06:	f000 f84b 	bl	8004da0 <__cxa_get_globals>
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	6802      	ldr	r2, [r0, #0]
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f1a5 0420 	sub.w	r4, r5, #32
 8004d14:	f7ff ffd8 	bl	8004cc8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004d18:	b930      	cbnz	r0, 8004d28 <__cxa_begin_catch+0x26>
 8004d1a:	b10a      	cbz	r2, 8004d20 <__cxa_begin_catch+0x1e>
 8004d1c:	f000 f828 	bl	8004d70 <_ZSt9terminatev>
 8004d20:	600c      	str	r4, [r1, #0]
 8004d22:	4614      	mov	r4, r2
 8004d24:	4620      	mov	r0, r4
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfb4      	ite	lt
 8004d32:	f1c3 0301 	rsblt	r3, r3, #1
 8004d36:	3301      	addge	r3, #1
 8004d38:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004d3c:	684b      	ldr	r3, [r1, #4]
 8004d3e:	42a2      	cmp	r2, r4
 8004d40:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d44:	604b      	str	r3, [r1, #4]
 8004d46:	bf1c      	itt	ne
 8004d48:	f845 2c10 	strne.w	r2, [r5, #-16]
 8004d4c:	600c      	strne	r4, [r1, #0]
 8004d4e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004d50:	f7fb fbd2 	bl	80004f8 <_Unwind_Complete>
 8004d54:	e7e6      	b.n	8004d24 <__cxa_begin_catch+0x22>

08004d56 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004d56:	b508      	push	{r3, lr}
 8004d58:	4780      	blx	r0
 8004d5a:	f000 f825 	bl	8004da8 <abort>
	...

08004d60 <_ZSt13get_terminatev>:
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <_ZSt13get_terminatev+0xc>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	f3bf 8f5b 	dmb	ish
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000014 	.word	0x20000014

08004d70 <_ZSt9terminatev>:
 8004d70:	b508      	push	{r3, lr}
 8004d72:	f7ff fff5 	bl	8004d60 <_ZSt13get_terminatev>
 8004d76:	f7ff ffee 	bl	8004d56 <_ZN10__cxxabiv111__terminateEPFvvE>

08004d7a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8004d7a:	b508      	push	{r3, lr}
 8004d7c:	4780      	blx	r0
 8004d7e:	f7ff fff7 	bl	8004d70 <_ZSt9terminatev>
	...

08004d84 <_ZSt14get_unexpectedv>:
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <_ZSt14get_unexpectedv+0xc>)
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	f3bf 8f5b 	dmb	ish
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000018 	.word	0x20000018

08004d94 <_ZSt10unexpectedv>:
 8004d94:	b508      	push	{r3, lr}
 8004d96:	f7ff fff5 	bl	8004d84 <_ZSt14get_unexpectedv>
 8004d9a:	f7ff ffee 	bl	8004d7a <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08004da0 <__cxa_get_globals>:
 8004da0:	4800      	ldr	r0, [pc, #0]	; (8004da4 <__cxa_get_globals+0x4>)
 8004da2:	4770      	bx	lr
 8004da4:	20001068 	.word	0x20001068

08004da8 <abort>:
 8004da8:	b508      	push	{r3, lr}
 8004daa:	2006      	movs	r0, #6
 8004dac:	f000 f8cc 	bl	8004f48 <raise>
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7fc fe4b 	bl	8001a4c <_exit>
	...

08004db8 <__cxa_atexit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4c05      	ldr	r4, [pc, #20]	; (8004dd0 <__cxa_atexit+0x18>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	b12c      	cbz	r4, 8004dcc <__cxa_atexit+0x14>
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f3af 8000 	nop.w
 8004dca:	bd10      	pop	{r4, pc}
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	00000000 	.word	0x00000000

08004dd4 <__errno>:
 8004dd4:	4b01      	ldr	r3, [pc, #4]	; (8004ddc <__errno+0x8>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	2000001c 	.word	0x2000001c

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	2500      	movs	r5, #0
 8004de4:	4e0c      	ldr	r6, [pc, #48]	; (8004e18 <__libc_init_array+0x38>)
 8004de6:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de8:	1ba4      	subs	r4, r4, r6
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	42a5      	cmp	r5, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	f000 f8c8 	bl	8004f84 <_init>
 8004df4:	2500      	movs	r5, #0
 8004df6:	4e0a      	ldr	r6, [pc, #40]	; (8004e20 <__libc_init_array+0x40>)
 8004df8:	4c0a      	ldr	r4, [pc, #40]	; (8004e24 <__libc_init_array+0x44>)
 8004dfa:	1ba4      	subs	r4, r4, r6
 8004dfc:	10a4      	asrs	r4, r4, #2
 8004dfe:	42a5      	cmp	r5, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e08:	4798      	blx	r3
 8004e0a:	3501      	adds	r5, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e12:	4798      	blx	r3
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08005414 	.word	0x08005414
 8004e1c:	08005414 	.word	0x08005414
 8004e20:	08005414 	.word	0x08005414
 8004e24:	0800541c 	.word	0x0800541c

08004e28 <free>:
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <free+0xc>)
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	f000 b817 	b.w	8004e60 <_free_r>
 8004e32:	bf00      	nop
 8004e34:	2000001c 	.word	0x2000001c

08004e38 <memcpy>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	1e43      	subs	r3, r0, #1
 8004e3c:	440a      	add	r2, r1
 8004e3e:	4291      	cmp	r1, r2
 8004e40:	d100      	bne.n	8004e44 <memcpy+0xc>
 8004e42:	bd10      	pop	{r4, pc}
 8004e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e4c:	e7f7      	b.n	8004e3e <memcpy+0x6>

08004e4e <memset>:
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4402      	add	r2, r0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d100      	bne.n	8004e58 <memset+0xa>
 8004e56:	4770      	bx	lr
 8004e58:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5c:	e7f9      	b.n	8004e52 <memset+0x4>
	...

08004e60 <_free_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4605      	mov	r5, r0
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d043      	beq.n	8004ef0 <_free_r+0x90>
 8004e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6c:	1f0c      	subs	r4, r1, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfb8      	it	lt
 8004e72:	18e4      	addlt	r4, r4, r3
 8004e74:	f000 f884 	bl	8004f80 <__malloc_lock>
 8004e78:	4a1e      	ldr	r2, [pc, #120]	; (8004ef4 <_free_r+0x94>)
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	b933      	cbnz	r3, 8004e8e <_free_r+0x2e>
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	6014      	str	r4, [r2, #0]
 8004e84:	4628      	mov	r0, r5
 8004e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8a:	f000 b87a 	b.w	8004f82 <__malloc_unlock>
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	d90b      	bls.n	8004eaa <_free_r+0x4a>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	1862      	adds	r2, r4, r1
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf01      	itttt	eq
 8004e9a:	681a      	ldreq	r2, [r3, #0]
 8004e9c:	685b      	ldreq	r3, [r3, #4]
 8004e9e:	1852      	addeq	r2, r2, r1
 8004ea0:	6022      	streq	r2, [r4, #0]
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	6004      	str	r4, [r0, #0]
 8004ea6:	e7ed      	b.n	8004e84 <_free_r+0x24>
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	b10a      	cbz	r2, 8004eb2 <_free_r+0x52>
 8004eae:	42a2      	cmp	r2, r4
 8004eb0:	d9fa      	bls.n	8004ea8 <_free_r+0x48>
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	1858      	adds	r0, r3, r1
 8004eb6:	42a0      	cmp	r0, r4
 8004eb8:	d10b      	bne.n	8004ed2 <_free_r+0x72>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	4401      	add	r1, r0
 8004ebe:	1858      	adds	r0, r3, r1
 8004ec0:	4282      	cmp	r2, r0
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	d1de      	bne.n	8004e84 <_free_r+0x24>
 8004ec6:	6810      	ldr	r0, [r2, #0]
 8004ec8:	6852      	ldr	r2, [r2, #4]
 8004eca:	4401      	add	r1, r0
 8004ecc:	6019      	str	r1, [r3, #0]
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	e7d8      	b.n	8004e84 <_free_r+0x24>
 8004ed2:	d902      	bls.n	8004eda <_free_r+0x7a>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	e7d4      	b.n	8004e84 <_free_r+0x24>
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	1821      	adds	r1, r4, r0
 8004ede:	428a      	cmp	r2, r1
 8004ee0:	bf01      	itttt	eq
 8004ee2:	6811      	ldreq	r1, [r2, #0]
 8004ee4:	6852      	ldreq	r2, [r2, #4]
 8004ee6:	1809      	addeq	r1, r1, r0
 8004ee8:	6021      	streq	r1, [r4, #0]
 8004eea:	6062      	str	r2, [r4, #4]
 8004eec:	605c      	str	r4, [r3, #4]
 8004eee:	e7c9      	b.n	8004e84 <_free_r+0x24>
 8004ef0:	bd38      	pop	{r3, r4, r5, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20001074 	.word	0x20001074

08004ef8 <_raise_r>:
 8004ef8:	291f      	cmp	r1, #31
 8004efa:	b538      	push	{r3, r4, r5, lr}
 8004efc:	4604      	mov	r4, r0
 8004efe:	460d      	mov	r5, r1
 8004f00:	d904      	bls.n	8004f0c <_raise_r+0x14>
 8004f02:	2316      	movs	r3, #22
 8004f04:	6003      	str	r3, [r0, #0]
 8004f06:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f0e:	b112      	cbz	r2, 8004f16 <_raise_r+0x1e>
 8004f10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f14:	b94b      	cbnz	r3, 8004f2a <_raise_r+0x32>
 8004f16:	4620      	mov	r0, r4
 8004f18:	f000 f830 	bl	8004f7c <_getpid_r>
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4620      	mov	r0, r4
 8004f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f26:	f000 b817 	b.w	8004f58 <_kill_r>
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d00a      	beq.n	8004f44 <_raise_r+0x4c>
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	d103      	bne.n	8004f3a <_raise_r+0x42>
 8004f32:	2316      	movs	r3, #22
 8004f34:	6003      	str	r3, [r0, #0]
 8004f36:	2001      	movs	r0, #1
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
 8004f3a:	2400      	movs	r4, #0
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f42:	4798      	blx	r3
 8004f44:	2000      	movs	r0, #0
 8004f46:	bd38      	pop	{r3, r4, r5, pc}

08004f48 <raise>:
 8004f48:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <raise+0xc>)
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f7ff bfd3 	b.w	8004ef8 <_raise_r>
 8004f52:	bf00      	nop
 8004f54:	2000001c 	.word	0x2000001c

08004f58 <_kill_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4c06      	ldr	r4, [pc, #24]	; (8004f78 <_kill_r+0x20>)
 8004f5e:	4605      	mov	r5, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	f7fc fd69 	bl	8001a3c <_kill>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d102      	bne.n	8004f74 <_kill_r+0x1c>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	b103      	cbz	r3, 8004f74 <_kill_r+0x1c>
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	bf00      	nop
 8004f78:	200011c0 	.word	0x200011c0

08004f7c <_getpid_r>:
 8004f7c:	f7fc bd5c 	b.w	8001a38 <_getpid>

08004f80 <__malloc_lock>:
 8004f80:	4770      	bx	lr

08004f82 <__malloc_unlock>:
 8004f82:	4770      	bx	lr

08004f84 <_init>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr

08004f90 <_fini>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr
