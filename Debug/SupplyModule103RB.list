
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000000c  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   0000000c  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001190  2000007c  08005584  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000120c  08005584  0002120c  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b795  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004ba2  00000000  00000000  0003b83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001210  00000000  00000000  000403e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001510  00000000  00000000  000415f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f04e  00000000  00000000  00042b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00099137  00000000  00000000  00051b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000eac85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003bc4  00000000  00000000  000ead7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0001bddb  00000000  00000000  000ee940  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000a2aa  00000000  00000000  0010a71b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005110 	.word	0x08005110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005110 	.word	0x08005110

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	; 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000220:	f1a2 0201 	sub.w	r2, r2, #1
 8000224:	d1ed      	bne.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003d2:	2afd      	cmp	r2, #253	; 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	; 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	; 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	; 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <__gesf2>:
 8000620:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000624:	e006      	b.n	8000634 <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__lesf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	e002      	b.n	8000634 <__cmpsf2+0x4>
 800062e:	bf00      	nop

08000630 <__cmpsf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000638:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800063c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000644:	bf18      	it	ne
 8000646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064a:	d011      	beq.n	8000670 <__cmpsf2+0x40>
 800064c:	b001      	add	sp, #4
 800064e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000652:	bf18      	it	ne
 8000654:	ea90 0f01 	teqne	r0, r1
 8000658:	bf58      	it	pl
 800065a:	ebb2 0003 	subspl.w	r0, r2, r3
 800065e:	bf88      	it	hi
 8000660:	17c8      	asrhi	r0, r1, #31
 8000662:	bf38      	it	cc
 8000664:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000668:	bf18      	it	ne
 800066a:	f040 0001 	orrne.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	d102      	bne.n	800067c <__cmpsf2+0x4c>
 8000676:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800067a:	d105      	bne.n	8000688 <__cmpsf2+0x58>
 800067c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000680:	d1e4      	bne.n	800064c <__cmpsf2+0x1c>
 8000682:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000686:	d0e1      	beq.n	800064c <__cmpsf2+0x1c>
 8000688:	f85d 0b04 	ldr.w	r0, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_cfrcmple>:
 8000690:	4684      	mov	ip, r0
 8000692:	4608      	mov	r0, r1
 8000694:	4661      	mov	r1, ip
 8000696:	e7ff      	b.n	8000698 <__aeabi_cfcmpeq>

08000698 <__aeabi_cfcmpeq>:
 8000698:	b50f      	push	{r0, r1, r2, r3, lr}
 800069a:	f7ff ffc9 	bl	8000630 <__cmpsf2>
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf48      	it	mi
 80006a2:	f110 0f00 	cmnmi.w	r0, #0
 80006a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a8 <__aeabi_fcmpeq>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff fff4 	bl	8000698 <__aeabi_cfcmpeq>
 80006b0:	bf0c      	ite	eq
 80006b2:	2001      	moveq	r0, #1
 80006b4:	2000      	movne	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmplt>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffea 	bl	8000698 <__aeabi_cfcmpeq>
 80006c4:	bf34      	ite	cc
 80006c6:	2001      	movcc	r0, #1
 80006c8:	2000      	movcs	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmple>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffe0 	bl	8000698 <__aeabi_cfcmpeq>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpge>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffd2 	bl	8000690 <__aeabi_cfrcmple>
 80006ec:	bf94      	ite	ls
 80006ee:	2001      	movls	r0, #1
 80006f0:	2000      	movhi	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpgt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffc8 	bl	8000690 <__aeabi_cfrcmple>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <selfrel_offset31>:
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	005a      	lsls	r2, r3, #1
 8000710:	bf4c      	ite	mi
 8000712:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000716:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800071a:	4418      	add	r0, r3
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <search_EIT_table>:
 8000720:	b361      	cbz	r1, 800077c <search_EIT_table+0x5c>
 8000722:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000726:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800072a:	4690      	mov	r8, r2
 800072c:	4606      	mov	r6, r0
 800072e:	46d1      	mov	r9, sl
 8000730:	2700      	movs	r7, #0
 8000732:	eb07 0409 	add.w	r4, r7, r9
 8000736:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800073a:	1064      	asrs	r4, r4, #1
 800073c:	00e5      	lsls	r5, r4, #3
 800073e:	1971      	adds	r1, r6, r5
 8000740:	4608      	mov	r0, r1
 8000742:	f7ff ffe3 	bl	800070c <selfrel_offset31>
 8000746:	45a2      	cmp	sl, r4
 8000748:	4683      	mov	fp, r0
 800074a:	f105 0008 	add.w	r0, r5, #8
 800074e:	4430      	add	r0, r6
 8000750:	d009      	beq.n	8000766 <search_EIT_table+0x46>
 8000752:	f7ff ffdb 	bl	800070c <selfrel_offset31>
 8000756:	45c3      	cmp	fp, r8
 8000758:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800075c:	d805      	bhi.n	800076a <search_EIT_table+0x4a>
 800075e:	4540      	cmp	r0, r8
 8000760:	d209      	bcs.n	8000776 <search_EIT_table+0x56>
 8000762:	1c67      	adds	r7, r4, #1
 8000764:	e7e5      	b.n	8000732 <search_EIT_table+0x12>
 8000766:	45c3      	cmp	fp, r8
 8000768:	d905      	bls.n	8000776 <search_EIT_table+0x56>
 800076a:	42a7      	cmp	r7, r4
 800076c:	d002      	beq.n	8000774 <search_EIT_table+0x54>
 800076e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8000772:	e7de      	b.n	8000732 <search_EIT_table+0x12>
 8000774:	2100      	movs	r1, #0
 8000776:	4608      	mov	r0, r1
 8000778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800077c:	4608      	mov	r0, r1
 800077e:	4770      	bx	lr

08000780 <__gnu_unwind_get_pr_addr>:
 8000780:	2801      	cmp	r0, #1
 8000782:	d007      	beq.n	8000794 <__gnu_unwind_get_pr_addr+0x14>
 8000784:	2802      	cmp	r0, #2
 8000786:	d007      	beq.n	8000798 <__gnu_unwind_get_pr_addr+0x18>
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__gnu_unwind_get_pr_addr+0x1c>)
 800078a:	2800      	cmp	r0, #0
 800078c:	bf0c      	ite	eq
 800078e:	4618      	moveq	r0, r3
 8000790:	2000      	movne	r0, #0
 8000792:	4770      	bx	lr
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <__gnu_unwind_get_pr_addr+0x20>)
 8000796:	4770      	bx	lr
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <__gnu_unwind_get_pr_addr+0x24>)
 800079a:	4770      	bx	lr
 800079c:	08000e7d 	.word	0x08000e7d
 80007a0:	08000e81 	.word	0x08000e81
 80007a4:	08000e85 	.word	0x08000e85

080007a8 <get_eit_entry>:
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <get_eit_entry+0x9c>)
 80007ac:	b083      	sub	sp, #12
 80007ae:	4604      	mov	r4, r0
 80007b0:	1e8d      	subs	r5, r1, #2
 80007b2:	b34b      	cbz	r3, 8000808 <get_eit_entry+0x60>
 80007b4:	a901      	add	r1, sp, #4
 80007b6:	4628      	mov	r0, r5
 80007b8:	f3af 8000 	nop.w
 80007bc:	b1f0      	cbz	r0, 80007fc <get_eit_entry+0x54>
 80007be:	9901      	ldr	r1, [sp, #4]
 80007c0:	462a      	mov	r2, r5
 80007c2:	f7ff ffad 	bl	8000720 <search_EIT_table>
 80007c6:	4601      	mov	r1, r0
 80007c8:	b1c0      	cbz	r0, 80007fc <get_eit_entry+0x54>
 80007ca:	f7ff ff9f 	bl	800070c <selfrel_offset31>
 80007ce:	684b      	ldr	r3, [r1, #4]
 80007d0:	64a0      	str	r0, [r4, #72]	; 0x48
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d02f      	beq.n	8000836 <get_eit_entry+0x8e>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f101 0004 	add.w	r0, r1, #4
 80007dc:	db27      	blt.n	800082e <get_eit_entry+0x86>
 80007de:	f7ff ff95 	bl	800070c <selfrel_offset31>
 80007e2:	2300      	movs	r3, #0
 80007e4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db13      	blt.n	8000816 <get_eit_entry+0x6e>
 80007ee:	f7ff ff8d 	bl	800070c <selfrel_offset31>
 80007f2:	2300      	movs	r3, #0
 80007f4:	6120      	str	r0, [r4, #16]
 80007f6:	4618      	mov	r0, r3
 80007f8:	b003      	add	sp, #12
 80007fa:	bd30      	pop	{r4, r5, pc}
 80007fc:	2309      	movs	r3, #9
 80007fe:	2200      	movs	r2, #0
 8000800:	4618      	mov	r0, r3
 8000802:	6122      	str	r2, [r4, #16]
 8000804:	b003      	add	sp, #12
 8000806:	bd30      	pop	{r4, r5, pc}
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <get_eit_entry+0xa0>)
 800080a:	4910      	ldr	r1, [pc, #64]	; (800084c <get_eit_entry+0xa4>)
 800080c:	4618      	mov	r0, r3
 800080e:	1ac9      	subs	r1, r1, r3
 8000810:	10c9      	asrs	r1, r1, #3
 8000812:	9101      	str	r1, [sp, #4]
 8000814:	e7d4      	b.n	80007c0 <get_eit_entry+0x18>
 8000816:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800081a:	f7ff ffb1 	bl	8000780 <__gnu_unwind_get_pr_addr>
 800081e:	2800      	cmp	r0, #0
 8000820:	bf14      	ite	ne
 8000822:	2300      	movne	r3, #0
 8000824:	2309      	moveq	r3, #9
 8000826:	6120      	str	r0, [r4, #16]
 8000828:	4618      	mov	r0, r3
 800082a:	b003      	add	sp, #12
 800082c:	bd30      	pop	{r4, r5, pc}
 800082e:	2301      	movs	r3, #1
 8000830:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000834:	e7d8      	b.n	80007e8 <get_eit_entry+0x40>
 8000836:	2305      	movs	r3, #5
 8000838:	2200      	movs	r2, #0
 800083a:	4618      	mov	r0, r3
 800083c:	6122      	str	r2, [r4, #16]
 800083e:	b003      	add	sp, #12
 8000840:	bd30      	pop	{r4, r5, pc}
 8000842:	bf00      	nop
 8000844:	00000000 	.word	0x00000000
 8000848:	080053e0 	.word	0x080053e0
 800084c:	080054f0 	.word	0x080054f0

08000850 <restore_non_core_regs>:
 8000850:	6803      	ldr	r3, [r0, #0]
 8000852:	b510      	push	{r4, lr}
 8000854:	07da      	lsls	r2, r3, #31
 8000856:	4604      	mov	r4, r0
 8000858:	d406      	bmi.n	8000868 <restore_non_core_regs+0x18>
 800085a:	079b      	lsls	r3, r3, #30
 800085c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000860:	d509      	bpl.n	8000876 <restore_non_core_regs+0x26>
 8000862:	f000 fc67 	bl	8001134 <__gnu_Unwind_Restore_VFP_D>
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	0759      	lsls	r1, r3, #29
 800086a:	d509      	bpl.n	8000880 <restore_non_core_regs+0x30>
 800086c:	071a      	lsls	r2, r3, #28
 800086e:	d50e      	bpl.n	800088e <restore_non_core_regs+0x3e>
 8000870:	06db      	lsls	r3, r3, #27
 8000872:	d513      	bpl.n	800089c <restore_non_core_regs+0x4c>
 8000874:	bd10      	pop	{r4, pc}
 8000876:	f000 fc55 	bl	8001124 <__gnu_Unwind_Restore_VFP>
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	0759      	lsls	r1, r3, #29
 800087e:	d4f5      	bmi.n	800086c <restore_non_core_regs+0x1c>
 8000880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000884:	f000 fc5e 	bl	8001144 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	071a      	lsls	r2, r3, #28
 800088c:	d4f0      	bmi.n	8000870 <restore_non_core_regs+0x20>
 800088e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000892:	f000 fc5f 	bl	8001154 <__gnu_Unwind_Restore_WMMXD>
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	06db      	lsls	r3, r3, #27
 800089a:	d4eb      	bmi.n	8000874 <restore_non_core_regs+0x24>
 800089c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80008a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a4:	f000 bc9a 	b.w	80011dc <__gnu_Unwind_Restore_WMMXC>

080008a8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80008a8:	6803      	ldr	r3, [r0, #0]
 80008aa:	b103      	cbz	r3, 80008ae <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80008ac:	4403      	add	r3, r0
 80008ae:	4618      	mov	r0, r3
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <__gnu_unwind_24bit.isra.1>:
 80008b4:	2009      	movs	r0, #9
 80008b6:	4770      	bx	lr

080008b8 <_Unwind_DebugHook>:
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <unwind_phase2>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4604      	mov	r4, r0
 80008c0:	460d      	mov	r5, r1
 80008c2:	e008      	b.n	80008d6 <unwind_phase2+0x1a>
 80008c4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80008c6:	6923      	ldr	r3, [r4, #16]
 80008c8:	6162      	str	r2, [r4, #20]
 80008ca:	4621      	mov	r1, r4
 80008cc:	462a      	mov	r2, r5
 80008ce:	2001      	movs	r0, #1
 80008d0:	4798      	blx	r3
 80008d2:	2808      	cmp	r0, #8
 80008d4:	d108      	bne.n	80008e8 <unwind_phase2+0x2c>
 80008d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008d8:	4620      	mov	r0, r4
 80008da:	f7ff ff65 	bl	80007a8 <get_eit_entry>
 80008de:	4606      	mov	r6, r0
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d0ef      	beq.n	80008c4 <unwind_phase2+0x8>
 80008e4:	f004 fb34 	bl	8004f50 <abort>
 80008e8:	2807      	cmp	r0, #7
 80008ea:	d1fb      	bne.n	80008e4 <unwind_phase2+0x28>
 80008ec:	4630      	mov	r0, r6
 80008ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008f0:	f7ff ffe2 	bl	80008b8 <_Unwind_DebugHook>
 80008f4:	1d28      	adds	r0, r5, #4
 80008f6:	f000 fc09 	bl	800110c <__restore_core_regs>
 80008fa:	bf00      	nop

080008fc <unwind_phase2_forced>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	4605      	mov	r5, r0
 8000902:	f04f 0c00 	mov.w	ip, #0
 8000906:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800090a:	ac03      	add	r4, sp, #12
 800090c:	1d0e      	adds	r6, r1, #4
 800090e:	4617      	mov	r7, r2
 8000910:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000920:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000924:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800092c:	ac02      	add	r4, sp, #8
 800092e:	f8c4 c000 	str.w	ip, [r4]
 8000932:	e021      	b.n	8000978 <unwind_phase2_forced+0x7c>
 8000934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000936:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800093a:	616b      	str	r3, [r5, #20]
 800093c:	4621      	mov	r1, r4
 800093e:	a87a      	add	r0, sp, #488	; 0x1e8
 8000940:	f004 fb40 	bl	8004fc4 <memcpy>
 8000944:	692b      	ldr	r3, [r5, #16]
 8000946:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000948:	4629      	mov	r1, r5
 800094a:	4630      	mov	r0, r6
 800094c:	4798      	blx	r3
 800094e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000950:	e9cd 4900 	strd	r4, r9, [sp]
 8000954:	4682      	mov	sl, r0
 8000956:	6463      	str	r3, [r4, #68]	; 0x44
 8000958:	4631      	mov	r1, r6
 800095a:	462b      	mov	r3, r5
 800095c:	462a      	mov	r2, r5
 800095e:	2001      	movs	r0, #1
 8000960:	47c0      	blx	r8
 8000962:	4607      	mov	r7, r0
 8000964:	b9f8      	cbnz	r0, 80009a6 <unwind_phase2_forced+0xaa>
 8000966:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800096a:	a97a      	add	r1, sp, #488	; 0x1e8
 800096c:	4620      	mov	r0, r4
 800096e:	f004 fb29 	bl	8004fc4 <memcpy>
 8000972:	f1ba 0f08 	cmp.w	sl, #8
 8000976:	d11c      	bne.n	80009b2 <unwind_phase2_forced+0xb6>
 8000978:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800097a:	4628      	mov	r0, r5
 800097c:	f7ff ff14 	bl	80007a8 <get_eit_entry>
 8000980:	2f00      	cmp	r7, #0
 8000982:	bf08      	it	eq
 8000984:	2609      	moveq	r6, #9
 8000986:	4607      	mov	r7, r0
 8000988:	bf18      	it	ne
 800098a:	260a      	movne	r6, #10
 800098c:	2800      	cmp	r0, #0
 800098e:	d0d1      	beq.n	8000934 <unwind_phase2_forced+0x38>
 8000990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000992:	f046 0110 	orr.w	r1, r6, #16
 8000996:	e9cd 4900 	strd	r4, r9, [sp]
 800099a:	462a      	mov	r2, r5
 800099c:	6463      	str	r3, [r4, #68]	; 0x44
 800099e:	2001      	movs	r0, #1
 80009a0:	462b      	mov	r3, r5
 80009a2:	47c0      	blx	r8
 80009a4:	b100      	cbz	r0, 80009a8 <unwind_phase2_forced+0xac>
 80009a6:	2709      	movs	r7, #9
 80009a8:	4638      	mov	r0, r7
 80009aa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	f1ba 0f07 	cmp.w	sl, #7
 80009b6:	d1f6      	bne.n	80009a6 <unwind_phase2_forced+0xaa>
 80009b8:	4638      	mov	r0, r7
 80009ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80009bc:	f7ff ff7c 	bl	80008b8 <_Unwind_DebugHook>
 80009c0:	a803      	add	r0, sp, #12
 80009c2:	f000 fba3 	bl	800110c <__restore_core_regs>
 80009c6:	bf00      	nop

080009c8 <_Unwind_GetCFA>:
 80009c8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80009ca:	4770      	bx	lr

080009cc <__gnu_Unwind_RaiseException>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80009d4:	b0f9      	sub	sp, #484	; 0x1e4
 80009d6:	640b      	str	r3, [r1, #64]	; 0x40
 80009d8:	1d0d      	adds	r5, r1, #4
 80009da:	ac01      	add	r4, sp, #4
 80009dc:	460f      	mov	r7, r1
 80009de:	4606      	mov	r6, r0
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009f4:	f8cd c000 	str.w	ip, [sp]
 80009f8:	e006      	b.n	8000a08 <__gnu_Unwind_RaiseException+0x3c>
 80009fa:	6933      	ldr	r3, [r6, #16]
 80009fc:	466a      	mov	r2, sp
 80009fe:	4631      	mov	r1, r6
 8000a00:	4798      	blx	r3
 8000a02:	2808      	cmp	r0, #8
 8000a04:	4604      	mov	r4, r0
 8000a06:	d108      	bne.n	8000a1a <__gnu_Unwind_RaiseException+0x4e>
 8000a08:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f7ff fecc 	bl	80007a8 <get_eit_entry>
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0f2      	beq.n	80009fa <__gnu_Unwind_RaiseException+0x2e>
 8000a14:	2009      	movs	r0, #9
 8000a16:	b079      	add	sp, #484	; 0x1e4
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	4668      	mov	r0, sp
 8000a1c:	f7ff ff18 	bl	8000850 <restore_non_core_regs>
 8000a20:	2c06      	cmp	r4, #6
 8000a22:	d1f7      	bne.n	8000a14 <__gnu_Unwind_RaiseException+0x48>
 8000a24:	4639      	mov	r1, r7
 8000a26:	4630      	mov	r0, r6
 8000a28:	f7ff ff48 	bl	80008bc <unwind_phase2>

08000a2c <__gnu_Unwind_ForcedUnwind>:
 8000a2c:	b430      	push	{r4, r5}
 8000a2e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000a30:	60c1      	str	r1, [r0, #12]
 8000a32:	6182      	str	r2, [r0, #24]
 8000a34:	4619      	mov	r1, r3
 8000a36:	641d      	str	r5, [r3, #64]	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	bc30      	pop	{r4, r5}
 8000a3c:	e75e      	b.n	80008fc <unwind_phase2_forced>
 8000a3e:	bf00      	nop

08000a40 <__gnu_Unwind_Resume>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	6943      	ldr	r3, [r0, #20]
 8000a44:	68c6      	ldr	r6, [r0, #12]
 8000a46:	640b      	str	r3, [r1, #64]	; 0x40
 8000a48:	b9be      	cbnz	r6, 8000a7a <__gnu_Unwind_Resume+0x3a>
 8000a4a:	6903      	ldr	r3, [r0, #16]
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	4604      	mov	r4, r0
 8000a50:	460d      	mov	r5, r1
 8000a52:	4601      	mov	r1, r0
 8000a54:	2002      	movs	r0, #2
 8000a56:	4798      	blx	r3
 8000a58:	2807      	cmp	r0, #7
 8000a5a:	d007      	beq.n	8000a6c <__gnu_Unwind_Resume+0x2c>
 8000a5c:	2808      	cmp	r0, #8
 8000a5e:	d103      	bne.n	8000a68 <__gnu_Unwind_Resume+0x28>
 8000a60:	4629      	mov	r1, r5
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff ff2a 	bl	80008bc <unwind_phase2>
 8000a68:	f004 fa72 	bl	8004f50 <abort>
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a70:	f7ff ff22 	bl	80008b8 <_Unwind_DebugHook>
 8000a74:	1d28      	adds	r0, r5, #4
 8000a76:	f000 fb49 	bl	800110c <__restore_core_regs>
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f7ff ff3e 	bl	80008fc <unwind_phase2_forced>
 8000a80:	f004 fa66 	bl	8004f50 <abort>

08000a84 <__gnu_Unwind_Resume_or_Rethrow>:
 8000a84:	68c2      	ldr	r2, [r0, #12]
 8000a86:	b12a      	cbz	r2, 8000a94 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000a88:	b410      	push	{r4}
 8000a8a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	640c      	str	r4, [r1, #64]	; 0x40
 8000a90:	bc10      	pop	{r4}
 8000a92:	e733      	b.n	80008fc <unwind_phase2_forced>
 8000a94:	e79a      	b.n	80009cc <__gnu_Unwind_RaiseException>
 8000a96:	bf00      	nop

08000a98 <_Unwind_Complete>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <_Unwind_DeleteException>:
 8000a9c:	6883      	ldr	r3, [r0, #8]
 8000a9e:	b113      	cbz	r3, 8000aa6 <_Unwind_DeleteException+0xa>
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	4718      	bx	r3
 8000aa6:	4770      	bx	lr

08000aa8 <_Unwind_VRS_Get>:
 8000aa8:	2904      	cmp	r1, #4
 8000aaa:	d807      	bhi.n	8000abc <_Unwind_VRS_Get+0x14>
 8000aac:	e8df f001 	tbb	[pc, r1]
 8000ab0:	08060803 	.word	0x08060803
 8000ab4:	08          	.byte	0x08
 8000ab5:	00          	.byte	0x00
 8000ab6:	b90b      	cbnz	r3, 8000abc <_Unwind_VRS_Get+0x14>
 8000ab8:	2a0f      	cmp	r2, #15
 8000aba:	d903      	bls.n	8000ac4 <_Unwind_VRS_Get+0x1c>
 8000abc:	2002      	movs	r0, #2
 8000abe:	4770      	bx	lr
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000ac8:	6842      	ldr	r2, [r0, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	9b00      	ldr	r3, [sp, #0]
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <_Unwind_GetGR>:
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	b510      	push	{r4, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	ac03      	add	r4, sp, #12
 8000adc:	460a      	mov	r2, r1
 8000ade:	9400      	str	r4, [sp, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff ffe1 	bl	8000aa8 <_Unwind_VRS_Get>
 8000ae6:	9803      	ldr	r0, [sp, #12]
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd10      	pop	{r4, pc}

08000aec <_Unwind_VRS_Set>:
 8000aec:	2904      	cmp	r1, #4
 8000aee:	d807      	bhi.n	8000b00 <_Unwind_VRS_Set+0x14>
 8000af0:	e8df f001 	tbb	[pc, r1]
 8000af4:	08060803 	.word	0x08060803
 8000af8:	08          	.byte	0x08
 8000af9:	00          	.byte	0x00
 8000afa:	b90b      	cbnz	r3, 8000b00 <_Unwind_VRS_Set+0x14>
 8000afc:	2a0f      	cmp	r2, #15
 8000afe:	d903      	bls.n	8000b08 <_Unwind_VRS_Set+0x1c>
 8000b00:	2002      	movs	r0, #2
 8000b02:	4770      	bx	lr
 8000b04:	2001      	movs	r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	9900      	ldr	r1, [sp, #0]
 8000b0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b0e:	6809      	ldr	r1, [r1, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	6051      	str	r1, [r2, #4]
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <_Unwind_SetGR>:
 8000b18:	2300      	movs	r3, #0
 8000b1a:	b510      	push	{r4, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	ac04      	add	r4, sp, #16
 8000b20:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000b24:	9400      	str	r4, [sp, #0]
 8000b26:	460a      	mov	r2, r1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff ffdf 	bl	8000aec <_Unwind_VRS_Set>
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	bf00      	nop

08000b34 <__gnu_Unwind_Backtrace>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000b3c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	1d15      	adds	r5, r2, #4
 8000b44:	ac17      	add	r4, sp, #92	; 0x5c
 8000b46:	4607      	mov	r7, r0
 8000b48:	460e      	mov	r6, r1
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b5e:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000b62:	e012      	b.n	8000b8a <__gnu_Unwind_Backtrace+0x56>
 8000b64:	210c      	movs	r1, #12
 8000b66:	a816      	add	r0, sp, #88	; 0x58
 8000b68:	466a      	mov	r2, sp
 8000b6a:	f7ff ffd5 	bl	8000b18 <_Unwind_SetGR>
 8000b6e:	4631      	mov	r1, r6
 8000b70:	a816      	add	r0, sp, #88	; 0x58
 8000b72:	47b8      	blx	r7
 8000b74:	b978      	cbnz	r0, 8000b96 <__gnu_Unwind_Backtrace+0x62>
 8000b76:	9b04      	ldr	r3, [sp, #16]
 8000b78:	aa16      	add	r2, sp, #88	; 0x58
 8000b7a:	4669      	mov	r1, sp
 8000b7c:	2008      	movs	r0, #8
 8000b7e:	4798      	blx	r3
 8000b80:	2805      	cmp	r0, #5
 8000b82:	4604      	mov	r4, r0
 8000b84:	d008      	beq.n	8000b98 <__gnu_Unwind_Backtrace+0x64>
 8000b86:	2809      	cmp	r0, #9
 8000b88:	d005      	beq.n	8000b96 <__gnu_Unwind_Backtrace+0x62>
 8000b8a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000b8c:	4668      	mov	r0, sp
 8000b8e:	f7ff fe0b 	bl	80007a8 <get_eit_entry>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0e6      	beq.n	8000b64 <__gnu_Unwind_Backtrace+0x30>
 8000b96:	2409      	movs	r4, #9
 8000b98:	a816      	add	r0, sp, #88	; 0x58
 8000b9a:	f7ff fe59 	bl	8000850 <restore_non_core_regs>
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba6:	bf00      	nop

08000ba8 <__gnu_unwind_pr_common>:
 8000ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bac:	460d      	mov	r5, r1
 8000bae:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000bb0:	b089      	sub	sp, #36	; 0x24
 8000bb2:	1d0c      	adds	r4, r1, #4
 8000bb4:	4616      	mov	r6, r2
 8000bb6:	f000 0b03 	and.w	fp, r0, #3
 8000bba:	680a      	ldr	r2, [r1, #0]
 8000bbc:	461f      	mov	r7, r3
 8000bbe:	9406      	str	r4, [sp, #24]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d068      	beq.n	8000c96 <__gnu_unwind_pr_common+0xee>
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	0c13      	lsrs	r3, r2, #16
 8000bc8:	f88d 301d 	strb.w	r3, [sp, #29]
 8000bcc:	0412      	lsls	r2, r2, #16
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000bd4:	9205      	str	r2, [sp, #20]
 8000bd6:	f88d 101c 	strb.w	r1, [sp, #28]
 8000bda:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000bdc:	f1bb 0f02 	cmp.w	fp, #2
 8000be0:	bf08      	it	eq
 8000be2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000be4:	f013 0301 	ands.w	r3, r3, #1
 8000be8:	d146      	bne.n	8000c78 <__gnu_unwind_pr_common+0xd0>
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	f000 0308 	and.w	r3, r0, #8
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	f8d4 9000 	ldr.w	r9, [r4]
 8000bf6:	f1b9 0f00 	cmp.w	r9, #0
 8000bfa:	f000 80f3 	beq.w	8000de4 <__gnu_unwind_pr_common+0x23c>
 8000bfe:	2f02      	cmp	r7, #2
 8000c00:	d045      	beq.n	8000c8e <__gnu_unwind_pr_common+0xe6>
 8000c02:	f8b4 9000 	ldrh.w	r9, [r4]
 8000c06:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8000c0a:	3404      	adds	r4, #4
 8000c0c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000c0e:	f028 0a01 	bic.w	sl, r8, #1
 8000c12:	210f      	movs	r1, #15
 8000c14:	4630      	mov	r0, r6
 8000c16:	449a      	add	sl, r3
 8000c18:	f7ff ff5c 	bl	8000ad4 <_Unwind_GetGR>
 8000c1c:	4582      	cmp	sl, r0
 8000c1e:	d834      	bhi.n	8000c8a <__gnu_unwind_pr_common+0xe2>
 8000c20:	f029 0301 	bic.w	r3, r9, #1
 8000c24:	4453      	add	r3, sl
 8000c26:	4283      	cmp	r3, r0
 8000c28:	bf94      	ite	ls
 8000c2a:	2000      	movls	r0, #0
 8000c2c:	2001      	movhi	r0, #1
 8000c2e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000c32:	f008 0802 	and.w	r8, r8, #2
 8000c36:	f009 0901 	and.w	r9, r9, #1
 8000c3a:	ea48 0809 	orr.w	r8, r8, r9
 8000c3e:	f1b8 0f01 	cmp.w	r8, #1
 8000c42:	d03a      	beq.n	8000cba <__gnu_unwind_pr_common+0x112>
 8000c44:	d331      	bcc.n	8000caa <__gnu_unwind_pr_common+0x102>
 8000c46:	f1b8 0f02 	cmp.w	r8, #2
 8000c4a:	d11a      	bne.n	8000c82 <__gnu_unwind_pr_common+0xda>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8000c52:	f1bb 0f00 	cmp.w	fp, #0
 8000c56:	d166      	bne.n	8000d26 <__gnu_unwind_pr_common+0x17e>
 8000c58:	b130      	cbz	r0, 8000c68 <__gnu_unwind_pr_common+0xc0>
 8000c5a:	9a00      	ldr	r2, [sp, #0]
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d06c      	beq.n	8000d3a <__gnu_unwind_pr_common+0x192>
 8000c60:	f1ba 0f00 	cmp.w	sl, #0
 8000c64:	f000 8090 	beq.w	8000d88 <__gnu_unwind_pr_common+0x1e0>
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da00      	bge.n	8000c6e <__gnu_unwind_pr_common+0xc6>
 8000c6c:	3404      	adds	r4, #4
 8000c6e:	f10a 0301 	add.w	r3, sl, #1
 8000c72:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000c76:	e7bc      	b.n	8000bf2 <__gnu_unwind_pr_common+0x4a>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	a905      	add	r1, sp, #20
 8000c7c:	f000 fb48 	bl	8001310 <__gnu_unwind_execute>
 8000c80:	b178      	cbz	r0, 8000ca2 <__gnu_unwind_pr_common+0xfa>
 8000c82:	2009      	movs	r0, #9
 8000c84:	b009      	add	sp, #36	; 0x24
 8000c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e7cf      	b.n	8000c2e <__gnu_unwind_pr_common+0x86>
 8000c8e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000c92:	3408      	adds	r4, #8
 8000c94:	e7ba      	b.n	8000c0c <__gnu_unwind_pr_common+0x64>
 8000c96:	2303      	movs	r3, #3
 8000c98:	0212      	lsls	r2, r2, #8
 8000c9a:	9205      	str	r2, [sp, #20]
 8000c9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000ca0:	e79b      	b.n	8000bda <__gnu_unwind_pr_common+0x32>
 8000ca2:	2008      	movs	r0, #8
 8000ca4:	b009      	add	sp, #36	; 0x24
 8000ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000caa:	f1bb 0f00 	cmp.w	fp, #0
 8000cae:	d002      	beq.n	8000cb6 <__gnu_unwind_pr_common+0x10e>
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	f040 80b4 	bne.w	8000e1e <__gnu_unwind_pr_common+0x276>
 8000cb6:	3404      	adds	r4, #4
 8000cb8:	e79b      	b.n	8000bf2 <__gnu_unwind_pr_common+0x4a>
 8000cba:	f1bb 0f00 	cmp.w	fp, #0
 8000cbe:	d118      	bne.n	8000cf2 <__gnu_unwind_pr_common+0x14a>
 8000cc0:	b1a8      	cbz	r0, 8000cee <__gnu_unwind_pr_common+0x146>
 8000cc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000cc6:	1c99      	adds	r1, r3, #2
 8000cc8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ccc:	d0d9      	beq.n	8000c82 <__gnu_unwind_pr_common+0xda>
 8000cce:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	9104      	str	r1, [sp, #16]
 8000cd6:	f000 80b5 	beq.w	8000e44 <__gnu_unwind_pr_common+0x29c>
 8000cda:	1d20      	adds	r0, r4, #4
 8000cdc:	f7ff fde4 	bl	80008a8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ce0:	ab04      	add	r3, sp, #16
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f003 ff09 	bl	8004afc <__cxa_type_match>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d167      	bne.n	8000dbe <__gnu_unwind_pr_common+0x216>
 8000cee:	3408      	adds	r4, #8
 8000cf0:	e77f      	b.n	8000bf2 <__gnu_unwind_pr_common+0x4a>
 8000cf2:	210d      	movs	r1, #13
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000cfa:	f7ff feeb 	bl	8000ad4 <_Unwind_GetGR>
 8000cfe:	4580      	cmp	r8, r0
 8000d00:	d1f5      	bne.n	8000cee <__gnu_unwind_pr_common+0x146>
 8000d02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d04:	429c      	cmp	r4, r3
 8000d06:	d1f2      	bne.n	8000cee <__gnu_unwind_pr_common+0x146>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fcff 	bl	800070c <selfrel_offset31>
 8000d0e:	210f      	movs	r1, #15
 8000d10:	4602      	mov	r2, r0
 8000d12:	4630      	mov	r0, r6
 8000d14:	f7ff ff00 	bl	8000b18 <_Unwind_SetGR>
 8000d18:	4630      	mov	r0, r6
 8000d1a:	462a      	mov	r2, r5
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f7ff fefb 	bl	8000b18 <_Unwind_SetGR>
 8000d22:	2007      	movs	r0, #7
 8000d24:	e7ae      	b.n	8000c84 <__gnu_unwind_pr_common+0xdc>
 8000d26:	210d      	movs	r1, #13
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000d2e:	f7ff fed1 	bl	8000ad4 <_Unwind_GetGR>
 8000d32:	4580      	cmp	r8, r0
 8000d34:	d032      	beq.n	8000d9c <__gnu_unwind_pr_common+0x1f4>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	e796      	b.n	8000c68 <__gnu_unwind_pr_common+0xc0>
 8000d3a:	f1ba 0f00 	cmp.w	sl, #0
 8000d3e:	d023      	beq.n	8000d88 <__gnu_unwind_pr_common+0x1e0>
 8000d40:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000d44:	f104 0804 	add.w	r8, r4, #4
 8000d48:	f8cd b008 	str.w	fp, [sp, #8]
 8000d4c:	f8dd 9000 	ldr.w	r9, [sp]
 8000d50:	46a3      	mov	fp, r4
 8000d52:	9703      	str	r7, [sp, #12]
 8000d54:	461c      	mov	r4, r3
 8000d56:	e002      	b.n	8000d5e <__gnu_unwind_pr_common+0x1b6>
 8000d58:	4557      	cmp	r7, sl
 8000d5a:	46b9      	mov	r9, r7
 8000d5c:	d040      	beq.n	8000de0 <__gnu_unwind_pr_common+0x238>
 8000d5e:	4640      	mov	r0, r8
 8000d60:	9404      	str	r4, [sp, #16]
 8000d62:	f7ff fda1 	bl	80008a8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000d66:	ab04      	add	r3, sp, #16
 8000d68:	4601      	mov	r1, r0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	f003 fec5 	bl	8004afc <__cxa_type_match>
 8000d72:	f109 0701 	add.w	r7, r9, #1
 8000d76:	f108 0804 	add.w	r8, r8, #4
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d0ec      	beq.n	8000d58 <__gnu_unwind_pr_common+0x1b0>
 8000d7e:	45d1      	cmp	r9, sl
 8000d80:	465c      	mov	r4, fp
 8000d82:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8000d86:	d1d6      	bne.n	8000d36 <__gnu_unwind_pr_common+0x18e>
 8000d88:	4630      	mov	r0, r6
 8000d8a:	210d      	movs	r1, #13
 8000d8c:	f7ff fea2 	bl	8000ad4 <_Unwind_GetGR>
 8000d90:	9b04      	ldr	r3, [sp, #16]
 8000d92:	6228      	str	r0, [r5, #32]
 8000d94:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000d98:	2006      	movs	r0, #6
 8000d9a:	e773      	b.n	8000c84 <__gnu_unwind_pr_common+0xdc>
 8000d9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	d1c9      	bne.n	8000d36 <__gnu_unwind_pr_common+0x18e>
 8000da2:	2204      	movs	r2, #4
 8000da4:	f04f 0800 	mov.w	r8, #0
 8000da8:	18a3      	adds	r3, r4, r2
 8000daa:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8000dae:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	4543      	cmp	r3, r8
 8000db6:	db4d      	blt.n	8000e54 <__gnu_unwind_pr_common+0x2ac>
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	e757      	b.n	8000c6e <__gnu_unwind_pr_common+0xc6>
 8000dbe:	4680      	mov	r8, r0
 8000dc0:	210d      	movs	r1, #13
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	f7ff fe86 	bl	8000ad4 <_Unwind_GetGR>
 8000dc8:	f1b8 0f02 	cmp.w	r8, #2
 8000dcc:	6228      	str	r0, [r5, #32]
 8000dce:	d13e      	bne.n	8000e4e <__gnu_unwind_pr_common+0x2a6>
 8000dd0:	462b      	mov	r3, r5
 8000dd2:	9a04      	ldr	r2, [sp, #16]
 8000dd4:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000dd8:	626b      	str	r3, [r5, #36]	; 0x24
 8000dda:	62ac      	str	r4, [r5, #40]	; 0x28
 8000ddc:	2006      	movs	r0, #6
 8000dde:	e751      	b.n	8000c84 <__gnu_unwind_pr_common+0xdc>
 8000de0:	465c      	mov	r4, fp
 8000de2:	e7d1      	b.n	8000d88 <__gnu_unwind_pr_common+0x1e0>
 8000de4:	a905      	add	r1, sp, #20
 8000de6:	4630      	mov	r0, r6
 8000de8:	f000 fa92 	bl	8001310 <__gnu_unwind_execute>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	f47f af48 	bne.w	8000c82 <__gnu_unwind_pr_common+0xda>
 8000df2:	9b01      	ldr	r3, [sp, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f43f af54 	beq.w	8000ca2 <__gnu_unwind_pr_common+0xfa>
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f7ff fe69 	bl	8000ad4 <_Unwind_GetGR>
 8000e02:	210e      	movs	r1, #14
 8000e04:	4602      	mov	r2, r0
 8000e06:	4630      	mov	r0, r6
 8000e08:	f7ff fe86 	bl	8000b18 <_Unwind_SetGR>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <__gnu_unwind_pr_common+0x2d0>)
 8000e10:	210f      	movs	r1, #15
 8000e12:	f7ff fe81 	bl	8000b18 <_Unwind_SetGR>
 8000e16:	2007      	movs	r0, #7
 8000e18:	b009      	add	sp, #36	; 0x24
 8000e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff fc74 	bl	800070c <selfrel_offset31>
 8000e24:	3404      	adds	r4, #4
 8000e26:	4607      	mov	r7, r0
 8000e28:	63ac      	str	r4, [r5, #56]	; 0x38
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	f003 fec4 	bl	8004bb8 <__cxa_begin_cleanup>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	f43f af26 	beq.w	8000c82 <__gnu_unwind_pr_common+0xda>
 8000e36:	4630      	mov	r0, r6
 8000e38:	463a      	mov	r2, r7
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f7ff fe6c 	bl	8000b18 <_Unwind_SetGR>
 8000e40:	2007      	movs	r0, #7
 8000e42:	e71f      	b.n	8000c84 <__gnu_unwind_pr_common+0xdc>
 8000e44:	4630      	mov	r0, r6
 8000e46:	210d      	movs	r1, #13
 8000e48:	f7ff fe44 	bl	8000ad4 <_Unwind_GetGR>
 8000e4c:	6228      	str	r0, [r5, #32]
 8000e4e:	9b04      	ldr	r3, [sp, #16]
 8000e50:	626b      	str	r3, [r5, #36]	; 0x24
 8000e52:	e7c2      	b.n	8000dda <__gnu_unwind_pr_common+0x232>
 8000e54:	f10a 0001 	add.w	r0, sl, #1
 8000e58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000e5c:	f7ff fc56 	bl	800070c <selfrel_offset31>
 8000e60:	210f      	movs	r1, #15
 8000e62:	4602      	mov	r2, r0
 8000e64:	4630      	mov	r0, r6
 8000e66:	f7ff fe57 	bl	8000b18 <_Unwind_SetGR>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	462a      	mov	r2, r5
 8000e6e:	4641      	mov	r1, r8
 8000e70:	f7ff fe52 	bl	8000b18 <_Unwind_SetGR>
 8000e74:	2007      	movs	r0, #7
 8000e76:	e705      	b.n	8000c84 <__gnu_unwind_pr_common+0xdc>
 8000e78:	08004e9b 	.word	0x08004e9b

08000e7c <__aeabi_unwind_cpp_pr0>:
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e693      	b.n	8000ba8 <__gnu_unwind_pr_common>

08000e80 <__aeabi_unwind_cpp_pr1>:
 8000e80:	2301      	movs	r3, #1
 8000e82:	e691      	b.n	8000ba8 <__gnu_unwind_pr_common>

08000e84 <__aeabi_unwind_cpp_pr2>:
 8000e84:	2302      	movs	r3, #2
 8000e86:	e68f      	b.n	8000ba8 <__gnu_unwind_pr_common>

08000e88 <_Unwind_VRS_Pop>:
 8000e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	b0c4      	sub	sp, #272	; 0x110
 8000e90:	2904      	cmp	r1, #4
 8000e92:	d806      	bhi.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000e94:	e8df f001 	tbb	[pc, r1]
 8000e98:	03052b4d 	.word	0x03052b4d
 8000e9c:	09          	.byte	0x09
 8000e9d:	00          	.byte	0x00
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d05f      	beq.n	8000f62 <_Unwind_VRS_Pop+0xda>
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	b044      	add	sp, #272	; 0x110
 8000ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f9      	bne.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000eae:	2a10      	cmp	r2, #16
 8000eb0:	d8f7      	bhi.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	06dc      	lsls	r4, r3, #27
 8000eb6:	f100 80f6 	bmi.w	80010a6 <_Unwind_VRS_Pop+0x21e>
 8000eba:	ac22      	add	r4, sp, #136	; 0x88
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	9201      	str	r2, [sp, #4]
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	f000 f995 	bl	80011f0 <__gnu_Unwind_Save_WMMXC>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000eca:	9a01      	ldr	r2, [sp, #4]
 8000ecc:	fa06 f103 	lsl.w	r1, r6, r3
 8000ed0:	4211      	tst	r1, r2
 8000ed2:	d003      	beq.n	8000edc <_Unwind_VRS_Pop+0x54>
 8000ed4:	6801      	ldr	r1, [r0, #0]
 8000ed6:	3004      	adds	r0, #4
 8000ed8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000edc:	3301      	adds	r3, #1
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d1f4      	bne.n	8000ecc <_Unwind_VRS_Pop+0x44>
 8000ee2:	63a8      	str	r0, [r5, #56]	; 0x38
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f000 f979 	bl	80011dc <__gnu_Unwind_Restore_WMMXC>
 8000eea:	2000      	movs	r0, #0
 8000eec:	e7da      	b.n	8000ea4 <_Unwind_VRS_Pop+0x1c>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000ef4:	b297      	uxth	r7, r2
 8000ef6:	d054      	beq.n	8000fa2 <_Unwind_VRS_Pop+0x11a>
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d1d2      	bne.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000efc:	eb06 0807 	add.w	r8, r6, r7
 8000f00:	f1b8 0f20 	cmp.w	r8, #32
 8000f04:	d8cd      	bhi.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000f06:	2e0f      	cmp	r6, #15
 8000f08:	f240 809b 	bls.w	8001042 <_Unwind_VRS_Pop+0x1ba>
 8000f0c:	46b8      	mov	r8, r7
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	f040 80dd 	bne.w	80010ce <_Unwind_VRS_Pop+0x246>
 8000f14:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f16:	2e0f      	cmp	r6, #15
 8000f18:	63aa      	str	r2, [r5, #56]	; 0x38
 8000f1a:	f240 80c0 	bls.w	800109e <_Unwind_VRS_Pop+0x216>
 8000f1e:	f1b8 0f00 	cmp.w	r8, #0
 8000f22:	d002      	beq.n	8000f2a <_Unwind_VRS_Pop+0xa2>
 8000f24:	a802      	add	r0, sp, #8
 8000f26:	f000 f90d 	bl	8001144 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	b044      	add	sp, #272	; 0x110
 8000f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1b5      	bne.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000f36:	2701      	movs	r7, #1
 8000f38:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8000f3a:	b296      	uxth	r6, r2
 8000f3c:	1d28      	adds	r0, r5, #4
 8000f3e:	fa07 f103 	lsl.w	r1, r7, r3
 8000f42:	4231      	tst	r1, r6
 8000f44:	f103 0301 	add.w	r3, r3, #1
 8000f48:	d002      	beq.n	8000f50 <_Unwind_VRS_Pop+0xc8>
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	3404      	adds	r4, #4
 8000f4e:	6001      	str	r1, [r0, #0]
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	f100 0004 	add.w	r0, r0, #4
 8000f56:	d1f2      	bne.n	8000f3e <_Unwind_VRS_Pop+0xb6>
 8000f58:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000f5c:	d1e5      	bne.n	8000f2a <_Unwind_VRS_Pop+0xa2>
 8000f5e:	63ac      	str	r4, [r5, #56]	; 0x38
 8000f60:	e7a0      	b.n	8000ea4 <_Unwind_VRS_Pop+0x1c>
 8000f62:	0c16      	lsrs	r6, r2, #16
 8000f64:	b297      	uxth	r7, r2
 8000f66:	19f3      	adds	r3, r6, r7
 8000f68:	2b10      	cmp	r3, #16
 8000f6a:	d89a      	bhi.n	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	071a      	lsls	r2, r3, #28
 8000f70:	d45f      	bmi.n	8001032 <_Unwind_VRS_Pop+0x1aa>
 8000f72:	ac22      	add	r4, sp, #136	; 0x88
 8000f74:	4620      	mov	r0, r4
 8000f76:	f000 f90f 	bl	8001198 <__gnu_Unwind_Save_WMMXD>
 8000f7a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8000f7e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000f80:	b14f      	cbz	r7, 8000f96 <_Unwind_VRS_Pop+0x10e>
 8000f82:	4603      	mov	r3, r0
 8000f84:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	4283      	cmp	r3, r0
 8000f8e:	f841 2b04 	str.w	r2, [r1], #4
 8000f92:	d1f9      	bne.n	8000f88 <_Unwind_VRS_Pop+0x100>
 8000f94:	4618      	mov	r0, r3
 8000f96:	63a8      	str	r0, [r5, #56]	; 0x38
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f000 f8db 	bl	8001154 <__gnu_Unwind_Restore_WMMXD>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e780      	b.n	8000ea4 <_Unwind_VRS_Pop+0x1c>
 8000fa2:	19f2      	adds	r2, r6, r7
 8000fa4:	2a10      	cmp	r2, #16
 8000fa6:	f63f af7c 	bhi.w	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000faa:	2e0f      	cmp	r6, #15
 8000fac:	f63f af79 	bhi.w	8000ea2 <_Unwind_VRS_Pop+0x1a>
 8000fb0:	682a      	ldr	r2, [r5, #0]
 8000fb2:	07d1      	lsls	r1, r2, #31
 8000fb4:	d508      	bpl.n	8000fc8 <_Unwind_VRS_Pop+0x140>
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f022 0203 	bic.w	r2, r2, #3
 8000fbc:	f840 2b48 	str.w	r2, [r0], #72
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	f000 f8b3 	bl	800112c <__gnu_Unwind_Save_VFP>
 8000fc6:	9b01      	ldr	r3, [sp, #4]
 8000fc8:	ac22      	add	r4, sp, #136	; 0x88
 8000fca:	4620      	mov	r0, r4
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f000 f8ad 	bl	800112c <__gnu_Unwind_Save_VFP>
 8000fd2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000fd4:	9b01      	ldr	r3, [sp, #4]
 8000fd6:	2f00      	cmp	r7, #0
 8000fd8:	f000 8095 	beq.w	8001106 <_Unwind_VRS_Pop+0x27e>
 8000fdc:	f04f 0800 	mov.w	r8, #0
 8000fe0:	007a      	lsls	r2, r7, #1
 8000fe2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000fe6:	3c04      	subs	r4, #4
 8000fe8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8000fec:	f851 0b04 	ldr.w	r0, [r1], #4
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	f844 0f04 	str.w	r0, [r4, #4]!
 8000ff6:	d1f9      	bne.n	8000fec <_Unwind_VRS_Pop+0x164>
 8000ff8:	f1b8 0f00 	cmp.w	r8, #0
 8000ffc:	d00f      	beq.n	800101e <_Unwind_VRS_Pop+0x196>
 8000ffe:	ac02      	add	r4, sp, #8
 8001000:	2e10      	cmp	r6, #16
 8001002:	4631      	mov	r1, r6
 8001004:	bf38      	it	cc
 8001006:	2110      	movcc	r1, #16
 8001008:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800100c:	3984      	subs	r1, #132	; 0x84
 800100e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 8001012:	f852 0b04 	ldr.w	r0, [r2], #4
 8001016:	4294      	cmp	r4, r2
 8001018:	f841 0f04 	str.w	r0, [r1, #4]!
 800101c:	d1f9      	bne.n	8001012 <_Unwind_VRS_Pop+0x18a>
 800101e:	2b01      	cmp	r3, #1
 8001020:	f47f af79 	bne.w	8000f16 <_Unwind_VRS_Pop+0x8e>
 8001024:	ac22      	add	r4, sp, #136	; 0x88
 8001026:	3204      	adds	r2, #4
 8001028:	63aa      	str	r2, [r5, #56]	; 0x38
 800102a:	4620      	mov	r0, r4
 800102c:	f000 f87a 	bl	8001124 <__gnu_Unwind_Restore_VFP>
 8001030:	e77b      	b.n	8000f2a <_Unwind_VRS_Pop+0xa2>
 8001032:	f023 0308 	bic.w	r3, r3, #8
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 800103c:	f000 f8ac 	bl	8001198 <__gnu_Unwind_Save_WMMXD>
 8001040:	e797      	b.n	8000f72 <_Unwind_VRS_Pop+0xea>
 8001042:	f1b8 0f10 	cmp.w	r8, #16
 8001046:	682a      	ldr	r2, [r5, #0]
 8001048:	d943      	bls.n	80010d2 <_Unwind_VRS_Pop+0x24a>
 800104a:	07d0      	lsls	r0, r2, #31
 800104c:	f1a8 0810 	sub.w	r8, r8, #16
 8001050:	d50b      	bpl.n	800106a <_Unwind_VRS_Pop+0x1e2>
 8001052:	4628      	mov	r0, r5
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	f042 0202 	orr.w	r2, r2, #2
 800105c:	f840 2b48 	str.w	r2, [r0], #72
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f000 f86b 	bl	800113c <__gnu_Unwind_Save_VFP_D>
 8001066:	682a      	ldr	r2, [r5, #0]
 8001068:	9b01      	ldr	r3, [sp, #4]
 800106a:	0751      	lsls	r1, r2, #29
 800106c:	d425      	bmi.n	80010ba <_Unwind_VRS_Pop+0x232>
 800106e:	2e0f      	cmp	r6, #15
 8001070:	d804      	bhi.n	800107c <_Unwind_VRS_Pop+0x1f4>
 8001072:	a822      	add	r0, sp, #136	; 0x88
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f000 f861 	bl	800113c <__gnu_Unwind_Save_VFP_D>
 800107a:	9b01      	ldr	r3, [sp, #4]
 800107c:	ac02      	add	r4, sp, #8
 800107e:	4620      	mov	r0, r4
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f000 f863 	bl	800114c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001086:	f1c6 0010 	rsb	r0, r6, #16
 800108a:	2800      	cmp	r0, #0
 800108c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800108e:	9b01      	ldr	r3, [sp, #4]
 8001090:	ddb6      	ble.n	8001000 <_Unwind_VRS_Pop+0x178>
 8001092:	ac22      	add	r4, sp, #136	; 0x88
 8001094:	4611      	mov	r1, r2
 8001096:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800109a:	0042      	lsls	r2, r0, #1
 800109c:	e7a3      	b.n	8000fe6 <_Unwind_VRS_Pop+0x15e>
 800109e:	a822      	add	r0, sp, #136	; 0x88
 80010a0:	f000 f848 	bl	8001134 <__gnu_Unwind_Restore_VFP_D>
 80010a4:	e73b      	b.n	8000f1e <_Unwind_VRS_Pop+0x96>
 80010a6:	f023 0310 	bic.w	r3, r3, #16
 80010aa:	602b      	str	r3, [r5, #0]
 80010ac:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 80010b0:	9201      	str	r2, [sp, #4]
 80010b2:	f000 f89d 	bl	80011f0 <__gnu_Unwind_Save_WMMXC>
 80010b6:	9a01      	ldr	r2, [sp, #4]
 80010b8:	e6ff      	b.n	8000eba <_Unwind_VRS_Pop+0x32>
 80010ba:	4628      	mov	r0, r5
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	f840 2bd0 	str.w	r2, [r0], #208
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f000 f841 	bl	800114c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	e7cf      	b.n	800106e <_Unwind_VRS_Pop+0x1e6>
 80010ce:	682a      	ldr	r2, [r5, #0]
 80010d0:	e7cb      	b.n	800106a <_Unwind_VRS_Pop+0x1e2>
 80010d2:	07d0      	lsls	r0, r2, #31
 80010d4:	d50a      	bpl.n	80010ec <_Unwind_VRS_Pop+0x264>
 80010d6:	4628      	mov	r0, r5
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	f042 0202 	orr.w	r2, r2, #2
 80010e0:	f840 2b48 	str.w	r2, [r0], #72
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f000 f829 	bl	800113c <__gnu_Unwind_Save_VFP_D>
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	ac22      	add	r4, sp, #136	; 0x88
 80010ee:	4620      	mov	r0, r4
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	46b8      	mov	r8, r7
 80010f4:	f000 f822 	bl	800113c <__gnu_Unwind_Save_VFP_D>
 80010f8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	2f00      	cmp	r7, #0
 80010fe:	f47f af6d 	bne.w	8000fdc <_Unwind_VRS_Pop+0x154>
 8001102:	460a      	mov	r2, r1
 8001104:	e707      	b.n	8000f16 <_Unwind_VRS_Pop+0x8e>
 8001106:	460a      	mov	r2, r1
 8001108:	e78d      	b.n	8001026 <_Unwind_VRS_Pop+0x19e>
 800110a:	bf00      	nop

0800110c <__restore_core_regs>:
 800110c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001110:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001114:	469c      	mov	ip, r3
 8001116:	46a6      	mov	lr, r4
 8001118:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800111c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001120:	46e5      	mov	sp, ip
 8001122:	bd00      	pop	{pc}

08001124 <__gnu_Unwind_Restore_VFP>:
 8001124:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__gnu_Unwind_Save_VFP>:
 800112c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__gnu_Unwind_Restore_VFP_D>:
 8001134:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__gnu_Unwind_Save_VFP_D>:
 800113c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001144:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800114c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <__gnu_Unwind_Restore_WMMXD>:
 8001154:	ecf0 0102 	ldfe	f0, [r0], #8
 8001158:	ecf0 1102 	ldfe	f1, [r0], #8
 800115c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001160:	ecf0 3102 	ldfe	f3, [r0], #8
 8001164:	ecf0 4102 	ldfe	f4, [r0], #8
 8001168:	ecf0 5102 	ldfe	f5, [r0], #8
 800116c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001170:	ecf0 7102 	ldfe	f7, [r0], #8
 8001174:	ecf0 8102 	ldfp	f0, [r0], #8
 8001178:	ecf0 9102 	ldfp	f1, [r0], #8
 800117c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001180:	ecf0 b102 	ldfp	f3, [r0], #8
 8001184:	ecf0 c102 	ldfp	f4, [r0], #8
 8001188:	ecf0 d102 	ldfp	f5, [r0], #8
 800118c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001190:	ecf0 f102 	ldfp	f7, [r0], #8
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__gnu_Unwind_Save_WMMXD>:
 8001198:	ece0 0102 	stfe	f0, [r0], #8
 800119c:	ece0 1102 	stfe	f1, [r0], #8
 80011a0:	ece0 2102 	stfe	f2, [r0], #8
 80011a4:	ece0 3102 	stfe	f3, [r0], #8
 80011a8:	ece0 4102 	stfe	f4, [r0], #8
 80011ac:	ece0 5102 	stfe	f5, [r0], #8
 80011b0:	ece0 6102 	stfe	f6, [r0], #8
 80011b4:	ece0 7102 	stfe	f7, [r0], #8
 80011b8:	ece0 8102 	stfp	f0, [r0], #8
 80011bc:	ece0 9102 	stfp	f1, [r0], #8
 80011c0:	ece0 a102 	stfp	f2, [r0], #8
 80011c4:	ece0 b102 	stfp	f3, [r0], #8
 80011c8:	ece0 c102 	stfp	f4, [r0], #8
 80011cc:	ece0 d102 	stfp	f5, [r0], #8
 80011d0:	ece0 e102 	stfp	f6, [r0], #8
 80011d4:	ece0 f102 	stfp	f7, [r0], #8
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <__gnu_Unwind_Restore_WMMXC>:
 80011dc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80011e0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80011e4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80011e8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <__gnu_Unwind_Save_WMMXC>:
 80011f0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80011f4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80011f8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80011fc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <_Unwind_RaiseException>:
 8001204:	46ec      	mov	ip, sp
 8001206:	b500      	push	{lr}
 8001208:	e92d 5000 	stmdb	sp!, {ip, lr}
 800120c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001218:	a901      	add	r1, sp, #4
 800121a:	f7ff fbd7 	bl	80009cc <__gnu_Unwind_RaiseException>
 800121e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001222:	b012      	add	sp, #72	; 0x48
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <_Unwind_Resume>:
 8001228:	46ec      	mov	ip, sp
 800122a:	b500      	push	{lr}
 800122c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001230:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e92d 000c 	stmdb	sp!, {r2, r3}
 800123c:	a901      	add	r1, sp, #4
 800123e:	f7ff fbff 	bl	8000a40 <__gnu_Unwind_Resume>
 8001242:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001246:	b012      	add	sp, #72	; 0x48
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <_Unwind_Resume_or_Rethrow>:
 800124c:	46ec      	mov	ip, sp
 800124e:	b500      	push	{lr}
 8001250:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001254:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001260:	a901      	add	r1, sp, #4
 8001262:	f7ff fc0f 	bl	8000a84 <__gnu_Unwind_Resume_or_Rethrow>
 8001266:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800126a:	b012      	add	sp, #72	; 0x48
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <_Unwind_ForcedUnwind>:
 8001270:	46ec      	mov	ip, sp
 8001272:	b500      	push	{lr}
 8001274:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001278:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001284:	ab01      	add	r3, sp, #4
 8001286:	f7ff fbd1 	bl	8000a2c <__gnu_Unwind_ForcedUnwind>
 800128a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800128e:	b012      	add	sp, #72	; 0x48
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <_Unwind_Backtrace>:
 8001294:	46ec      	mov	ip, sp
 8001296:	b500      	push	{lr}
 8001298:	e92d 5000 	stmdb	sp!, {ip, lr}
 800129c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012a8:	aa01      	add	r2, sp, #4
 80012aa:	f7ff fc43 	bl	8000b34 <__gnu_Unwind_Backtrace>
 80012ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012b2:	b012      	add	sp, #72	; 0x48
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <next_unwind_byte>:
 80012b8:	7a02      	ldrb	r2, [r0, #8]
 80012ba:	b97a      	cbnz	r2, 80012dc <next_unwind_byte+0x24>
 80012bc:	7a43      	ldrb	r3, [r0, #9]
 80012be:	b1a3      	cbz	r3, 80012ea <next_unwind_byte+0x32>
 80012c0:	2103      	movs	r1, #3
 80012c2:	6842      	ldr	r2, [r0, #4]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b410      	push	{r4}
 80012c8:	7243      	strb	r3, [r0, #9]
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	1d14      	adds	r4, r2, #4
 80012ce:	7201      	strb	r1, [r0, #8]
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	6044      	str	r4, [r0, #4]
 80012d4:	6002      	str	r2, [r0, #0]
 80012d6:	bc10      	pop	{r4}
 80012d8:	0e18      	lsrs	r0, r3, #24
 80012da:	4770      	bx	lr
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	3a01      	subs	r2, #1
 80012e0:	7202      	strb	r2, [r0, #8]
 80012e2:	021a      	lsls	r2, r3, #8
 80012e4:	6002      	str	r2, [r0, #0]
 80012e6:	0e18      	lsrs	r0, r3, #24
 80012e8:	4770      	bx	lr
 80012ea:	20b0      	movs	r0, #176	; 0xb0
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <_Unwind_GetGR.constprop.0>:
 80012f0:	2300      	movs	r3, #0
 80012f2:	b500      	push	{lr}
 80012f4:	b085      	sub	sp, #20
 80012f6:	aa03      	add	r2, sp, #12
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	220c      	movs	r2, #12
 80012fe:	f7ff fbd3 	bl	8000aa8 <_Unwind_VRS_Get>
 8001302:	9803      	ldr	r0, [sp, #12]
 8001304:	b005      	add	sp, #20
 8001306:	f85d fb04 	ldr.w	pc, [sp], #4
 800130a:	bf00      	nop

0800130c <unwind_UCB_from_context>:
 800130c:	e7f0      	b.n	80012f0 <_Unwind_GetGR.constprop.0>
 800130e:	bf00      	nop

08001310 <__gnu_unwind_execute>:
 8001310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001314:	4605      	mov	r5, r0
 8001316:	460e      	mov	r6, r1
 8001318:	f04f 0800 	mov.w	r8, #0
 800131c:	b085      	sub	sp, #20
 800131e:	4630      	mov	r0, r6
 8001320:	f7ff ffca 	bl	80012b8 <next_unwind_byte>
 8001324:	28b0      	cmp	r0, #176	; 0xb0
 8001326:	4604      	mov	r4, r0
 8001328:	f000 80b0 	beq.w	800148c <__gnu_unwind_execute+0x17c>
 800132c:	0607      	lsls	r7, r0, #24
 800132e:	d520      	bpl.n	8001372 <__gnu_unwind_execute+0x62>
 8001330:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001334:	2b80      	cmp	r3, #128	; 0x80
 8001336:	d065      	beq.n	8001404 <__gnu_unwind_execute+0xf4>
 8001338:	2b90      	cmp	r3, #144	; 0x90
 800133a:	d036      	beq.n	80013aa <__gnu_unwind_execute+0x9a>
 800133c:	2ba0      	cmp	r3, #160	; 0xa0
 800133e:	d078      	beq.n	8001432 <__gnu_unwind_execute+0x122>
 8001340:	2bb0      	cmp	r3, #176	; 0xb0
 8001342:	d047      	beq.n	80013d4 <__gnu_unwind_execute+0xc4>
 8001344:	2bc0      	cmp	r3, #192	; 0xc0
 8001346:	f000 8089 	beq.w	800145c <__gnu_unwind_execute+0x14c>
 800134a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800134e:	2bd0      	cmp	r3, #208	; 0xd0
 8001350:	d10b      	bne.n	800136a <__gnu_unwind_execute+0x5a>
 8001352:	f000 0207 	and.w	r2, r0, #7
 8001356:	3201      	adds	r2, #1
 8001358:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800135c:	2305      	movs	r3, #5
 800135e:	2101      	movs	r1, #1
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fd91 	bl	8000e88 <_Unwind_VRS_Pop>
 8001366:	2800      	cmp	r0, #0
 8001368:	d0d9      	beq.n	800131e <__gnu_unwind_execute+0xe>
 800136a:	2009      	movs	r0, #9
 800136c:	b005      	add	sp, #20
 800136e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001372:	2300      	movs	r3, #0
 8001374:	f10d 090c 	add.w	r9, sp, #12
 8001378:	4619      	mov	r1, r3
 800137a:	0087      	lsls	r7, r0, #2
 800137c:	f8cd 9000 	str.w	r9, [sp]
 8001380:	220d      	movs	r2, #13
 8001382:	4628      	mov	r0, r5
 8001384:	f7ff fb90 	bl	8000aa8 <_Unwind_VRS_Get>
 8001388:	b2ff      	uxtb	r7, r7
 800138a:	9b03      	ldr	r3, [sp, #12]
 800138c:	3704      	adds	r7, #4
 800138e:	0660      	lsls	r0, r4, #25
 8001390:	bf4c      	ite	mi
 8001392:	1bdf      	submi	r7, r3, r7
 8001394:	18ff      	addpl	r7, r7, r3
 8001396:	2300      	movs	r3, #0
 8001398:	f8cd 9000 	str.w	r9, [sp]
 800139c:	4619      	mov	r1, r3
 800139e:	220d      	movs	r2, #13
 80013a0:	4628      	mov	r0, r5
 80013a2:	9703      	str	r7, [sp, #12]
 80013a4:	f7ff fba2 	bl	8000aec <_Unwind_VRS_Set>
 80013a8:	e7b9      	b.n	800131e <__gnu_unwind_execute+0xe>
 80013aa:	f000 030d 	and.w	r3, r0, #13
 80013ae:	2b0d      	cmp	r3, #13
 80013b0:	d0db      	beq.n	800136a <__gnu_unwind_execute+0x5a>
 80013b2:	2300      	movs	r3, #0
 80013b4:	af03      	add	r7, sp, #12
 80013b6:	f000 020f 	and.w	r2, r0, #15
 80013ba:	4619      	mov	r1, r3
 80013bc:	9700      	str	r7, [sp, #0]
 80013be:	4628      	mov	r0, r5
 80013c0:	f7ff fb72 	bl	8000aa8 <_Unwind_VRS_Get>
 80013c4:	2300      	movs	r3, #0
 80013c6:	9700      	str	r7, [sp, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	220d      	movs	r2, #13
 80013cc:	4628      	mov	r0, r5
 80013ce:	f7ff fb8d 	bl	8000aec <_Unwind_VRS_Set>
 80013d2:	e7a4      	b.n	800131e <__gnu_unwind_execute+0xe>
 80013d4:	28b1      	cmp	r0, #177	; 0xb1
 80013d6:	d05e      	beq.n	8001496 <__gnu_unwind_execute+0x186>
 80013d8:	28b2      	cmp	r0, #178	; 0xb2
 80013da:	f000 80cb 	beq.w	8001574 <__gnu_unwind_execute+0x264>
 80013de:	28b3      	cmp	r0, #179	; 0xb3
 80013e0:	d07d      	beq.n	80014de <__gnu_unwind_execute+0x1ce>
 80013e2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80013e6:	2bb4      	cmp	r3, #180	; 0xb4
 80013e8:	d0bf      	beq.n	800136a <__gnu_unwind_execute+0x5a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	f000 0207 	and.w	r2, r0, #7
 80013f0:	441a      	add	r2, r3
 80013f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013f6:	4619      	mov	r1, r3
 80013f8:	4628      	mov	r0, r5
 80013fa:	f7ff fd45 	bl	8000e88 <_Unwind_VRS_Pop>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d08d      	beq.n	800131e <__gnu_unwind_execute+0xe>
 8001402:	e7b2      	b.n	800136a <__gnu_unwind_execute+0x5a>
 8001404:	4630      	mov	r0, r6
 8001406:	f7ff ff57 	bl	80012b8 <next_unwind_byte>
 800140a:	0224      	lsls	r4, r4, #8
 800140c:	4304      	orrs	r4, r0
 800140e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001412:	d0aa      	beq.n	800136a <__gnu_unwind_execute+0x5a>
 8001414:	2300      	movs	r3, #0
 8001416:	0124      	lsls	r4, r4, #4
 8001418:	b2a2      	uxth	r2, r4
 800141a:	4619      	mov	r1, r3
 800141c:	4628      	mov	r0, r5
 800141e:	f7ff fd33 	bl	8000e88 <_Unwind_VRS_Pop>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1a1      	bne.n	800136a <__gnu_unwind_execute+0x5a>
 8001426:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800142a:	bf18      	it	ne
 800142c:	f04f 0801 	movne.w	r8, #1
 8001430:	e775      	b.n	800131e <__gnu_unwind_execute+0xe>
 8001432:	43c3      	mvns	r3, r0
 8001434:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	411a      	asrs	r2, r3
 800143e:	2300      	movs	r3, #0
 8001440:	0701      	lsls	r1, r0, #28
 8001442:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001446:	bf48      	it	mi
 8001448:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800144c:	4619      	mov	r1, r3
 800144e:	4628      	mov	r0, r5
 8001450:	f7ff fd1a 	bl	8000e88 <_Unwind_VRS_Pop>
 8001454:	2800      	cmp	r0, #0
 8001456:	f43f af62 	beq.w	800131e <__gnu_unwind_execute+0xe>
 800145a:	e786      	b.n	800136a <__gnu_unwind_execute+0x5a>
 800145c:	28c6      	cmp	r0, #198	; 0xc6
 800145e:	d051      	beq.n	8001504 <__gnu_unwind_execute+0x1f4>
 8001460:	28c7      	cmp	r0, #199	; 0xc7
 8001462:	d05a      	beq.n	800151a <__gnu_unwind_execute+0x20a>
 8001464:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001468:	2bc0      	cmp	r3, #192	; 0xc0
 800146a:	d069      	beq.n	8001540 <__gnu_unwind_execute+0x230>
 800146c:	28c8      	cmp	r0, #200	; 0xc8
 800146e:	d075      	beq.n	800155c <__gnu_unwind_execute+0x24c>
 8001470:	28c9      	cmp	r0, #201	; 0xc9
 8001472:	f47f af7a 	bne.w	800136a <__gnu_unwind_execute+0x5a>
 8001476:	4630      	mov	r0, r6
 8001478:	f7ff ff1e 	bl	80012b8 <next_unwind_byte>
 800147c:	0302      	lsls	r2, r0, #12
 800147e:	f000 000f 	and.w	r0, r0, #15
 8001482:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001486:	3001      	adds	r0, #1
 8001488:	4302      	orrs	r2, r0
 800148a:	e767      	b.n	800135c <__gnu_unwind_execute+0x4c>
 800148c:	f1b8 0f00 	cmp.w	r8, #0
 8001490:	d014      	beq.n	80014bc <__gnu_unwind_execute+0x1ac>
 8001492:	2000      	movs	r0, #0
 8001494:	e76a      	b.n	800136c <__gnu_unwind_execute+0x5c>
 8001496:	4630      	mov	r0, r6
 8001498:	f7ff ff0e 	bl	80012b8 <next_unwind_byte>
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af64 	beq.w	800136a <__gnu_unwind_execute+0x5a>
 80014a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80014a6:	f47f af60 	bne.w	800136a <__gnu_unwind_execute+0x5a>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4628      	mov	r0, r5
 80014b0:	f7ff fcea 	bl	8000e88 <_Unwind_VRS_Pop>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	f43f af32 	beq.w	800131e <__gnu_unwind_execute+0xe>
 80014ba:	e756      	b.n	800136a <__gnu_unwind_execute+0x5a>
 80014bc:	ac03      	add	r4, sp, #12
 80014be:	4643      	mov	r3, r8
 80014c0:	220e      	movs	r2, #14
 80014c2:	4641      	mov	r1, r8
 80014c4:	9400      	str	r4, [sp, #0]
 80014c6:	4628      	mov	r0, r5
 80014c8:	f7ff faee 	bl	8000aa8 <_Unwind_VRS_Get>
 80014cc:	9400      	str	r4, [sp, #0]
 80014ce:	4628      	mov	r0, r5
 80014d0:	4643      	mov	r3, r8
 80014d2:	220f      	movs	r2, #15
 80014d4:	4641      	mov	r1, r8
 80014d6:	f7ff fb09 	bl	8000aec <_Unwind_VRS_Set>
 80014da:	4640      	mov	r0, r8
 80014dc:	e746      	b.n	800136c <__gnu_unwind_execute+0x5c>
 80014de:	4630      	mov	r0, r6
 80014e0:	f7ff feea 	bl	80012b8 <next_unwind_byte>
 80014e4:	2301      	movs	r3, #1
 80014e6:	0301      	lsls	r1, r0, #12
 80014e8:	f000 000f 	and.w	r0, r0, #15
 80014ec:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80014f0:	18c2      	adds	r2, r0, r3
 80014f2:	430a      	orrs	r2, r1
 80014f4:	4628      	mov	r0, r5
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fcc6 	bl	8000e88 <_Unwind_VRS_Pop>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	f43f af0e 	beq.w	800131e <__gnu_unwind_execute+0xe>
 8001502:	e732      	b.n	800136a <__gnu_unwind_execute+0x5a>
 8001504:	4630      	mov	r0, r6
 8001506:	f7ff fed7 	bl	80012b8 <next_unwind_byte>
 800150a:	0301      	lsls	r1, r0, #12
 800150c:	f000 000f 	and.w	r0, r0, #15
 8001510:	2303      	movs	r3, #3
 8001512:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001516:	1c42      	adds	r2, r0, #1
 8001518:	e7eb      	b.n	80014f2 <__gnu_unwind_execute+0x1e2>
 800151a:	4630      	mov	r0, r6
 800151c:	f7ff fecc 	bl	80012b8 <next_unwind_byte>
 8001520:	4602      	mov	r2, r0
 8001522:	2800      	cmp	r0, #0
 8001524:	f43f af21 	beq.w	800136a <__gnu_unwind_execute+0x5a>
 8001528:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800152c:	f47f af1d 	bne.w	800136a <__gnu_unwind_execute+0x5a>
 8001530:	2104      	movs	r1, #4
 8001532:	4628      	mov	r0, r5
 8001534:	f7ff fca8 	bl	8000e88 <_Unwind_VRS_Pop>
 8001538:	2800      	cmp	r0, #0
 800153a:	f43f aef0 	beq.w	800131e <__gnu_unwind_execute+0xe>
 800153e:	e714      	b.n	800136a <__gnu_unwind_execute+0x5a>
 8001540:	2303      	movs	r3, #3
 8001542:	f000 020f 	and.w	r2, r0, #15
 8001546:	3201      	adds	r2, #1
 8001548:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800154c:	4619      	mov	r1, r3
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fc9a 	bl	8000e88 <_Unwind_VRS_Pop>
 8001554:	2800      	cmp	r0, #0
 8001556:	f43f aee2 	beq.w	800131e <__gnu_unwind_execute+0xe>
 800155a:	e706      	b.n	800136a <__gnu_unwind_execute+0x5a>
 800155c:	4630      	mov	r0, r6
 800155e:	f7ff feab 	bl	80012b8 <next_unwind_byte>
 8001562:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001566:	f000 030f 	and.w	r3, r0, #15
 800156a:	3210      	adds	r2, #16
 800156c:	3301      	adds	r3, #1
 800156e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001572:	e6f3      	b.n	800135c <__gnu_unwind_execute+0x4c>
 8001574:	2300      	movs	r3, #0
 8001576:	f10d 090c 	add.w	r9, sp, #12
 800157a:	220d      	movs	r2, #13
 800157c:	4619      	mov	r1, r3
 800157e:	f8cd 9000 	str.w	r9, [sp]
 8001582:	4628      	mov	r0, r5
 8001584:	f7ff fa90 	bl	8000aa8 <_Unwind_VRS_Get>
 8001588:	4630      	mov	r0, r6
 800158a:	f7ff fe95 	bl	80012b8 <next_unwind_byte>
 800158e:	0602      	lsls	r2, r0, #24
 8001590:	f04f 0702 	mov.w	r7, #2
 8001594:	d50c      	bpl.n	80015b0 <__gnu_unwind_execute+0x2a0>
 8001596:	9b03      	ldr	r3, [sp, #12]
 8001598:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800159c:	40b8      	lsls	r0, r7
 800159e:	4403      	add	r3, r0
 80015a0:	4630      	mov	r0, r6
 80015a2:	9303      	str	r3, [sp, #12]
 80015a4:	f7ff fe88 	bl	80012b8 <next_unwind_byte>
 80015a8:	0603      	lsls	r3, r0, #24
 80015aa:	f107 0707 	add.w	r7, r7, #7
 80015ae:	d4f2      	bmi.n	8001596 <__gnu_unwind_execute+0x286>
 80015b0:	2300      	movs	r3, #0
 80015b2:	9a03      	ldr	r2, [sp, #12]
 80015b4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 80015b8:	40bc      	lsls	r4, r7
 80015ba:	f502 7201 	add.w	r2, r2, #516	; 0x204
 80015be:	4414      	add	r4, r2
 80015c0:	f8cd 9000 	str.w	r9, [sp]
 80015c4:	4619      	mov	r1, r3
 80015c6:	220d      	movs	r2, #13
 80015c8:	4628      	mov	r0, r5
 80015ca:	9403      	str	r4, [sp, #12]
 80015cc:	f7ff fa8e 	bl	8000aec <_Unwind_VRS_Set>
 80015d0:	e6a5      	b.n	800131e <__gnu_unwind_execute+0xe>
 80015d2:	bf00      	nop

080015d4 <__gnu_unwind_frame>:
 80015d4:	b530      	push	{r4, r5, lr}
 80015d6:	2403      	movs	r4, #3
 80015d8:	460d      	mov	r5, r1
 80015da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80015dc:	b085      	sub	sp, #20
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	f88d 400c 	strb.w	r4, [sp, #12]
 80015e4:	79dc      	ldrb	r4, [r3, #7]
 80015e6:	0212      	lsls	r2, r2, #8
 80015e8:	3308      	adds	r3, #8
 80015ea:	a901      	add	r1, sp, #4
 80015ec:	4628      	mov	r0, r5
 80015ee:	9201      	str	r2, [sp, #4]
 80015f0:	f88d 400d 	strb.w	r4, [sp, #13]
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	f7ff fe8b 	bl	8001310 <__gnu_unwind_execute>
 80015fa:	b005      	add	sp, #20
 80015fc:	bd30      	pop	{r4, r5, pc}
 80015fe:	bf00      	nop

08001600 <_Unwind_GetRegionStart>:
 8001600:	b508      	push	{r3, lr}
 8001602:	f7ff fe83 	bl	800130c <unwind_UCB_from_context>
 8001606:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001608:	bd08      	pop	{r3, pc}
 800160a:	bf00      	nop

0800160c <_Unwind_GetLanguageSpecificData>:
 800160c:	b508      	push	{r3, lr}
 800160e:	f7ff fe7d 	bl	800130c <unwind_UCB_from_context>
 8001612:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001614:	79c3      	ldrb	r3, [r0, #7]
 8001616:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800161a:	3008      	adds	r0, #8
 800161c:	bd08      	pop	{r3, pc}
 800161e:	bf00      	nop

08001620 <_Unwind_GetDataRelBase>:
 8001620:	b508      	push	{r3, lr}
 8001622:	f003 fc95 	bl	8004f50 <abort>
 8001626:	bf00      	nop

08001628 <_Unwind_GetTextRelBase>:
 8001628:	b508      	push	{r3, lr}
 800162a:	f7ff fff9 	bl	8001620 <_Unwind_GetDataRelBase>
 800162e:	bf00      	nop

08001630 <_ZN9ADC_Tools14getVoltageAvrgEv>:
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <_ZNK9ADC_Tools13getPercentageEv>:
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <_ZN9ADC_Tools17getPercentageAvrgEv>:
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
	...

08001674 <_ZN9ADC_ToolsC1Effm>:
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_ZN9ADC_ToolsC1Effm+0x58>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	809a      	strh	r2, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	2202      	movs	r2, #2
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	080051ec 	.word	0x080051ec

080016d0 <_ZN9ADC_Tools17updateMeasurmentsEm>:
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f810 	bl	8001702 <_ZN9ADC_Tools16convertToVoltageEm>
 80016e2:	4602      	mov	r2, r0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f828 	bl	8001744 <_ZN9ADC_Tools19convertToPercentageEf>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZN9ADC_Tools16convertToVoltageEm>:
 8001702:	b590      	push	{r4, r7, lr}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f7fe fddf 	bl	80002d0 <__aeabi_ui2f>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f7fe fe30 	bl	8000380 <__aeabi_fmul>
 8001720:	4603      	mov	r3, r0
 8001722:	461c      	mov	r4, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fdd1 	bl	80002d0 <__aeabi_ui2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	4620      	mov	r0, r4
 8001734:	f7fe fed8 	bl	80004e8 <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
	...

08001744 <_ZN9ADC_Tools19convertToPercentageEf>:
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4619      	mov	r1, r3
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f7fe fd09 	bl	800016c <__aeabi_fsub>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7fe fcff 	bl	800016c <__aeabi_fsub>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4620      	mov	r0, r4
 8001774:	f7fe feb8 	bl	80004e8 <__aeabi_fdiv>
 8001778:	4603      	mov	r3, r0
 800177a:	4904      	ldr	r1, [pc, #16]	; (800178c <_ZN9ADC_Tools19convertToPercentageEf+0x48>)
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fdff 	bl	8000380 <__aeabi_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	42c80000 	.word	0x42c80000

08001790 <_ZNK9ADC_Tools10getVoltageEv>:
{
public:
	/** Return value in Volts
	 * @return float value - [V]
	 */
	float getVoltage()const				{ return value; };
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
	...

080017a8 <_Z13AllTasks_initv>:
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
LedNotifier led2(LED2_GPIO_Port, LED2_Pin);


void AllTasks_init(){
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b08e      	sub	sp, #56	; 0x38
 80017ac:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <_Z13AllTasks_initv+0x60>)
 80017b0:	f107 041c 	add.w	r4, r7, #28
 80017b4:	461d      	mov	r5, r3
 80017b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fb54 	bl	8003e76 <osThreadCreate>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <_Z13AllTasks_initv+0x64>)
 80017d2:	601a      	str	r2, [r3, #0]

	  osThreadDef(LedUpTask, StartLedUpTask, osPriorityBelowNormal, 0, 256);
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <_Z13AllTasks_initv+0x68>)
 80017d6:	463c      	mov	r4, r7
 80017d8:	461d      	mov	r5, r3
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  LedUpHandle = osThreadCreate(osThread(LedUpTask), NULL);
 80017e6:	463b      	mov	r3, r7
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fb43 	bl	8003e76 <osThreadCreate>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_Z13AllTasks_initv+0x6c>)
 80017f4:	601a      	str	r2, [r3, #0]


	  HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <_Z13AllTasks_initv+0x70>)
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <_Z13AllTasks_initv+0x74>)
 80017fc:	f002 fa2a 	bl	8003c54 <HAL_UART_Receive_IT>

}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}
 8001808:	0800513c 	.word	0x0800513c
 800180c:	200002f0 	.word	0x200002f0
 8001810:	08005164 	.word	0x08005164
 8001814:	200002f4 	.word	0x200002f4
 8001818:	20000316 	.word	0x20000316
 800181c:	200011c4 	.word	0x200011c4

08001820 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	; 0x58
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]


	uint8_t blinkFlag=0;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	LipoCell lipo(3.3f);
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	492c      	ldr	r1, [pc, #176]	; (80018e4 <_Z23StartBatteryManagerTaskPKv+0xc4>)
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fadf 	bl	8001df8 <_ZN8LipoCellC1Ef>
	HAL_ADC_Start(&hadc1);
 800183a:	482b      	ldr	r0, [pc, #172]	; (80018e8 <_Z23StartBatteryManagerTaskPKv+0xc8>)
 800183c:	f001 f812 	bl	8002864 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, receiveADC, 2);
 8001840:	2202      	movs	r2, #2
 8001842:	492a      	ldr	r1, [pc, #168]	; (80018ec <_Z23StartBatteryManagerTaskPKv+0xcc>)
 8001844:	4828      	ldr	r0, [pc, #160]	; (80018e8 <_Z23StartBatteryManagerTaskPKv+0xc8>)
 8001846:	f001 f86f 	bl	8002928 <HAL_ADC_Start_DMA>

	for(;;){

		lipo.update(receiveADC[0]);
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <_Z23StartBatteryManagerTaskPKv+0xcc>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f000 faf1 	bl	8001e3c <_ZN8LipoCell6updateEm>
		per = lipo.getPercentage();
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fef1 	bl	8001646 <_ZNK9ADC_Tools13getPercentageEv>
 8001864:	4602      	mov	r2, r0
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <_Z23StartBatteryManagerTaskPKv+0xd0>)
 8001868:	601a      	str	r2, [r3, #0]
		volt= lipo.getVoltage();
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff8e 	bl	8001790 <_ZNK9ADC_Tools10getVoltageEv>
 8001874:	4602      	mov	r2, r0
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <_Z23StartBatteryManagerTaskPKv+0xd4>)
 8001878:	601a      	str	r2, [r3, #0]
		perAvrg = lipo.getPercentageAvrg();
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fb05 	bl	8001e8e <_ZN8LipoCell17getPercentageAvrgEv>
 8001884:	4602      	mov	r2, r0
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <_Z23StartBatteryManagerTaskPKv+0xd8>)
 8001888:	601a      	str	r2, [r3, #0]
		voltAvrg= lipo.getVoltageAvrg();
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4618      	mov	r0, r3
 8001890:	f000 faee 	bl	8001e70 <_ZN8LipoCell14getVoltageAvrgEv>
 8001894:	4602      	mov	r2, r0
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <_Z23StartBatteryManagerTaskPKv+0xdc>)
 8001898:	601a      	str	r2, [r3, #0]

		if(voltAvrg >=2.5f && blinkFlag==0){
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <_Z23StartBatteryManagerTaskPKv+0xdc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4918      	ldr	r1, [pc, #96]	; (8001900 <_Z23StartBatteryManagerTaskPKv+0xe0>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe ff1f 	bl	80006e4 <__aeabi_fcmpge>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d017      	beq.n	80018dc <_Z23StartBatteryManagerTaskPKv+0xbc>
 80018ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d113      	bne.n	80018dc <_Z23StartBatteryManagerTaskPKv+0xbc>
			led.blink(500,1000);
 80018b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <_Z23StartBatteryManagerTaskPKv+0xe4>)
 80018be:	f000 f9a9 	bl	8001c14 <_ZN11LedNotifier5blinkEtt>
			led1.blink(1000,200);
 80018c2:	22c8      	movs	r2, #200	; 0xc8
 80018c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <_Z23StartBatteryManagerTaskPKv+0xe8>)
 80018ca:	f000 f9a3 	bl	8001c14 <_ZN11LedNotifier5blinkEtt>
			led2.blink(25);
 80018ce:	2119      	movs	r1, #25
 80018d0:	480e      	ldr	r0, [pc, #56]	; (800190c <_Z23StartBatteryManagerTaskPKv+0xec>)
 80018d2:	f000 f98f 	bl	8001bf4 <_ZN11LedNotifier5blinkEt>
			blinkFlag = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
//			blinkFlag = 0;
//			led.on();
//		}


		osDelay(100);
 80018dc:	2064      	movs	r0, #100	; 0x64
 80018de:	f002 faf2 	bl	8003ec6 <osDelay>
		lipo.update(receiveADC[0]);
 80018e2:	e7b2      	b.n	800184a <_Z23StartBatteryManagerTaskPKv+0x2a>
 80018e4:	40533333 	.word	0x40533333
 80018e8:	200010c0 	.word	0x200010c0
 80018ec:	200002f8 	.word	0x200002f8
 80018f0:	20000300 	.word	0x20000300
 80018f4:	20000304 	.word	0x20000304
 80018f8:	20000308 	.word	0x20000308
 80018fc:	2000030c 	.word	0x2000030c
 8001900:	40200000 	.word	0x40200000
 8001904:	20000318 	.word	0x20000318
 8001908:	20000330 	.word	0x20000330
 800190c:	20000348 	.word	0x20000348

08001910 <_Z14StartLedUpTaskPKv>:


	}
}

void StartLedUpTask(void const * argument){
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

	time_tool.init();
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <_Z14StartLedUpTaskPKv+0x58>)
 800191a:	f000 fb03 	bl	8001f24 <_ZN8TimeTool4initEv>

	for(;;){
		currentTime[2]= time_tool.getMicros();
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <_Z14StartLedUpTaskPKv+0x58>)
 8001920:	f000 faca 	bl	8001eb8 <_ZN8TimeTool9getMicrosEv>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 800192a:	809a      	strh	r2, [r3, #4]
		currentTime[0]= time_tool.compareMicros(currentTime[2], currentTime[1]);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 800192e:	8899      	ldrh	r1, [r3, #4]
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 8001932:	885b      	ldrh	r3, [r3, #2]
 8001934:	461a      	mov	r2, r3
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <_Z14StartLedUpTaskPKv+0x58>)
 8001938:	f000 face 	bl	8001ed8 <_ZN8TimeTool13compareMicrosEtt>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 8001942:	801a      	strh	r2, [r3, #0]
		currentTime[1] = currentTime[2];
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 8001946:	889a      	ldrh	r2, [r3, #4]
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_Z14StartLedUpTaskPKv+0x5c>)
 800194a:	805a      	strh	r2, [r3, #2]

		led.blink_process();
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <_Z14StartLedUpTaskPKv+0x60>)
 800194e:	f000 f97f 	bl	8001c50 <_ZN11LedNotifier13blink_processEv>
		led1.blink_process();
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <_Z14StartLedUpTaskPKv+0x64>)
 8001954:	f000 f97c 	bl	8001c50 <_ZN11LedNotifier13blink_processEv>
		led2.blink_process();
 8001958:	4807      	ldr	r0, [pc, #28]	; (8001978 <_Z14StartLedUpTaskPKv+0x68>)
 800195a:	f000 f979 	bl	8001c50 <_ZN11LedNotifier13blink_processEv>
//				led.blink_process();
//
//			}


		osDelay(10);
 800195e:	200a      	movs	r0, #10
 8001960:	f002 fab1 	bl	8003ec6 <osDelay>
		currentTime[2]= time_tool.getMicros();
 8001964:	e7db      	b.n	800191e <_Z14StartLedUpTaskPKv+0xe>
 8001966:	bf00      	nop
 8001968:	20000360 	.word	0x20000360
 800196c:	20000310 	.word	0x20000310
 8001970:	20000318 	.word	0x20000318
 8001974:	20000330 	.word	0x20000330
 8001978:	20000348 	.word	0x20000348

0800197c <HAL_UART_RxCpltCallback>:

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
//	if	   (RXdata == 'n') led.on();
//	else if(RXdata == 'f') led.off();
//	else if(RXdata == 'b') led.blink_config(500,1000);


	HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 8001984:	2201      	movs	r2, #1
 8001986:	4904      	ldr	r1, [pc, #16]	; (8001998 <HAL_UART_RxCpltCallback+0x1c>)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <HAL_UART_RxCpltCallback+0x20>)
 800198a:	f002 f963 	bl	8003c54 <HAL_UART_Receive_IT>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000316 	.word	0x20000316
 800199c:	200011c4 	.word	0x200011c4

080019a0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b2:	f000 fe53 	bl	800265c <HAL_IncTick>
  }


}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00

080019c4 <_Z41__static_initialization_and_destruction_0ii>:
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d118      	bne.n	8001a06 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	4293      	cmp	r3, r2
 80019dc:	d113      	bne.n	8001a06 <_Z41__static_initialization_and_destruction_0ii+0x42>
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
 80019de:	2300      	movs	r3, #0
 80019e0:	2220      	movs	r2, #32
 80019e2:	4913      	ldr	r1, [pc, #76]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80019e6:	f000 f9b7 	bl	8001d58 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
 80019ea:	2300      	movs	r3, #0
 80019ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f0:	4911      	ldr	r1, [pc, #68]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80019f2:	4812      	ldr	r0, [pc, #72]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80019f4:	f000 f9b0 	bl	8001d58 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
LedNotifier led2(LED2_GPIO_Port, LED2_Pin);
 80019f8:	2300      	movs	r3, #0
 80019fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001a02:	f000 f9a9 	bl	8001d58 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d108      	bne.n	8001a28 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001a18:	f000 f9ce 	bl	8001db8 <_ZN11LedNotifierD1Ev>
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001a1e:	f000 f9cb 	bl	8001db8 <_ZN11LedNotifierD1Ev>
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001a24:	f000 f9c8 	bl	8001db8 <_ZN11LedNotifierD1Ev>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010800 	.word	0x40010800
 8001a34:	20000318 	.word	0x20000318
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	20000330 	.word	0x20000330
 8001a40:	20000348 	.word	0x20000348

08001a44 <_GLOBAL__sub_I_BatteryManagerHandle>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ffb9 	bl	80019c4 <_Z41__static_initialization_and_destruction_0ii>
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_GLOBAL__sub_D_BatteryManagerHandle>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ffb1 	bl	80019c4 <_Z41__static_initialization_and_destruction_0ii>
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN7AverageIfLh10EEC1Ev>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f826 	bl	8001abe <_ZN7AverageIfLh10EE5clearEv>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_ZN7AverageIfLh10EEclEv>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f83a 	bl	8001afe <_ZN7AverageIfLh10EE9calculateEv>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	332c      	adds	r3, #44	; 0x2c
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_ZN7AverageIfLh10EE6insertEf>:
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f854 	bl	8001b5e <_ZN7AverageIfLh10EE12indexIterateEv>
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_ZN7AverageIfLh10EE5clearEv>:
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	dc09      	bgt.n	8001af4 <_ZN7AverageIfLh10EE5clearEv+0x36>
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3301      	adds	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e7f2      	b.n	8001ada <_ZN7AverageIfLh10EE5clearEv+0x1c>
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN7AverageIfLh10EE9calculateEv>:
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	72fb      	strb	r3, [r7, #11]
 8001b10:	7afb      	ldrb	r3, [r7, #11]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	da0d      	bge.n	8001b38 <_ZN7AverageIfLh10EE9calculateEv+0x3a>
 8001b1c:	7afa      	ldrb	r2, [r7, #11]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	4619      	mov	r1, r3
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7fe fb22 	bl	8000170 <__addsf3>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	3301      	adds	r3, #1
 8001b34:	72fb      	strb	r3, [r7, #11]
 8001b36:	e7eb      	b.n	8001b10 <_ZN7AverageIfLh10EE9calculateEv+0x12>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fbc6 	bl	80002d0 <__aeabi_ui2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4619      	mov	r1, r3
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7fe fccd 	bl	80004e8 <__aeabi_fdiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZN7AverageIfLh10EE12indexIterateEv>:
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b6c:	2b0a      	cmp	r3, #10
 8001b6e:	d007      	beq.n	8001b80 <_ZN7AverageIfLh10EE12indexIterateEv+0x22>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d104      	bne.n	8001b94 <_ZN7AverageIfLh10EE12indexIterateEv+0x36>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001b92:	e007      	b.n	8001ba4 <_ZN7AverageIfLh10EE12indexIterateEv+0x46>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_ZN11LedNotifier13getONPinStateEv>:
	LedState curState;

	uint8_t isReversed;   								/** flag of reversed led logic */
	GPIO_PinState onState; 								/** state consider as ON */
	GPIO_PinState offState; 							/** state consider as OFF */
	GPIO_PinState getONPinState(){ return onState;};  	/** return real ON state */
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7cdb      	ldrb	r3, [r3, #19]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <_ZN11LedNotifier2onEv>:
 *      Author: Igor
 */

#include <LedNotifier.h>

void LedNotifier::on(){
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	curState = ON;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	745a      	strb	r2, [r3, #17]
	HAL_GPIO_WritePin(Port,Pin, getONPinState());
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685c      	ldr	r4, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	891d      	ldrh	r5, [r3, #8]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffe7 	bl	8001bae <_ZN11LedNotifier13getONPinStateEv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4629      	mov	r1, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	f001 fa4c 	bl	8003084 <HAL_GPIO_WritePin>

}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}

08001bf4 <_ZN11LedNotifier5blinkEt>:
	curState = OFF;
	HAL_GPIO_WritePin(Port,Pin, getOFFPinState());

}

void LedNotifier::blink( uint16_t perON){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
	blink(perON,perON);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f804 	bl	8001c14 <_ZN11LedNotifier5blinkEtt>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZN11LedNotifier5blinkEtt>:

void LedNotifier::blink( uint16_t perON, uint16_t perOFF){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	803b      	strh	r3, [r7, #0]
	// initial state of led in blinking mode
	on();
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffcd 	bl	8001bc4 <_ZN11LedNotifier2onEv>
	// update led state
	curState = BLINK;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	745a      	strb	r2, [r3, #17]
	blink_state = blinkOn;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	741a      	strb	r2, [r3, #16]

	// saving required periods
	blinkPeriodON = perON;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	887a      	ldrh	r2, [r7, #2]
 8001c3a:	815a      	strh	r2, [r3, #10]
	blinkPeriodOFF = perOFF;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	883a      	ldrh	r2, [r7, #0]
 8001c40:	819a      	strh	r2, [r3, #12]

	updateLastToggleTime();
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f850 	bl	8001ce8 <_ZN11LedNotifier20updateLastToggleTimeEv>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_ZN11LedNotifier13blink_processEv>:

void LedNotifier::blink_process(){
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	// process called by ledNotifier manager
	if(curState == BLINK){
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c5b      	ldrb	r3, [r3, #17]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d118      	bne.n	8001c92 <_ZN11LedNotifier13blink_processEv+0x42>
		if(getTimeFromLastToggle() >= getPeriod()){
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f81b 	bl	8001c9c <_ZN11LedNotifier21getTimeFromLastToggleEv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461c      	mov	r4, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f862 	bl	8001d34 <_ZN11LedNotifier9getPeriodEv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	429c      	cmp	r4, r3
 8001c74:	bf2c      	ite	cs
 8001c76:	2301      	movcs	r3, #1
 8001c78:	2300      	movcc	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <_ZN11LedNotifier13blink_processEv+0x42>
			updateLastToggleTime();
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f831 	bl	8001ce8 <_ZN11LedNotifier20updateLastToggleTimeEv>
			toggle();
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f81e 	bl	8001cc8 <_ZN11LedNotifier6toggleEv>
			toggle_blinkstate();
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f83d 	bl	8001d0c <_ZN11LedNotifier17toggle_blinkstateEv>
		}
	}
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
	...

08001c9c <_ZN11LedNotifier21getTimeFromLastToggleEv>:

uint16_t LedNotifier::getTimeFromLastToggle(){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	return time_tool.compareMicros(time_tool.getMicros(), last_toggle_time );
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <_ZN11LedNotifier21getTimeFromLastToggleEv+0x28>)
 8001ca6:	f000 f907 	bl	8001eb8 <_ZN8TimeTool9getMicrosEv>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	89db      	ldrh	r3, [r3, #14]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <_ZN11LedNotifier21getTimeFromLastToggleEv+0x28>)
 8001cb6:	f000 f90f 	bl	8001ed8 <_ZN8TimeTool13compareMicrosEtt>
 8001cba:	4603      	mov	r3, r0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000360 	.word	0x20000360

08001cc8 <_ZN11LedNotifier6toggleEv>:
void LedNotifier::toggle(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Port,Pin);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	891b      	ldrh	r3, [r3, #8]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f001 f9d7 	bl	800308e <HAL_GPIO_TogglePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZN11LedNotifier20updateLastToggleTimeEv>:

void LedNotifier::updateLastToggleTime(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	last_toggle_time = time_tool.getMicros();
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <_ZN11LedNotifier20updateLastToggleTimeEv+0x20>)
 8001cf2:	f000 f8e1 	bl	8001eb8 <_ZN8TimeTool9getMicrosEv>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	81da      	strh	r2, [r3, #14]
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000360 	.word	0x20000360

08001d0c <_ZN11LedNotifier17toggle_blinkstateEv>:

void LedNotifier::toggle_blinkstate(){
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (blink_state == blinkOff) blink_state = blinkOn;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7c1b      	ldrb	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <_ZN11LedNotifier17toggle_blinkstateEv+0x18>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	741a      	strb	r2, [r3, #16]
	else 						 blink_state = blinkOff;
}
 8001d22:	e002      	b.n	8001d2a <_ZN11LedNotifier17toggle_blinkstateEv+0x1e>
	else 						 blink_state = blinkOff;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	741a      	strb	r2, [r3, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <_ZN11LedNotifier9getPeriodEv>:

uint32_t LedNotifier::getPeriod(){
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if(blink_state == blinkOff) return blinkPeriodOFF;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7c1b      	ldrb	r3, [r3, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_ZN11LedNotifier9getPeriodEv+0x16>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	899b      	ldrh	r3, [r3, #12]
 8001d48:	e001      	b.n	8001d4e <_ZN11LedNotifier9getPeriodEv+0x1a>
	else 						return blinkPeriodON;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	895b      	ldrh	r3, [r3, #10]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>:
LedNotifier::LedState LedNotifier::getState(){
	return curState;
}


LedNotifier::LedNotifier(GPIO_TypeDef *port, uint16_t pin, uint8_t rev):
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	460b      	mov	r3, r1
 8001d68:	80fb      	strh	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
	Port(port), Pin(pin){
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x5c>)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	811a      	strh	r2, [r3, #8]
	isReversed = rev;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	797a      	ldrb	r2, [r7, #5]
 8001d84:	749a      	strb	r2, [r3, #18]
	if(isReversed){ onState = GPIO_PIN_RESET; offState= GPIO_PIN_SET;}
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	7c9b      	ldrb	r3, [r3, #18]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x44>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	74da      	strb	r2, [r3, #19]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	751a      	strb	r2, [r3, #20]
 8001d9a:	e005      	b.n	8001da8 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x50>
	else          { onState = GPIO_PIN_SET;   offState= GPIO_PIN_RESET;}
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	74da      	strb	r2, [r3, #19]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	751a      	strb	r2, [r3, #20]

}
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	08005214 	.word	0x08005214

08001db8 <_ZN11LedNotifierD1Ev>:

LedNotifier::~LedNotifier() {
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <_ZN11LedNotifierD1Ev+0x1c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	08005214 	.word	0x08005214

08001dd8 <_ZN11LedNotifierD0Ev>:
LedNotifier::~LedNotifier() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
}
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe9 	bl	8001db8 <_ZN11LedNotifierD1Ev>
 8001de6:	2118      	movs	r1, #24
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f002 ff07 	bl	8004bfc <_ZdlPvj>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN8LipoCellC1Ef>:
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	687c      	ldr	r4, [r7, #4]
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <_ZN8LipoCellC1Ef+0x3c>)
 8001e06:	6838      	ldr	r0, [r7, #0]
 8001e08:	f7fe f9b0 	bl	800016c <__aeabi_fsub>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	230c      	movs	r3, #12
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff fc2d 	bl	8001674 <_ZN9ADC_ToolsC1Effm>
 8001e1a:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <_ZN8LipoCellC1Ef+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	331c      	adds	r3, #28
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe1d 	bl	8001a64 <_ZN7AverageIfLh10EEC1Ev>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	3f99999a 	.word	0x3f99999a
 8001e38:	08005188 	.word	0x08005188

08001e3c <_ZN8LipoCell6updateEm>:
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fc40 	bl	80016d0 <_ZN9ADC_Tools17updateMeasurmentsEm>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f103 041c 	add.w	r4, r3, #28
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc99 	bl	8001790 <_ZNK9ADC_Tools10getVoltageEv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff fe17 	bl	8001a96 <_ZN7AverageIfLh10EE6insertEf>
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <_ZN8LipoCell14getVoltageAvrgEv>:
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	331c      	adds	r3, #28
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fdfd 	bl	8001a7c <_ZN7AverageIfLh10EEclEv>
 8001e82:	4603      	mov	r3, r0
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_ZN8LipoCell17getPercentageAvrgEv>:
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc4b 	bl	8001744 <_ZN9ADC_Tools19convertToPercentageEf>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_ZN8TimeTool9getMicrosEv>:
TimeTool time_tool;

uint8_t TimeTool::isToolInit(void){
	return microsInitDone;
}
uint16_t TimeTool::getMicros(void){
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	return TIMETOOL_TIMER.Instance->CNT;
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <_ZN8TimeTool9getMicrosEv+0x1c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	b29b      	uxth	r3, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000117c 	.word	0x2000117c

08001ed8 <_ZN8TimeTool13compareMicrosEtt>:
uint16_t TimeTool::compareMicros(uint16_t a, uint16_t b) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	803b      	strh	r3, [r7, #0]
	uint16_t res = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81fb      	strh	r3, [r7, #14]
	if (a > b) res = a - b;
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	883b      	ldrh	r3, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d904      	bls.n	8001efe <_ZN8TimeTool13compareMicrosEtt+0x26>
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	883b      	ldrh	r3, [r7, #0]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	81fb      	strh	r3, [r7, #14]
 8001efc:	e003      	b.n	8001f06 <_ZN8TimeTool13compareMicrosEtt+0x2e>
	else       res = b - a;
 8001efe:	883a      	ldrh	r2, [r7, #0]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	81fb      	strh	r3, [r7, #14]
	if (res > uint16Half){
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	88db      	ldrh	r3, [r3, #6]
 8001f0a:	89fa      	ldrh	r2, [r7, #14]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d902      	bls.n	8001f16 <_ZN8TimeTool13compareMicrosEtt+0x3e>
		res = UINT16_MAX- res;
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	81fb      	strh	r3, [r7, #14]
	}
	return res;
 8001f16:	89fb      	ldrh	r3, [r7, #14]

}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
	...

08001f24 <_ZN8TimeTool4initEv>:
void TimeTool::init(void) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	if (!microsInitDone) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	791b      	ldrb	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <_ZN8TimeTool4initEv+0x1c>
		HAL_TIM_Base_Start(&TIMETOOL_TIMER);
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <_ZN8TimeTool4initEv+0x24>)
 8001f36:	f001 fbeb 	bl	8003710 <HAL_TIM_Base_Start>
		microsInitDone = 1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	711a      	strb	r2, [r3, #4]
	}
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	2000117c 	.word	0x2000117c

08001f4c <_ZN8TimeToolC1Ev>:


TimeTool::TimeTool(): microsInitDone(0) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <_ZN8TimeToolC1Ev+0x28>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	711a      	strb	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f66:	80da      	strh	r2, [r3, #6]


}
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	08005224 	.word	0x08005224

08001f78 <_ZN8TimeToolD1Ev>:

TimeTool::~TimeTool() {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <_ZN8TimeToolD1Ev+0x1c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	08005224 	.word	0x08005224

08001f98 <_ZN8TimeToolD0Ev>:
TimeTool::~TimeTool() {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
}
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe9 	bl	8001f78 <_ZN8TimeToolD1Ev>
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f002 fe27 	bl	8004bfc <_ZdlPvj>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_Z41__static_initialization_and_destruction_0ii>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d102      	bne.n	8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
TimeTool time_tool;
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001fd4:	f7ff ffba 	bl	8001f4c <_ZN8TimeToolC1Ev>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d102      	bne.n	8001fee <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001fea:	f7ff ffc5 	bl	8001f78 <_ZN8TimeToolD1Ev>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000360 	.word	0x20000360

08001ffc <_GLOBAL__sub_I_time_tool>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff ffd7 	bl	8001fb8 <_Z41__static_initialization_and_destruction_0ii>
 800200a:	bd80      	pop	{r7, pc}

0800200c <_GLOBAL__sub_D_time_tool>:
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
 8002010:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff ffcf 	bl	8001fb8 <_Z41__static_initialization_and_destruction_0ii>
 800201a:	bd80      	pop	{r7, pc}

0800201c <MX_ADC1_Init>:
 800201c:	4819      	ldr	r0, [pc, #100]	; (8002084 <MX_ADC1_Init+0x68>)
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_ADC1_Init+0x6c>)
 8002020:	b530      	push	{r4, r5, lr}
 8002022:	6003      	str	r3, [r0, #0]
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	6083      	str	r3, [r0, #8]
 800202a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800202e:	2400      	movs	r4, #0
 8002030:	2501      	movs	r5, #1
 8002032:	61c3      	str	r3, [r0, #28]
 8002034:	2302      	movs	r3, #2
 8002036:	b085      	sub	sp, #20
 8002038:	9401      	str	r4, [sp, #4]
 800203a:	9402      	str	r4, [sp, #8]
 800203c:	9403      	str	r4, [sp, #12]
 800203e:	7305      	strb	r5, [r0, #12]
 8002040:	7504      	strb	r4, [r0, #20]
 8002042:	6044      	str	r4, [r0, #4]
 8002044:	6103      	str	r3, [r0, #16]
 8002046:	f000 fd1f 	bl	8002a88 <HAL_ADC_Init>
 800204a:	b108      	cbz	r0, 8002050 <MX_ADC1_Init+0x34>
 800204c:	f000 f9b1 	bl	80023b2 <Error_Handler>
 8002050:	2307      	movs	r3, #7
 8002052:	a901      	add	r1, sp, #4
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <MX_ADC1_Init+0x68>)
 8002056:	9401      	str	r4, [sp, #4]
 8002058:	9502      	str	r5, [sp, #8]
 800205a:	9303      	str	r3, [sp, #12]
 800205c:	f000 fb4c 	bl	80026f8 <HAL_ADC_ConfigChannel>
 8002060:	b108      	cbz	r0, 8002066 <MX_ADC1_Init+0x4a>
 8002062:	f000 f9a6 	bl	80023b2 <Error_Handler>
 8002066:	2301      	movs	r3, #1
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2302      	movs	r3, #2
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2306      	movs	r3, #6
 8002070:	a901      	add	r1, sp, #4
 8002072:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_ADC1_Init+0x68>)
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	f000 fb3f 	bl	80026f8 <HAL_ADC_ConfigChannel>
 800207a:	b108      	cbz	r0, 8002080 <MX_ADC1_Init+0x64>
 800207c:	f000 f999 	bl	80023b2 <Error_Handler>
 8002080:	b005      	add	sp, #20
 8002082:	bd30      	pop	{r4, r5, pc}
 8002084:	200010c0 	.word	0x200010c0
 8002088:	40012400 	.word	0x40012400

0800208c <HAL_ADC_MspInit>:
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	4605      	mov	r5, r0
 8002090:	b087      	sub	sp, #28
 8002092:	2210      	movs	r2, #16
 8002094:	2100      	movs	r1, #0
 8002096:	a802      	add	r0, sp, #8
 8002098:	f002 ff9f 	bl	8004fda <memset>
 800209c:	682a      	ldr	r2, [r5, #0]
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_ADC_MspInit+0x84>)
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d133      	bne.n	800210c <HAL_ADC_MspInit+0x80>
 80020a4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	481a      	ldr	r0, [pc, #104]	; (8002114 <HAL_ADC_MspInit+0x88>)
 80020ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b0:	619a      	str	r2, [r3, #24]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	a902      	add	r1, sp, #8
 80020b6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80020ba:	9200      	str	r2, [sp, #0]
 80020bc:	9a00      	ldr	r2, [sp, #0]
 80020be:	699a      	ldr	r2, [r3, #24]
 80020c0:	4c15      	ldr	r4, [pc, #84]	; (8002118 <HAL_ADC_MspInit+0x8c>)
 80020c2:	f042 0204 	orr.w	r2, r2, #4
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	2303      	movs	r3, #3
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	9303      	str	r3, [sp, #12]
 80020d8:	f000 fef4 	bl	8002ec4 <HAL_GPIO_Init>
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	60e2      	str	r2, [r4, #12]
 80020e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e4:	6122      	str	r2, [r4, #16]
 80020e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_ADC_MspInit+0x90>)
 80020ec:	6162      	str	r2, [r4, #20]
 80020ee:	6023      	str	r3, [r4, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	2300      	movs	r3, #0
 80020f4:	4620      	mov	r0, r4
 80020f6:	6063      	str	r3, [r4, #4]
 80020f8:	60a3      	str	r3, [r4, #8]
 80020fa:	61a2      	str	r2, [r4, #24]
 80020fc:	61e3      	str	r3, [r4, #28]
 80020fe:	f000 fd97 	bl	8002c30 <HAL_DMA_Init>
 8002102:	b108      	cbz	r0, 8002108 <HAL_ADC_MspInit+0x7c>
 8002104:	f000 f955 	bl	80023b2 <Error_Handler>
 8002108:	622c      	str	r4, [r5, #32]
 800210a:	6265      	str	r5, [r4, #36]	; 0x24
 800210c:	b007      	add	sp, #28
 800210e:	bd30      	pop	{r4, r5, pc}
 8002110:	40012400 	.word	0x40012400
 8002114:	40010800 	.word	0x40010800
 8002118:	200010f0 	.word	0x200010f0
 800211c:	40020008 	.word	0x40020008

08002120 <MX_DMA_Init>:
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_DMA_Init+0x2c>)
 8002122:	b507      	push	{r0, r1, r2, lr}
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	2105      	movs	r1, #5
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	200b      	movs	r0, #11
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	f000 fd36 	bl	8002bac <HAL_NVIC_SetPriority>
 8002140:	200b      	movs	r0, #11
 8002142:	f000 fd67 	bl	8002c14 <HAL_NVIC_EnableIRQ>
 8002146:	b003      	add	sp, #12
 8002148:	f85d fb04 	ldr.w	pc, [sp], #4
 800214c:	40021000 	.word	0x40021000

08002150 <vApplicationGetIdleTaskMemory>:
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <vApplicationGetIdleTaskMemory+0x28>)
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <vApplicationGetIdleTaskMemory+0x2c>)
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	2000009c 	.word	0x2000009c
 800217c:	200000f0 	.word	0x200000f0

08002180 <MX_FREERTOS_Init>:
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_FREERTOS_Init+0x34>)
 8002188:	1d3c      	adds	r4, r7, #4
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fe6a 	bl	8003e76 <osThreadCreate>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <MX_FREERTOS_Init+0x38>)
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	f7ff fafe 	bl	80017a8 <_Z13AllTasks_initv>
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	080051b8 	.word	0x080051b8
 80021b8:	20000098 	.word	0x20000098

080021bc <StartDefaultTask>:
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	2001      	movs	r0, #1
 80021c6:	f001 fe7e 	bl	8003ec6 <osDelay>
 80021ca:	e7fb      	b.n	80021c4 <StartDefaultTask+0x8>

080021cc <MX_GPIO_Init>:
 80021cc:	2210      	movs	r2, #16
 80021ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	eb0d 0002 	add.w	r0, sp, r2
 80021d8:	2100      	movs	r1, #0
 80021da:	f002 fefe 	bl	8004fda <memset>
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <MX_GPIO_Init+0xe4>)
 80021e0:	4f34      	ldr	r7, [pc, #208]	; (80022b4 <MX_GPIO_Init+0xe8>)
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	4e34      	ldr	r6, [pc, #208]	; (80022b8 <MX_GPIO_Init+0xec>)
 80021e6:	f042 0210 	orr.w	r2, r2, #16
 80021ea:	619a      	str	r2, [r3, #24]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	4638      	mov	r0, r7
 80021f0:	f002 0210 	and.w	r2, r2, #16
 80021f4:	9200      	str	r2, [sp, #0]
 80021f6:	9a00      	ldr	r2, [sp, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	2120      	movs	r1, #32
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	2400      	movs	r4, #0
 8002206:	f002 0220 	and.w	r2, r2, #32
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	9a01      	ldr	r2, [sp, #4]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	2502      	movs	r5, #2
 8002212:	f042 0204 	orr.w	r2, r2, #4
 8002216:	619a      	str	r2, [r3, #24]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	f04f 0801 	mov.w	r8, #1
 800221e:	f002 0204 	and.w	r2, r2, #4
 8002222:	9202      	str	r2, [sp, #8]
 8002224:	9a02      	ldr	r2, [sp, #8]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	f042 0208 	orr.w	r2, r2, #8
 800222c:	619a      	str	r2, [r3, #24]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2200      	movs	r2, #0
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	9303      	str	r3, [sp, #12]
 8002238:	9b03      	ldr	r3, [sp, #12]
 800223a:	f000 ff23 	bl	8003084 <HAL_GPIO_WritePin>
 800223e:	2200      	movs	r2, #0
 8002240:	4630      	mov	r0, r6
 8002242:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002246:	f000 ff1d 	bl	8003084 <HAL_GPIO_WritePin>
 800224a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224e:	9304      	str	r3, [sp, #16]
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_GPIO_Init+0xf0>)
 8002252:	a904      	add	r1, sp, #16
 8002254:	4630      	mov	r0, r6
 8002256:	9305      	str	r3, [sp, #20]
 8002258:	9406      	str	r4, [sp, #24]
 800225a:	f000 fe33 	bl	8002ec4 <HAL_GPIO_Init>
 800225e:	230c      	movs	r3, #12
 8002260:	a904      	add	r1, sp, #16
 8002262:	4638      	mov	r0, r7
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9505      	str	r5, [sp, #20]
 8002268:	9507      	str	r5, [sp, #28]
 800226a:	f000 fe2b 	bl	8002ec4 <HAL_GPIO_Init>
 800226e:	2320      	movs	r3, #32
 8002270:	a904      	add	r1, sp, #16
 8002272:	4638      	mov	r0, r7
 8002274:	9304      	str	r3, [sp, #16]
 8002276:	f8cd 8014 	str.w	r8, [sp, #20]
 800227a:	9406      	str	r4, [sp, #24]
 800227c:	9507      	str	r5, [sp, #28]
 800227e:	f000 fe21 	bl	8002ec4 <HAL_GPIO_Init>
 8002282:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002286:	a904      	add	r1, sp, #16
 8002288:	4630      	mov	r0, r6
 800228a:	9304      	str	r3, [sp, #16]
 800228c:	f8cd 8014 	str.w	r8, [sp, #20]
 8002290:	9406      	str	r4, [sp, #24]
 8002292:	9507      	str	r5, [sp, #28]
 8002294:	f000 fe16 	bl	8002ec4 <HAL_GPIO_Init>
 8002298:	4622      	mov	r2, r4
 800229a:	2105      	movs	r1, #5
 800229c:	2028      	movs	r0, #40	; 0x28
 800229e:	f000 fc85 	bl	8002bac <HAL_NVIC_SetPriority>
 80022a2:	2028      	movs	r0, #40	; 0x28
 80022a4:	f000 fcb6 	bl	8002c14 <HAL_NVIC_EnableIRQ>
 80022a8:	b008      	add	sp, #32
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010800 	.word	0x40010800
 80022b8:	40011000 	.word	0x40011000
 80022bc:	10110000 	.word	0x10110000

080022c0 <main>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	f000 f9b8 	bl	8002638 <HAL_Init>
 80022c8:	f000 f80f 	bl	80022ea <SystemClock_Config>
 80022cc:	f7ff ff7e 	bl	80021cc <MX_GPIO_Init>
 80022d0:	f7ff ff26 	bl	8002120 <MX_DMA_Init>
 80022d4:	f7ff fea2 	bl	800201c <MX_ADC1_Init>
 80022d8:	f000 f94e 	bl	8002578 <MX_USART3_UART_Init>
 80022dc:	f000 f902 	bl	80024e4 <MX_TIM4_Init>
 80022e0:	f7ff ff4e 	bl	8002180 <MX_FREERTOS_Init>
 80022e4:	f001 fdc2 	bl	8003e6c <osKernelStart>
 80022e8:	e7fe      	b.n	80022e8 <main+0x28>

080022ea <SystemClock_Config>:
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b094      	sub	sp, #80	; 0x50
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f4:	2228      	movs	r2, #40	; 0x28
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fe6e 	bl	8004fda <memset>
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	2302      	movs	r3, #2
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	2301      	movs	r3, #1
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
 8002322:	2310      	movs	r3, #16
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	2302      	movs	r3, #2
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
 800232a:	2300      	movs	r3, #0
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
 800232e:	2300      	movs	r3, #0
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fec0 	bl	80030bc <HAL_RCC_OscConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <SystemClock_Config+0x66>
 800234c:	f000 f831 	bl	80023b2 <Error_Handler>
 8002350:	230f      	movs	r3, #15
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f001 f87d 	bl	800346c <HAL_RCC_ClockConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x9c>
 8002382:	f000 f816 	bl	80023b2 <Error_Handler>
 8002386:	2302      	movs	r3, #2
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f001 f945 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SystemClock_Config+0xc0>
 80023a6:	f000 f804 	bl	80023b2 <Error_Handler>
 80023aa:	bf00      	nop
 80023ac:	3750      	adds	r7, #80	; 0x50
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <Error_Handler>:
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_MspInit>:
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_MspInit+0x48>)
 80023c2:	b507      	push	{r0, r1, r2, lr}
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	210f      	movs	r1, #15
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	f06f 0001 	mvn.w	r0, #1
 80023d4:	f002 0201 	and.w	r2, r2, #1
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	9a00      	ldr	r2, [sp, #0]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023e2:	61da      	str	r2, [r3, #28]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9b01      	ldr	r3, [sp, #4]
 80023f0:	f000 fbdc 	bl	8002bac <HAL_NVIC_SetPriority>
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_MspInit+0x4c>)
 80023f6:	6853      	ldr	r3, [r2, #4]
 80023f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	b003      	add	sp, #12
 8002404:	f85d fb04 	ldr.w	pc, [sp], #4
 8002408:	40021000 	.word	0x40021000
 800240c:	40010000 	.word	0x40010000

08002410 <HAL_InitTick>:
 8002410:	b510      	push	{r4, lr}
 8002412:	4601      	mov	r1, r0
 8002414:	b088      	sub	sp, #32
 8002416:	2200      	movs	r2, #0
 8002418:	2019      	movs	r0, #25
 800241a:	f000 fbc7 	bl	8002bac <HAL_NVIC_SetPriority>
 800241e:	2019      	movs	r0, #25
 8002420:	f000 fbf8 	bl	8002c14 <HAL_NVIC_EnableIRQ>
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_InitTick+0x68>)
 8002426:	a901      	add	r1, sp, #4
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	a803      	add	r0, sp, #12
 800242c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002430:	619a      	str	r2, [r3, #24]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4c11      	ldr	r4, [pc, #68]	; (800247c <HAL_InitTick+0x6c>)
 8002436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	9b02      	ldr	r3, [sp, #8]
 800243e:	f001 f8d1 	bl	80035e4 <HAL_RCC_GetClockConfig>
 8002442:	f001 f8bf 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_InitTick+0x70>)
 8002448:	6023      	str	r3, [r4, #0]
 800244a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800244e:	60e3      	str	r3, [r4, #12]
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_InitTick+0x74>)
 8002452:	fbb0 f0f3 	udiv	r0, r0, r3
 8002456:	2300      	movs	r3, #0
 8002458:	3801      	subs	r0, #1
 800245a:	6060      	str	r0, [r4, #4]
 800245c:	4620      	mov	r0, r4
 800245e:	6123      	str	r3, [r4, #16]
 8002460:	60a3      	str	r3, [r4, #8]
 8002462:	f001 fa83 	bl	800396c <HAL_TIM_Base_Init>
 8002466:	b920      	cbnz	r0, 8002472 <HAL_InitTick+0x62>
 8002468:	4620      	mov	r0, r4
 800246a:	f001 f977 	bl	800375c <HAL_TIM_Base_Start_IT>
 800246e:	b008      	add	sp, #32
 8002470:	bd10      	pop	{r4, pc}
 8002472:	2001      	movs	r0, #1
 8002474:	e7fb      	b.n	800246e <HAL_InitTick+0x5e>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	20001134 	.word	0x20001134
 8002480:	40012c00 	.word	0x40012c00
 8002484:	000f4240 	.word	0x000f4240

08002488 <NMI_Handler>:
 8002488:	4770      	bx	lr

0800248a <HardFault_Handler>:
 800248a:	e7fe      	b.n	800248a <HardFault_Handler>

0800248c <MemManage_Handler>:
 800248c:	e7fe      	b.n	800248c <MemManage_Handler>

0800248e <BusFault_Handler>:
 800248e:	e7fe      	b.n	800248e <BusFault_Handler>

08002490 <UsageFault_Handler>:
 8002490:	e7fe      	b.n	8002490 <UsageFault_Handler>

08002492 <DebugMon_Handler>:
 8002492:	4770      	bx	lr

08002494 <DMA1_Channel1_IRQHandler>:
 8002494:	4801      	ldr	r0, [pc, #4]	; (800249c <DMA1_Channel1_IRQHandler+0x8>)
 8002496:	f000 bc81 	b.w	8002d9c <HAL_DMA_IRQHandler>
 800249a:	bf00      	nop
 800249c:	200010f0 	.word	0x200010f0

080024a0 <TIM1_UP_IRQHandler>:
 80024a0:	4801      	ldr	r0, [pc, #4]	; (80024a8 <TIM1_UP_IRQHandler+0x8>)
 80024a2:	f001 b989 	b.w	80037b8 <HAL_TIM_IRQHandler>
 80024a6:	bf00      	nop
 80024a8:	20001134 	.word	0x20001134

080024ac <USART3_IRQHandler>:
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <USART3_IRQHandler+0x8>)
 80024ae:	f001 bc35 	b.w	8003d1c <HAL_UART_IRQHandler>
 80024b2:	bf00      	nop
 80024b4:	200011c4 	.word	0x200011c4

080024b8 <EXTI15_10_IRQHandler>:
 80024b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024bc:	f000 bdf2 	b.w	80030a4 <HAL_GPIO_EXTI_IRQHandler>

080024c0 <_getpid>:
 80024c0:	2001      	movs	r0, #1
 80024c2:	4770      	bx	lr

080024c4 <_kill>:
 80024c4:	b508      	push	{r3, lr}
 80024c6:	f002 fd4b 	bl	8004f60 <__errno>
 80024ca:	2316      	movs	r3, #22
 80024cc:	6003      	str	r3, [r0, #0]
 80024ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d2:	bd08      	pop	{r3, pc}

080024d4 <_exit>:
 80024d4:	b508      	push	{r3, lr}
 80024d6:	f002 fd43 	bl	8004f60 <__errno>
 80024da:	2316      	movs	r3, #22
 80024dc:	6003      	str	r3, [r0, #0]
 80024de:	e7fe      	b.n	80024de <_exit+0xa>

080024e0 <SystemInit>:
 80024e0:	4770      	bx	lr
	...

080024e4 <MX_TIM4_Init>:
 80024e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80024e6:	2210      	movs	r2, #16
 80024e8:	2100      	movs	r1, #0
 80024ea:	a802      	add	r0, sp, #8
 80024ec:	f002 fd75 	bl	8004fda <memset>
 80024f0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80024f4:	4814      	ldr	r0, [pc, #80]	; (8002548 <MX_TIM4_Init+0x64>)
 80024f6:	4915      	ldr	r1, [pc, #84]	; (800254c <MX_TIM4_Init+0x68>)
 80024f8:	2300      	movs	r3, #0
 80024fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80024fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	6083      	str	r3, [r0, #8]
 8002508:	60c2      	str	r2, [r0, #12]
 800250a:	6103      	str	r3, [r0, #16]
 800250c:	6183      	str	r3, [r0, #24]
 800250e:	f001 fa2d 	bl	800396c <HAL_TIM_Base_Init>
 8002512:	b108      	cbz	r0, 8002518 <MX_TIM4_Init+0x34>
 8002514:	f7ff ff4d 	bl	80023b2 <Error_Handler>
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	a902      	add	r1, sp, #8
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <MX_TIM4_Init+0x64>)
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	f001 fa59 	bl	80039d8 <HAL_TIM_ConfigClockSource>
 8002526:	b108      	cbz	r0, 800252c <MX_TIM4_Init+0x48>
 8002528:	f7ff ff43 	bl	80023b2 <Error_Handler>
 800252c:	2300      	movs	r3, #0
 800252e:	4669      	mov	r1, sp
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_TIM4_Init+0x64>)
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f001 fae3 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	b108      	cbz	r0, 8002540 <MX_TIM4_Init+0x5c>
 800253c:	f7ff ff39 	bl	80023b2 <Error_Handler>
 8002540:	b007      	add	sp, #28
 8002542:	f85d fb04 	ldr.w	pc, [sp], #4
 8002546:	bf00      	nop
 8002548:	2000117c 	.word	0x2000117c
 800254c:	40000800 	.word	0x40000800

08002550 <HAL_TIM_Base_MspInit>:
 8002550:	6802      	ldr	r2, [r0, #0]
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_TIM_Base_MspInit+0x24>)
 8002554:	b082      	sub	sp, #8
 8002556:	429a      	cmp	r2, r3
 8002558:	d10a      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x20>
 800255a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	f042 0204 	orr.w	r2, r2, #4
 8002564:	61da      	str	r2, [r3, #28]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	9b01      	ldr	r3, [sp, #4]
 8002570:	b002      	add	sp, #8
 8002572:	4770      	bx	lr
 8002574:	40000800 	.word	0x40000800

08002578 <MX_USART3_UART_Init>:
 8002578:	b508      	push	{r3, lr}
 800257a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800257e:	480a      	ldr	r0, [pc, #40]	; (80025a8 <MX_USART3_UART_Init+0x30>)
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <MX_USART3_UART_Init+0x34>)
 8002582:	220c      	movs	r2, #12
 8002584:	e880 4008 	stmia.w	r0, {r3, lr}
 8002588:	2300      	movs	r3, #0
 800258a:	6142      	str	r2, [r0, #20]
 800258c:	6083      	str	r3, [r0, #8]
 800258e:	60c3      	str	r3, [r0, #12]
 8002590:	6103      	str	r3, [r0, #16]
 8002592:	6183      	str	r3, [r0, #24]
 8002594:	61c3      	str	r3, [r0, #28]
 8002596:	f001 fb2f 	bl	8003bf8 <HAL_UART_Init>
 800259a:	b118      	cbz	r0, 80025a4 <MX_USART3_UART_Init+0x2c>
 800259c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80025a0:	f7ff bf07 	b.w	80023b2 <Error_Handler>
 80025a4:	bd08      	pop	{r3, pc}
 80025a6:	bf00      	nop
 80025a8:	200011c4 	.word	0x200011c4
 80025ac:	40004800 	.word	0x40004800

080025b0 <HAL_UART_MspInit>:
 80025b0:	b510      	push	{r4, lr}
 80025b2:	4604      	mov	r4, r0
 80025b4:	b086      	sub	sp, #24
 80025b6:	2210      	movs	r2, #16
 80025b8:	2100      	movs	r1, #0
 80025ba:	a802      	add	r0, sp, #8
 80025bc:	f002 fd0d 	bl	8004fda <memset>
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_UART_MspInit+0x80>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d130      	bne.n	800262a <HAL_UART_MspInit+0x7a>
 80025c8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	a902      	add	r1, sp, #8
 80025d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025d4:	61da      	str	r2, [r3, #28]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	4816      	ldr	r0, [pc, #88]	; (8002634 <HAL_UART_MspInit+0x84>)
 80025da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80025de:	9200      	str	r2, [sp, #0]
 80025e0:	9a00      	ldr	r2, [sp, #0]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	2400      	movs	r4, #0
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	619a      	str	r2, [r3, #24]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	9b01      	ldr	r3, [sp, #4]
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	2302      	movs	r3, #2
 80025fe:	9303      	str	r3, [sp, #12]
 8002600:	2303      	movs	r3, #3
 8002602:	9305      	str	r3, [sp, #20]
 8002604:	f000 fc5e 	bl	8002ec4 <HAL_GPIO_Init>
 8002608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260c:	a902      	add	r1, sp, #8
 800260e:	4809      	ldr	r0, [pc, #36]	; (8002634 <HAL_UART_MspInit+0x84>)
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	9403      	str	r4, [sp, #12]
 8002614:	9404      	str	r4, [sp, #16]
 8002616:	f000 fc55 	bl	8002ec4 <HAL_GPIO_Init>
 800261a:	2027      	movs	r0, #39	; 0x27
 800261c:	4622      	mov	r2, r4
 800261e:	2105      	movs	r1, #5
 8002620:	f000 fac4 	bl	8002bac <HAL_NVIC_SetPriority>
 8002624:	2027      	movs	r0, #39	; 0x27
 8002626:	f000 faf5 	bl	8002c14 <HAL_NVIC_EnableIRQ>
 800262a:	b006      	add	sp, #24
 800262c:	bd10      	pop	{r4, pc}
 800262e:	bf00      	nop
 8002630:	40004800 	.word	0x40004800
 8002634:	40010c00 	.word	0x40010c00

08002638 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_Init+0x20>)
{
 800263a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	f000 fa9f 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	2000      	movs	r0, #0
 800264c:	f7ff fee0 	bl	8002410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff feb6 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002654:	2000      	movs	r0, #0
 8002656:	bd08      	pop	{r3, pc}
 8002658:	40022000 	.word	0x40022000

0800265c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <HAL_IncTick+0x10>)
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_IncTick+0x14>)
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	440b      	add	r3, r1
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20001204 	.word	0x20001204
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <HAL_GetTick+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20001204 	.word	0x20001204

08002680 <HAL_ADC_ConvCpltCallback>:
 8002680:	4770      	bx	lr

08002682 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002682:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002684:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002688:	f012 0f50 	tst.w	r2, #80	; 0x50
 800268c:	d11b      	bne.n	80026c6 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800268e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	6892      	ldr	r2, [r2, #8]
 800269a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800269e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80026a2:	d10c      	bne.n	80026be <ADC_DMAConvCplt+0x3c>
 80026a4:	7b1a      	ldrb	r2, [r3, #12]
 80026a6:	b952      	cbnz	r2, 80026be <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b2:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b4:	bf5e      	ittt	pl
 80026b6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80026b8:	f042 0201 	orrpl.w	r2, r2, #1
 80026bc:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ffde 	bl	8002680 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026c4:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c6:	6a1b      	ldr	r3, [r3, #32]
}
 80026c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4718      	bx	r3

080026d0 <HAL_ADC_ConvHalfCpltCallback>:
 80026d0:	4770      	bx	lr

080026d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026d2:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80026d6:	f7ff fffb 	bl	80026d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026da:	bd08      	pop	{r3, pc}

080026dc <HAL_ADC_ErrorCallback>:
 80026dc:	4770      	bx	lr

080026de <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026de:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80026e0:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e8:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026f2:	f7ff fff3 	bl	80026dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026f6:	bd08      	pop	{r3, pc}

080026f8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80026f8:	2300      	movs	r3, #0
{ 
 80026fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80026fc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80026fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002702:	2b01      	cmp	r3, #1
 8002704:	d06d      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0xea>
 8002706:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8002708:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800270a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800270e:	2d06      	cmp	r5, #6
 8002710:	6802      	ldr	r2, [r0, #0]
 8002712:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002716:	680c      	ldr	r4, [r1, #0]
 8002718:	d823      	bhi.n	8002762 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800271a:	261f      	movs	r6, #31
 800271c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800271e:	3b05      	subs	r3, #5
 8002720:	409e      	lsls	r6, r3
 8002722:	ea25 0506 	bic.w	r5, r5, r6
 8002726:	fa04 f303 	lsl.w	r3, r4, r3
 800272a:	432b      	orrs	r3, r5
 800272c:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800272e:	2c09      	cmp	r4, #9
 8002730:	688b      	ldr	r3, [r1, #8]
 8002732:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002736:	f04f 0107 	mov.w	r1, #7
 800273a:	d92a      	bls.n	8002792 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800273c:	68d6      	ldr	r6, [r2, #12]
 800273e:	3d1e      	subs	r5, #30
 8002740:	40a9      	lsls	r1, r5
 8002742:	ea26 0101 	bic.w	r1, r6, r1
 8002746:	40ab      	lsls	r3, r5
 8002748:	430b      	orrs	r3, r1
 800274a:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800274c:	f1a4 0310 	sub.w	r3, r4, #16
 8002750:	2b01      	cmp	r3, #1
 8002752:	d926      	bls.n	80027a2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8002756:	2200      	movs	r2, #0
 8002758:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 800275c:	4618      	mov	r0, r3
 800275e:	b002      	add	sp, #8
 8002760:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002762:	2d0c      	cmp	r5, #12
 8002764:	f04f 051f 	mov.w	r5, #31
 8002768:	d809      	bhi.n	800277e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800276a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800276c:	3b23      	subs	r3, #35	; 0x23
 800276e:	409d      	lsls	r5, r3
 8002770:	ea26 0505 	bic.w	r5, r6, r5
 8002774:	fa04 f303 	lsl.w	r3, r4, r3
 8002778:	432b      	orrs	r3, r5
 800277a:	6313      	str	r3, [r2, #48]	; 0x30
 800277c:	e7d7      	b.n	800272e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800277e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002780:	3b41      	subs	r3, #65	; 0x41
 8002782:	409d      	lsls	r5, r3
 8002784:	ea26 0505 	bic.w	r5, r6, r5
 8002788:	fa04 f303 	lsl.w	r3, r4, r3
 800278c:	432b      	orrs	r3, r5
 800278e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002790:	e7cd      	b.n	800272e <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002792:	6916      	ldr	r6, [r2, #16]
 8002794:	40a9      	lsls	r1, r5
 8002796:	ea26 0101 	bic.w	r1, r6, r1
 800279a:	40ab      	lsls	r3, r5
 800279c:	430b      	orrs	r3, r1
 800279e:	6113      	str	r3, [r2, #16]
 80027a0:	e7d4      	b.n	800274c <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_ADC_ConfigChannel+0xf0>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d116      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027a8:	6893      	ldr	r3, [r2, #8]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	d4d2      	bmi.n	8002754 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027ae:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027b0:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b6:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027b8:	d1cc      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_ADC_ConfigChannel+0xf4>)
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_ADC_ConfigChannel+0xf8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80027c4:	230a      	movs	r3, #10
 80027c6:	4353      	muls	r3, r2
            wait_loop_index--;
 80027c8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0c1      	beq.n	8002754 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80027d0:	9b01      	ldr	r3, [sp, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	e7f8      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e7b9      	b.n	8002756 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80027e2:	2302      	movs	r3, #2
 80027e4:	e7ba      	b.n	800275c <HAL_ADC_ConfigChannel+0x64>
 80027e6:	bf00      	nop
 80027e8:	40012400 	.word	0x40012400
 80027ec:	20000000 	.word	0x20000000
 80027f0:	000f4240 	.word	0x000f4240

080027f4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80027f4:	2300      	movs	r3, #0
{
 80027f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80027f8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027fa:	6803      	ldr	r3, [r0, #0]
{
 80027fc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	07d2      	lsls	r2, r2, #31
 8002802:	d502      	bpl.n	800280a <ADC_Enable+0x16>
  return HAL_OK;
 8002804:	2000      	movs	r0, #0
}
 8002806:	b002      	add	sp, #8
 8002808:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <ADC_Enable+0x68>)
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <ADC_Enable+0x6c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800281c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	b9c3      	cbnz	r3, 8002854 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8002822:	f7ff ff27 	bl	8002674 <HAL_GetTick>
 8002826:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	689d      	ldr	r5, [r3, #8]
 800282c:	f015 0501 	ands.w	r5, r5, #1
 8002830:	d1e8      	bne.n	8002804 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002832:	f7ff ff1f 	bl	8002674 <HAL_GetTick>
 8002836:	1b80      	subs	r0, r0, r6
 8002838:	2802      	cmp	r0, #2
 800283a:	d9f5      	bls.n	8002828 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800283e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800284a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002852:	e7d8      	b.n	8002806 <ADC_Enable+0x12>
      wait_loop_index--;
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	e7e0      	b.n	800281c <ADC_Enable+0x28>
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000
 8002860:	000f4240 	.word	0x000f4240

08002864 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002864:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002868:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800286a:	2b01      	cmp	r3, #1
{
 800286c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800286e:	d054      	beq.n	800291a <HAL_ADC_Start+0xb6>
 8002870:	2301      	movs	r3, #1
 8002872:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002876:	f7ff ffbd 	bl	80027f4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800287a:	2800      	cmp	r0, #0
 800287c:	d149      	bne.n	8002912 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800287e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	4293      	cmp	r3, r2
 8002894:	d104      	bne.n	80028a0 <HAL_ADC_Start+0x3c>
 8002896:	4923      	ldr	r1, [pc, #140]	; (8002924 <HAL_ADC_Start+0xc0>)
 8002898:	684a      	ldr	r2, [r1, #4]
 800289a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800289e:	d12e      	bne.n	80028fe <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80028a6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028a8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028aa:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028ac:	bf41      	itttt	mi
 80028ae:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80028b0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80028b4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80028b8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028c0:	bf1c      	itt	ne
 80028c2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80028c4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80028c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80028dc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80028e0:	d113      	bne.n	800290a <HAL_ADC_Start+0xa6>
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_ADC_Start+0xbc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80028e8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80028ec:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028ee:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80028f2:	d10a      	bne.n	800290a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002900:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002904:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002906:	684a      	ldr	r2, [r1, #4]
 8002908:	e7cf      	b.n	80028aa <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002910:	e7f3      	b.n	80028fa <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8002912:	2300      	movs	r3, #0
 8002914:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002918:	e7f0      	b.n	80028fc <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800291a:	2002      	movs	r0, #2
 800291c:	e7ee      	b.n	80028fc <HAL_ADC_Start+0x98>
 800291e:	bf00      	nop
 8002920:	40012800 	.word	0x40012800
 8002924:	40012400 	.word	0x40012400

08002928 <HAL_ADC_Start_DMA>:
{
 8002928:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800292c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800292e:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_ADC_Start_DMA+0x108>)
 8002930:	6802      	ldr	r2, [r0, #0]
{
 8002932:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002934:	429a      	cmp	r2, r3
{
 8002936:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002938:	d002      	beq.n	8002940 <HAL_ADC_Start_DMA+0x18>
 800293a:	493e      	ldr	r1, [pc, #248]	; (8002a34 <HAL_ADC_Start_DMA+0x10c>)
 800293c:	428a      	cmp	r2, r1
 800293e:	d103      	bne.n	8002948 <HAL_ADC_Start_DMA+0x20>
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002946:	d16e      	bne.n	8002a26 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002948:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d06c      	beq.n	8002a2a <HAL_ADC_Start_DMA+0x102>
 8002950:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002952:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002954:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002958:	f7ff ff4c 	bl	80027f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800295c:	4606      	mov	r6, r0
 800295e:	2800      	cmp	r0, #0
 8002960:	d15d      	bne.n	8002a1e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8002962:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002964:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002966:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800296a:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800296c:	f020 0001 	bic.w	r0, r0, #1
 8002970:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002974:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002976:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002978:	d104      	bne.n	8002984 <HAL_ADC_Start_DMA+0x5c>
 800297a:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <HAL_ADC_Start_DMA+0x108>)
 800297c:	6853      	ldr	r3, [r2, #4]
 800297e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002982:	d13e      	bne.n	8002a02 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800298a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800298c:	684b      	ldr	r3, [r1, #4]
 800298e:	055a      	lsls	r2, r3, #21
 8002990:	d505      	bpl.n	800299e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800299c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a0:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a6:	bf18      	it	ne
 80029a8:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029aa:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ac:	bf18      	it	ne
 80029ae:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 80029b4:	2300      	movs	r3, #0
 80029b6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029bc:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029be:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_ADC_Start_DMA+0x114>)
 80029c2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_ADC_Start_DMA+0x118>)
 80029c6:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c8:	f06f 0302 	mvn.w	r3, #2
 80029cc:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029d0:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029dc:	4643      	mov	r3, r8
 80029de:	f000 f957 	bl	8002c90 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80029ea:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	bf0c      	ite	eq
 80029f2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029f6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	4630      	mov	r0, r6
 80029fe:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a08:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a0a:	6853      	ldr	r3, [r2, #4]
 8002a0c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a0e:	bf41      	itttt	mi
 8002a10:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8002a12:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002a16:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002a1a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8002a1c:	e7bf      	b.n	800299e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002a24:	e7ea      	b.n	80029fc <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8002a26:	2601      	movs	r6, #1
 8002a28:	e7e8      	b.n	80029fc <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002a2a:	2602      	movs	r6, #2
 8002a2c:	e7e6      	b.n	80029fc <HAL_ADC_Start_DMA+0xd4>
 8002a2e:	bf00      	nop
 8002a30:	40012400 	.word	0x40012400
 8002a34:	40012800 	.word	0x40012800
 8002a38:	08002683 	.word	0x08002683
 8002a3c:	080026d3 	.word	0x080026d3
 8002a40:	080026df 	.word	0x080026df

08002a44 <ADC_ConversionStop_Disable>:
{
 8002a44:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a46:	6803      	ldr	r3, [r0, #0]
{
 8002a48:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	07d2      	lsls	r2, r2, #31
 8002a4e:	d401      	bmi.n	8002a54 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
}
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a5c:	f7ff fe0a 	bl	8002674 <HAL_GetTick>
 8002a60:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	07db      	lsls	r3, r3, #31
 8002a68:	d5f2      	bpl.n	8002a50 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a6a:	f7ff fe03 	bl	8002674 <HAL_GetTick>
 8002a6e:	1b40      	subs	r0, r0, r5
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d9f6      	bls.n	8002a62 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a86:	e7e4      	b.n	8002a52 <ADC_ConversionStop_Disable+0xe>

08002a88 <HAL_ADC_Init>:
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d070      	beq.n	8002b72 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a92:	b923      	cbnz	r3, 8002a9e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002a96:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002a9a:	f7ff faf7 	bl	800208c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ffd0 	bl	8002a44 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aa6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aac:	d163      	bne.n	8002b76 <HAL_ADC_Init+0xee>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d161      	bne.n	8002b76 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ab8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002aba:	f023 0302 	bic.w	r3, r3, #2
 8002abe:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ac2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ac4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002ac6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ac8:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ace:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ad2:	d037      	beq.n	8002b44 <HAL_ADC_Init+0xbc>
 8002ad4:	2901      	cmp	r1, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	4606      	movne	r6, r0
 8002ada:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ade:	7d25      	ldrb	r5, [r4, #20]
 8002ae0:	2d01      	cmp	r5, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ae4:	bb83      	cbnz	r3, 8002b48 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ae6:	69a3      	ldr	r3, [r4, #24]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8002aee:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002af2:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002af4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002af8:	685d      	ldr	r5, [r3, #4]
 8002afa:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8002afe:	ea45 0506 	orr.w	r5, r5, r6
 8002b02:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002b04:	689e      	ldr	r6, [r3, #8]
 8002b06:	4d1e      	ldr	r5, [pc, #120]	; (8002b80 <HAL_ADC_Init+0xf8>)
 8002b08:	ea05 0506 	and.w	r5, r5, r6
 8002b0c:	ea45 0502 	orr.w	r5, r5, r2
 8002b10:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b12:	d001      	beq.n	8002b18 <HAL_ADC_Init+0x90>
 8002b14:	2901      	cmp	r1, #1
 8002b16:	d120      	bne.n	8002b5a <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b18:	6921      	ldr	r1, [r4, #16]
 8002b1a:	3901      	subs	r1, #1
 8002b1c:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002b1e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002b20:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002b24:	4329      	orrs	r1, r5
 8002b26:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_ADC_Init+0xfc>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d115      	bne.n	8002b5e <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	2300      	movs	r3, #0
 8002b34:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b44:	460e      	mov	r6, r1
 8002b46:	e7ca      	b.n	8002ade <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b4a:	f043 0320 	orr.w	r3, r3, #32
 8002b4e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b58:	e7cb      	b.n	8002af2 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	e7df      	b.n	8002b1e <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8002b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b60:	f023 0312 	bic.w	r3, r3, #18
 8002b64:	f043 0310 	orr.w	r3, r3, #16
 8002b68:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e7e5      	b.n	8002b42 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	f043 0310 	orr.w	r3, r3, #16
 8002b7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b7c:	e7f9      	b.n	8002b72 <HAL_ADC_Init+0xea>
 8002b7e:	bf00      	nop
 8002b80:	ffe1f7fd 	.word	0xffe1f7fd
 8002b84:	ff1f0efe 	.word	0xff1f0efe

08002b88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b8a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002ba2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002ba4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bae:	b570      	push	{r4, r5, r6, lr}
 8002bb0:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bba:	f1c4 0507 	rsb	r5, r4, #7
 8002bbe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	bf28      	it	cs
 8002bc6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	bf98      	it	ls
 8002bcc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bce:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	bf88      	it	hi
 8002bd4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd6:	ea21 0303 	bic.w	r3, r1, r3
 8002bda:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	fa06 f404 	lsl.w	r4, r6, r4
 8002be0:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002be4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be6:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	bfa8      	it	ge
 8002bec:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002bf0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	bfb8      	it	lt
 8002bf6:	4a06      	ldrlt	r2, [pc, #24]	; (8002c10 <HAL_NVIC_SetPriority+0x64>)
 8002bf8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	bfab      	itete	ge
 8002bfc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c04:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	e000ed14 	.word	0xe000ed14

08002c14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c14:	2800      	cmp	r0, #0
 8002c16:	db08      	blt.n	8002c2a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c18:	2301      	movs	r3, #1
 8002c1a:	0942      	lsrs	r2, r0, #5
 8002c1c:	f000 001f 	and.w	r0, r0, #31
 8002c20:	fa03 f000 	lsl.w	r0, r3, r0
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <HAL_NVIC_EnableIRQ+0x18>)
 8002c26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c30:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c32:	b330      	cbz	r0, 8002c82 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c34:	2214      	movs	r2, #20
 8002c36:	6801      	ldr	r1, [r0, #0]
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_DMA_Init+0x58>)
 8002c3a:	440b      	add	r3, r1
 8002c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c46:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8002c48:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c4a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002c4e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c50:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c52:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	4323      	orrs	r3, r4
 8002c58:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c5a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c60:	6944      	ldr	r4, [r0, #20]
 8002c62:	4323      	orrs	r3, r4
 8002c64:	6984      	ldr	r4, [r0, #24]
 8002c66:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c68:	69c4      	ldr	r4, [r0, #28]
 8002c6a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002c6c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c6e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c70:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c74:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c78:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c7a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8002c7e:	4618      	mov	r0, r3
}
 8002c80:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
 8002c84:	e7fc      	b.n	8002c80 <HAL_DMA_Init+0x50>
 8002c86:	bf00      	nop
 8002c88:	bffdfff8 	.word	0xbffdfff8
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c92:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002c96:	2c01      	cmp	r4, #1
 8002c98:	d035      	beq.n	8002d06 <HAL_DMA_Start_IT+0x76>
 8002c9a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002ca0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca4:	42a5      	cmp	r5, r4
 8002ca6:	f04f 0600 	mov.w	r6, #0
 8002caa:	f04f 0402 	mov.w	r4, #2
 8002cae:	d128      	bne.n	8002d02 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cb4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002cb8:	6826      	ldr	r6, [r4, #0]
 8002cba:	f026 0601 	bic.w	r6, r6, #1
 8002cbe:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cc0:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8002cc4:	40bd      	lsls	r5, r7
 8002cc6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cc8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cca:	6843      	ldr	r3, [r0, #4]
 8002ccc:	6805      	ldr	r5, [r0, #0]
 8002cce:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002cd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cd2:	bf0b      	itete	eq
 8002cd4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002cd6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002cd8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002cda:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002cdc:	b14b      	cbz	r3, 8002cf2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ce6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	602b      	str	r3, [r5, #0]
}
 8002cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	f043 030a 	orr.w	r3, r3, #10
 8002d00:	e7f0      	b.n	8002ce4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8002d02:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8002d06:	2002      	movs	r0, #2
 8002d08:	e7f2      	b.n	8002cf0 <HAL_DMA_Start_IT+0x60>
	...

08002d0c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d0c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002d10:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d16:	2304      	movs	r3, #4
 8002d18:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
}
 8002d1c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	6803      	ldr	r3, [r0, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f022 020e 	bic.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_DMA_Abort_IT+0x88>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <HAL_DMA_Abort_IT+0x6a>
 8002d36:	3214      	adds	r2, #20
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d01e      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x6e>
 8002d3c:	3214      	adds	r2, #20
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_Abort_IT+0x72>
 8002d42:	3214      	adds	r2, #20
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x78>
 8002d48:	3214      	adds	r2, #20
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_Abort_IT+0x7e>
 8002d4e:	3214      	adds	r2, #20
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf0c      	ite	eq
 8002d54:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002d58:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002d5c:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002d5e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d60:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002d68:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002d6a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d6e:	b17b      	cbz	r3, 8002d90 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002d70:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	4620      	mov	r0, r4
 8002d74:	e7d2      	b.n	8002d1c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d76:	2301      	movs	r3, #1
 8002d78:	e7f0      	b.n	8002d5c <HAL_DMA_Abort_IT+0x50>
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	e7ee      	b.n	8002d5c <HAL_DMA_Abort_IT+0x50>
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	e7eb      	b.n	8002d5c <HAL_DMA_Abort_IT+0x50>
 8002d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d88:	e7e8      	b.n	8002d5c <HAL_DMA_Abort_IT+0x50>
 8002d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8e:	e7e5      	b.n	8002d5c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	4618      	mov	r0, r3
 8002d92:	e7c3      	b.n	8002d1c <HAL_DMA_Abort_IT+0x10>
 8002d94:	40020008 	.word	0x40020008
 8002d98:	40020000 	.word	0x40020000

08002d9c <HAL_DMA_IRQHandler>:
{
 8002d9c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d9e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002da2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002da6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002da8:	4095      	lsls	r5, r2
 8002daa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002dac:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002dae:	d032      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x7a>
 8002db0:	074d      	lsls	r5, r1, #29
 8002db2:	d530      	bpl.n	8002e16 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002db8:	bf5e      	ittt	pl
 8002dba:	681a      	ldrpl	r2, [r3, #0]
 8002dbc:	f022 0204 	bicpl.w	r2, r2, #4
 8002dc0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dc2:	4a3e      	ldr	r2, [pc, #248]	; (8002ebc <HAL_DMA_IRQHandler+0x120>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d019      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x60>
 8002dc8:	3214      	adds	r2, #20
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d018      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x64>
 8002dce:	3214      	adds	r2, #20
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d017      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x68>
 8002dd4:	3214      	adds	r2, #20
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d017      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x6e>
 8002dda:	3214      	adds	r2, #20
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d017      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x74>
 8002de0:	3214      	adds	r2, #20
 8002de2:	4293      	cmp	r3, r2
 8002de4:	bf0c      	ite	eq
 8002de6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002dea:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002dee:	4a34      	ldr	r2, [pc, #208]	; (8002ec0 <HAL_DMA_IRQHandler+0x124>)
 8002df0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05e      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x11a>
}
 8002df8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002dfa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e7f6      	b.n	8002dee <HAL_DMA_IRQHandler+0x52>
 8002e00:	2340      	movs	r3, #64	; 0x40
 8002e02:	e7f4      	b.n	8002dee <HAL_DMA_IRQHandler+0x52>
 8002e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e08:	e7f1      	b.n	8002dee <HAL_DMA_IRQHandler+0x52>
 8002e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e0e:	e7ee      	b.n	8002dee <HAL_DMA_IRQHandler+0x52>
 8002e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e14:	e7eb      	b.n	8002dee <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e16:	2502      	movs	r5, #2
 8002e18:	4095      	lsls	r5, r2
 8002e1a:	4225      	tst	r5, r4
 8002e1c:	d035      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xee>
 8002e1e:	078d      	lsls	r5, r1, #30
 8002e20:	d533      	bpl.n	8002e8a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	0694      	lsls	r4, r2, #26
 8002e26:	d406      	bmi.n	8002e36 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f022 020a 	bic.w	r2, r2, #10
 8002e2e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002e30:	2201      	movs	r2, #1
 8002e32:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e36:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <HAL_DMA_IRQHandler+0x120>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d019      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd4>
 8002e3c:	3214      	adds	r2, #20
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d018      	beq.n	8002e74 <HAL_DMA_IRQHandler+0xd8>
 8002e42:	3214      	adds	r2, #20
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d017      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xdc>
 8002e48:	3214      	adds	r2, #20
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d017      	beq.n	8002e7e <HAL_DMA_IRQHandler+0xe2>
 8002e4e:	3214      	adds	r2, #20
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d017      	beq.n	8002e84 <HAL_DMA_IRQHandler+0xe8>
 8002e54:	3214      	adds	r2, #20
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bf0c      	ite	eq
 8002e5a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002e5e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_DMA_IRQHandler+0x124>)
 8002e64:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002e66:	2300      	movs	r3, #0
 8002e68:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002e6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e6e:	e7c1      	b.n	8002df4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e70:	2302      	movs	r3, #2
 8002e72:	e7f6      	b.n	8002e62 <HAL_DMA_IRQHandler+0xc6>
 8002e74:	2320      	movs	r3, #32
 8002e76:	e7f4      	b.n	8002e62 <HAL_DMA_IRQHandler+0xc6>
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7c:	e7f1      	b.n	8002e62 <HAL_DMA_IRQHandler+0xc6>
 8002e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e82:	e7ee      	b.n	8002e62 <HAL_DMA_IRQHandler+0xc6>
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	e7eb      	b.n	8002e62 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e8a:	2508      	movs	r5, #8
 8002e8c:	4095      	lsls	r5, r2
 8002e8e:	4225      	tst	r5, r4
 8002e90:	d011      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x11a>
 8002e92:	0709      	lsls	r1, r1, #28
 8002e94:	d50f      	bpl.n	8002eb6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	f021 010e 	bic.w	r1, r1, #14
 8002e9c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	fa03 f202 	lsl.w	r2, r3, r2
 8002ea4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002eac:	2300      	movs	r3, #0
 8002eae:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002eb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002eb4:	e79e      	b.n	8002df4 <HAL_DMA_IRQHandler+0x58>
}
 8002eb6:	bc70      	pop	{r4, r5, r6}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40020008 	.word	0x40020008
 8002ec0:	40020000 	.word	0x40020000

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ec8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002eca:	4626      	mov	r6, r4
 8002ecc:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ece:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003074 <HAL_GPIO_Init+0x1b0>
 8002ed2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003078 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	680a      	ldr	r2, [r1, #0]
 8002ed8:	fa32 f506 	lsrs.w	r5, r2, r6
 8002edc:	d102      	bne.n	8002ee4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002ede:	b003      	add	sp, #12
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ee4:	f04f 0801 	mov.w	r8, #1
 8002ee8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eec:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002ef0:	4590      	cmp	r8, r2
 8002ef2:	d17e      	bne.n	8002ff2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002ef4:	684d      	ldr	r5, [r1, #4]
 8002ef6:	2d12      	cmp	r5, #18
 8002ef8:	f000 80a9 	beq.w	800304e <HAL_GPIO_Init+0x18a>
 8002efc:	f200 8082 	bhi.w	8003004 <HAL_GPIO_Init+0x140>
 8002f00:	2d02      	cmp	r5, #2
 8002f02:	f000 80a1 	beq.w	8003048 <HAL_GPIO_Init+0x184>
 8002f06:	d876      	bhi.n	8002ff6 <HAL_GPIO_Init+0x132>
 8002f08:	2d00      	cmp	r5, #0
 8002f0a:	f000 8088 	beq.w	800301e <HAL_GPIO_Init+0x15a>
 8002f0e:	2d01      	cmp	r5, #1
 8002f10:	f000 8098 	beq.w	8003044 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f14:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f18:	2aff      	cmp	r2, #255	; 0xff
 8002f1a:	bf93      	iteet	ls
 8002f1c:	4682      	movls	sl, r0
 8002f1e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002f22:	3d08      	subhi	r5, #8
 8002f24:	f8d0 b000 	ldrls.w	fp, [r0]
 8002f28:	bf92      	itee	ls
 8002f2a:	00b5      	lslls	r5, r6, #2
 8002f2c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002f30:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f32:	fa09 f805 	lsl.w	r8, r9, r5
 8002f36:	ea2b 0808 	bic.w	r8, fp, r8
 8002f3a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f3e:	bf88      	it	hi
 8002f40:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f44:	ea48 0505 	orr.w	r5, r8, r5
 8002f48:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002f50:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002f54:	d04d      	beq.n	8002ff2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f56:	4f44      	ldr	r7, [pc, #272]	; (8003068 <HAL_GPIO_Init+0x1a4>)
 8002f58:	f026 0803 	bic.w	r8, r6, #3
 8002f5c:	69bd      	ldr	r5, [r7, #24]
 8002f5e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002f62:	f045 0501 	orr.w	r5, r5, #1
 8002f66:	61bd      	str	r5, [r7, #24]
 8002f68:	69bd      	ldr	r5, [r7, #24]
 8002f6a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002f6e:	f005 0501 	and.w	r5, r5, #1
 8002f72:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f74:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f78:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f7a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002f7e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f82:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f86:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f8a:	4d38      	ldr	r5, [pc, #224]	; (800306c <HAL_GPIO_Init+0x1a8>)
 8002f8c:	42a8      	cmp	r0, r5
 8002f8e:	d063      	beq.n	8003058 <HAL_GPIO_Init+0x194>
 8002f90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f94:	42a8      	cmp	r0, r5
 8002f96:	d061      	beq.n	800305c <HAL_GPIO_Init+0x198>
 8002f98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f9c:	42a8      	cmp	r0, r5
 8002f9e:	d05f      	beq.n	8003060 <HAL_GPIO_Init+0x19c>
 8002fa0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fa4:	42a8      	cmp	r0, r5
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2503      	moveq	r5, #3
 8002faa:	2504      	movne	r5, #4
 8002fac:	fa05 f50b 	lsl.w	r5, r5, fp
 8002fb0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002fb4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002fb8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fba:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002fbe:	bf14      	ite	ne
 8002fc0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fc2:	4395      	biceq	r5, r2
 8002fc4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002fcc:	bf14      	ite	ne
 8002fce:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd0:	4395      	biceq	r5, r2
 8002fd2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fd4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fda:	bf14      	ite	ne
 8002fdc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fde:	4395      	biceq	r5, r2
 8002fe0:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fe2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fe8:	bf14      	ite	ne
 8002fea:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fec:	ea25 0202 	biceq.w	r2, r5, r2
 8002ff0:	60da      	str	r2, [r3, #12]
	position++;
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e76f      	b.n	8002ed6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002ff6:	2d03      	cmp	r5, #3
 8002ff8:	d022      	beq.n	8003040 <HAL_GPIO_Init+0x17c>
 8002ffa:	2d11      	cmp	r5, #17
 8002ffc:	d18a      	bne.n	8002f14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ffe:	68cc      	ldr	r4, [r1, #12]
 8003000:	3404      	adds	r4, #4
          break;
 8003002:	e787      	b.n	8002f14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003004:	4f1a      	ldr	r7, [pc, #104]	; (8003070 <HAL_GPIO_Init+0x1ac>)
 8003006:	42bd      	cmp	r5, r7
 8003008:	d009      	beq.n	800301e <HAL_GPIO_Init+0x15a>
 800300a:	d812      	bhi.n	8003032 <HAL_GPIO_Init+0x16e>
 800300c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800307c <HAL_GPIO_Init+0x1b8>
 8003010:	454d      	cmp	r5, r9
 8003012:	d004      	beq.n	800301e <HAL_GPIO_Init+0x15a>
 8003014:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003018:	454d      	cmp	r5, r9
 800301a:	f47f af7b 	bne.w	8002f14 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800301e:	688c      	ldr	r4, [r1, #8]
 8003020:	b1c4      	cbz	r4, 8003054 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003022:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8003024:	bf0c      	ite	eq
 8003026:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800302a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800302e:	2408      	movs	r4, #8
 8003030:	e770      	b.n	8002f14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003032:	4565      	cmp	r5, ip
 8003034:	d0f3      	beq.n	800301e <HAL_GPIO_Init+0x15a>
 8003036:	4575      	cmp	r5, lr
 8003038:	d0f1      	beq.n	800301e <HAL_GPIO_Init+0x15a>
 800303a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003080 <HAL_GPIO_Init+0x1bc>
 800303e:	e7eb      	b.n	8003018 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003040:	2400      	movs	r4, #0
 8003042:	e767      	b.n	8002f14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003044:	68cc      	ldr	r4, [r1, #12]
          break;
 8003046:	e765      	b.n	8002f14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003048:	68cc      	ldr	r4, [r1, #12]
 800304a:	3408      	adds	r4, #8
          break;
 800304c:	e762      	b.n	8002f14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800304e:	68cc      	ldr	r4, [r1, #12]
 8003050:	340c      	adds	r4, #12
          break;
 8003052:	e75f      	b.n	8002f14 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003054:	2404      	movs	r4, #4
 8003056:	e75d      	b.n	8002f14 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003058:	2500      	movs	r5, #0
 800305a:	e7a7      	b.n	8002fac <HAL_GPIO_Init+0xe8>
 800305c:	2501      	movs	r5, #1
 800305e:	e7a5      	b.n	8002fac <HAL_GPIO_Init+0xe8>
 8003060:	2502      	movs	r5, #2
 8003062:	e7a3      	b.n	8002fac <HAL_GPIO_Init+0xe8>
 8003064:	40010400 	.word	0x40010400
 8003068:	40021000 	.word	0x40021000
 800306c:	40010800 	.word	0x40010800
 8003070:	10210000 	.word	0x10210000
 8003074:	10310000 	.word	0x10310000
 8003078:	10320000 	.word	0x10320000
 800307c:	10110000 	.word	0x10110000
 8003080:	10220000 	.word	0x10220000

08003084 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003084:	b10a      	cbz	r2, 800308a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003086:	6101      	str	r1, [r0, #16]
  }
}
 8003088:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800308a:	0409      	lsls	r1, r1, #16
 800308c:	e7fb      	b.n	8003086 <HAL_GPIO_WritePin+0x2>

0800308e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800308e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003090:	ea01 0203 	and.w	r2, r1, r3
 8003094:	ea21 0103 	bic.w	r1, r1, r3
 8003098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800309c:	6101      	str	r1, [r0, #16]
}
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80030a4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80030a8:	6959      	ldr	r1, [r3, #20]
 80030aa:	4201      	tst	r1, r0
 80030ac:	d002      	beq.n	80030b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b0:	f7ff fff6 	bl	80030a0 <HAL_GPIO_EXTI_Callback>
}
 80030b4:	bd08      	pop	{r3, pc}
 80030b6:	bf00      	nop
 80030b8:	40010400 	.word	0x40010400

080030bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c0:	4605      	mov	r5, r0
 80030c2:	b908      	cbnz	r0, 80030c8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
 80030c6:	e03c      	b.n	8003142 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	07db      	lsls	r3, r3, #31
 80030cc:	d410      	bmi.n	80030f0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	079f      	lsls	r7, r3, #30
 80030d2:	d45d      	bmi.n	8003190 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	0719      	lsls	r1, r3, #28
 80030d8:	f100 8094 	bmi.w	8003204 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	075a      	lsls	r2, r3, #29
 80030e0:	f100 80be 	bmi.w	8003260 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e4:	69e8      	ldr	r0, [r5, #28]
 80030e6:	2800      	cmp	r0, #0
 80030e8:	f040 812c 	bne.w	8003344 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80030ec:	2000      	movs	r0, #0
 80030ee:	e028      	b.n	8003142 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f0:	4c8f      	ldr	r4, [pc, #572]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 80030f2:	6863      	ldr	r3, [r4, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d007      	beq.n	800310c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d109      	bne.n	800311a <HAL_RCC_OscConfig+0x5e>
 8003106:	6863      	ldr	r3, [r4, #4]
 8003108:	03de      	lsls	r6, r3, #15
 800310a:	d506      	bpl.n	800311a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	039c      	lsls	r4, r3, #14
 8003110:	d5dd      	bpl.n	80030ce <HAL_RCC_OscConfig+0x12>
 8003112:	686b      	ldr	r3, [r5, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1da      	bne.n	80030ce <HAL_RCC_OscConfig+0x12>
 8003118:	e7d4      	b.n	80030c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311a:	686b      	ldr	r3, [r5, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x8c>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800312a:	f7ff faa3 	bl	8002674 <HAL_GetTick>
 800312e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	0398      	lsls	r0, r3, #14
 8003134:	d4cb      	bmi.n	80030ce <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003136:	f7ff fa9d 	bl	8002674 <HAL_GetTick>
 800313a:	1b80      	subs	r0, r0, r6
 800313c:	2864      	cmp	r0, #100	; 0x64
 800313e:	d9f7      	bls.n	8003130 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003140:	2003      	movs	r0, #3
}
 8003142:	b002      	add	sp, #8
 8003144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	b99b      	cbnz	r3, 8003172 <HAL_RCC_OscConfig+0xb6>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003158:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800315a:	f7ff fa8b 	bl	8002674 <HAL_GetTick>
 800315e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	0399      	lsls	r1, r3, #14
 8003164:	d5b3      	bpl.n	80030ce <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003166:	f7ff fa85 	bl	8002674 <HAL_GetTick>
 800316a:	1b80      	subs	r0, r0, r6
 800316c:	2864      	cmp	r0, #100	; 0x64
 800316e:	d9f7      	bls.n	8003160 <HAL_RCC_OscConfig+0xa4>
 8003170:	e7e6      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	d103      	bne.n	8003182 <HAL_RCC_OscConfig+0xc6>
 800317a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	e7cf      	b.n	8003122 <HAL_RCC_OscConfig+0x66>
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	e7cb      	b.n	8003128 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003190:	4c67      	ldr	r4, [pc, #412]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	f013 0f0c 	tst.w	r3, #12
 8003198:	d007      	beq.n	80031aa <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800319a:	6863      	ldr	r3, [r4, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d110      	bne.n	80031c6 <HAL_RCC_OscConfig+0x10a>
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	03da      	lsls	r2, r3, #15
 80031a8:	d40d      	bmi.n	80031c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	079b      	lsls	r3, r3, #30
 80031ae:	d502      	bpl.n	80031b6 <HAL_RCC_OscConfig+0xfa>
 80031b0:	692b      	ldr	r3, [r5, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d186      	bne.n	80030c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	696a      	ldr	r2, [r5, #20]
 80031ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80031c2:	6023      	str	r3, [r4, #0]
 80031c4:	e786      	b.n	80030d4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c6:	692a      	ldr	r2, [r5, #16]
 80031c8:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x278>)
 80031ca:	b16a      	cbz	r2, 80031e8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031d0:	f7ff fa50 	bl	8002674 <HAL_GetTick>
 80031d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	079f      	lsls	r7, r3, #30
 80031da:	d4ec      	bmi.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7ff fa4a 	bl	8002674 <HAL_GetTick>
 80031e0:	1b80      	subs	r0, r0, r6
 80031e2:	2802      	cmp	r0, #2
 80031e4:	d9f7      	bls.n	80031d6 <HAL_RCC_OscConfig+0x11a>
 80031e6:	e7ab      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80031e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031ea:	f7ff fa43 	bl	8002674 <HAL_GetTick>
 80031ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	0798      	lsls	r0, r3, #30
 80031f4:	f57f af6e 	bpl.w	80030d4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa3c 	bl	8002674 <HAL_GetTick>
 80031fc:	1b80      	subs	r0, r0, r6
 80031fe:	2802      	cmp	r0, #2
 8003200:	d9f6      	bls.n	80031f0 <HAL_RCC_OscConfig+0x134>
 8003202:	e79d      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003204:	69aa      	ldr	r2, [r5, #24]
 8003206:	4c4a      	ldr	r4, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <HAL_RCC_OscConfig+0x27c>)
 800320a:	b1da      	cbz	r2, 8003244 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003210:	f7ff fa30 	bl	8002674 <HAL_GetTick>
 8003214:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003218:	079b      	lsls	r3, r3, #30
 800321a:	d50d      	bpl.n	8003238 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800321c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_RCC_OscConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	fbb3 f3f2 	udiv	r3, r3, r2
 8003228:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800322a:	bf00      	nop
  }
  while (Delay --);
 800322c:	9b01      	ldr	r3, [sp, #4]
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f9      	bne.n	800322a <HAL_RCC_OscConfig+0x16e>
 8003236:	e751      	b.n	80030dc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7ff fa1c 	bl	8002674 <HAL_GetTick>
 800323c:	1b80      	subs	r0, r0, r6
 800323e:	2802      	cmp	r0, #2
 8003240:	d9e9      	bls.n	8003216 <HAL_RCC_OscConfig+0x15a>
 8003242:	e77d      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8003244:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003246:	f7ff fa15 	bl	8002674 <HAL_GetTick>
 800324a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800324e:	079f      	lsls	r7, r3, #30
 8003250:	f57f af44 	bpl.w	80030dc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7ff fa0e 	bl	8002674 <HAL_GetTick>
 8003258:	1b80      	subs	r0, r0, r6
 800325a:	2802      	cmp	r0, #2
 800325c:	d9f6      	bls.n	800324c <HAL_RCC_OscConfig+0x190>
 800325e:	e76f      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003260:	4c33      	ldr	r4, [pc, #204]	; (8003330 <HAL_RCC_OscConfig+0x274>)
 8003262:	69e3      	ldr	r3, [r4, #28]
 8003264:	00d8      	lsls	r0, r3, #3
 8003266:	d424      	bmi.n	80032b2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003268:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	69e3      	ldr	r3, [r4, #28]
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	61e3      	str	r3, [r4, #28]
 8003272:	69e3      	ldr	r3, [r4, #28]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4e30      	ldr	r6, [pc, #192]	; (8003340 <HAL_RCC_OscConfig+0x284>)
 800327e:	6833      	ldr	r3, [r6, #0]
 8003280:	05d9      	lsls	r1, r3, #23
 8003282:	d518      	bpl.n	80032b6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003284:	68eb      	ldr	r3, [r5, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d126      	bne.n	80032d8 <HAL_RCC_OscConfig+0x21c>
 800328a:	6a23      	ldr	r3, [r4, #32]
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003292:	f7ff f9ef 	bl	8002674 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800329a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	6a23      	ldr	r3, [r4, #32]
 800329e:	079b      	lsls	r3, r3, #30
 80032a0:	d53f      	bpl.n	8003322 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	f43f af1e 	beq.w	80030e4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	69e3      	ldr	r3, [r4, #28]
 80032aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ae:	61e3      	str	r3, [r4, #28]
 80032b0:	e718      	b.n	80030e4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2700      	movs	r7, #0
 80032b4:	e7e2      	b.n	800327c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b6:	6833      	ldr	r3, [r6, #0]
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80032be:	f7ff f9d9 	bl	8002674 <HAL_GetTick>
 80032c2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	6833      	ldr	r3, [r6, #0]
 80032c6:	05da      	lsls	r2, r3, #23
 80032c8:	d4dc      	bmi.n	8003284 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7ff f9d3 	bl	8002674 <HAL_GetTick>
 80032ce:	eba0 0008 	sub.w	r0, r0, r8
 80032d2:	2864      	cmp	r0, #100	; 0x64
 80032d4:	d9f6      	bls.n	80032c4 <HAL_RCC_OscConfig+0x208>
 80032d6:	e733      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	b9ab      	cbnz	r3, 8003306 <HAL_RCC_OscConfig+0x24a>
 80032da:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6223      	str	r3, [r4, #32]
 80032e6:	6a23      	ldr	r3, [r4, #32]
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80032ee:	f7ff f9c1 	bl	8002674 <HAL_GetTick>
 80032f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	6a23      	ldr	r3, [r4, #32]
 80032f6:	0798      	lsls	r0, r3, #30
 80032f8:	d5d3      	bpl.n	80032a2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7ff f9bb 	bl	8002674 <HAL_GetTick>
 80032fe:	1b80      	subs	r0, r0, r6
 8003300:	4540      	cmp	r0, r8
 8003302:	d9f7      	bls.n	80032f4 <HAL_RCC_OscConfig+0x238>
 8003304:	e71c      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003306:	2b05      	cmp	r3, #5
 8003308:	6a23      	ldr	r3, [r4, #32]
 800330a:	d103      	bne.n	8003314 <HAL_RCC_OscConfig+0x258>
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	6223      	str	r3, [r4, #32]
 8003312:	e7ba      	b.n	800328a <HAL_RCC_OscConfig+0x1ce>
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6223      	str	r3, [r4, #32]
 800331a:	6a23      	ldr	r3, [r4, #32]
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	e7b6      	b.n	8003290 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7ff f9a7 	bl	8002674 <HAL_GetTick>
 8003326:	eba0 0008 	sub.w	r0, r0, r8
 800332a:	42b0      	cmp	r0, r6
 800332c:	d9b6      	bls.n	800329c <HAL_RCC_OscConfig+0x1e0>
 800332e:	e707      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
 8003330:	40021000 	.word	0x40021000
 8003334:	42420000 	.word	0x42420000
 8003338:	42420480 	.word	0x42420480
 800333c:	20000000 	.word	0x20000000
 8003340:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_RCC_OscConfig+0x334>)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	461c      	mov	r4, r3
 800334a:	f002 020c 	and.w	r2, r2, #12
 800334e:	2a08      	cmp	r2, #8
 8003350:	d03d      	beq.n	80033ce <HAL_RCC_OscConfig+0x312>
 8003352:	2300      	movs	r3, #0
 8003354:	4e27      	ldr	r6, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003358:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335a:	d12b      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800335c:	f7ff f98a 	bl	8002674 <HAL_GetTick>
 8003360:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	0199      	lsls	r1, r3, #6
 8003366:	d41f      	bmi.n	80033a8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003368:	6a2b      	ldr	r3, [r5, #32]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003370:	6862      	ldr	r2, [r4, #4]
 8003372:	68a9      	ldr	r1, [r5, #8]
 8003374:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003378:	430a      	orrs	r2, r1
 800337a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	430b      	orrs	r3, r1
 8003382:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003386:	4313      	orrs	r3, r2
 8003388:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800338a:	2301      	movs	r3, #1
 800338c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800338e:	f7ff f971 	bl	8002674 <HAL_GetTick>
 8003392:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	f53f aea8 	bmi.w	80030ec <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7ff f96a 	bl	8002674 <HAL_GetTick>
 80033a0:	1b40      	subs	r0, r0, r5
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d9f6      	bls.n	8003394 <HAL_RCC_OscConfig+0x2d8>
 80033a6:	e6cb      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7ff f964 	bl	8002674 <HAL_GetTick>
 80033ac:	1bc0      	subs	r0, r0, r7
 80033ae:	2802      	cmp	r0, #2
 80033b0:	d9d7      	bls.n	8003362 <HAL_RCC_OscConfig+0x2a6>
 80033b2:	e6c5      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80033b4:	f7ff f95e 	bl	8002674 <HAL_GetTick>
 80033b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	019b      	lsls	r3, r3, #6
 80033be:	f57f ae95 	bpl.w	80030ec <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7ff f957 	bl	8002674 <HAL_GetTick>
 80033c6:	1b40      	subs	r0, r0, r5
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d9f6      	bls.n	80033ba <HAL_RCC_OscConfig+0x2fe>
 80033cc:	e6b8      	b.n	8003140 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ce:	2801      	cmp	r0, #1
 80033d0:	f43f aeb7 	beq.w	8003142 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80033d4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	6a2b      	ldr	r3, [r5, #32]
 80033d8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80033dc:	429a      	cmp	r2, r3
 80033de:	f47f ae71 	bne.w	80030c4 <HAL_RCC_OscConfig+0x8>
 80033e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80033e8:	1ac0      	subs	r0, r0, r3
 80033ea:	bf18      	it	ne
 80033ec:	2001      	movne	r0, #1
 80033ee:	e6a8      	b.n	8003142 <HAL_RCC_OscConfig+0x86>
 80033f0:	40021000 	.word	0x40021000
 80033f4:	42420060 	.word	0x42420060

080033f8 <HAL_RCC_GetSysClockFreq>:
{
 80033f8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80033fc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033fe:	ac02      	add	r4, sp, #8
 8003400:	f103 0510 	add.w	r5, r3, #16
 8003404:	4622      	mov	r2, r4
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	3308      	adds	r3, #8
 800340c:	c203      	stmia	r2!, {r0, r1}
 800340e:	42ab      	cmp	r3, r5
 8003410:	4614      	mov	r4, r2
 8003412:	d1f7      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003414:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003418:	4911      	ldr	r1, [pc, #68]	; (8003460 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800341a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800341e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003420:	f003 020c 	and.w	r2, r3, #12
 8003424:	2a08      	cmp	r2, #8
 8003426:	d117      	bne.n	8003458 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003428:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800342c:	a806      	add	r0, sp, #24
 800342e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003430:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003432:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003436:	d50c      	bpl.n	8003452 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003438:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800343a:	480a      	ldr	r0, [pc, #40]	; (8003464 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800343c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003440:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003442:	aa06      	add	r2, sp, #24
 8003444:	4413      	add	r3, r2
 8003446:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800344e:	b007      	add	sp, #28
 8003450:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <HAL_RCC_GetSysClockFreq+0x70>)
 8003454:	4350      	muls	r0, r2
 8003456:	e7fa      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800345a:	e7f8      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x56>
 800345c:	080051d4 	.word	0x080051d4
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	003d0900 	.word	0x003d0900

0800346c <HAL_RCC_ClockConfig>:
{
 800346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003470:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003472:	4604      	mov	r4, r0
 8003474:	b910      	cbnz	r0, 800347c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003476:	2001      	movs	r0, #1
}
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4a44      	ldr	r2, [pc, #272]	; (8003590 <HAL_RCC_ClockConfig+0x124>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	428b      	cmp	r3, r1
 8003486:	d328      	bcc.n	80034da <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	6821      	ldr	r1, [r4, #0]
 800348a:	078e      	lsls	r6, r1, #30
 800348c:	d430      	bmi.n	80034f0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348e:	07ca      	lsls	r2, r1, #31
 8003490:	d443      	bmi.n	800351a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003492:	4a3f      	ldr	r2, [pc, #252]	; (8003590 <HAL_RCC_ClockConfig+0x124>)
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	42ab      	cmp	r3, r5
 800349c:	d865      	bhi.n	800356a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	4d3c      	ldr	r5, [pc, #240]	; (8003594 <HAL_RCC_ClockConfig+0x128>)
 80034a2:	f012 0f04 	tst.w	r2, #4
 80034a6:	d16c      	bne.n	8003582 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	0713      	lsls	r3, r2, #28
 80034aa:	d506      	bpl.n	80034ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ac:	686b      	ldr	r3, [r5, #4]
 80034ae:	6922      	ldr	r2, [r4, #16]
 80034b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034b8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ba:	f7ff ff9d 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80034be:	686b      	ldr	r3, [r5, #4]
 80034c0:	4a35      	ldr	r2, [pc, #212]	; (8003598 <HAL_RCC_ClockConfig+0x12c>)
 80034c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	40d8      	lsrs	r0, r3
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_ClockConfig+0x130>)
 80034cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_ClockConfig+0x134>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f7fe ff9d 	bl	8002410 <HAL_InitTick>
  return HAL_OK;
 80034d6:	2000      	movs	r0, #0
 80034d8:	e7ce      	b.n	8003478 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e4:	6813      	ldr	r3, [r2, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	428b      	cmp	r3, r1
 80034ec:	d1c3      	bne.n	8003476 <HAL_RCC_ClockConfig+0xa>
 80034ee:	e7cb      	b.n	8003488 <HAL_RCC_ClockConfig+0x1c>
 80034f0:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f6:	bf1e      	ittt	ne
 80034f8:	685a      	ldrne	r2, [r3, #4]
 80034fa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80034fe:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003502:	bf42      	ittt	mi
 8003504:	685a      	ldrmi	r2, [r3, #4]
 8003506:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800350a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68a0      	ldr	r0, [r4, #8]
 8003510:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003514:	4302      	orrs	r2, r0
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	e7b9      	b.n	800348e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	6862      	ldr	r2, [r4, #4]
 800351c:	4e1d      	ldr	r6, [pc, #116]	; (8003594 <HAL_RCC_ClockConfig+0x128>)
 800351e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003520:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	d11a      	bne.n	800355a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003524:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	d0a5      	beq.n	8003476 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800352c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003530:	f023 0303 	bic.w	r3, r3, #3
 8003534:	4313      	orrs	r3, r2
 8003536:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003538:	f7ff f89c 	bl	8002674 <HAL_GetTick>
 800353c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	6873      	ldr	r3, [r6, #4]
 8003540:	6862      	ldr	r2, [r4, #4]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800354a:	d0a2      	beq.n	8003492 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7ff f892 	bl	8002674 <HAL_GetTick>
 8003550:	1bc0      	subs	r0, r0, r7
 8003552:	4540      	cmp	r0, r8
 8003554:	d9f3      	bls.n	800353e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003556:	2003      	movs	r0, #3
 8003558:	e78e      	b.n	8003478 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	2a02      	cmp	r2, #2
 800355c:	d102      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003562:	e7e1      	b.n	8003528 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	f013 0f02 	tst.w	r3, #2
 8003568:	e7de      	b.n	8003528 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	f023 0307 	bic.w	r3, r3, #7
 8003570:	432b      	orrs	r3, r5
 8003572:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	42ab      	cmp	r3, r5
 800357c:	f47f af7b 	bne.w	8003476 <HAL_RCC_ClockConfig+0xa>
 8003580:	e78d      	b.n	800349e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003582:	686b      	ldr	r3, [r5, #4]
 8003584:	68e1      	ldr	r1, [r4, #12]
 8003586:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800358a:	430b      	orrs	r3, r1
 800358c:	606b      	str	r3, [r5, #4]
 800358e:	e78b      	b.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
 8003590:	40022000 	.word	0x40022000
 8003594:	40021000 	.word	0x40021000
 8003598:	0800522c 	.word	0x0800522c
 800359c:	20000000 	.word	0x20000000
 80035a0:	20000008 	.word	0x20000008

080035a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80035b2:	6810      	ldr	r0, [r2, #0]
}
 80035b4:	40d8      	lsrs	r0, r3
 80035b6:	4770      	bx	lr
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800523c 	.word	0x0800523c
 80035c0:	20000000 	.word	0x20000000

080035c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035d2:	6810      	ldr	r0, [r2, #0]
}
 80035d4:	40d8      	lsrs	r0, r3
 80035d6:	4770      	bx	lr
 80035d8:	40021000 	.word	0x40021000
 80035dc:	0800523c 	.word	0x0800523c
 80035e0:	20000000 	.word	0x20000000

080035e4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035e4:	230f      	movs	r3, #15
 80035e6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_GetClockConfig+0x34>)
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	f002 0203 	and.w	r2, r2, #3
 80035f0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80035f8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003600:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800360a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_RCC_GetClockConfig+0x38>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	600b      	str	r3, [r1, #0]
}
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	40022000 	.word	0x40022000

08003620 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003620:	6803      	ldr	r3, [r0, #0]
{
 8003622:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003626:	07d9      	lsls	r1, r3, #31
{
 8003628:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800362a:	d520      	bpl.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4c35      	ldr	r4, [pc, #212]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800362e:	69e3      	ldr	r3, [r4, #28]
 8003630:	00da      	lsls	r2, r3, #3
 8003632:	d432      	bmi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003634:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	69e3      	ldr	r3, [r4, #28]
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	61e3      	str	r3, [r4, #28]
 800363e:	69e3      	ldr	r3, [r4, #28]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4e2f      	ldr	r6, [pc, #188]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800364a:	6833      	ldr	r3, [r6, #0]
 800364c:	05db      	lsls	r3, r3, #23
 800364e:	d526      	bpl.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003650:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003652:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003656:	d136      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003658:	6a23      	ldr	r3, [r4, #32]
 800365a:	686a      	ldr	r2, [r5, #4]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	4313      	orrs	r3, r2
 8003662:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003664:	b11f      	cbz	r7, 800366e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003666:	69e3      	ldr	r3, [r4, #28]
 8003668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800366e:	6828      	ldr	r0, [r5, #0]
 8003670:	0783      	lsls	r3, r0, #30
 8003672:	d506      	bpl.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003676:	68a9      	ldr	r1, [r5, #8]
 8003678:	6853      	ldr	r3, [r2, #4]
 800367a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800367e:	430b      	orrs	r3, r1
 8003680:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003682:	f010 0010 	ands.w	r0, r0, #16
 8003686:	d01b      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800368a:	68e9      	ldr	r1, [r5, #12]
 800368c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800368e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003690:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003694:	430b      	orrs	r3, r1
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	e012      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2700      	movs	r7, #0
 800369c:	e7d4      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	6833      	ldr	r3, [r6, #0]
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80036a6:	f7fe ffe5 	bl	8002674 <HAL_GetTick>
 80036aa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	6833      	ldr	r3, [r6, #0]
 80036ae:	05d8      	lsls	r0, r3, #23
 80036b0:	d4ce      	bmi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe ffdf 	bl	8002674 <HAL_GetTick>
 80036b6:	eba0 0008 	sub.w	r0, r0, r8
 80036ba:	2864      	cmp	r0, #100	; 0x64
 80036bc:	d9f6      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80036be:	2003      	movs	r0, #3
}
 80036c0:	b002      	add	sp, #8
 80036c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c6:	686a      	ldr	r2, [r5, #4]
 80036c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0c3      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	2001      	movs	r0, #1
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036de:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80036e0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e2:	07d9      	lsls	r1, r3, #31
 80036e4:	d5b8      	bpl.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80036e6:	f7fe ffc5 	bl	8002674 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80036ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	6a23      	ldr	r3, [r4, #32]
 80036f2:	079a      	lsls	r2, r3, #30
 80036f4:	d4b0      	bmi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fe ffbd 	bl	8002674 <HAL_GetTick>
 80036fa:	1b80      	subs	r0, r0, r6
 80036fc:	4540      	cmp	r0, r8
 80036fe:	d9f7      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003700:	e7dd      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	42420440 	.word	0x42420440

08003710 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003714:	2b01      	cmp	r3, #1
 8003716:	d11c      	bne.n	8003752 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	4293      	cmp	r3, r2
 8003724:	d00a      	beq.n	800373c <HAL_TIM_Base_Start+0x2c>
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d007      	beq.n	800373c <HAL_TIM_Base_Start+0x2c>
 800372c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <HAL_TIM_Base_Start+0x2c>
 8003734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003738:	4293      	cmp	r3, r2
 800373a:	d104      	bne.n	8003746 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	2a06      	cmp	r2, #6
 8003744:	d003      	beq.n	800374e <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2000      	movs	r0, #0
}
 8003750:	4770      	bx	lr
    return HAL_ERROR;
 8003752:	2001      	movs	r0, #1
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00

0800375c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003760:	2b01      	cmp	r3, #1
 8003762:	d120      	bne.n	80037a6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800376a:	6803      	ldr	r3, [r0, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <HAL_TIM_Base_Start_IT+0x50>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00a      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x34>
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d007      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x34>
 8003780:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x34>
 8003788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800378c:	4293      	cmp	r3, r2
 800378e:	d104      	bne.n	800379a <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	2a06      	cmp	r2, #6
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2000      	movs	r0, #0
}
 80037a4:	4770      	bx	lr
    return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_IC_CaptureCallback>:
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_TriggerCallback>:
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	6803      	ldr	r3, [r0, #0]
{
 80037ba:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037bc:	691a      	ldr	r2, [r3, #16]
{
 80037be:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c0:	0791      	lsls	r1, r2, #30
 80037c2:	d50e      	bpl.n	80037e2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	0792      	lsls	r2, r2, #30
 80037c8:	d50b      	bpl.n	80037e2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ca:	f06f 0202 	mvn.w	r2, #2
 80037ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d0:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d6:	079b      	lsls	r3, r3, #30
 80037d8:	d077      	beq.n	80038ca <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037da:	f7ff ffea 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	2300      	movs	r3, #0
 80037e0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	0750      	lsls	r0, r2, #29
 80037e8:	d510      	bpl.n	800380c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	0751      	lsls	r1, r2, #29
 80037ee:	d50d      	bpl.n	800380c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f0:	f06f 0204 	mvn.w	r2, #4
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f6:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037fc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003800:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003802:	d068      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003804:	f7ff ffd5 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003808:	2300      	movs	r3, #0
 800380a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	0712      	lsls	r2, r2, #28
 8003812:	d50f      	bpl.n	8003834 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	0710      	lsls	r0, r2, #28
 8003818:	d50c      	bpl.n	8003834 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381a:	f06f 0208 	mvn.w	r2, #8
 800381e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003820:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003822:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003824:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003826:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003828:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382a:	d05a      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800382c:	f7ff ffc1 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	2300      	movs	r3, #0
 8003832:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	06d2      	lsls	r2, r2, #27
 800383a:	d510      	bpl.n	800385e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	06d0      	lsls	r0, r2, #27
 8003840:	d50d      	bpl.n	800385e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003842:	f06f 0210 	mvn.w	r2, #16
 8003846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003848:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	d04b      	beq.n	80038ee <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	f7ff ffac 	bl	80037b2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	2300      	movs	r3, #0
 800385c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	07d1      	lsls	r1, r2, #31
 8003864:	d508      	bpl.n	8003878 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	07d2      	lsls	r2, r2, #31
 800386a:	d505      	bpl.n	8003878 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800386c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003870:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003872:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003874:	f7fe f894 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	0610      	lsls	r0, r2, #24
 800387e:	d508      	bpl.n	8003892 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	0611      	lsls	r1, r2, #24
 8003884:	d505      	bpl.n	8003892 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003886:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800388c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800388e:	f000 f96a 	bl	8003b66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	0652      	lsls	r2, r2, #25
 8003898:	d508      	bpl.n	80038ac <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	0650      	lsls	r0, r2, #25
 800389e:	d505      	bpl.n	80038ac <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038a8:	f7ff ff85 	bl	80037b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	0691      	lsls	r1, r2, #26
 80038b2:	d522      	bpl.n	80038fa <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	0692      	lsls	r2, r2, #26
 80038b8:	d51f      	bpl.n	80038fa <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ba:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038be:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80038c6:	f000 b94d 	b.w	8003b64 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	f7ff ff71 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff ff70 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038d4:	e783      	b.n	80037de <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	f7ff ff6b 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038da:	4620      	mov	r0, r4
 80038dc:	f7ff ff6a 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038e0:	e792      	b.n	8003808 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	f7ff ff65 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7ff ff64 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038ec:	e7a0      	b.n	8003830 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	f7ff ff5f 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff5e 	bl	80037b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80038f8:	e7af      	b.n	800385a <HAL_TIM_IRQHandler+0xa2>
}
 80038fa:	bd10      	pop	{r4, pc}

080038fc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80038fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	4290      	cmp	r0, r2
 8003902:	d00a      	beq.n	800391a <TIM_Base_SetConfig+0x1e>
 8003904:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x1e>
 800390a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800390e:	4290      	cmp	r0, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x1e>
 8003912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003916:	4290      	cmp	r0, r2
 8003918:	d115      	bne.n	8003946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800391a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003920:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <TIM_Base_SetConfig+0x6c>)
 8003924:	4290      	cmp	r0, r2
 8003926:	d00a      	beq.n	800393e <TIM_Base_SetConfig+0x42>
 8003928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0x42>
 800392e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003932:	4290      	cmp	r0, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0x42>
 8003936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800393a:	4290      	cmp	r0, r2
 800393c:	d103      	bne.n	8003946 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003944:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003946:	694a      	ldr	r2, [r1, #20]
 8003948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800394e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	688b      	ldr	r3, [r1, #8]
 8003952:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003954:	680b      	ldr	r3, [r1, #0]
 8003956:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <TIM_Base_SetConfig+0x6c>)
 800395a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800395c:	bf04      	itt	eq
 800395e:	690b      	ldreq	r3, [r1, #16]
 8003960:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003962:	2301      	movs	r3, #1
 8003964:	6143      	str	r3, [r0, #20]
}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00

0800396c <HAL_TIM_Base_Init>:
{
 800396c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800396e:	4604      	mov	r4, r0
 8003970:	b330      	cbz	r0, 80039c0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003976:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800397a:	b91b      	cbnz	r3, 8003984 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800397c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003980:	f7fe fde6 	bl	8002550 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003986:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	1d21      	adds	r1, r4, #4
 800398e:	f7ff ffb5 	bl	80038fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003992:	2301      	movs	r3, #1
  return HAL_OK;
 8003994:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003996:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800399e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80039a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80039a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80039b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80039be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
 80039c2:	e7fc      	b.n	80039be <HAL_TIM_Base_Init+0x52>

080039c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039c4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80039d2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d4:	6083      	str	r3, [r0, #8]
}
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80039d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80039de:	2b01      	cmp	r3, #1
{
 80039e0:	4604      	mov	r4, r0
 80039e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80039e6:	d019      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0x44>
 80039e8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80039ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80039f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80039fe:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a00:	680b      	ldr	r3, [r1, #0]
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d065      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a06:	d815      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x5c>
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d00c      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x4e>
 8003a0c:	d807      	bhi.n	8003a1e <HAL_TIM_ConfigClockSource+0x46>
 8003a0e:	b153      	cbz	r3, 8003a26 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a12:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d001      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x4e>
 8003a22:	2b30      	cmp	r3, #48	; 0x30
 8003a24:	d1f4      	bne.n	8003a10 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8003a26:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a28:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a30:	4313      	orrs	r3, r2
 8003a32:	e01a      	b.n	8003a6a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003a34:	2b60      	cmp	r3, #96	; 0x60
 8003a36:	d034      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xca>
 8003a38:	d819      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x96>
 8003a3a:	2b50      	cmp	r3, #80	; 0x50
 8003a3c:	d1e8      	bne.n	8003a10 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	684a      	ldr	r2, [r1, #4]
 8003a40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a44:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a46:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4a:	f025 0501 	bic.w	r5, r5, #1
 8003a4e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a50:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003a52:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a58:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003a5c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a5e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a66:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003a6a:	6083      	str	r3, [r0, #8]
 8003a6c:	e7d0      	b.n	8003a10 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003a6e:	2b70      	cmp	r3, #112	; 0x70
 8003a70:	d00c      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xb4>
 8003a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a76:	d1cb      	bne.n	8003a10 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	68cb      	ldr	r3, [r1, #12]
 8003a7a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a7e:	f7ff ffa1 	bl	80039c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6893      	ldr	r3, [r2, #8]
 8003a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8a:	e008      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	68cb      	ldr	r3, [r1, #12]
 8003a8e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a92:	f7ff ff97 	bl	80039c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9e:	6093      	str	r3, [r2, #8]
      break;
 8003aa0:	e7b6      	b.n	8003a10 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa2:	684d      	ldr	r5, [r1, #4]
 8003aa4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa6:	6a01      	ldr	r1, [r0, #32]
 8003aa8:	f021 0110 	bic.w	r1, r1, #16
 8003aac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ab0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003abe:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ac6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003acc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003ad0:	e7cb      	b.n	8003a6a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ad6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ada:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	f025 0501 	bic.w	r5, r5, #1
 8003ae2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003ae6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003af0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003af2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003af4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003afe:	e7b4      	b.n	8003a6a <HAL_TIM_ConfigClockSource+0x92>

08003b00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003b04:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f04f 0302 	mov.w	r3, #2
 8003b0c:	d025      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8003b0e:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b14:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b16:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003b18:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8003b1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b1e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b22:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003b24:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b26:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	4c0d      	ldr	r4, [pc, #52]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	d00a      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d007      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003b34:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003b3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d104      	bne.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b44:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	2300      	movs	r3, #0
 8003b56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b5a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b5c:	bd30      	pop	{r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <HAL_TIMEx_CommutCallback>:
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIMEx_BreakCallback>:
 8003b66:	4770      	bx	lr

08003b68 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b68:	6803      	ldr	r3, [r0, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b70:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003b80:	4770      	bx	lr
	...

08003b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b84:	b510      	push	{r4, lr}
 8003b86:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b88:	6803      	ldr	r3, [r0, #0]
 8003b8a:	68c1      	ldr	r1, [r0, #12]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003b92:	430a      	orrs	r2, r1
 8003b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b96:	6882      	ldr	r2, [r0, #8]
 8003b98:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003b9a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b9c:	4302      	orrs	r2, r0
 8003b9e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003ba4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ba8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	69a1      	ldr	r1, [r4, #24]
 8003bb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <UART_SetConfig+0x70>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d115      	bne.n	8003bec <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7ff fd00 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc4:	2319      	movs	r3, #25
 8003bc6:	4358      	muls	r0, r3
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	2264      	movs	r2, #100	; 0x64
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	fbb0 f0f3 	udiv	r0, r0, r3
 8003bd2:	fbb0 f1f2 	udiv	r1, r0, r2
 8003bd6:	fb02 0311 	mls	r3, r2, r1, r0
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	3332      	adds	r3, #50	; 0x32
 8003bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8003be2:	6824      	ldr	r4, [r4, #0]
 8003be4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003be8:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bea:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7ff fcda 	bl	80035a4 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	e7e8      	b.n	8003bc4 <UART_SetConfig+0x40>
 8003bf2:	bf00      	nop
 8003bf4:	40013800 	.word	0x40013800

08003bf8 <HAL_UART_Init>:
{
 8003bf8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	b340      	cbz	r0, 8003c50 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003c02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c06:	b91b      	cbnz	r3, 8003c10 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003c08:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003c0c:	f7fe fcd0 	bl	80025b0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c10:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003c12:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003c18:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c1a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c20:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c22:	f7ff ffaf 	bl	8003b84 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c38:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c40:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003c4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e7fc      	b.n	8003c4e <HAL_UART_Init+0x56>

08003c54 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c54:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d120      	bne.n	8003c9e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003c5c:	b1e9      	cbz	r1, 8003c9a <HAL_UART_Receive_IT+0x46>
 8003c5e:	b1e2      	cbz	r2, 8003c9a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003c60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d01a      	beq.n	8003c9e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8003c68:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8003c6a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c6e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c72:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c76:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003c78:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c7a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8003c7c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c84:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c86:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8003c88:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c8a:	f041 0101 	orr.w	r1, r1, #1
 8003c8e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c90:	68d1      	ldr	r1, [r2, #12]
 8003c92:	f041 0120 	orr.w	r1, r1, #32
 8003c96:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003c98:	4770      	bx	lr
      return HAL_ERROR;
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	4770      	bx	lr
    return HAL_BUSY;
 8003c9e:	2002      	movs	r0, #2
}
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_UART_TxCpltCallback>:
 8003ca2:	4770      	bx	lr

08003ca4 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ca4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8003ca8:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003caa:	2b22      	cmp	r3, #34	; 0x22
 8003cac:	d132      	bne.n	8003d14 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cae:	6881      	ldr	r1, [r0, #8]
 8003cb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003cb2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003cb6:	6802      	ldr	r2, [r0, #0]
 8003cb8:	d120      	bne.n	8003cfc <UART_Receive_IT+0x58>
 8003cba:	6901      	ldr	r1, [r0, #16]
 8003cbc:	bb09      	cbnz	r1, 8003d02 <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cbe:	6852      	ldr	r2, [r2, #4]
 8003cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc4:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8003cc8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8003cca:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003ccc:	3c01      	subs	r4, #1
 8003cce:	b2a4      	uxth	r4, r4
 8003cd0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003cd2:	b98c      	cbnz	r4, 8003cf8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd4:	6803      	ldr	r3, [r0, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	f022 0220 	bic.w	r2, r2, #32
 8003cdc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003cf4:	f7fd fe42 	bl	800197c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	e00c      	b.n	8003d16 <UART_Receive_IT+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfc:	b931      	cbnz	r1, 8003d0c <UART_Receive_IT+0x68>
 8003cfe:	6901      	ldr	r1, [r0, #16]
 8003d00:	b921      	cbnz	r1, 8003d0c <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d02:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d04:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003d06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d08:	3301      	adds	r3, #1
 8003d0a:	e7dd      	b.n	8003cc8 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d12:	e7f7      	b.n	8003d04 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8003d14:	2002      	movs	r0, #2
}
 8003d16:	bd10      	pop	{r4, pc}

08003d18 <HAL_UART_ErrorCallback>:
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d1c:	6803      	ldr	r3, [r0, #0]
{
 8003d1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d20:	681a      	ldr	r2, [r3, #0]
{
 8003d22:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003d24:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d26:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d28:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003d2a:	d107      	bne.n	8003d3c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d2c:	0696      	lsls	r6, r2, #26
 8003d2e:	d55a      	bpl.n	8003de6 <HAL_UART_IRQHandler+0xca>
 8003d30:	068d      	lsls	r5, r1, #26
 8003d32:	d558      	bpl.n	8003de6 <HAL_UART_IRQHandler+0xca>
}
 8003d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003d38:	f7ff bfb4 	b.w	8003ca4 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d3c:	f015 0501 	ands.w	r5, r5, #1
 8003d40:	d102      	bne.n	8003d48 <HAL_UART_IRQHandler+0x2c>
 8003d42:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003d46:	d04e      	beq.n	8003de6 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d48:	07d0      	lsls	r0, r2, #31
 8003d4a:	d505      	bpl.n	8003d58 <HAL_UART_IRQHandler+0x3c>
 8003d4c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d4e:	bf42      	ittt	mi
 8003d50:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8003d52:	f043 0301 	orrmi.w	r3, r3, #1
 8003d56:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d58:	0756      	lsls	r6, r2, #29
 8003d5a:	d504      	bpl.n	8003d66 <HAL_UART_IRQHandler+0x4a>
 8003d5c:	b11d      	cbz	r5, 8003d66 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d66:	0790      	lsls	r0, r2, #30
 8003d68:	d504      	bpl.n	8003d74 <HAL_UART_IRQHandler+0x58>
 8003d6a:	b11d      	cbz	r5, 8003d74 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d74:	0713      	lsls	r3, r2, #28
 8003d76:	d506      	bpl.n	8003d86 <HAL_UART_IRQHandler+0x6a>
 8003d78:	068e      	lsls	r6, r1, #26
 8003d7a:	d400      	bmi.n	8003d7e <HAL_UART_IRQHandler+0x62>
 8003d7c:	b11d      	cbz	r5, 8003d86 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d88:	b343      	cbz	r3, 8003ddc <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8a:	0695      	lsls	r5, r2, #26
 8003d8c:	d504      	bpl.n	8003d98 <HAL_UART_IRQHandler+0x7c>
 8003d8e:	0688      	lsls	r0, r1, #26
 8003d90:	d502      	bpl.n	8003d98 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff ff86 	bl	8003ca4 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d98:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003d9a:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003da0:	0711      	lsls	r1, r2, #28
 8003da2:	d402      	bmi.n	8003daa <HAL_UART_IRQHandler+0x8e>
 8003da4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003da8:	d019      	beq.n	8003dde <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003daa:	f7ff fedd 	bl	8003b68 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	0652      	lsls	r2, r2, #25
 8003db4:	d50f      	bpl.n	8003dd6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003db8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003dc0:	b148      	cbz	r0, 8003dd6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_UART_IRQHandler+0x13c>)
 8003dc4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc6:	f7fe ffa1 	bl	8002d0c <HAL_DMA_Abort_IT>
 8003dca:	b138      	cbz	r0, 8003ddc <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dcc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dd4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff ff9e 	bl	8003d18 <HAL_UART_ErrorCallback>
}
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003dde:	f7ff ff9b 	bl	8003d18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de2:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003de4:	e7fa      	b.n	8003ddc <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003de6:	0616      	lsls	r6, r2, #24
 8003de8:	d526      	bpl.n	8003e38 <HAL_UART_IRQHandler+0x11c>
 8003dea:	060d      	lsls	r5, r1, #24
 8003dec:	d524      	bpl.n	8003e38 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dee:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003df2:	2a21      	cmp	r2, #33	; 0x21
 8003df4:	d1f2      	bne.n	8003ddc <HAL_UART_IRQHandler+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df6:	68a1      	ldr	r1, [r4, #8]
 8003df8:	6a22      	ldr	r2, [r4, #32]
 8003dfa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003dfe:	d116      	bne.n	8003e2e <HAL_UART_IRQHandler+0x112>
 8003e00:	6921      	ldr	r1, [r4, #16]
 8003e02:	b9a1      	cbnz	r1, 8003e2e <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e04:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003e08:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003e0c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8003e10:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003e12:	3a01      	subs	r2, #1
 8003e14:	b292      	uxth	r2, r2
 8003e16:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	d1df      	bne.n	8003ddc <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e22:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	e7d6      	b.n	8003ddc <HAL_UART_IRQHandler+0xc0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e2e:	1c51      	adds	r1, r2, #1
 8003e30:	6221      	str	r1, [r4, #32]
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e7eb      	b.n	8003e10 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e38:	0650      	lsls	r0, r2, #25
 8003e3a:	d5cf      	bpl.n	8003ddc <HAL_UART_IRQHandler+0xc0>
 8003e3c:	064a      	lsls	r2, r1, #25
 8003e3e:	d5cd      	bpl.n	8003ddc <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e40:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003e42:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003e50:	f7ff ff27 	bl	8003ca2 <HAL_UART_TxCpltCallback>
 8003e54:	e7c2      	b.n	8003ddc <HAL_UART_IRQHandler+0xc0>
 8003e56:	bf00      	nop
 8003e58:	08003e5d 	.word	0x08003e5d

08003e5c <UART_DMAAbortOnError>:
{
 8003e5c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003e5e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e60:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003e62:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e64:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003e66:	f7ff ff57 	bl	8003d18 <HAL_UART_ErrorCallback>
}
 8003e6a:	bd08      	pop	{r3, pc}

08003e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e6c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003e6e:	f000 fa3d 	bl	80042ec <vTaskStartScheduler>
  
  return osOK;
}
 8003e72:	2000      	movs	r0, #0
 8003e74:	bd08      	pop	{r3, pc}

08003e76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e76:	b570      	push	{r4, r5, r6, lr}
 8003e78:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e7a:	6946      	ldr	r6, [r0, #20]
{
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	e9d0 1000 	ldrd	r1, r0, [r0]
 8003e82:	b086      	sub	sp, #24
 8003e84:	692a      	ldr	r2, [r5, #16]
 8003e86:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e8a:	b176      	cbz	r6, 8003eaa <osThreadCreate+0x34>
 8003e8c:	69ad      	ldr	r5, [r5, #24]
 8003e8e:	b165      	cbz	r5, 8003eaa <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003e90:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e92:	bf0c      	ite	eq
 8003e94:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8003e96:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e98:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8003e9c:	9400      	str	r4, [sp, #0]
 8003e9e:	f000 f9c1 	bl	8004224 <xTaskCreateStatic>
 8003ea2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ea4:	9805      	ldr	r0, [sp, #20]
}
 8003ea6:	b006      	add	sp, #24
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003eaa:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eac:	bf0c      	ite	eq
 8003eae:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8003eb0:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eb2:	ad05      	add	r5, sp, #20
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	e9cd 4500 	strd	r4, r5, [sp]
 8003eba:	f000 f9ea 	bl	8004292 <xTaskCreate>
 8003ebe:	2801      	cmp	r0, #1
 8003ec0:	d0f0      	beq.n	8003ea4 <osThreadCreate+0x2e>
      return NULL;
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e7ef      	b.n	8003ea6 <osThreadCreate+0x30>

08003ec6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ec6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	bf08      	it	eq
 8003ecc:	2001      	moveq	r0, #1
 8003ece:	f000 fb53 	bl	8004578 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bd08      	pop	{r3, pc}

08003ed6 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eda:	f100 0308 	add.w	r3, r0, #8
 8003ede:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003eea:	4770      	bx	lr

08003eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ef0:	4770      	bx	lr

08003ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ef2:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ef4:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003ef6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ef8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003efe:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003f00:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f02:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003f04:	3301      	adds	r3, #1
 8003f06:	6003      	str	r3, [r0, #0]
}
 8003f08:	4770      	bx	lr

08003f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f0a:	680a      	ldr	r2, [r1, #0]
{
 8003f0c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f0e:	1c53      	adds	r3, r2, #1
 8003f10:	d10a      	bne.n	8003f28 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f12:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f18:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f1a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f1c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003f1e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f20:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003f22:	3301      	adds	r3, #1
 8003f24:	6003      	str	r3, [r0, #0]
}
 8003f26:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f28:	f100 0308 	add.w	r3, r0, #8
 8003f2c:	685c      	ldr	r4, [r3, #4]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	4295      	cmp	r5, r2
 8003f32:	d8ef      	bhi.n	8003f14 <vListInsert+0xa>
 8003f34:	4623      	mov	r3, r4
 8003f36:	e7f9      	b.n	8003f2c <vListInsert+0x22>

08003f38 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003f38:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f3a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003f3e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f40:	6882      	ldr	r2, [r0, #8]
 8003f42:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f48:	bf08      	it	eq
 8003f4a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	3a01      	subs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f56:	6818      	ldr	r0, [r3, #0]
}
 8003f58:	4770      	bx	lr
	...

08003f5c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f60:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f62:	f000 fbbf 	bl	80046e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8003f68:	4c2e      	ldr	r4, [pc, #184]	; (8004024 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4f2e      	ldr	r7, [pc, #184]	; (8004028 <prvAddNewTaskToReadyList+0xcc>)
 8003f6e:	3201      	adds	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	d148      	bne.n	800400a <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f78:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d11f      	bne.n	8003fc0 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f80:	f04f 0814 	mov.w	r8, #20
 8003f84:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f88:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f8a:	f7ff ffa4 	bl	8003ed6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f8e:	2d07      	cmp	r5, #7
 8003f90:	d1f8      	bne.n	8003f84 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f92:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004054 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8003f96:	4d25      	ldr	r5, [pc, #148]	; (800402c <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8003f98:	4640      	mov	r0, r8
 8003f9a:	f7ff ff9c 	bl	8003ed6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7ff ff99 	bl	8003ed6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fa4:	4822      	ldr	r0, [pc, #136]	; (8004030 <prvAddNewTaskToReadyList+0xd4>)
 8003fa6:	f7ff ff96 	bl	8003ed6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003faa:	4822      	ldr	r0, [pc, #136]	; (8004034 <prvAddNewTaskToReadyList+0xd8>)
 8003fac:	f7ff ff93 	bl	8003ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb0:	4821      	ldr	r0, [pc, #132]	; (8004038 <prvAddNewTaskToReadyList+0xdc>)
 8003fb2:	f7ff ff90 	bl	8003ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <prvAddNewTaskToReadyList+0xe0>)
 8003fb8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <prvAddNewTaskToReadyList+0xe4>)
 8003fbe:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 8003fc2:	4921      	ldr	r1, [pc, #132]	; (8004048 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8003fc4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fc6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003fc8:	3301      	adds	r3, #1
 8003fca:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fcc:	2301      	movs	r3, #1
 8003fce:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003fd0:	4093      	lsls	r3, r2
 8003fd2:	4303      	orrs	r3, r0
 8003fd4:	2014      	movs	r0, #20
 8003fd6:	600b      	str	r3, [r1, #0]
 8003fd8:	fb00 7002 	mla	r0, r0, r2, r7
 8003fdc:	1d31      	adds	r1, r6, #4
 8003fde:	f7ff ff88 	bl	8003ef2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003fe2:	f000 fba1 	bl	8004728 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <prvAddNewTaskToReadyList+0xf0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	b163      	cbz	r3, 8004006 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d207      	bcs.n	8004006 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <prvAddNewTaskToReadyList+0xf4>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	f3bf 8f6f 	isb	sy
}
 8004006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <prvAddNewTaskToReadyList+0xf0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1d6      	bne.n	8003fc0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004016:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004018:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800401a:	bf98      	it	ls
 800401c:	6026      	strls	r6, [r4, #0]
 800401e:	e7cf      	b.n	8003fc0 <prvAddNewTaskToReadyList+0x64>
 8004020:	20000400 	.word	0x20000400
 8004024:	20000368 	.word	0x20000368
 8004028:	20000374 	.word	0x20000374
 800402c:	2000042c 	.word	0x2000042c
 8004030:	20000448 	.word	0x20000448
 8004034:	20000474 	.word	0x20000474
 8004038:	20000460 	.word	0x20000460
 800403c:	2000036c 	.word	0x2000036c
 8004040:	20000370 	.word	0x20000370
 8004044:	20000410 	.word	0x20000410
 8004048:	20000414 	.word	0x20000414
 800404c:	2000045c 	.word	0x2000045c
 8004050:	e000ed04 	.word	0xe000ed04
 8004054:	20000418 	.word	0x20000418

08004058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004058:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800405a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 800405e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004060:	b93b      	cbnz	r3, 8004072 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004062:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004064:	f000 fcd0 	bl	8004a08 <vPortFree>
				vPortFree( pxTCB );
 8004068:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800406a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800406e:	f000 bccb 	b.w	8004a08 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004072:	2b01      	cmp	r3, #1
 8004074:	d0f9      	beq.n	800406a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004076:	2b02      	cmp	r3, #2
 8004078:	d008      	beq.n	800408c <prvDeleteTCB+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	e7fe      	b.n	800408a <prvDeleteTCB+0x32>
	}
 800408c:	bd10      	pop	{r4, pc}
	...

08004090 <prvIdleTask>:
{
 8004090:	b580      	push	{r7, lr}
				taskYIELD();
 8004092:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80040f0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004096:	4f12      	ldr	r7, [pc, #72]	; (80040e0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004098:	4c12      	ldr	r4, [pc, #72]	; (80040e4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800409a:	4d13      	ldr	r5, [pc, #76]	; (80040e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	b963      	cbnz	r3, 80040ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <prvIdleTask+0x5c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d9f8      	bls.n	800409a <prvIdleTask+0xa>
				taskYIELD();
 80040a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040ac:	f8c8 3000 	str.w	r3, [r8]
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	e7ee      	b.n	8004098 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80040ba:	f000 fb13 	bl	80046e4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c2:	1d30      	adds	r0, r6, #4
 80040c4:	f7ff ff38 	bl	8003f38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80040d4:	f000 fb28 	bl	8004728 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80040d8:	4630      	mov	r0, r6
 80040da:	f7ff ffbd 	bl	8004058 <prvDeleteTCB>
 80040de:	e7dd      	b.n	800409c <prvIdleTask+0xc>
 80040e0:	20000474 	.word	0x20000474
 80040e4:	20000404 	.word	0x20000404
 80040e8:	20000400 	.word	0x20000400
 80040ec:	20000374 	.word	0x20000374
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f4:	4a06      	ldr	r2, [pc, #24]	; (8004110 <prvResetNextTaskUnblockTime+0x1c>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvResetNextTaskUnblockTime+0x20>)
 80040fc:	b919      	cbnz	r1, 8004106 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004102:	601a      	str	r2, [r3, #0]
	}
}
 8004104:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800410a:	68d2      	ldr	r2, [r2, #12]
 800410c:	6852      	ldr	r2, [r2, #4]
 800410e:	e7f8      	b.n	8004102 <prvResetNextTaskUnblockTime+0xe>
 8004110:	2000036c 	.word	0x2000036c
 8004114:	20000440 	.word	0x20000440

08004118 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	4681      	mov	r9, r0
 800411e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004122:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004126:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004128:	3a01      	subs	r2, #1
 800412a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800412e:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004130:	f026 0607 	bic.w	r6, r6, #7
 8004134:	1e4b      	subs	r3, r1, #1
 8004136:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800413a:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800413c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004140:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004144:	7818      	ldrb	r0, [r3, #0]
 8004146:	b108      	cbz	r0, 800414c <prvInitialiseNewTask.isra.2+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004148:	428b      	cmp	r3, r1
 800414a:	d1f7      	bne.n	800413c <prvInitialiseNewTask.isra.2+0x24>
 800414c:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800414e:	2700      	movs	r7, #0
 8004150:	2d06      	cmp	r5, #6
 8004152:	bf28      	it	cs
 8004154:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004156:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004158:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800415a:	e9c4 5711 	strd	r5, r7, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800415e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004162:	f7ff fec3 	bl	8003eec <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004166:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800416a:	f104 0018 	add.w	r0, r4, #24
 800416e:	f7ff febd 	bl	8003eec <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004172:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004174:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004176:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004178:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800417a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800417e:	4652      	mov	r2, sl
 8004180:	4649      	mov	r1, r9
 8004182:	4630      	mov	r0, r6
 8004184:	f000 fa86 	bl	8004694 <pxPortInitialiseStack>
 8004188:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800418a:	f1b8 0f00 	cmp.w	r8, #0
 800418e:	d001      	beq.n	8004194 <prvInitialiseNewTask.isra.2+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004190:	f8c8 4000 	str.w	r4, [r8]
}
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800419c:	4e1b      	ldr	r6, [pc, #108]	; (800420c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800419e:	681c      	ldr	r4, [r3, #0]
{
 80041a0:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a2:	6830      	ldr	r0, [r6, #0]
{
 80041a4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041a6:	3004      	adds	r0, #4
 80041a8:	f7ff fec6 	bl	8003f38 <uxListRemove>
 80041ac:	4633      	mov	r3, r6
 80041ae:	b940      	cbnz	r0, 80041c2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041b0:	2001      	movs	r0, #1
 80041b2:	6831      	ldr	r1, [r6, #0]
 80041b4:	4e16      	ldr	r6, [pc, #88]	; (8004210 <prvAddCurrentTaskToDelayedList+0x78>)
 80041b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	4088      	lsls	r0, r1
 80041bc:	ea22 0200 	bic.w	r2, r2, r0
 80041c0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041c2:	1c6a      	adds	r2, r5, #1
 80041c4:	d107      	bne.n	80041d6 <prvAddCurrentTaskToDelayedList+0x3e>
 80041c6:	b137      	cbz	r7, 80041d6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	4812      	ldr	r0, [pc, #72]	; (8004214 <prvAddCurrentTaskToDelayedList+0x7c>)
 80041cc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d2:	f7ff be8e 	b.w	8003ef2 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	1964      	adds	r4, r4, r5
 80041da:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80041dc:	d307      	bcc.n	80041ee <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <prvAddCurrentTaskToDelayedList+0x80>)
 80041e0:	6810      	ldr	r0, [r2, #0]
 80041e2:	6819      	ldr	r1, [r3, #0]
}
 80041e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e8:	3104      	adds	r1, #4
 80041ea:	f7ff be8e 	b.w	8003f0a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <prvAddCurrentTaskToDelayedList+0x84>)
 80041f0:	6810      	ldr	r0, [r2, #0]
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	3104      	adds	r1, #4
 80041f6:	f7ff fe88 	bl	8003f0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <prvAddCurrentTaskToDelayedList+0x88>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004200:	bf88      	it	hi
 8004202:	601c      	strhi	r4, [r3, #0]
}
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004206:	bf00      	nop
 8004208:	20000488 	.word	0x20000488
 800420c:	20000368 	.word	0x20000368
 8004210:	20000414 	.word	0x20000414
 8004214:	20000460 	.word	0x20000460
 8004218:	20000370 	.word	0x20000370
 800421c:	2000036c 	.word	0x2000036c
 8004220:	20000440 	.word	0x20000440

08004224 <xTaskCreateStatic>:
	{
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800422c:	b945      	cbnz	r5, 8004240 <xTaskCreateStatic+0x1c>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	e7fe      	b.n	800423e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004240:	b944      	cbnz	r4, 8004254 <xTaskCreateStatic+0x30>
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	e7fe      	b.n	8004252 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004254:	2654      	movs	r6, #84	; 0x54
 8004256:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004258:	9e04      	ldr	r6, [sp, #16]
 800425a:	2e54      	cmp	r6, #84	; 0x54
 800425c:	d008      	beq.n	8004270 <xTaskCreateStatic+0x4c>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	e7fe      	b.n	800426e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004270:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004272:	2502      	movs	r5, #2
 8004274:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004278:	ad05      	add	r5, sp, #20
 800427a:	9501      	str	r5, [sp, #4]
 800427c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800427e:	9402      	str	r4, [sp, #8]
 8004280:	9500      	str	r5, [sp, #0]
 8004282:	f7ff ff49 	bl	8004118 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff fe68 	bl	8003f5c <prvAddNewTaskToReadyList>
	}
 800428c:	9805      	ldr	r0, [sp, #20]
 800428e:	b006      	add	sp, #24
 8004290:	bd70      	pop	{r4, r5, r6, pc}

08004292 <xTaskCreate>:
	{
 8004292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004296:	4607      	mov	r7, r0
 8004298:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429a:	0090      	lsls	r0, r2, #2
	{
 800429c:	4688      	mov	r8, r1
 800429e:	4616      	mov	r6, r2
 80042a0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a2:	f000 fb25 	bl	80048f0 <pvPortMalloc>
			if( pxStack != NULL )
 80042a6:	4605      	mov	r5, r0
 80042a8:	b1e8      	cbz	r0, 80042e6 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80042aa:	2054      	movs	r0, #84	; 0x54
 80042ac:	f000 fb20 	bl	80048f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80042b0:	4604      	mov	r4, r0
 80042b2:	b1a8      	cbz	r0, 80042e0 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80042bc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042c2:	9002      	str	r0, [sp, #8]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	4632      	mov	r2, r6
 80042c8:	464b      	mov	r3, r9
 80042ca:	4641      	mov	r1, r8
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff ff23 	bl	8004118 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff fe42 	bl	8003f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042d8:	2001      	movs	r0, #1
	}
 80042da:	b005      	add	sp, #20
 80042dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fb91 	bl	8004a08 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80042ea:	e7f6      	b.n	80042da <xTaskCreate+0x48>

080042ec <vTaskStartScheduler>:
{
 80042ec:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ee:	2400      	movs	r4, #0
{
 80042f0:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042f2:	aa07      	add	r2, sp, #28
 80042f4:	a906      	add	r1, sp, #24
 80042f6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042fc:	f7fd ff28 	bl	8002150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004300:	9b05      	ldr	r3, [sp, #20]
 8004302:	9a07      	ldr	r2, [sp, #28]
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	9b06      	ldr	r3, [sp, #24]
 8004308:	490e      	ldr	r1, [pc, #56]	; (8004344 <vTaskStartScheduler+0x58>)
 800430a:	e9cd 4300 	strd	r4, r3, [sp]
 800430e:	480e      	ldr	r0, [pc, #56]	; (8004348 <vTaskStartScheduler+0x5c>)
 8004310:	4623      	mov	r3, r4
 8004312:	f7ff ff87 	bl	8004224 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004316:	b190      	cbz	r0, 800433e <vTaskStartScheduler+0x52>
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <vTaskStartScheduler+0x60>)
 800432e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004330:	2201      	movs	r2, #1
 8004332:	4b07      	ldr	r3, [pc, #28]	; (8004350 <vTaskStartScheduler+0x64>)
 8004334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <vTaskStartScheduler+0x68>)
 8004338:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800433a:	f000 fa5b 	bl	80047f4 <xPortStartScheduler>
}
 800433e:	b008      	add	sp, #32
 8004340:	bd10      	pop	{r4, pc}
 8004342:	bf00      	nop
 8004344:	08005244 	.word	0x08005244
 8004348:	08004091 	.word	0x08004091
 800434c:	20000440 	.word	0x20000440
 8004350:	2000045c 	.word	0x2000045c
 8004354:	20000488 	.word	0x20000488

08004358 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004358:	4a02      	ldr	r2, [pc, #8]	; (8004364 <vTaskSuspendAll+0xc>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	2000040c 	.word	0x2000040c

08004368 <xTaskIncrementTick>:
{
 8004368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800436c:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <xTaskIncrementTick+0xf8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d16e      	bne.n	8004452 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004374:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <xTaskIncrementTick+0xfc>)
 8004376:	681c      	ldr	r4, [r3, #0]
 8004378:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800437a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800437c:	b9bc      	cbnz	r4, 80043ae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800437e:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <xTaskIncrementTick+0x100>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	b142      	cbz	r2, 8004398 <xTaskIncrementTick+0x30>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	e7fe      	b.n	8004396 <xTaskIncrementTick+0x2e>
 8004398:	4a34      	ldr	r2, [pc, #208]	; (800446c <xTaskIncrementTick+0x104>)
 800439a:	6819      	ldr	r1, [r3, #0]
 800439c:	6810      	ldr	r0, [r2, #0]
 800439e:	6018      	str	r0, [r3, #0]
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	4a33      	ldr	r2, [pc, #204]	; (8004470 <xTaskIncrementTick+0x108>)
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	f7ff fea3 	bl	80040f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043ae:	4d31      	ldr	r5, [pc, #196]	; (8004474 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 80043b0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	4f30      	ldr	r7, [pc, #192]	; (8004478 <xTaskIncrementTick+0x110>)
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d911      	bls.n	80043e0 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4b2f      	ldr	r3, [pc, #188]	; (800447c <xTaskIncrementTick+0x114>)
 80043c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043c2:	2214      	movs	r2, #20
 80043c4:	434a      	muls	r2, r1
 80043c6:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80043c8:	2a02      	cmp	r2, #2
 80043ca:	bf28      	it	cs
 80043cc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80043d0:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <xTaskIncrementTick+0x118>)
 80043d2:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80043d4:	2a00      	cmp	r2, #0
}
 80043d6:	bf0c      	ite	eq
 80043d8:	4658      	moveq	r0, fp
 80043da:	2001      	movne	r0, #1
 80043dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e0:	f8df a084 	ldr.w	sl, [pc, #132]	; 8004468 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80043e4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004488 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e8:	f8da 2000 	ldr.w	r2, [sl]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	b91a      	cbnz	r2, 80043f8 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f4:	602a      	str	r2, [r5, #0]
					break;
 80043f6:	e7e1      	b.n	80043bc <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043f8:	f8da 2000 	ldr.w	r2, [sl]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004400:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004402:	428c      	cmp	r4, r1
 8004404:	d201      	bcs.n	800440a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8004406:	6029      	str	r1, [r5, #0]
						break;
 8004408:	e7d8      	b.n	80043bc <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440a:	f106 0804 	add.w	r8, r6, #4
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fd92 	bl	8003f38 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004414:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004416:	b119      	cbz	r1, 8004420 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004418:	f106 0018 	add.w	r0, r6, #24
 800441c:	f7ff fd8c 	bl	8003f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004420:	2201      	movs	r2, #1
 8004422:	f04f 0c14 	mov.w	ip, #20
 8004426:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004428:	f8d9 3000 	ldr.w	r3, [r9]
 800442c:	fa02 f100 	lsl.w	r1, r2, r0
 8004430:	4319      	orrs	r1, r3
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <xTaskIncrementTick+0x114>)
 8004434:	f8c9 1000 	str.w	r1, [r9]
 8004438:	fb0c 3000 	mla	r0, ip, r0, r3
 800443c:	4641      	mov	r1, r8
 800443e:	f7ff fd58 	bl	8003ef2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004446:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004448:	4291      	cmp	r1, r2
 800444a:	bf28      	it	cs
 800444c:	f04f 0b01 	movcs.w	fp, #1
 8004450:	e7ca      	b.n	80043e8 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8004452:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8004454:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	3301      	adds	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e7b7      	b.n	80043d0 <xTaskIncrementTick+0x68>
 8004460:	2000040c 	.word	0x2000040c
 8004464:	20000488 	.word	0x20000488
 8004468:	2000036c 	.word	0x2000036c
 800446c:	20000370 	.word	0x20000370
 8004470:	20000444 	.word	0x20000444
 8004474:	20000440 	.word	0x20000440
 8004478:	20000368 	.word	0x20000368
 800447c:	20000374 	.word	0x20000374
 8004480:	2000048c 	.word	0x2000048c
 8004484:	20000408 	.word	0x20000408
 8004488:	20000414 	.word	0x20000414

0800448c <xTaskResumeAll>:
{
 800448c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004490:	4c30      	ldr	r4, [pc, #192]	; (8004554 <xTaskResumeAll+0xc8>)
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	b943      	cbnz	r3, 80044a8 <xTaskResumeAll+0x1c>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	e7fe      	b.n	80044a6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80044a8:	f000 f91c 	bl	80046e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b2:	6824      	ldr	r4, [r4, #0]
 80044b4:	b12c      	cbz	r4, 80044c2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80044b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80044b8:	f000 f936 	bl	8004728 <vPortExitCritical>
}
 80044bc:	4620      	mov	r0, r4
 80044be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <xTaskResumeAll+0xcc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f5      	beq.n	80044b6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ca:	4d24      	ldr	r5, [pc, #144]	; (800455c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80044cc:	4e24      	ldr	r6, [pc, #144]	; (8004560 <xTaskResumeAll+0xd4>)
 80044ce:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004574 <xTaskResumeAll+0xe8>
 80044d2:	e01f      	b.n	8004514 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044d4:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 80044d6:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044d8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044da:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044de:	f104 0018 	add.w	r0, r4, #24
 80044e2:	f7ff fd29 	bl	8003f38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e6:	4648      	mov	r0, r9
 80044e8:	f7ff fd26 	bl	8003f38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044ec:	2014      	movs	r0, #20
 80044ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044f0:	6831      	ldr	r1, [r6, #0]
 80044f2:	fa07 f302 	lsl.w	r3, r7, r2
 80044f6:	430b      	orrs	r3, r1
 80044f8:	fb00 8002 	mla	r0, r0, r2, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	f7ff fcf7 	bl	8003ef2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <xTaskResumeAll+0xd8>)
 8004506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	429a      	cmp	r2, r3
 800450e:	d301      	bcc.n	8004514 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8004510:	4b15      	ldr	r3, [pc, #84]	; (8004568 <xTaskResumeAll+0xdc>)
 8004512:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1dc      	bne.n	80044d4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800451a:	b10c      	cbz	r4, 8004520 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800451c:	f7ff fdea 	bl	80040f4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004520:	4d12      	ldr	r5, [pc, #72]	; (800456c <xTaskResumeAll+0xe0>)
 8004522:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004524:	b144      	cbz	r4, 8004538 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8004526:	2701      	movs	r7, #1
 8004528:	4e0f      	ldr	r6, [pc, #60]	; (8004568 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800452a:	f7ff ff1d 	bl	8004368 <xTaskIncrementTick>
 800452e:	b100      	cbz	r0, 8004532 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8004530:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004532:	3c01      	subs	r4, #1
 8004534:	d1f9      	bne.n	800452a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8004536:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <xTaskResumeAll+0xdc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ba      	beq.n	80044b6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <xTaskResumeAll+0xe4>)
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004550:	2401      	movs	r4, #1
 8004552:	e7b1      	b.n	80044b8 <xTaskResumeAll+0x2c>
 8004554:	2000040c 	.word	0x2000040c
 8004558:	20000400 	.word	0x20000400
 800455c:	20000448 	.word	0x20000448
 8004560:	20000414 	.word	0x20000414
 8004564:	20000368 	.word	0x20000368
 8004568:	2000048c 	.word	0x2000048c
 800456c:	20000408 	.word	0x20000408
 8004570:	e000ed04 	.word	0xe000ed04
 8004574:	20000374 	.word	0x20000374

08004578 <vTaskDelay>:
	{
 8004578:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800457a:	b940      	cbnz	r0, 800458e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <vTaskDelay+0x40>)
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	f3bf 8f6f 	isb	sy
	}
 800458c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <vTaskDelay+0x44>)
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	b141      	cbz	r1, 80045a6 <vTaskDelay+0x2e>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	e7fe      	b.n	80045a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80045a6:	f7ff fed7 	bl	8004358 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045aa:	f7ff fdf5 	bl	8004198 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80045ae:	f7ff ff6d 	bl	800448c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d0e2      	beq.n	800457c <vTaskDelay+0x4>
 80045b6:	e7e9      	b.n	800458c <vTaskDelay+0x14>
 80045b8:	e000ed04 	.word	0xe000ed04
 80045bc:	2000040c 	.word	0x2000040c

080045c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c0:	4b17      	ldr	r3, [pc, #92]	; (8004620 <vTaskSwitchContext+0x60>)
{
 80045c2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <vTaskSwitchContext+0x64>)
 80045c8:	b112      	cbz	r2, 80045d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80045ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80045d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <vTaskSwitchContext+0x68>)
 80045d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045d6:	fab3 f383 	clz	r3, r3
 80045da:	2214      	movs	r2, #20
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f1c3 031f 	rsb	r3, r3, #31
 80045e2:	435a      	muls	r2, r3
 80045e4:	4911      	ldr	r1, [pc, #68]	; (800462c <vTaskSwitchContext+0x6c>)
 80045e6:	588c      	ldr	r4, [r1, r2]
 80045e8:	1888      	adds	r0, r1, r2
 80045ea:	b944      	cbnz	r4, 80045fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	e7fe      	b.n	80045fc <vTaskSwitchContext+0x3c>
 80045fe:	6844      	ldr	r4, [r0, #4]
 8004600:	3208      	adds	r2, #8
 8004602:	6864      	ldr	r4, [r4, #4]
 8004604:	440a      	add	r2, r1
 8004606:	4294      	cmp	r4, r2
 8004608:	bf08      	it	eq
 800460a:	6862      	ldreq	r2, [r4, #4]
 800460c:	6044      	str	r4, [r0, #4]
 800460e:	bf08      	it	eq
 8004610:	6042      	streq	r2, [r0, #4]
 8004612:	2214      	movs	r2, #20
 8004614:	fb02 1303 	mla	r3, r2, r3, r1
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <vTaskSwitchContext+0x70>)
 800461e:	e7d5      	b.n	80045cc <vTaskSwitchContext+0xc>
 8004620:	2000040c 	.word	0x2000040c
 8004624:	2000048c 	.word	0x2000048c
 8004628:	20000414 	.word	0x20000414
 800462c:	20000374 	.word	0x20000374
 8004630:	20000368 	.word	0x20000368

08004634 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8004634:	2300      	movs	r3, #0
{
 8004636:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8004638:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <prvTaskExitError+0x3c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	d008      	beq.n	8004654 <prvTaskExitError+0x20>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	e7fe      	b.n	8004652 <prvTaskExitError+0x1e>
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0fc      	beq.n	8004664 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800466a:	b002      	add	sp, #8
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	2000000c 	.word	0x2000000c

08004674 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004674:	4806      	ldr	r0, [pc, #24]	; (8004690 <prvPortStartFirstTask+0x1c>)
 8004676:	6800      	ldr	r0, [r0, #0]
 8004678:	6800      	ldr	r0, [r0, #0]
 800467a:	f380 8808 	msr	MSP, r0
 800467e:	b662      	cpsie	i
 8004680:	b661      	cpsie	f
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	df00      	svc	0
 800468c:	bf00      	nop
 800468e:	0000      	.short	0x0000
 8004690:	e000ed08 	.word	0xe000ed08

08004694 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004698:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800469e:	f021 0101 	bic.w	r1, r1, #1
 80046a2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046a6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046aa:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80046ae:	3840      	subs	r0, #64	; 0x40
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	08004635 	.word	0x08004635
	...

080046c0 <SVC_Handler>:
	__asm volatile (
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <pxCurrentTCBConst2>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	6808      	ldr	r0, [r1, #0]
 80046c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ca:	f380 8809 	msr	PSP, r0
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	f04e 0e0d 	orr.w	lr, lr, #13
 80046de:	4770      	bx	lr

080046e0 <pxCurrentTCBConst2>:
 80046e0:	20000368 	.word	0x20000368

080046e4 <vPortEnterCritical>:
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <vPortEnterCritical+0x3c>)
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046fe:	d10d      	bne.n	800471c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <vPortEnterCritical+0x40>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004708:	d008      	beq.n	800471c <vPortEnterCritical+0x38>
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	e7fe      	b.n	800471a <vPortEnterCritical+0x36>
	}
}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c
 8004724:	e000ed04 	.word	0xe000ed04

08004728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <vPortExitCritical+0x24>)
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	b943      	cbnz	r3, 8004740 <vPortExitCritical+0x18>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	e7fe      	b.n	800473e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004740:	3b01      	subs	r3, #1
 8004742:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004744:	b90b      	cbnz	r3, 800474a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004746:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800474a:	4770      	bx	lr
 800474c:	2000000c 	.word	0x2000000c

08004750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004750:	f3ef 8009 	mrs	r0, PSP
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <pxCurrentTCBConst>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004760:	6010      	str	r0, [r2, #0]
 8004762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800476a:	f380 8811 	msr	BASEPRI, r0
 800476e:	f7ff ff27 	bl	80045c0 <vTaskSwitchContext>
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8811 	msr	BASEPRI, r0
 800477a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800477e:	6819      	ldr	r1, [r3, #0]
 8004780:	6808      	ldr	r0, [r1, #0]
 8004782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004786:	f380 8809 	msr	PSP, r0
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	4770      	bx	lr

08004790 <pxCurrentTCBConst>:
 8004790:	20000368 	.word	0x20000368

08004794 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004794:	b508      	push	{r3, lr}
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a6:	f7ff fddf 	bl	8004368 <xTaskIncrementTick>
 80047aa:	b118      	cbz	r0, 80047b4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b0:	4b02      	ldr	r3, [pc, #8]	; (80047bc <SysTick_Handler+0x28>)
 80047b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80047b4:	2300      	movs	r3, #0
 80047b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80047ba:	bd08      	pop	{r3, pc}
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c4:	4908      	ldr	r1, [pc, #32]	; (80047e8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vPortSetupTimerInterrupt+0x2c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d6:	4906      	ldr	r1, [pc, #24]	; (80047f0 <vPortSetupTimerInterrupt+0x30>)
 80047d8:	3b01      	subs	r3, #1
 80047da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047dc:	2307      	movs	r3, #7
 80047de:	6013      	str	r3, [r2, #0]
}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010
 80047e8:	e000e018 	.word	0xe000e018
 80047ec:	20000000 	.word	0x20000000
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <xPortStartScheduler>:
{
 80047f4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004804:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004806:	4a24      	ldr	r2, [pc, #144]	; (8004898 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800480e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004812:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004816:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004818:	2207      	movs	r2, #7
 800481a:	4b20      	ldr	r3, [pc, #128]	; (800489c <xPortStartScheduler+0xa8>)
 800481c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004822:	1e54      	subs	r4, r2, #1
 8004824:	0600      	lsls	r0, r0, #24
 8004826:	d40d      	bmi.n	8004844 <xPortStartScheduler+0x50>
 8004828:	b101      	cbz	r1, 800482c <xPortStartScheduler+0x38>
 800482a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	2a03      	cmp	r2, #3
 8004830:	d011      	beq.n	8004856 <xPortStartScheduler+0x62>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	e7fe      	b.n	8004842 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004844:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004848:	2101      	movs	r1, #1
 800484a:	0052      	lsls	r2, r2, #1
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f88d 2003 	strb.w	r2, [sp, #3]
 8004852:	4622      	mov	r2, r4
 8004854:	e7e3      	b.n	800481e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8004856:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004858:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800485a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800485e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <xPortStartScheduler+0xa0>)
 8004864:	b2db      	uxtb	r3, r3
 8004866:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <xPortStartScheduler+0xac>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004870:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004878:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800487a:	f7ff ffa1 	bl	80047c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <xPortStartScheduler+0xb0>)
 8004880:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8004882:	f7ff fef7 	bl	8004674 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004886:	f7ff fe9b 	bl	80045c0 <vTaskSwitchContext>
	prvTaskExitError();
 800488a:	f7ff fed3 	bl	8004634 <prvTaskExitError>
}
 800488e:	4620      	mov	r0, r4
 8004890:	b002      	add	sp, #8
 8004892:	bd10      	pop	{r4, pc}
 8004894:	e000e400 	.word	0xe000e400
 8004898:	20000490 	.word	0x20000490
 800489c:	20000494 	.word	0x20000494
 80048a0:	e000ed20 	.word	0xe000ed20
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048a8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <prvInsertBlockIntoFreeList+0x40>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4282      	cmp	r2, r0
 80048b0:	d318      	bcc.n	80048e4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048b2:	685c      	ldr	r4, [r3, #4]
 80048b4:	1919      	adds	r1, r3, r4
 80048b6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048b8:	bf01      	itttt	eq
 80048ba:	6841      	ldreq	r1, [r0, #4]
 80048bc:	4618      	moveq	r0, r3
 80048be:	1909      	addeq	r1, r1, r4
 80048c0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048c2:	6844      	ldr	r4, [r0, #4]
 80048c4:	1901      	adds	r1, r0, r4
 80048c6:	428a      	cmp	r2, r1
 80048c8:	d107      	bne.n	80048da <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ca:	4908      	ldr	r1, [pc, #32]	; (80048ec <prvInsertBlockIntoFreeList+0x44>)
 80048cc:	6809      	ldr	r1, [r1, #0]
 80048ce:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048d0:	bf1f      	itttt	ne
 80048d2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048d4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048d6:	1909      	addne	r1, r1, r4
 80048d8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048da:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048dc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048de:	bf18      	it	ne
 80048e0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	4613      	mov	r3, r2
 80048e6:	e7e1      	b.n	80048ac <prvInsertBlockIntoFreeList+0x4>
 80048e8:	200010a8 	.word	0x200010a8
 80048ec:	20000498 	.word	0x20000498

080048f0 <pvPortMalloc>:
{
 80048f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80048f6:	f7ff fd2f 	bl	8004358 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80048fa:	493d      	ldr	r1, [pc, #244]	; (80049f0 <pvPortMalloc+0x100>)
 80048fc:	4d3d      	ldr	r5, [pc, #244]	; (80049f4 <pvPortMalloc+0x104>)
 80048fe:	680b      	ldr	r3, [r1, #0]
 8004900:	b9fb      	cbnz	r3, 8004942 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8004904:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004906:	0756      	lsls	r6, r2, #29
 8004908:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800490c:	bf0f      	iteee	eq
 800490e:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004912:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004914:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004918:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800491a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800491c:	4e37      	ldr	r6, [pc, #220]	; (80049fc <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800491e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004920:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8004924:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004926:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004928:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800492c:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800492e:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004930:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004934:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <pvPortMalloc+0x110>)
 8004936:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004938:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <pvPortMalloc+0x114>)
 800493a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800493c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004940:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004942:	682f      	ldr	r7, [r5, #0]
 8004944:	4227      	tst	r7, r4
 8004946:	d14d      	bne.n	80049e4 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8004948:	2c00      	cmp	r4, #0
 800494a:	d03e      	beq.n	80049ca <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 800494c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004950:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004952:	bf1c      	itt	ne
 8004954:	f023 0307 	bicne.w	r3, r3, #7
 8004958:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800495a:	2b00      	cmp	r3, #0
 800495c:	d042      	beq.n	80049e4 <pvPortMalloc+0xf4>
 800495e:	4a29      	ldr	r2, [pc, #164]	; (8004a04 <pvPortMalloc+0x114>)
 8004960:	6816      	ldr	r6, [r2, #0]
 8004962:	4690      	mov	r8, r2
 8004964:	429e      	cmp	r6, r3
 8004966:	d33d      	bcc.n	80049e4 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <pvPortMalloc+0x10c>)
 800496a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800496c:	6868      	ldr	r0, [r5, #4]
 800496e:	4298      	cmp	r0, r3
 8004970:	d201      	bcs.n	8004976 <pvPortMalloc+0x86>
 8004972:	682c      	ldr	r4, [r5, #0]
 8004974:	b9a4      	cbnz	r4, 80049a0 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8004976:	6809      	ldr	r1, [r1, #0]
 8004978:	42a9      	cmp	r1, r5
 800497a:	d033      	beq.n	80049e4 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800497c:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800497e:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004980:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004982:	1ac2      	subs	r2, r0, r3
 8004984:	2a10      	cmp	r2, #16
 8004986:	d912      	bls.n	80049ae <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004988:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800498a:	0741      	lsls	r1, r0, #29
 800498c:	d00b      	beq.n	80049a6 <pvPortMalloc+0xb6>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	e7fe      	b.n	800499e <pvPortMalloc+0xae>
 80049a0:	462a      	mov	r2, r5
 80049a2:	4625      	mov	r5, r4
 80049a4:	e7e2      	b.n	800496c <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049a6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049a8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049aa:	f7ff ff7d 	bl	80048a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049ae:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049b0:	4913      	ldr	r1, [pc, #76]	; (8004a00 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049b2:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049b4:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80049b6:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049b8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049ba:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049be:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049c0:	bf38      	it	cc
 80049c2:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049c4:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049c6:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049c8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80049ca:	f7ff fd5f 	bl	800448c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ce:	0763      	lsls	r3, r4, #29
 80049d0:	d00a      	beq.n	80049e8 <pvPortMalloc+0xf8>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	e7fe      	b.n	80049e2 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 80049e4:	2400      	movs	r4, #0
 80049e6:	e7f0      	b.n	80049ca <pvPortMalloc+0xda>
}
 80049e8:	4620      	mov	r0, r4
 80049ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ee:	bf00      	nop
 80049f0:	20000498 	.word	0x20000498
 80049f4:	2000109c 	.word	0x2000109c
 80049f8:	2000049c 	.word	0x2000049c
 80049fc:	200010a8 	.word	0x200010a8
 8004a00:	200010a4 	.word	0x200010a4
 8004a04:	200010a0 	.word	0x200010a0

08004a08 <vPortFree>:
{
 8004a08:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	b370      	cbz	r0, 8004a6c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <vPortFree+0x68>)
 8004a10:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	4213      	tst	r3, r2
 8004a18:	d108      	bne.n	8004a2c <vPortFree+0x24>
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	e7fe      	b.n	8004a2a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a2c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004a30:	b141      	cbz	r1, 8004a44 <vPortFree+0x3c>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	e7fe      	b.n	8004a42 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a44:	ea23 0302 	bic.w	r3, r3, r2
 8004a48:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a4c:	f7ff fc84 	bl	8004358 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <vPortFree+0x6c>)
 8004a52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004a56:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a58:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a5c:	440b      	add	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a60:	f7ff ff22 	bl	80048a8 <prvInsertBlockIntoFreeList>
}
 8004a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004a68:	f7ff bd10 	b.w	800448c <xTaskResumeAll>
}
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000109c 	.word	0x2000109c
 8004a74:	200010a0 	.word	0x200010a0

08004a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004a78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004a7a:	e003      	b.n	8004a84 <LoopCopyDataInit>

08004a7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004a7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004a80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004a82:	3104      	adds	r1, #4

08004a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004a84:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004a88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004a8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004a8c:	d3f6      	bcc.n	8004a7c <CopyDataInit>
  ldr r2, =_sbss
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004a90:	e002      	b.n	8004a98 <LoopFillZerobss>

08004a92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004a94:	f842 3b04 	str.w	r3, [r2], #4

08004a98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004a9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004a9c:	d3f9      	bcc.n	8004a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a9e:	f7fd fd1f 	bl	80024e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aa2:	f000 fa63 	bl	8004f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004aa6:	f7fd fc0b 	bl	80022c0 <main>
  bx lr
 8004aaa:	4770      	bx	lr
  ldr r3, =_sidata
 8004aac:	08005508 	.word	0x08005508
  ldr r0, =_sdata
 8004ab0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ab4:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8004ab8:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8004abc:	2000120c 	.word	0x2000120c

08004ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ac0:	e7fe      	b.n	8004ac0 <ADC1_2_IRQHandler>

08004ac2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004ac2:	7803      	ldrb	r3, [r0, #0]
 8004ac4:	2b47      	cmp	r3, #71	; 0x47
 8004ac6:	d117      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ac8:	7843      	ldrb	r3, [r0, #1]
 8004aca:	2b4e      	cmp	r3, #78	; 0x4e
 8004acc:	d114      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ace:	7883      	ldrb	r3, [r0, #2]
 8004ad0:	2b55      	cmp	r3, #85	; 0x55
 8004ad2:	d111      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ad4:	78c3      	ldrb	r3, [r0, #3]
 8004ad6:	2b43      	cmp	r3, #67	; 0x43
 8004ad8:	d10e      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ada:	7903      	ldrb	r3, [r0, #4]
 8004adc:	2b43      	cmp	r3, #67	; 0x43
 8004ade:	d10b      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ae0:	7943      	ldrb	r3, [r0, #5]
 8004ae2:	2b2b      	cmp	r3, #43	; 0x2b
 8004ae4:	d108      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ae6:	7983      	ldrb	r3, [r0, #6]
 8004ae8:	2b2b      	cmp	r3, #43	; 0x2b
 8004aea:	d105      	bne.n	8004af8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004aec:	79c0      	ldrb	r0, [r0, #7]
 8004aee:	2801      	cmp	r0, #1
 8004af0:	bf8c      	ite	hi
 8004af2:	2000      	movhi	r0, #0
 8004af4:	2001      	movls	r0, #1
 8004af6:	4770      	bx	lr
 8004af8:	2000      	movs	r0, #0
 8004afa:	4770      	bx	lr

08004afc <__cxa_type_match>:
 8004afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b00:	461e      	mov	r6, r3
 8004b02:	7803      	ldrb	r3, [r0, #0]
 8004b04:	460d      	mov	r5, r1
 8004b06:	2b47      	cmp	r3, #71	; 0x47
 8004b08:	4602      	mov	r2, r0
 8004b0a:	79c1      	ldrb	r1, [r0, #7]
 8004b0c:	d113      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b0e:	7843      	ldrb	r3, [r0, #1]
 8004b10:	2b4e      	cmp	r3, #78	; 0x4e
 8004b12:	d110      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b14:	7883      	ldrb	r3, [r0, #2]
 8004b16:	2b55      	cmp	r3, #85	; 0x55
 8004b18:	d10d      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b1a:	78c3      	ldrb	r3, [r0, #3]
 8004b1c:	2b43      	cmp	r3, #67	; 0x43
 8004b1e:	d10a      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b20:	7903      	ldrb	r3, [r0, #4]
 8004b22:	2b46      	cmp	r3, #70	; 0x46
 8004b24:	d107      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b26:	7943      	ldrb	r3, [r0, #5]
 8004b28:	2b4f      	cmp	r3, #79	; 0x4f
 8004b2a:	d104      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b2c:	7983      	ldrb	r3, [r0, #6]
 8004b2e:	2b52      	cmp	r3, #82	; 0x52
 8004b30:	d101      	bne.n	8004b36 <__cxa_type_match+0x3a>
 8004b32:	2900      	cmp	r1, #0
 8004b34:	d030      	beq.n	8004b98 <__cxa_type_match+0x9c>
 8004b36:	4610      	mov	r0, r2
 8004b38:	f7ff ffc3 	bl	8004ac2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f080 0001 	eor.w	r0, r0, #1
 8004b42:	b2c0      	uxtb	r0, r0
 8004b44:	2400      	movs	r4, #0
 8004b46:	9401      	str	r4, [sp, #4]
 8004b48:	bb4b      	cbnz	r3, 8004b9e <__cxa_type_match+0xa2>
 8004b4a:	bb50      	cbnz	r0, 8004ba2 <__cxa_type_match+0xa6>
 8004b4c:	2901      	cmp	r1, #1
 8004b4e:	bf0a      	itet	eq
 8004b50:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8004b54:	f1a2 0320 	subne.w	r3, r2, #32
 8004b58:	3b78      	subeq	r3, #120	; 0x78
 8004b5a:	2901      	cmp	r1, #1
 8004b5c:	bf0c      	ite	eq
 8004b5e:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004b62:	3258      	addne	r2, #88	; 0x58
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	9201      	str	r2, [sp, #4]
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4798      	blx	r3
 8004b70:	b1c8      	cbz	r0, 8004ba6 <__cxa_type_match+0xaa>
 8004b72:	2702      	movs	r7, #2
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	aa01      	add	r2, sp, #4
 8004b7e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004b82:	4621      	mov	r1, r4
 8004b84:	2301      	movs	r3, #1
 8004b86:	4628      	mov	r0, r5
 8004b88:	47c0      	blx	r8
 8004b8a:	b170      	cbz	r0, 8004baa <__cxa_type_match+0xae>
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	4638      	mov	r0, r7
 8004b92:	b002      	add	sp, #8
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	e7d2      	b.n	8004b44 <__cxa_type_match+0x48>
 8004b9e:	4c04      	ldr	r4, [pc, #16]	; (8004bb0 <__cxa_type_match+0xb4>)
 8004ba0:	e7e2      	b.n	8004b68 <__cxa_type_match+0x6c>
 8004ba2:	4c04      	ldr	r4, [pc, #16]	; (8004bb4 <__cxa_type_match+0xb8>)
 8004ba4:	e7e0      	b.n	8004b68 <__cxa_type_match+0x6c>
 8004ba6:	2701      	movs	r7, #1
 8004ba8:	e7e7      	b.n	8004b7a <__cxa_type_match+0x7e>
 8004baa:	4607      	mov	r7, r0
 8004bac:	e7f0      	b.n	8004b90 <__cxa_type_match+0x94>
 8004bae:	bf00      	nop
 8004bb0:	08005308 	.word	0x08005308
 8004bb4:	08005310 	.word	0x08005310

08004bb8 <__cxa_begin_cleanup>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	f000 f81a 	bl	8004bf4 <__cxa_get_globals>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f1a4 0120 	sub.w	r1, r4, #32
 8004bc8:	f7ff ff7b 	bl	8004ac2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004bcc:	b160      	cbz	r0, 8004be8 <__cxa_begin_cleanup+0x30>
 8004bce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8004bda:	d103      	bne.n	8004be4 <__cxa_begin_cleanup+0x2c>
 8004bdc:	6893      	ldr	r3, [r2, #8]
 8004bde:	f844 3c08 	str.w	r3, [r4, #-8]
 8004be2:	6091      	str	r1, [r2, #8]
 8004be4:	2001      	movs	r0, #1
 8004be6:	bd10      	pop	{r4, pc}
 8004be8:	6893      	ldr	r3, [r2, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f9      	beq.n	8004be2 <__cxa_begin_cleanup+0x2a>
 8004bee:	f000 f907 	bl	8004e00 <_ZSt9terminatev>
	...

08004bf4 <__cxa_get_globals>:
 8004bf4:	4800      	ldr	r0, [pc, #0]	; (8004bf8 <__cxa_get_globals+0x4>)
 8004bf6:	4770      	bx	lr
 8004bf8:	200010b0 	.word	0x200010b0

08004bfc <_ZdlPvj>:
 8004bfc:	f000 b8f1 	b.w	8004de2 <_ZdlPv>

08004c00 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004c02:	2400      	movs	r4, #0
 8004c04:	2310      	movs	r3, #16
 8004c06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c0a:	6803      	ldr	r3, [r0, #0]
 8004c0c:	4615      	mov	r5, r2
 8004c0e:	699e      	ldr	r6, [r3, #24]
 8004c10:	9400      	str	r4, [sp, #0]
 8004c12:	466b      	mov	r3, sp
 8004c14:	f88d 4004 	strb.w	r4, [sp, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	47b0      	blx	r6
 8004c1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004c20:	f003 0306 	and.w	r3, r3, #6
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	bf09      	itett	eq
 8004c28:	2001      	moveq	r0, #1
 8004c2a:	4620      	movne	r0, r4
 8004c2c:	9b00      	ldreq	r3, [sp, #0]
 8004c2e:	602b      	streq	r3, [r5, #0]
 8004c30:	b004      	add	sp, #16
 8004c32:	bd70      	pop	{r4, r5, r6, pc}

08004c34 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004c34:	9800      	ldr	r0, [sp, #0]
 8004c36:	4290      	cmp	r0, r2
 8004c38:	bf0c      	ite	eq
 8004c3a:	2006      	moveq	r0, #6
 8004c3c:	2001      	movne	r0, #1
 8004c3e:	4770      	bx	lr

08004c40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8004c46:	6003      	str	r3, [r0, #0]
 8004c48:	f000 f8f1 	bl	8004e2e <_ZNSt9type_infoD1Ev>
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	08005284 	.word	0x08005284

08004c54 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4604      	mov	r4, r0
 8004c58:	f7ff fff2 	bl	8004c40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	2108      	movs	r1, #8
 8004c60:	f7ff ffcc 	bl	8004bfc <_ZdlPvj>
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	9e06      	ldr	r6, [sp, #24]
 8004c6e:	4698      	mov	r8, r3
 8004c70:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8004c74:	429e      	cmp	r6, r3
 8004c76:	4607      	mov	r7, r0
 8004c78:	4615      	mov	r5, r2
 8004c7a:	d107      	bne.n	8004c8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8004c7c:	9907      	ldr	r1, [sp, #28]
 8004c7e:	f000 f8d9 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004c82:	b118      	cbz	r0, 8004c8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 8004c84:	7165      	strb	r5, [r4, #5]
 8004c86:	2000      	movs	r0, #0
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f000 f8d0 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d0f6      	beq.n	8004c86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	6026      	str	r6, [r4, #0]
 8004c9c:	7125      	strb	r5, [r4, #4]
 8004c9e:	71a3      	strb	r3, [r4, #6]
 8004ca0:	e7f1      	b.n	8004c86 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

08004ca2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8004ca2:	b538      	push	{r3, r4, r5, lr}
 8004ca4:	4615      	mov	r5, r2
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	f000 f8c4 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004cac:	b120      	cbz	r0, 8004cb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	60e3      	str	r3, [r4, #12]
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	6025      	str	r5, [r4, #0]
 8004cb6:	7123      	strb	r3, [r4, #4]
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}

08004cba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	4616      	mov	r6, r2
 8004cc4:	461f      	mov	r7, r3
 8004cc6:	f000 f8b5 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004cca:	b948      	cbnz	r0, 8004ce0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004ccc:	2f03      	cmp	r7, #3
 8004cce:	d807      	bhi.n	8004ce0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	4718      	bx	r3
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8004cea:	6003      	str	r3, [r0, #0]
 8004cec:	f7ff ffa8 	bl	8004c40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd10      	pop	{r4, pc}
 8004cf4:	080052e4 	.word	0x080052e4

08004cf8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	f7ff fff2 	bl	8004ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8004d00:	4620      	mov	r0, r4
 8004d02:	210c      	movs	r1, #12
 8004d04:	f7ff ff7a 	bl	8004bfc <_ZdlPvj>
 8004d08:	4620      	mov	r0, r4
 8004d0a:	bd10      	pop	{r4, pc}

08004d0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	9e06      	ldr	r6, [sp, #24]
 8004d12:	4607      	mov	r7, r0
 8004d14:	4296      	cmp	r6, r2
 8004d16:	4688      	mov	r8, r1
 8004d18:	4615      	mov	r5, r2
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	d00a      	beq.n	8004d34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 8004d1e:	68b8      	ldr	r0, [r7, #8]
 8004d20:	462a      	mov	r2, r5
 8004d22:	6803      	ldr	r3, [r0, #0]
 8004d24:	9606      	str	r6, [sp, #24]
 8004d26:	6a1e      	ldr	r6, [r3, #32]
 8004d28:	4641      	mov	r1, r8
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	46b4      	mov	ip, r6
 8004d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	4760      	bx	ip
 8004d34:	4619      	mov	r1, r3
 8004d36:	f000 f87d 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d0ef      	beq.n	8004d1e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 8004d3e:	2006      	movs	r0, #6
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8004d44:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	460e      	mov	r6, r1
 8004d4a:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8004d4e:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8004d52:	4619      	mov	r1, r3
 8004d54:	4683      	mov	fp, r0
 8004d56:	4617      	mov	r7, r2
 8004d58:	4699      	mov	r9, r3
 8004d5a:	f000 f86b 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004d5e:	b190      	cbz	r0, 8004d86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	602c      	str	r4, [r5, #0]
 8004d64:	712f      	strb	r7, [r5, #4]
 8004d66:	db09      	blt.n	8004d7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8004d68:	4434      	add	r4, r6
 8004d6a:	45a0      	cmp	r8, r4
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2406      	moveq	r4, #6
 8004d70:	2401      	movne	r4, #1
 8004d72:	71ac      	strb	r4, [r5, #6]
 8004d74:	2000      	movs	r0, #0
 8004d76:	b001      	add	sp, #4
 8004d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7c:	3602      	adds	r6, #2
 8004d7e:	d1f9      	bne.n	8004d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004d80:	2301      	movs	r3, #1
 8004d82:	71ab      	strb	r3, [r5, #6]
 8004d84:	e7f6      	b.n	8004d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004d86:	4544      	cmp	r4, r8
 8004d88:	d106      	bne.n	8004d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	4658      	mov	r0, fp
 8004d8e:	f000 f851 	bl	8004e34 <_ZNKSt9type_infoeqERKS_>
 8004d92:	b108      	cbz	r0, 8004d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8004d94:	716f      	strb	r7, [r5, #5]
 8004d96:	e7ed      	b.n	8004d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8004d98:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004d9c:	463a      	mov	r2, r7
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8004da4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8004da8:	69dc      	ldr	r4, [r3, #28]
 8004daa:	4631      	mov	r1, r6
 8004dac:	464b      	mov	r3, r9
 8004dae:	46a4      	mov	ip, r4
 8004db0:	b001      	add	sp, #4
 8004db2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db6:	4760      	bx	ip

08004db8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8004db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	461f      	mov	r7, r3
 8004dc4:	f7ff ff6d 	bl	8004ca2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8004dc8:	b948      	cbnz	r0, 8004dde <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8004dca:	68a0      	ldr	r0, [r4, #8]
 8004dcc:	4632      	mov	r2, r6
 8004dce:	6803      	ldr	r3, [r0, #0]
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	699c      	ldr	r4, [r3, #24]
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	46a4      	mov	ip, r4
 8004dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	4760      	bx	ip
 8004dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004de2 <_ZdlPv>:
 8004de2:	f000 b8e7 	b.w	8004fb4 <free>

08004de6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004de6:	b508      	push	{r3, lr}
 8004de8:	4780      	blx	r0
 8004dea:	f000 f8b1 	bl	8004f50 <abort>
	...

08004df0 <_ZSt13get_terminatev>:
 8004df0:	4b02      	ldr	r3, [pc, #8]	; (8004dfc <_ZSt13get_terminatev+0xc>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	f3bf 8f5b 	dmb	ish
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000014 	.word	0x20000014

08004e00 <_ZSt9terminatev>:
 8004e00:	b508      	push	{r3, lr}
 8004e02:	f7ff fff5 	bl	8004df0 <_ZSt13get_terminatev>
 8004e06:	f7ff ffee 	bl	8004de6 <_ZN10__cxxabiv111__terminateEPFvvE>

08004e0a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8004e0a:	b508      	push	{r3, lr}
 8004e0c:	4780      	blx	r0
 8004e0e:	f7ff fff7 	bl	8004e00 <_ZSt9terminatev>
	...

08004e14 <_ZSt14get_unexpectedv>:
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <_ZSt14get_unexpectedv+0xc>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	f3bf 8f5b 	dmb	ish
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000010 	.word	0x20000010

08004e24 <_ZSt10unexpectedv>:
 8004e24:	b508      	push	{r3, lr}
 8004e26:	f7ff fff5 	bl	8004e14 <_ZSt14get_unexpectedv>
 8004e2a:	f7ff ffee 	bl	8004e0a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004e2e <_ZNSt9type_infoD1Ev>:
 8004e2e:	4770      	bx	lr

08004e30 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004e30:	2000      	movs	r0, #0
 8004e32:	4770      	bx	lr

08004e34 <_ZNKSt9type_infoeqERKS_>:
 8004e34:	4281      	cmp	r1, r0
 8004e36:	b508      	push	{r3, lr}
 8004e38:	d00e      	beq.n	8004e58 <_ZNKSt9type_infoeqERKS_+0x24>
 8004e3a:	6840      	ldr	r0, [r0, #4]
 8004e3c:	7803      	ldrb	r3, [r0, #0]
 8004e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e40:	d00c      	beq.n	8004e5c <_ZNKSt9type_infoeqERKS_+0x28>
 8004e42:	6849      	ldr	r1, [r1, #4]
 8004e44:	780b      	ldrb	r3, [r1, #0]
 8004e46:	2b2a      	cmp	r3, #42	; 0x2a
 8004e48:	bf08      	it	eq
 8004e4a:	3101      	addeq	r1, #1
 8004e4c:	f7fb f980 	bl	8000150 <strcmp>
 8004e50:	fab0 f080 	clz	r0, r0
 8004e54:	0940      	lsrs	r0, r0, #5
 8004e56:	bd08      	pop	{r3, pc}
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e7fc      	b.n	8004e56 <_ZNKSt9type_infoeqERKS_+0x22>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e7fa      	b.n	8004e56 <_ZNKSt9type_infoeqERKS_+0x22>

08004e60 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004e60:	7803      	ldrb	r3, [r0, #0]
 8004e62:	2b47      	cmp	r3, #71	; 0x47
 8004e64:	d117      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e66:	7843      	ldrb	r3, [r0, #1]
 8004e68:	2b4e      	cmp	r3, #78	; 0x4e
 8004e6a:	d114      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e6c:	7883      	ldrb	r3, [r0, #2]
 8004e6e:	2b55      	cmp	r3, #85	; 0x55
 8004e70:	d111      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e72:	78c3      	ldrb	r3, [r0, #3]
 8004e74:	2b43      	cmp	r3, #67	; 0x43
 8004e76:	d10e      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e78:	7903      	ldrb	r3, [r0, #4]
 8004e7a:	2b43      	cmp	r3, #67	; 0x43
 8004e7c:	d10b      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e7e:	7943      	ldrb	r3, [r0, #5]
 8004e80:	2b2b      	cmp	r3, #43	; 0x2b
 8004e82:	d108      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e84:	7983      	ldrb	r3, [r0, #6]
 8004e86:	2b2b      	cmp	r3, #43	; 0x2b
 8004e88:	d105      	bne.n	8004e96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004e8a:	79c0      	ldrb	r0, [r0, #7]
 8004e8c:	2801      	cmp	r0, #1
 8004e8e:	bf8c      	ite	hi
 8004e90:	2000      	movhi	r0, #0
 8004e92:	2001      	movls	r0, #1
 8004e94:	4770      	bx	lr
 8004e96:	2000      	movs	r0, #0
 8004e98:	4770      	bx	lr

08004e9a <__cxa_call_unexpected>:
 8004e9a:	b538      	push	{r3, r4, r5, lr}
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	f7ff ffdf 	bl	8004e60 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004ea2:	b140      	cbz	r0, 8004eb6 <__cxa_call_unexpected+0x1c>
 8004ea4:	2500      	movs	r5, #0
 8004ea6:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 f826 	bl	8004efc <__cxa_begin_catch>
 8004eb0:	b125      	cbz	r5, 8004ebc <__cxa_call_unexpected+0x22>
 8004eb2:	f7ff ffb7 	bl	8004e24 <_ZSt10unexpectedv>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2501      	movs	r5, #1
 8004eba:	e7f6      	b.n	8004eaa <__cxa_call_unexpected+0x10>
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff ffa4 	bl	8004e0a <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004ec2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004ec2:	7803      	ldrb	r3, [r0, #0]
 8004ec4:	2b47      	cmp	r3, #71	; 0x47
 8004ec6:	d117      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ec8:	7843      	ldrb	r3, [r0, #1]
 8004eca:	2b4e      	cmp	r3, #78	; 0x4e
 8004ecc:	d114      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ece:	7883      	ldrb	r3, [r0, #2]
 8004ed0:	2b55      	cmp	r3, #85	; 0x55
 8004ed2:	d111      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ed4:	78c3      	ldrb	r3, [r0, #3]
 8004ed6:	2b43      	cmp	r3, #67	; 0x43
 8004ed8:	d10e      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004eda:	7903      	ldrb	r3, [r0, #4]
 8004edc:	2b43      	cmp	r3, #67	; 0x43
 8004ede:	d10b      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ee0:	7943      	ldrb	r3, [r0, #5]
 8004ee2:	2b2b      	cmp	r3, #43	; 0x2b
 8004ee4:	d108      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004ee6:	7983      	ldrb	r3, [r0, #6]
 8004ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8004eea:	d105      	bne.n	8004ef8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004eec:	79c0      	ldrb	r0, [r0, #7]
 8004eee:	2801      	cmp	r0, #1
 8004ef0:	bf8c      	ite	hi
 8004ef2:	2000      	movhi	r0, #0
 8004ef4:	2001      	movls	r0, #1
 8004ef6:	4770      	bx	lr
 8004ef8:	2000      	movs	r0, #0
 8004efa:	4770      	bx	lr

08004efc <__cxa_begin_catch>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4605      	mov	r5, r0
 8004f00:	f7ff fe78 	bl	8004bf4 <__cxa_get_globals>
 8004f04:	4601      	mov	r1, r0
 8004f06:	6802      	ldr	r2, [r0, #0]
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f1a5 0420 	sub.w	r4, r5, #32
 8004f0e:	f7ff ffd8 	bl	8004ec2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004f12:	b930      	cbnz	r0, 8004f22 <__cxa_begin_catch+0x26>
 8004f14:	b10a      	cbz	r2, 8004f1a <__cxa_begin_catch+0x1e>
 8004f16:	f7ff ff73 	bl	8004e00 <_ZSt9terminatev>
 8004f1a:	600c      	str	r4, [r1, #0]
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	4620      	mov	r0, r4
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8004f26:	4628      	mov	r0, r5
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bfb4      	ite	lt
 8004f2c:	f1c3 0301 	rsblt	r3, r3, #1
 8004f30:	3301      	addge	r3, #1
 8004f32:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004f36:	684b      	ldr	r3, [r1, #4]
 8004f38:	42a2      	cmp	r2, r4
 8004f3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	bf1c      	itt	ne
 8004f42:	f845 2c10 	strne.w	r2, [r5, #-16]
 8004f46:	600c      	strne	r4, [r1, #0]
 8004f48:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004f4a:	f7fb fda5 	bl	8000a98 <_Unwind_Complete>
 8004f4e:	e7e6      	b.n	8004f1e <__cxa_begin_catch+0x22>

08004f50 <abort>:
 8004f50:	b508      	push	{r3, lr}
 8004f52:	2006      	movs	r0, #6
 8004f54:	f000 f8be 	bl	80050d4 <raise>
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f7fd fabb 	bl	80024d4 <_exit>
	...

08004f60 <__errno>:
 8004f60:	4b01      	ldr	r3, [pc, #4]	; (8004f68 <__errno+0x8>)
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000018 	.word	0x20000018

08004f6c <__libc_init_array>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	2500      	movs	r5, #0
 8004f70:	4e0c      	ldr	r6, [pc, #48]	; (8004fa4 <__libc_init_array+0x38>)
 8004f72:	4c0d      	ldr	r4, [pc, #52]	; (8004fa8 <__libc_init_array+0x3c>)
 8004f74:	1ba4      	subs	r4, r4, r6
 8004f76:	10a4      	asrs	r4, r4, #2
 8004f78:	42a5      	cmp	r5, r4
 8004f7a:	d109      	bne.n	8004f90 <__libc_init_array+0x24>
 8004f7c:	f000 f8c8 	bl	8005110 <_init>
 8004f80:	2500      	movs	r5, #0
 8004f82:	4e0a      	ldr	r6, [pc, #40]	; (8004fac <__libc_init_array+0x40>)
 8004f84:	4c0a      	ldr	r4, [pc, #40]	; (8004fb0 <__libc_init_array+0x44>)
 8004f86:	1ba4      	subs	r4, r4, r6
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	42a5      	cmp	r5, r4
 8004f8c:	d105      	bne.n	8004f9a <__libc_init_array+0x2e>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f94:	4798      	blx	r3
 8004f96:	3501      	adds	r5, #1
 8004f98:	e7ee      	b.n	8004f78 <__libc_init_array+0xc>
 8004f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f9e:	4798      	blx	r3
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	e7f2      	b.n	8004f8a <__libc_init_array+0x1e>
 8004fa4:	080054f0 	.word	0x080054f0
 8004fa8:	080054f0 	.word	0x080054f0
 8004fac:	080054f0 	.word	0x080054f0
 8004fb0:	080054fc 	.word	0x080054fc

08004fb4 <free>:
 8004fb4:	4b02      	ldr	r3, [pc, #8]	; (8004fc0 <free+0xc>)
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f000 b817 	b.w	8004fec <_free_r>
 8004fbe:	bf00      	nop
 8004fc0:	20000018 	.word	0x20000018

08004fc4 <memcpy>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	1e43      	subs	r3, r0, #1
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	d100      	bne.n	8004fd0 <memcpy+0xc>
 8004fce:	bd10      	pop	{r4, pc}
 8004fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fd8:	e7f7      	b.n	8004fca <memcpy+0x6>

08004fda <memset>:
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4402      	add	r2, r0
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d100      	bne.n	8004fe4 <memset+0xa>
 8004fe2:	4770      	bx	lr
 8004fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe8:	e7f9      	b.n	8004fde <memset+0x4>
	...

08004fec <_free_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d043      	beq.n	800507c <_free_r+0x90>
 8004ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bfb8      	it	lt
 8004ffe:	18e4      	addlt	r4, r4, r3
 8005000:	f000 f884 	bl	800510c <__malloc_lock>
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <_free_r+0x94>)
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	4610      	mov	r0, r2
 800500a:	b933      	cbnz	r3, 800501a <_free_r+0x2e>
 800500c:	6063      	str	r3, [r4, #4]
 800500e:	6014      	str	r4, [r2, #0]
 8005010:	4628      	mov	r0, r5
 8005012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005016:	f000 b87a 	b.w	800510e <__malloc_unlock>
 800501a:	42a3      	cmp	r3, r4
 800501c:	d90b      	bls.n	8005036 <_free_r+0x4a>
 800501e:	6821      	ldr	r1, [r4, #0]
 8005020:	1862      	adds	r2, r4, r1
 8005022:	4293      	cmp	r3, r2
 8005024:	bf01      	itttt	eq
 8005026:	681a      	ldreq	r2, [r3, #0]
 8005028:	685b      	ldreq	r3, [r3, #4]
 800502a:	1852      	addeq	r2, r2, r1
 800502c:	6022      	streq	r2, [r4, #0]
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	6004      	str	r4, [r0, #0]
 8005032:	e7ed      	b.n	8005010 <_free_r+0x24>
 8005034:	4613      	mov	r3, r2
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	b10a      	cbz	r2, 800503e <_free_r+0x52>
 800503a:	42a2      	cmp	r2, r4
 800503c:	d9fa      	bls.n	8005034 <_free_r+0x48>
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	1858      	adds	r0, r3, r1
 8005042:	42a0      	cmp	r0, r4
 8005044:	d10b      	bne.n	800505e <_free_r+0x72>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	4401      	add	r1, r0
 800504a:	1858      	adds	r0, r3, r1
 800504c:	4282      	cmp	r2, r0
 800504e:	6019      	str	r1, [r3, #0]
 8005050:	d1de      	bne.n	8005010 <_free_r+0x24>
 8005052:	6810      	ldr	r0, [r2, #0]
 8005054:	6852      	ldr	r2, [r2, #4]
 8005056:	4401      	add	r1, r0
 8005058:	6019      	str	r1, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	e7d8      	b.n	8005010 <_free_r+0x24>
 800505e:	d902      	bls.n	8005066 <_free_r+0x7a>
 8005060:	230c      	movs	r3, #12
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	e7d4      	b.n	8005010 <_free_r+0x24>
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1821      	adds	r1, r4, r0
 800506a:	428a      	cmp	r2, r1
 800506c:	bf01      	itttt	eq
 800506e:	6811      	ldreq	r1, [r2, #0]
 8005070:	6852      	ldreq	r2, [r2, #4]
 8005072:	1809      	addeq	r1, r1, r0
 8005074:	6021      	streq	r1, [r4, #0]
 8005076:	6062      	str	r2, [r4, #4]
 8005078:	605c      	str	r4, [r3, #4]
 800507a:	e7c9      	b.n	8005010 <_free_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	bf00      	nop
 8005080:	200010bc 	.word	0x200010bc

08005084 <_raise_r>:
 8005084:	291f      	cmp	r1, #31
 8005086:	b538      	push	{r3, r4, r5, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	460d      	mov	r5, r1
 800508c:	d904      	bls.n	8005098 <_raise_r+0x14>
 800508e:	2316      	movs	r3, #22
 8005090:	6003      	str	r3, [r0, #0]
 8005092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800509a:	b112      	cbz	r2, 80050a2 <_raise_r+0x1e>
 800509c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050a0:	b94b      	cbnz	r3, 80050b6 <_raise_r+0x32>
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 f830 	bl	8005108 <_getpid_r>
 80050a8:	462a      	mov	r2, r5
 80050aa:	4601      	mov	r1, r0
 80050ac:	4620      	mov	r0, r4
 80050ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050b2:	f000 b817 	b.w	80050e4 <_kill_r>
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d00a      	beq.n	80050d0 <_raise_r+0x4c>
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	d103      	bne.n	80050c6 <_raise_r+0x42>
 80050be:	2316      	movs	r3, #22
 80050c0:	6003      	str	r3, [r0, #0]
 80050c2:	2001      	movs	r0, #1
 80050c4:	e7e7      	b.n	8005096 <_raise_r+0x12>
 80050c6:	2400      	movs	r4, #0
 80050c8:	4628      	mov	r0, r5
 80050ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050ce:	4798      	blx	r3
 80050d0:	2000      	movs	r0, #0
 80050d2:	e7e0      	b.n	8005096 <_raise_r+0x12>

080050d4 <raise>:
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <raise+0xc>)
 80050d6:	4601      	mov	r1, r0
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f7ff bfd3 	b.w	8005084 <_raise_r>
 80050de:	bf00      	nop
 80050e0:	20000018 	.word	0x20000018

080050e4 <_kill_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4c06      	ldr	r4, [pc, #24]	; (8005104 <_kill_r+0x20>)
 80050ea:	4605      	mov	r5, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	f7fd f9e7 	bl	80024c4 <_kill>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	d102      	bne.n	8005100 <_kill_r+0x1c>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	b103      	cbz	r3, 8005100 <_kill_r+0x1c>
 80050fe:	602b      	str	r3, [r5, #0]
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	bf00      	nop
 8005104:	20001208 	.word	0x20001208

08005108 <_getpid_r>:
 8005108:	f7fd b9da 	b.w	80024c0 <_getpid>

0800510c <__malloc_lock>:
 800510c:	4770      	bx	lr

0800510e <__malloc_unlock>:
 800510e:	4770      	bx	lr

08005110 <_init>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr

0800511c <_fini>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr
