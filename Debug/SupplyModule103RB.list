
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004204  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000c0  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000160  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08004740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001110  20000084  080047c4  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001194  080047c4  00021194  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018190  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003de2  00000000  00000000  0003823d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000fd0  00000000  00000000  0003c020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001310  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000093aa  00000000  00000000  0003e300  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000060c8  00000000  00000000  000476aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d772  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003238  00000000  00000000  0004d7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a5bc  00000000  00000000  00050a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	080042fc 	.word	0x080042fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	080042fc 	.word	0x080042fc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <selfrel_offset31>:
 8000164:	6803      	ldr	r3, [r0, #0]
 8000166:	005a      	lsls	r2, r3, #1
 8000168:	bf4c      	ite	mi
 800016a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800016e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000172:	4418      	add	r0, r3
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop

08000178 <search_EIT_table>:
 8000178:	b361      	cbz	r1, 80001d4 <search_EIT_table+0x5c>
 800017a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800017e:	f101 3aff 	add.w	sl, r1, #4294967295
 8000182:	4690      	mov	r8, r2
 8000184:	4606      	mov	r6, r0
 8000186:	46d1      	mov	r9, sl
 8000188:	2700      	movs	r7, #0
 800018a:	eb07 0409 	add.w	r4, r7, r9
 800018e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000192:	1064      	asrs	r4, r4, #1
 8000194:	00e5      	lsls	r5, r4, #3
 8000196:	1971      	adds	r1, r6, r5
 8000198:	4608      	mov	r0, r1
 800019a:	f7ff ffe3 	bl	8000164 <selfrel_offset31>
 800019e:	45a2      	cmp	sl, r4
 80001a0:	4683      	mov	fp, r0
 80001a2:	f105 0008 	add.w	r0, r5, #8
 80001a6:	4430      	add	r0, r6
 80001a8:	d009      	beq.n	80001be <search_EIT_table+0x46>
 80001aa:	f7ff ffdb 	bl	8000164 <selfrel_offset31>
 80001ae:	45c3      	cmp	fp, r8
 80001b0:	f100 30ff 	add.w	r0, r0, #4294967295
 80001b4:	d805      	bhi.n	80001c2 <search_EIT_table+0x4a>
 80001b6:	4540      	cmp	r0, r8
 80001b8:	d209      	bcs.n	80001ce <search_EIT_table+0x56>
 80001ba:	1c67      	adds	r7, r4, #1
 80001bc:	e7e5      	b.n	800018a <search_EIT_table+0x12>
 80001be:	45c3      	cmp	fp, r8
 80001c0:	d905      	bls.n	80001ce <search_EIT_table+0x56>
 80001c2:	42a7      	cmp	r7, r4
 80001c4:	d002      	beq.n	80001cc <search_EIT_table+0x54>
 80001c6:	f104 39ff 	add.w	r9, r4, #4294967295
 80001ca:	e7de      	b.n	800018a <search_EIT_table+0x12>
 80001cc:	2100      	movs	r1, #0
 80001ce:	4608      	mov	r0, r1
 80001d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001d4:	4608      	mov	r0, r1
 80001d6:	4770      	bx	lr

080001d8 <__gnu_unwind_get_pr_addr>:
 80001d8:	2801      	cmp	r0, #1
 80001da:	d007      	beq.n	80001ec <__gnu_unwind_get_pr_addr+0x14>
 80001dc:	2802      	cmp	r0, #2
 80001de:	d007      	beq.n	80001f0 <__gnu_unwind_get_pr_addr+0x18>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__gnu_unwind_get_pr_addr+0x1c>)
 80001e2:	2800      	cmp	r0, #0
 80001e4:	bf0c      	ite	eq
 80001e6:	4618      	moveq	r0, r3
 80001e8:	2000      	movne	r0, #0
 80001ea:	4770      	bx	lr
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <__gnu_unwind_get_pr_addr+0x20>)
 80001ee:	4770      	bx	lr
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <__gnu_unwind_get_pr_addr+0x24>)
 80001f2:	4770      	bx	lr
 80001f4:	080008e9 	.word	0x080008e9
 80001f8:	080008ed 	.word	0x080008ed
 80001fc:	080008f1 	.word	0x080008f1

08000200 <get_eit_entry>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <get_eit_entry+0x98>)
 8000204:	b083      	sub	sp, #12
 8000206:	4604      	mov	r4, r0
 8000208:	1e8d      	subs	r5, r1, #2
 800020a:	b373      	cbz	r3, 800026a <get_eit_entry+0x6a>
 800020c:	a901      	add	r1, sp, #4
 800020e:	4628      	mov	r0, r5
 8000210:	f3af 8000 	nop.w
 8000214:	b318      	cbz	r0, 800025e <get_eit_entry+0x5e>
 8000216:	9901      	ldr	r1, [sp, #4]
 8000218:	462a      	mov	r2, r5
 800021a:	f7ff ffad 	bl	8000178 <search_EIT_table>
 800021e:	4601      	mov	r1, r0
 8000220:	b1e8      	cbz	r0, 800025e <get_eit_entry+0x5e>
 8000222:	f7ff ff9f 	bl	8000164 <selfrel_offset31>
 8000226:	684b      	ldr	r3, [r1, #4]
 8000228:	64a0      	str	r0, [r4, #72]	; 0x48
 800022a:	2b01      	cmp	r3, #1
 800022c:	d011      	beq.n	8000252 <get_eit_entry+0x52>
 800022e:	2b00      	cmp	r3, #0
 8000230:	db22      	blt.n	8000278 <get_eit_entry+0x78>
 8000232:	1d08      	adds	r0, r1, #4
 8000234:	f7ff ff96 	bl	8000164 <selfrel_offset31>
 8000238:	2300      	movs	r3, #0
 800023a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800023c:	6523      	str	r3, [r4, #80]	; 0x50
 800023e:	6803      	ldr	r3, [r0, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	db1e      	blt.n	8000282 <get_eit_entry+0x82>
 8000244:	f7ff ff8e 	bl	8000164 <selfrel_offset31>
 8000248:	2300      	movs	r3, #0
 800024a:	6120      	str	r0, [r4, #16]
 800024c:	4618      	mov	r0, r3
 800024e:	b003      	add	sp, #12
 8000250:	bd30      	pop	{r4, r5, pc}
 8000252:	2305      	movs	r3, #5
 8000254:	2200      	movs	r2, #0
 8000256:	4618      	mov	r0, r3
 8000258:	6122      	str	r2, [r4, #16]
 800025a:	b003      	add	sp, #12
 800025c:	bd30      	pop	{r4, r5, pc}
 800025e:	2309      	movs	r3, #9
 8000260:	2200      	movs	r2, #0
 8000262:	4618      	mov	r0, r3
 8000264:	6122      	str	r2, [r4, #16]
 8000266:	b003      	add	sp, #12
 8000268:	bd30      	pop	{r4, r5, pc}
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <get_eit_entry+0x9c>)
 800026c:	490c      	ldr	r1, [pc, #48]	; (80002a0 <get_eit_entry+0xa0>)
 800026e:	4618      	mov	r0, r3
 8000270:	1ac9      	subs	r1, r1, r3
 8000272:	10c9      	asrs	r1, r1, #3
 8000274:	9101      	str	r1, [sp, #4]
 8000276:	e7cf      	b.n	8000218 <get_eit_entry+0x18>
 8000278:	2301      	movs	r3, #1
 800027a:	1d08      	adds	r0, r1, #4
 800027c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800027e:	6523      	str	r3, [r4, #80]	; 0x50
 8000280:	e7dd      	b.n	800023e <get_eit_entry+0x3e>
 8000282:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000286:	f7ff ffa7 	bl	80001d8 <__gnu_unwind_get_pr_addr>
 800028a:	2800      	cmp	r0, #0
 800028c:	6120      	str	r0, [r4, #16]
 800028e:	bf14      	ite	ne
 8000290:	2300      	movne	r3, #0
 8000292:	2309      	moveq	r3, #9
 8000294:	e7da      	b.n	800024c <get_eit_entry+0x4c>
 8000296:	bf00      	nop
 8000298:	00000000 	.word	0x00000000
 800029c:	080045d4 	.word	0x080045d4
 80002a0:	08004734 	.word	0x08004734

080002a4 <restore_non_core_regs>:
 80002a4:	6803      	ldr	r3, [r0, #0]
 80002a6:	b510      	push	{r4, lr}
 80002a8:	07da      	lsls	r2, r3, #31
 80002aa:	4604      	mov	r4, r0
 80002ac:	d406      	bmi.n	80002bc <restore_non_core_regs+0x18>
 80002ae:	079b      	lsls	r3, r3, #30
 80002b0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002b4:	d509      	bpl.n	80002ca <restore_non_core_regs+0x26>
 80002b6:	f000 fc57 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 80002ba:	6823      	ldr	r3, [r4, #0]
 80002bc:	0759      	lsls	r1, r3, #29
 80002be:	d509      	bpl.n	80002d4 <restore_non_core_regs+0x30>
 80002c0:	071a      	lsls	r2, r3, #28
 80002c2:	d50e      	bpl.n	80002e2 <restore_non_core_regs+0x3e>
 80002c4:	06db      	lsls	r3, r3, #27
 80002c6:	d513      	bpl.n	80002f0 <restore_non_core_regs+0x4c>
 80002c8:	bd10      	pop	{r4, pc}
 80002ca:	f000 fc45 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 80002ce:	6823      	ldr	r3, [r4, #0]
 80002d0:	0759      	lsls	r1, r3, #29
 80002d2:	d4f5      	bmi.n	80002c0 <restore_non_core_regs+0x1c>
 80002d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002d8:	f000 fc4e 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	071a      	lsls	r2, r3, #28
 80002e0:	d4f0      	bmi.n	80002c4 <restore_non_core_regs+0x20>
 80002e2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002e6:	f000 fc4f 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 80002ea:	6823      	ldr	r3, [r4, #0]
 80002ec:	06db      	lsls	r3, r3, #27
 80002ee:	d4eb      	bmi.n	80002c8 <restore_non_core_regs+0x24>
 80002f0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002f8:	f000 bc8a 	b.w	8000c10 <__gnu_Unwind_Restore_WMMXC>

080002fc <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002fc:	6803      	ldr	r3, [r0, #0]
 80002fe:	b103      	cbz	r3, 8000302 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000300:	4403      	add	r3, r0
 8000302:	4618      	mov	r0, r3
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop

08000308 <__gnu_unwind_24bit.isra.1>:
 8000308:	2009      	movs	r0, #9
 800030a:	4770      	bx	lr

0800030c <_Unwind_DebugHook>:
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <unwind_phase2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4604      	mov	r4, r0
 8000314:	460d      	mov	r5, r1
 8000316:	e008      	b.n	800032a <unwind_phase2+0x1a>
 8000318:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800031a:	6923      	ldr	r3, [r4, #16]
 800031c:	6162      	str	r2, [r4, #20]
 800031e:	4621      	mov	r1, r4
 8000320:	462a      	mov	r2, r5
 8000322:	2001      	movs	r0, #1
 8000324:	4798      	blx	r3
 8000326:	2808      	cmp	r0, #8
 8000328:	d108      	bne.n	800033c <unwind_phase2+0x2c>
 800032a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800032c:	4620      	mov	r0, r4
 800032e:	f7ff ff67 	bl	8000200 <get_eit_entry>
 8000332:	4606      	mov	r6, r0
 8000334:	2800      	cmp	r0, #0
 8000336:	d0ef      	beq.n	8000318 <unwind_phase2+0x8>
 8000338:	f003 fef2 	bl	8004120 <abort>
 800033c:	2807      	cmp	r0, #7
 800033e:	d1fb      	bne.n	8000338 <unwind_phase2+0x28>
 8000340:	4630      	mov	r0, r6
 8000342:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000344:	f7ff ffe2 	bl	800030c <_Unwind_DebugHook>
 8000348:	1d28      	adds	r0, r5, #4
 800034a:	f000 fbf9 	bl	8000b40 <__restore_core_regs>
 800034e:	bf00      	nop

08000350 <unwind_phase2_forced>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	4605      	mov	r5, r0
 8000356:	2700      	movs	r7, #0
 8000358:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800035c:	ac03      	add	r4, sp, #12
 800035e:	1d0e      	adds	r6, r1, #4
 8000360:	4692      	mov	sl, r2
 8000362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000366:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800036c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000372:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000376:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800037a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800037e:	ac02      	add	r4, sp, #8
 8000380:	4628      	mov	r0, r5
 8000382:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000384:	6027      	str	r7, [r4, #0]
 8000386:	f7ff ff3b 	bl	8000200 <get_eit_entry>
 800038a:	f1ba 0f00 	cmp.w	sl, #0
 800038e:	4607      	mov	r7, r0
 8000390:	bf14      	ite	ne
 8000392:	260a      	movne	r6, #10
 8000394:	2609      	moveq	r6, #9
 8000396:	b17f      	cbz	r7, 80003b8 <unwind_phase2_forced+0x68>
 8000398:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800039a:	f046 0110 	orr.w	r1, r6, #16
 800039e:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003a2:	462a      	mov	r2, r5
 80003a4:	6463      	str	r3, [r4, #68]	; 0x44
 80003a6:	2001      	movs	r0, #1
 80003a8:	462b      	mov	r3, r5
 80003aa:	47c0      	blx	r8
 80003ac:	bb78      	cbnz	r0, 800040e <unwind_phase2_forced+0xbe>
 80003ae:	4638      	mov	r0, r7
 80003b0:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003be:	616b      	str	r3, [r5, #20]
 80003c0:	4621      	mov	r1, r4
 80003c2:	a87a      	add	r0, sp, #488	; 0x1e8
 80003c4:	f003 fef4 	bl	80041b0 <memcpy>
 80003c8:	692b      	ldr	r3, [r5, #16]
 80003ca:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003cc:	4629      	mov	r1, r5
 80003ce:	4630      	mov	r0, r6
 80003d0:	4798      	blx	r3
 80003d2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003d4:	4682      	mov	sl, r0
 80003d6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003da:	4631      	mov	r1, r6
 80003dc:	6463      	str	r3, [r4, #68]	; 0x44
 80003de:	462a      	mov	r2, r5
 80003e0:	462b      	mov	r3, r5
 80003e2:	2001      	movs	r0, #1
 80003e4:	47c0      	blx	r8
 80003e6:	b990      	cbnz	r0, 800040e <unwind_phase2_forced+0xbe>
 80003e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ec:	a97a      	add	r1, sp, #488	; 0x1e8
 80003ee:	4620      	mov	r0, r4
 80003f0:	f003 fede 	bl	80041b0 <memcpy>
 80003f4:	f1ba 0f08 	cmp.w	sl, #8
 80003f8:	d106      	bne.n	8000408 <unwind_phase2_forced+0xb8>
 80003fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003fc:	4628      	mov	r0, r5
 80003fe:	f7ff feff 	bl	8000200 <get_eit_entry>
 8000402:	2609      	movs	r6, #9
 8000404:	4607      	mov	r7, r0
 8000406:	e7c6      	b.n	8000396 <unwind_phase2_forced+0x46>
 8000408:	f1ba 0f07 	cmp.w	sl, #7
 800040c:	d005      	beq.n	800041a <unwind_phase2_forced+0xca>
 800040e:	2709      	movs	r7, #9
 8000410:	4638      	mov	r0, r7
 8000412:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	4638      	mov	r0, r7
 800041c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800041e:	f7ff ff75 	bl	800030c <_Unwind_DebugHook>
 8000422:	a803      	add	r0, sp, #12
 8000424:	f000 fb8c 	bl	8000b40 <__restore_core_regs>

08000428 <_Unwind_GetCFA>:
 8000428:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800042a:	4770      	bx	lr

0800042c <__gnu_Unwind_RaiseException>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	f04f 3eff 	mov.w	lr, #4294967295
 8000432:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000434:	b0f9      	sub	sp, #484	; 0x1e4
 8000436:	640b      	str	r3, [r1, #64]	; 0x40
 8000438:	1d0e      	adds	r6, r1, #4
 800043a:	ad01      	add	r5, sp, #4
 800043c:	460f      	mov	r7, r1
 800043e:	4604      	mov	r4, r0
 8000440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000448:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800044a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800044c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000450:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000454:	f8cd e000 	str.w	lr, [sp]
 8000458:	e006      	b.n	8000468 <__gnu_Unwind_RaiseException+0x3c>
 800045a:	6923      	ldr	r3, [r4, #16]
 800045c:	466a      	mov	r2, sp
 800045e:	4621      	mov	r1, r4
 8000460:	4798      	blx	r3
 8000462:	2808      	cmp	r0, #8
 8000464:	4605      	mov	r5, r0
 8000466:	d108      	bne.n	800047a <__gnu_Unwind_RaiseException+0x4e>
 8000468:	9910      	ldr	r1, [sp, #64]	; 0x40
 800046a:	4620      	mov	r0, r4
 800046c:	f7ff fec8 	bl	8000200 <get_eit_entry>
 8000470:	2800      	cmp	r0, #0
 8000472:	d0f2      	beq.n	800045a <__gnu_Unwind_RaiseException+0x2e>
 8000474:	2009      	movs	r0, #9
 8000476:	b079      	add	sp, #484	; 0x1e4
 8000478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800047a:	4668      	mov	r0, sp
 800047c:	f7ff ff12 	bl	80002a4 <restore_non_core_regs>
 8000480:	2d06      	cmp	r5, #6
 8000482:	d1f7      	bne.n	8000474 <__gnu_Unwind_RaiseException+0x48>
 8000484:	4639      	mov	r1, r7
 8000486:	4620      	mov	r0, r4
 8000488:	f7ff ff42 	bl	8000310 <unwind_phase2>

0800048c <__gnu_Unwind_ForcedUnwind>:
 800048c:	b430      	push	{r4, r5}
 800048e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000490:	60c1      	str	r1, [r0, #12]
 8000492:	6182      	str	r2, [r0, #24]
 8000494:	4619      	mov	r1, r3
 8000496:	641d      	str	r5, [r3, #64]	; 0x40
 8000498:	2200      	movs	r2, #0
 800049a:	bc30      	pop	{r4, r5}
 800049c:	e758      	b.n	8000350 <unwind_phase2_forced>
 800049e:	bf00      	nop

080004a0 <__gnu_Unwind_Resume>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	6943      	ldr	r3, [r0, #20]
 80004a4:	68c6      	ldr	r6, [r0, #12]
 80004a6:	640b      	str	r3, [r1, #64]	; 0x40
 80004a8:	b126      	cbz	r6, 80004b4 <__gnu_Unwind_Resume+0x14>
 80004aa:	2201      	movs	r2, #1
 80004ac:	f7ff ff50 	bl	8000350 <unwind_phase2_forced>
 80004b0:	f003 fe36 	bl	8004120 <abort>
 80004b4:	6903      	ldr	r3, [r0, #16]
 80004b6:	460a      	mov	r2, r1
 80004b8:	4604      	mov	r4, r0
 80004ba:	460d      	mov	r5, r1
 80004bc:	4601      	mov	r1, r0
 80004be:	2002      	movs	r0, #2
 80004c0:	4798      	blx	r3
 80004c2:	2807      	cmp	r0, #7
 80004c4:	d007      	beq.n	80004d6 <__gnu_Unwind_Resume+0x36>
 80004c6:	2808      	cmp	r0, #8
 80004c8:	d103      	bne.n	80004d2 <__gnu_Unwind_Resume+0x32>
 80004ca:	4629      	mov	r1, r5
 80004cc:	4620      	mov	r0, r4
 80004ce:	f7ff ff1f 	bl	8000310 <unwind_phase2>
 80004d2:	f003 fe25 	bl	8004120 <abort>
 80004d6:	4630      	mov	r0, r6
 80004d8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004da:	f7ff ff17 	bl	800030c <_Unwind_DebugHook>
 80004de:	1d28      	adds	r0, r5, #4
 80004e0:	f000 fb2e 	bl	8000b40 <__restore_core_regs>

080004e4 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e4:	68c2      	ldr	r2, [r0, #12]
 80004e6:	b12a      	cbz	r2, 80004f4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e8:	b410      	push	{r4}
 80004ea:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004ec:	2200      	movs	r2, #0
 80004ee:	640c      	str	r4, [r1, #64]	; 0x40
 80004f0:	bc10      	pop	{r4}
 80004f2:	e72d      	b.n	8000350 <unwind_phase2_forced>
 80004f4:	e79a      	b.n	800042c <__gnu_Unwind_RaiseException>
 80004f6:	bf00      	nop

080004f8 <_Unwind_Complete>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <_Unwind_DeleteException>:
 80004fc:	6883      	ldr	r3, [r0, #8]
 80004fe:	b113      	cbz	r3, 8000506 <_Unwind_DeleteException+0xa>
 8000500:	4601      	mov	r1, r0
 8000502:	2001      	movs	r0, #1
 8000504:	4718      	bx	r3
 8000506:	4770      	bx	lr

08000508 <_Unwind_VRS_Get>:
 8000508:	b500      	push	{lr}
 800050a:	2904      	cmp	r1, #4
 800050c:	d807      	bhi.n	800051e <_Unwind_VRS_Get+0x16>
 800050e:	e8df f001 	tbb	[pc, r1]
 8000512:	0903      	.short	0x0903
 8000514:	0906      	.short	0x0906
 8000516:	09          	.byte	0x09
 8000517:	00          	.byte	0x00
 8000518:	b90b      	cbnz	r3, 800051e <_Unwind_VRS_Get+0x16>
 800051a:	2a0f      	cmp	r2, #15
 800051c:	d905      	bls.n	800052a <_Unwind_VRS_Get+0x22>
 800051e:	2002      	movs	r0, #2
 8000520:	f85d fb04 	ldr.w	pc, [sp], #4
 8000524:	2001      	movs	r0, #1
 8000526:	f85d fb04 	ldr.w	pc, [sp], #4
 800052a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800052e:	6852      	ldr	r2, [r2, #4]
 8000530:	4618      	mov	r0, r3
 8000532:	9b01      	ldr	r3, [sp, #4]
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	f85d fb04 	ldr.w	pc, [sp], #4
 800053a:	bf00      	nop

0800053c <_Unwind_GetGR>:
 800053c:	2300      	movs	r3, #0
 800053e:	b510      	push	{r4, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	ac03      	add	r4, sp, #12
 8000544:	460a      	mov	r2, r1
 8000546:	9400      	str	r4, [sp, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f7ff ffdd 	bl	8000508 <_Unwind_VRS_Get>
 800054e:	9803      	ldr	r0, [sp, #12]
 8000550:	b004      	add	sp, #16
 8000552:	bd10      	pop	{r4, pc}

08000554 <_Unwind_VRS_Set>:
 8000554:	b500      	push	{lr}
 8000556:	2904      	cmp	r1, #4
 8000558:	d807      	bhi.n	800056a <_Unwind_VRS_Set+0x16>
 800055a:	e8df f001 	tbb	[pc, r1]
 800055e:	0903      	.short	0x0903
 8000560:	0906      	.short	0x0906
 8000562:	09          	.byte	0x09
 8000563:	00          	.byte	0x00
 8000564:	b90b      	cbnz	r3, 800056a <_Unwind_VRS_Set+0x16>
 8000566:	2a0f      	cmp	r2, #15
 8000568:	d905      	bls.n	8000576 <_Unwind_VRS_Set+0x22>
 800056a:	2002      	movs	r0, #2
 800056c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000570:	2001      	movs	r0, #1
 8000572:	f85d fb04 	ldr.w	pc, [sp], #4
 8000576:	9901      	ldr	r1, [sp, #4]
 8000578:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800057c:	6809      	ldr	r1, [r1, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	6051      	str	r1, [r2, #4]
 8000582:	f85d fb04 	ldr.w	pc, [sp], #4
 8000586:	bf00      	nop

08000588 <_Unwind_SetGR>:
 8000588:	2300      	movs	r3, #0
 800058a:	b510      	push	{r4, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	ac04      	add	r4, sp, #16
 8000590:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000594:	9400      	str	r4, [sp, #0]
 8000596:	460a      	mov	r2, r1
 8000598:	4619      	mov	r1, r3
 800059a:	f7ff ffdb 	bl	8000554 <_Unwind_VRS_Set>
 800059e:	b004      	add	sp, #16
 80005a0:	bd10      	pop	{r4, pc}
 80005a2:	bf00      	nop

080005a4 <__gnu_Unwind_Backtrace>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	f04f 3eff 	mov.w	lr, #4294967295
 80005aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005ac:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005b0:	6413      	str	r3, [r2, #64]	; 0x40
 80005b2:	1d15      	adds	r5, r2, #4
 80005b4:	ac17      	add	r4, sp, #92	; 0x5c
 80005b6:	4607      	mov	r7, r0
 80005b8:	460e      	mov	r6, r1
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ce:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005d2:	e012      	b.n	80005fa <__gnu_Unwind_Backtrace+0x56>
 80005d4:	210c      	movs	r1, #12
 80005d6:	a816      	add	r0, sp, #88	; 0x58
 80005d8:	466a      	mov	r2, sp
 80005da:	f7ff ffd5 	bl	8000588 <_Unwind_SetGR>
 80005de:	4631      	mov	r1, r6
 80005e0:	a816      	add	r0, sp, #88	; 0x58
 80005e2:	47b8      	blx	r7
 80005e4:	b978      	cbnz	r0, 8000606 <__gnu_Unwind_Backtrace+0x62>
 80005e6:	9b04      	ldr	r3, [sp, #16]
 80005e8:	aa16      	add	r2, sp, #88	; 0x58
 80005ea:	4669      	mov	r1, sp
 80005ec:	2008      	movs	r0, #8
 80005ee:	4798      	blx	r3
 80005f0:	2805      	cmp	r0, #5
 80005f2:	4604      	mov	r4, r0
 80005f4:	d008      	beq.n	8000608 <__gnu_Unwind_Backtrace+0x64>
 80005f6:	2809      	cmp	r0, #9
 80005f8:	d005      	beq.n	8000606 <__gnu_Unwind_Backtrace+0x62>
 80005fa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005fc:	4668      	mov	r0, sp
 80005fe:	f7ff fdff 	bl	8000200 <get_eit_entry>
 8000602:	2800      	cmp	r0, #0
 8000604:	d0e6      	beq.n	80005d4 <__gnu_Unwind_Backtrace+0x30>
 8000606:	2409      	movs	r4, #9
 8000608:	a816      	add	r0, sp, #88	; 0x58
 800060a:	f7ff fe4b 	bl	80002a4 <restore_non_core_regs>
 800060e:	4620      	mov	r0, r4
 8000610:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop

08000618 <__gnu_unwind_pr_common>:
 8000618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800061c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800061e:	4691      	mov	r9, r2
 8000620:	6822      	ldr	r2, [r4, #0]
 8000622:	b08b      	sub	sp, #44	; 0x2c
 8000624:	3404      	adds	r4, #4
 8000626:	460d      	mov	r5, r1
 8000628:	9207      	str	r2, [sp, #28]
 800062a:	9408      	str	r4, [sp, #32]
 800062c:	f000 0b03 	and.w	fp, r0, #3
 8000630:	461e      	mov	r6, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d160      	bne.n	80006f8 <__gnu_unwind_pr_common+0xe0>
 8000636:	2303      	movs	r3, #3
 8000638:	0212      	lsls	r2, r2, #8
 800063a:	9207      	str	r2, [sp, #28]
 800063c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000640:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000644:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000646:	f1bb 0f02 	cmp.w	fp, #2
 800064a:	bf08      	it	eq
 800064c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800064e:	f013 0301 	ands.w	r3, r3, #1
 8000652:	d140      	bne.n	80006d6 <__gnu_unwind_pr_common+0xbe>
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f000 0308 	and.w	r3, r0, #8
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	f8d4 8000 	ldr.w	r8, [r4]
 8000660:	f1b8 0f00 	cmp.w	r8, #0
 8000664:	d039      	beq.n	80006da <__gnu_unwind_pr_common+0xc2>
 8000666:	2e02      	cmp	r6, #2
 8000668:	d043      	beq.n	80006f2 <__gnu_unwind_pr_common+0xda>
 800066a:	f8b4 8000 	ldrh.w	r8, [r4]
 800066e:	8867      	ldrh	r7, [r4, #2]
 8000670:	3404      	adds	r4, #4
 8000672:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000674:	f027 0a01 	bic.w	sl, r7, #1
 8000678:	210f      	movs	r1, #15
 800067a:	4648      	mov	r0, r9
 800067c:	449a      	add	sl, r3
 800067e:	f7ff ff5d 	bl	800053c <_Unwind_GetGR>
 8000682:	4582      	cmp	sl, r0
 8000684:	d833      	bhi.n	80006ee <__gnu_unwind_pr_common+0xd6>
 8000686:	f028 0301 	bic.w	r3, r8, #1
 800068a:	449a      	add	sl, r3
 800068c:	4550      	cmp	r0, sl
 800068e:	bf2c      	ite	cs
 8000690:	2000      	movcs	r0, #0
 8000692:	2001      	movcc	r0, #1
 8000694:	007f      	lsls	r7, r7, #1
 8000696:	f007 0702 	and.w	r7, r7, #2
 800069a:	f008 0801 	and.w	r8, r8, #1
 800069e:	ea47 0708 	orr.w	r7, r7, r8
 80006a2:	2f01      	cmp	r7, #1
 80006a4:	d03e      	beq.n	8000724 <__gnu_unwind_pr_common+0x10c>
 80006a6:	d335      	bcc.n	8000714 <__gnu_unwind_pr_common+0xfc>
 80006a8:	2f02      	cmp	r7, #2
 80006aa:	d11c      	bne.n	80006e6 <__gnu_unwind_pr_common+0xce>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006b2:	9202      	str	r2, [sp, #8]
 80006b4:	f1bb 0f00 	cmp.w	fp, #0
 80006b8:	d176      	bne.n	80007a8 <__gnu_unwind_pr_common+0x190>
 80006ba:	b128      	cbz	r0, 80006c8 <__gnu_unwind_pr_common+0xb0>
 80006bc:	9903      	ldr	r1, [sp, #12]
 80006be:	2900      	cmp	r1, #0
 80006c0:	d07e      	beq.n	80007c0 <__gnu_unwind_pr_common+0x1a8>
 80006c2:	2a00      	cmp	r2, #0
 80006c4:	f000 80a6 	beq.w	8000814 <__gnu_unwind_pr_common+0x1fc>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db77      	blt.n	80007bc <__gnu_unwind_pr_common+0x1a4>
 80006cc:	9b02      	ldr	r3, [sp, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006d4:	e7c2      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2e02      	cmp	r6, #2
 80006dc:	dd3e      	ble.n	800075c <__gnu_unwind_pr_common+0x144>
 80006de:	f7ff fe13 	bl	8000308 <__gnu_unwind_24bit.isra.1>
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d040      	beq.n	8000768 <__gnu_unwind_pr_common+0x150>
 80006e6:	2009      	movs	r0, #9
 80006e8:	b00b      	add	sp, #44	; 0x2c
 80006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ee:	2000      	movs	r0, #0
 80006f0:	e7d0      	b.n	8000694 <__gnu_unwind_pr_common+0x7c>
 80006f2:	6867      	ldr	r7, [r4, #4]
 80006f4:	3408      	adds	r4, #8
 80006f6:	e7bc      	b.n	8000672 <__gnu_unwind_pr_common+0x5a>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	dca3      	bgt.n	8000644 <__gnu_unwind_pr_common+0x2c>
 80006fc:	2102      	movs	r1, #2
 80006fe:	0c13      	lsrs	r3, r2, #16
 8000700:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000704:	0412      	lsls	r2, r2, #16
 8000706:	b2db      	uxtb	r3, r3
 8000708:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800070c:	9207      	str	r2, [sp, #28]
 800070e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000712:	e797      	b.n	8000644 <__gnu_unwind_pr_common+0x2c>
 8000714:	f1bb 0f00 	cmp.w	fp, #0
 8000718:	d002      	beq.n	8000720 <__gnu_unwind_pr_common+0x108>
 800071a:	2800      	cmp	r0, #0
 800071c:	f040 80bd 	bne.w	800089a <__gnu_unwind_pr_common+0x282>
 8000720:	3404      	adds	r4, #4
 8000722:	e79b      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 8000724:	f1bb 0f00 	cmp.w	fp, #0
 8000728:	d125      	bne.n	8000776 <__gnu_unwind_pr_common+0x15e>
 800072a:	b1a8      	cbz	r0, 8000758 <__gnu_unwind_pr_common+0x140>
 800072c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000730:	1c99      	adds	r1, r3, #2
 8000732:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000736:	d0d6      	beq.n	80006e6 <__gnu_unwind_pr_common+0xce>
 8000738:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800073c:	3301      	adds	r3, #1
 800073e:	9106      	str	r1, [sp, #24]
 8000740:	f000 80a3 	beq.w	800088a <__gnu_unwind_pr_common+0x272>
 8000744:	1d20      	adds	r0, r4, #4
 8000746:	f7ff fdd9 	bl	80002fc <_Unwind_decode_typeinfo_ptr.isra.0>
 800074a:	ab06      	add	r3, sp, #24
 800074c:	4601      	mov	r1, r0
 800074e:	4628      	mov	r0, r5
 8000750:	f003 fb3e 	bl	8003dd0 <__cxa_type_match>
 8000754:	2800      	cmp	r0, #0
 8000756:	d177      	bne.n	8000848 <__gnu_unwind_pr_common+0x230>
 8000758:	3408      	adds	r4, #8
 800075a:	e77f      	b.n	800065c <__gnu_unwind_pr_common+0x44>
 800075c:	a907      	add	r1, sp, #28
 800075e:	4648      	mov	r0, r9
 8000760:	f000 faf0 	bl	8000d44 <__gnu_unwind_execute>
 8000764:	2800      	cmp	r0, #0
 8000766:	d1be      	bne.n	80006e6 <__gnu_unwind_pr_common+0xce>
 8000768:	9b01      	ldr	r3, [sp, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d15c      	bne.n	8000828 <__gnu_unwind_pr_common+0x210>
 800076e:	2008      	movs	r0, #8
 8000770:	b00b      	add	sp, #44	; 0x2c
 8000772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000776:	210d      	movs	r1, #13
 8000778:	4648      	mov	r0, r9
 800077a:	6a2f      	ldr	r7, [r5, #32]
 800077c:	f7ff fede 	bl	800053c <_Unwind_GetGR>
 8000780:	4287      	cmp	r7, r0
 8000782:	d1e9      	bne.n	8000758 <__gnu_unwind_pr_common+0x140>
 8000784:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000786:	429c      	cmp	r4, r3
 8000788:	d1e6      	bne.n	8000758 <__gnu_unwind_pr_common+0x140>
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff fcea 	bl	8000164 <selfrel_offset31>
 8000790:	210f      	movs	r1, #15
 8000792:	4602      	mov	r2, r0
 8000794:	4648      	mov	r0, r9
 8000796:	f7ff fef7 	bl	8000588 <_Unwind_SetGR>
 800079a:	4648      	mov	r0, r9
 800079c:	462a      	mov	r2, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	f7ff fef2 	bl	8000588 <_Unwind_SetGR>
 80007a4:	2007      	movs	r0, #7
 80007a6:	e79f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80007a8:	210d      	movs	r1, #13
 80007aa:	4648      	mov	r0, r9
 80007ac:	6a2f      	ldr	r7, [r5, #32]
 80007ae:	f7ff fec5 	bl	800053c <_Unwind_GetGR>
 80007b2:	4287      	cmp	r7, r0
 80007b4:	d058      	beq.n	8000868 <__gnu_unwind_pr_common+0x250>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	da87      	bge.n	80006cc <__gnu_unwind_pr_common+0xb4>
 80007bc:	3404      	adds	r4, #4
 80007be:	e785      	b.n	80006cc <__gnu_unwind_pr_common+0xb4>
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	b33b      	cbz	r3, 8000814 <__gnu_unwind_pr_common+0x1fc>
 80007c4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007c8:	1d27      	adds	r7, r4, #4
 80007ca:	f8cd b010 	str.w	fp, [sp, #16]
 80007ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007d2:	46a3      	mov	fp, r4
 80007d4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007d8:	461c      	mov	r4, r3
 80007da:	9605      	str	r6, [sp, #20]
 80007dc:	e002      	b.n	80007e4 <__gnu_unwind_pr_common+0x1cc>
 80007de:	45b2      	cmp	sl, r6
 80007e0:	46b0      	mov	r8, r6
 80007e2:	d016      	beq.n	8000812 <__gnu_unwind_pr_common+0x1fa>
 80007e4:	4638      	mov	r0, r7
 80007e6:	9406      	str	r4, [sp, #24]
 80007e8:	f7ff fd88 	bl	80002fc <_Unwind_decode_typeinfo_ptr.isra.0>
 80007ec:	ab06      	add	r3, sp, #24
 80007ee:	4601      	mov	r1, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	4628      	mov	r0, r5
 80007f4:	f003 faec 	bl	8003dd0 <__cxa_type_match>
 80007f8:	f108 0601 	add.w	r6, r8, #1
 80007fc:	3704      	adds	r7, #4
 80007fe:	2800      	cmp	r0, #0
 8000800:	d0ed      	beq.n	80007de <__gnu_unwind_pr_common+0x1c6>
 8000802:	9b02      	ldr	r3, [sp, #8]
 8000804:	465c      	mov	r4, fp
 8000806:	4543      	cmp	r3, r8
 8000808:	f8dd b010 	ldr.w	fp, [sp, #16]
 800080c:	9e05      	ldr	r6, [sp, #20]
 800080e:	d1d2      	bne.n	80007b6 <__gnu_unwind_pr_common+0x19e>
 8000810:	e000      	b.n	8000814 <__gnu_unwind_pr_common+0x1fc>
 8000812:	465c      	mov	r4, fp
 8000814:	4648      	mov	r0, r9
 8000816:	210d      	movs	r1, #13
 8000818:	f7ff fe90 	bl	800053c <_Unwind_GetGR>
 800081c:	9b06      	ldr	r3, [sp, #24]
 800081e:	6228      	str	r0, [r5, #32]
 8000820:	62ac      	str	r4, [r5, #40]	; 0x28
 8000822:	626b      	str	r3, [r5, #36]	; 0x24
 8000824:	2006      	movs	r0, #6
 8000826:	e75f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000828:	210f      	movs	r1, #15
 800082a:	4648      	mov	r0, r9
 800082c:	f7ff fe86 	bl	800053c <_Unwind_GetGR>
 8000830:	210e      	movs	r1, #14
 8000832:	4602      	mov	r2, r0
 8000834:	4648      	mov	r0, r9
 8000836:	f7ff fea7 	bl	8000588 <_Unwind_SetGR>
 800083a:	4648      	mov	r0, r9
 800083c:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <__gnu_unwind_pr_common+0x2cc>)
 800083e:	210f      	movs	r1, #15
 8000840:	f7ff fea2 	bl	8000588 <_Unwind_SetGR>
 8000844:	2007      	movs	r0, #7
 8000846:	e74f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000848:	4607      	mov	r7, r0
 800084a:	210d      	movs	r1, #13
 800084c:	4648      	mov	r0, r9
 800084e:	f7ff fe75 	bl	800053c <_Unwind_GetGR>
 8000852:	2f02      	cmp	r7, #2
 8000854:	6228      	str	r0, [r5, #32]
 8000856:	d11d      	bne.n	8000894 <__gnu_unwind_pr_common+0x27c>
 8000858:	462b      	mov	r3, r5
 800085a:	9a06      	ldr	r2, [sp, #24]
 800085c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000860:	626b      	str	r3, [r5, #36]	; 0x24
 8000862:	62ac      	str	r4, [r5, #40]	; 0x28
 8000864:	2006      	movs	r0, #6
 8000866:	e73f      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 8000868:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800086a:	429c      	cmp	r4, r3
 800086c:	d1a3      	bne.n	80007b6 <__gnu_unwind_pr_common+0x19e>
 800086e:	2204      	movs	r2, #4
 8000870:	2700      	movs	r7, #0
 8000872:	9902      	ldr	r1, [sp, #8]
 8000874:	18a3      	adds	r3, r4, r2
 8000876:	62a9      	str	r1, [r5, #40]	; 0x28
 8000878:	62ef      	str	r7, [r5, #44]	; 0x2c
 800087a:	632a      	str	r2, [r5, #48]	; 0x30
 800087c:	636b      	str	r3, [r5, #52]	; 0x34
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	42bb      	cmp	r3, r7
 8000882:	db1d      	blt.n	80008c0 <__gnu_unwind_pr_common+0x2a8>
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	e720      	b.n	80006cc <__gnu_unwind_pr_common+0xb4>
 800088a:	4648      	mov	r0, r9
 800088c:	210d      	movs	r1, #13
 800088e:	f7ff fe55 	bl	800053c <_Unwind_GetGR>
 8000892:	6228      	str	r0, [r5, #32]
 8000894:	9b06      	ldr	r3, [sp, #24]
 8000896:	626b      	str	r3, [r5, #36]	; 0x24
 8000898:	e7e3      	b.n	8000862 <__gnu_unwind_pr_common+0x24a>
 800089a:	4620      	mov	r0, r4
 800089c:	f7ff fc62 	bl	8000164 <selfrel_offset31>
 80008a0:	3404      	adds	r4, #4
 80008a2:	4606      	mov	r6, r0
 80008a4:	63ac      	str	r4, [r5, #56]	; 0x38
 80008a6:	4628      	mov	r0, r5
 80008a8:	f003 faf0 	bl	8003e8c <__cxa_begin_cleanup>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	f43f af1a 	beq.w	80006e6 <__gnu_unwind_pr_common+0xce>
 80008b2:	4648      	mov	r0, r9
 80008b4:	4632      	mov	r2, r6
 80008b6:	210f      	movs	r1, #15
 80008b8:	f7ff fe66 	bl	8000588 <_Unwind_SetGR>
 80008bc:	2007      	movs	r0, #7
 80008be:	e713      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80008c0:	4608      	mov	r0, r1
 80008c2:	3001      	adds	r0, #1
 80008c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008c8:	f7ff fc4c 	bl	8000164 <selfrel_offset31>
 80008cc:	210f      	movs	r1, #15
 80008ce:	4602      	mov	r2, r0
 80008d0:	4648      	mov	r0, r9
 80008d2:	f7ff fe59 	bl	8000588 <_Unwind_SetGR>
 80008d6:	4648      	mov	r0, r9
 80008d8:	462a      	mov	r2, r5
 80008da:	4639      	mov	r1, r7
 80008dc:	f7ff fe54 	bl	8000588 <_Unwind_SetGR>
 80008e0:	2007      	movs	r0, #7
 80008e2:	e701      	b.n	80006e8 <__gnu_unwind_pr_common+0xd0>
 80008e4:	0800401b 	.word	0x0800401b

080008e8 <__aeabi_unwind_cpp_pr0>:
 80008e8:	2300      	movs	r3, #0
 80008ea:	e695      	b.n	8000618 <__gnu_unwind_pr_common>

080008ec <__aeabi_unwind_cpp_pr1>:
 80008ec:	2301      	movs	r3, #1
 80008ee:	e693      	b.n	8000618 <__gnu_unwind_pr_common>

080008f0 <__aeabi_unwind_cpp_pr2>:
 80008f0:	2302      	movs	r3, #2
 80008f2:	e691      	b.n	8000618 <__gnu_unwind_pr_common>

080008f4 <_Unwind_VRS_Pop>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	b0c5      	sub	sp, #276	; 0x114
 80008fa:	2904      	cmp	r1, #4
 80008fc:	d80d      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 80008fe:	e8df f001 	tbb	[pc, r1]
 8000902:	0355      	.short	0x0355
 8000904:	310c      	.short	0x310c
 8000906:	0f          	.byte	0x0f
 8000907:	00          	.byte	0x00
 8000908:	2b01      	cmp	r3, #1
 800090a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800090e:	b295      	uxth	r5, r2
 8000910:	d164      	bne.n	80009dc <_Unwind_VRS_Pop+0xe8>
 8000912:	1972      	adds	r2, r6, r5
 8000914:	2a10      	cmp	r2, #16
 8000916:	f240 809d 	bls.w	8000a54 <_Unwind_VRS_Pop+0x160>
 800091a:	2002      	movs	r0, #2
 800091c:	b045      	add	sp, #276	; 0x114
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1fa      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 8000924:	2a10      	cmp	r2, #16
 8000926:	d8f8      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	06d8      	lsls	r0, r3, #27
 800092c:	f100 80c8 	bmi.w	8000ac0 <_Unwind_VRS_Pop+0x1cc>
 8000930:	ae22      	add	r6, sp, #136	; 0x88
 8000932:	4630      	mov	r0, r6
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	2501      	movs	r5, #1
 8000938:	f000 f974 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 800093c:	2300      	movs	r3, #0
 800093e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000940:	9a01      	ldr	r2, [sp, #4]
 8000942:	fa05 f103 	lsl.w	r1, r5, r3
 8000946:	4211      	tst	r1, r2
 8000948:	d003      	beq.n	8000952 <_Unwind_VRS_Pop+0x5e>
 800094a:	6801      	ldr	r1, [r0, #0]
 800094c:	3004      	adds	r0, #4
 800094e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000952:	3301      	adds	r3, #1
 8000954:	2b04      	cmp	r3, #4
 8000956:	d1f4      	bne.n	8000942 <_Unwind_VRS_Pop+0x4e>
 8000958:	63a0      	str	r0, [r4, #56]	; 0x38
 800095a:	4630      	mov	r0, r6
 800095c:	f000 f958 	bl	8000c10 <__gnu_Unwind_Restore_WMMXC>
 8000960:	2000      	movs	r0, #0
 8000962:	e7db      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 8000964:	2b03      	cmp	r3, #3
 8000966:	d1d8      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 8000968:	0c15      	lsrs	r5, r2, #16
 800096a:	b297      	uxth	r7, r2
 800096c:	19eb      	adds	r3, r5, r7
 800096e:	2b10      	cmp	r3, #16
 8000970:	d8d3      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	071e      	lsls	r6, r3, #28
 8000976:	f100 80b7 	bmi.w	8000ae8 <_Unwind_VRS_Pop+0x1f4>
 800097a:	ae22      	add	r6, sp, #136	; 0x88
 800097c:	4630      	mov	r0, r6
 800097e:	f000 f925 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000982:	00ed      	lsls	r5, r5, #3
 8000984:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000986:	b15f      	cbz	r7, 80009a0 <_Unwind_VRS_Pop+0xac>
 8000988:	3d04      	subs	r5, #4
 800098a:	4603      	mov	r3, r0
 800098c:	1971      	adds	r1, r6, r5
 800098e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000992:	f853 2b04 	ldr.w	r2, [r3], #4
 8000996:	4283      	cmp	r3, r0
 8000998:	f841 2f04 	str.w	r2, [r1, #4]!
 800099c:	d1f9      	bne.n	8000992 <_Unwind_VRS_Pop+0x9e>
 800099e:	4618      	mov	r0, r3
 80009a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80009a2:	4630      	mov	r0, r6
 80009a4:	f000 f8f0 	bl	8000b88 <__gnu_Unwind_Restore_WMMXD>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7b7      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1b4      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 80009b0:	2701      	movs	r7, #1
 80009b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80009b4:	b296      	uxth	r6, r2
 80009b6:	1d20      	adds	r0, r4, #4
 80009b8:	fa07 f103 	lsl.w	r1, r7, r3
 80009bc:	4231      	tst	r1, r6
 80009be:	f103 0301 	add.w	r3, r3, #1
 80009c2:	d002      	beq.n	80009ca <_Unwind_VRS_Pop+0xd6>
 80009c4:	6829      	ldr	r1, [r5, #0]
 80009c6:	3504      	adds	r5, #4
 80009c8:	6001      	str	r1, [r0, #0]
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	f100 0004 	add.w	r0, r0, #4
 80009d0:	d1f2      	bne.n	80009b8 <_Unwind_VRS_Pop+0xc4>
 80009d2:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009d6:	d13b      	bne.n	8000a50 <_Unwind_VRS_Pop+0x15c>
 80009d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80009da:	e79f      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 80009dc:	2b05      	cmp	r3, #5
 80009de:	d19c      	bne.n	800091a <_Unwind_VRS_Pop+0x26>
 80009e0:	1977      	adds	r7, r6, r5
 80009e2:	2f20      	cmp	r7, #32
 80009e4:	d899      	bhi.n	800091a <_Unwind_VRS_Pop+0x26>
 80009e6:	2e0f      	cmp	r6, #15
 80009e8:	d966      	bls.n	8000ab8 <_Unwind_VRS_Pop+0x1c4>
 80009ea:	462f      	mov	r7, r5
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d13a      	bne.n	8000a66 <_Unwind_VRS_Pop+0x172>
 80009f0:	462a      	mov	r2, r5
 80009f2:	2700      	movs	r7, #0
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009f8:	dd72      	ble.n	8000ae0 <_Unwind_VRS_Pop+0x1ec>
 80009fa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009fe:	4601      	mov	r1, r0
 8000a00:	a844      	add	r0, sp, #272	; 0x110
 8000a02:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a06:	388c      	subs	r0, #140	; 0x8c
 8000a08:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a0c:	4291      	cmp	r1, r2
 8000a0e:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a12:	d1f9      	bne.n	8000a08 <_Unwind_VRS_Pop+0x114>
 8000a14:	4608      	mov	r0, r1
 8000a16:	b197      	cbz	r7, 8000a3e <_Unwind_VRS_Pop+0x14a>
 8000a18:	2e10      	cmp	r6, #16
 8000a1a:	4632      	mov	r2, r6
 8000a1c:	bf38      	it	cc
 8000a1e:	2210      	movcc	r2, #16
 8000a20:	a944      	add	r1, sp, #272	; 0x110
 8000a22:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a26:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a2a:	0079      	lsls	r1, r7, #1
 8000a2c:	3a04      	subs	r2, #4
 8000a2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a32:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a36:	4288      	cmp	r0, r1
 8000a38:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a3c:	d1f9      	bne.n	8000a32 <_Unwind_VRS_Pop+0x13e>
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d048      	beq.n	8000ad4 <_Unwind_VRS_Pop+0x1e0>
 8000a42:	2e0f      	cmp	r6, #15
 8000a44:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a46:	d933      	bls.n	8000ab0 <_Unwind_VRS_Pop+0x1bc>
 8000a48:	b117      	cbz	r7, 8000a50 <_Unwind_VRS_Pop+0x15c>
 8000a4a:	a802      	add	r0, sp, #8
 8000a4c:	f000 f894 	bl	8000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e763      	b.n	800091c <_Unwind_VRS_Pop+0x28>
 8000a54:	2e0f      	cmp	r6, #15
 8000a56:	f63f af60 	bhi.w	800091a <_Unwind_VRS_Pop+0x26>
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	6822      	ldr	r2, [r4, #0]
 8000a5e:	07d1      	lsls	r1, r2, #31
 8000a60:	d417      	bmi.n	8000a92 <_Unwind_VRS_Pop+0x19e>
 8000a62:	2f00      	cmp	r7, #0
 8000a64:	d060      	beq.n	8000b28 <_Unwind_VRS_Pop+0x234>
 8000a66:	6822      	ldr	r2, [r4, #0]
 8000a68:	0751      	lsls	r1, r2, #29
 8000a6a:	d445      	bmi.n	8000af8 <_Unwind_VRS_Pop+0x204>
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d04d      	beq.n	8000b0c <_Unwind_VRS_Pop+0x218>
 8000a70:	2e0f      	cmp	r6, #15
 8000a72:	d806      	bhi.n	8000a82 <_Unwind_VRS_Pop+0x18e>
 8000a74:	a822      	add	r0, sp, #136	; 0x88
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	f000 f87a 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000a7c:	9b01      	ldr	r3, [sp, #4]
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d0b6      	beq.n	80009f0 <_Unwind_VRS_Pop+0xfc>
 8000a82:	a802      	add	r0, sp, #8
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	f000 f87b 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a8a:	9b01      	ldr	r3, [sp, #4]
 8000a8c:	f1c6 0210 	rsb	r2, r6, #16
 8000a90:	e7b0      	b.n	80009f4 <_Unwind_VRS_Pop+0x100>
 8000a92:	f022 0101 	bic.w	r1, r2, #1
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	6021      	str	r1, [r4, #0]
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	d03b      	beq.n	8000b18 <_Unwind_VRS_Pop+0x224>
 8000aa0:	f022 0203 	bic.w	r2, r2, #3
 8000aa4:	f840 2b48 	str.w	r2, [r0], #72
 8000aa8:	f000 f85a 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000aac:	9b01      	ldr	r3, [sp, #4]
 8000aae:	e7d8      	b.n	8000a62 <_Unwind_VRS_Pop+0x16e>
 8000ab0:	a822      	add	r0, sp, #136	; 0x88
 8000ab2:	f000 f859 	bl	8000b68 <__gnu_Unwind_Restore_VFP_D>
 8000ab6:	e7c7      	b.n	8000a48 <_Unwind_VRS_Pop+0x154>
 8000ab8:	2f10      	cmp	r7, #16
 8000aba:	d9ce      	bls.n	8000a5a <_Unwind_VRS_Pop+0x166>
 8000abc:	3f10      	subs	r7, #16
 8000abe:	e7cd      	b.n	8000a5c <_Unwind_VRS_Pop+0x168>
 8000ac0:	f023 0310 	bic.w	r3, r3, #16
 8000ac4:	6023      	str	r3, [r4, #0]
 8000ac6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000aca:	9201      	str	r2, [sp, #4]
 8000acc:	f000 f8aa 	bl	8000c24 <__gnu_Unwind_Save_WMMXC>
 8000ad0:	9a01      	ldr	r2, [sp, #4]
 8000ad2:	e72d      	b.n	8000930 <_Unwind_VRS_Pop+0x3c>
 8000ad4:	3104      	adds	r1, #4
 8000ad6:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ad8:	a822      	add	r0, sp, #136	; 0x88
 8000ada:	f000 f83d 	bl	8000b58 <__gnu_Unwind_Restore_VFP>
 8000ade:	e7b7      	b.n	8000a50 <_Unwind_VRS_Pop+0x15c>
 8000ae0:	2f00      	cmp	r7, #0
 8000ae2:	d199      	bne.n	8000a18 <_Unwind_VRS_Pop+0x124>
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	e7aa      	b.n	8000a3e <_Unwind_VRS_Pop+0x14a>
 8000ae8:	f023 0308 	bic.w	r3, r3, #8
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000af2:	f000 f86b 	bl	8000bcc <__gnu_Unwind_Save_WMMXD>
 8000af6:	e740      	b.n	800097a <_Unwind_VRS_Pop+0x86>
 8000af8:	4620      	mov	r0, r4
 8000afa:	f022 0204 	bic.w	r2, r2, #4
 8000afe:	f840 2bd0 	str.w	r2, [r0], #208
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	f000 f83c 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	e7af      	b.n	8000a6c <_Unwind_VRS_Pop+0x178>
 8000b0c:	a822      	add	r0, sp, #136	; 0x88
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	f000 f826 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	e7b9      	b.n	8000a8c <_Unwind_VRS_Pop+0x198>
 8000b18:	f041 0102 	orr.w	r1, r1, #2
 8000b1c:	f840 1b48 	str.w	r1, [r0], #72
 8000b20:	f000 f826 	bl	8000b70 <__gnu_Unwind_Save_VFP_D>
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	e79c      	b.n	8000a62 <_Unwind_VRS_Pop+0x16e>
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d003      	beq.n	8000b34 <_Unwind_VRS_Pop+0x240>
 8000b2c:	2e0f      	cmp	r6, #15
 8000b2e:	f63f af5f 	bhi.w	80009f0 <_Unwind_VRS_Pop+0xfc>
 8000b32:	e79f      	b.n	8000a74 <_Unwind_VRS_Pop+0x180>
 8000b34:	a822      	add	r0, sp, #136	; 0x88
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f000 f812 	bl	8000b60 <__gnu_Unwind_Save_VFP>
 8000b3c:	9b01      	ldr	r3, [sp, #4]
 8000b3e:	e757      	b.n	80009f0 <_Unwind_VRS_Pop+0xfc>

08000b40 <__restore_core_regs>:
 8000b40:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b44:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b48:	469c      	mov	ip, r3
 8000b4a:	46a6      	mov	lr, r4
 8000b4c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b50:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b54:	46e5      	mov	sp, ip
 8000b56:	bd00      	pop	{pc}

08000b58 <__gnu_Unwind_Restore_VFP>:
 8000b58:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__gnu_Unwind_Save_VFP>:
 8000b60:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gnu_Unwind_Restore_VFP_D>:
 8000b68:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__gnu_Unwind_Save_VFP_D>:
 8000b70:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b78:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b80:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__gnu_Unwind_Restore_WMMXD>:
 8000b88:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b8c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b90:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b94:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b98:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b9c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ba0:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba4:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ba8:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bac:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bb0:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb4:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bb8:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bbc:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bc0:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc4:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Save_WMMXD>:
 8000bcc:	ece0 0102 	stfe	f0, [r0], #8
 8000bd0:	ece0 1102 	stfe	f1, [r0], #8
 8000bd4:	ece0 2102 	stfe	f2, [r0], #8
 8000bd8:	ece0 3102 	stfe	f3, [r0], #8
 8000bdc:	ece0 4102 	stfe	f4, [r0], #8
 8000be0:	ece0 5102 	stfe	f5, [r0], #8
 8000be4:	ece0 6102 	stfe	f6, [r0], #8
 8000be8:	ece0 7102 	stfe	f7, [r0], #8
 8000bec:	ece0 8102 	stfp	f0, [r0], #8
 8000bf0:	ece0 9102 	stfp	f1, [r0], #8
 8000bf4:	ece0 a102 	stfp	f2, [r0], #8
 8000bf8:	ece0 b102 	stfp	f3, [r0], #8
 8000bfc:	ece0 c102 	stfp	f4, [r0], #8
 8000c00:	ece0 d102 	stfp	f5, [r0], #8
 8000c04:	ece0 e102 	stfp	f6, [r0], #8
 8000c08:	ece0 f102 	stfp	f7, [r0], #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__gnu_Unwind_Restore_WMMXC>:
 8000c10:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c14:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c18:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c1c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__gnu_Unwind_Save_WMMXC>:
 8000c24:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c28:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c2c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c30:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <_Unwind_RaiseException>:
 8000c38:	46ec      	mov	ip, sp
 8000c3a:	b500      	push	{lr}
 8000c3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c4c:	a901      	add	r1, sp, #4
 8000c4e:	f7ff fbed 	bl	800042c <__gnu_Unwind_RaiseException>
 8000c52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c56:	b012      	add	sp, #72	; 0x48
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <_Unwind_Resume>:
 8000c5c:	46ec      	mov	ip, sp
 8000c5e:	b500      	push	{lr}
 8000c60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c70:	a901      	add	r1, sp, #4
 8000c72:	f7ff fc15 	bl	80004a0 <__gnu_Unwind_Resume>
 8000c76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c7a:	b012      	add	sp, #72	; 0x48
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <_Unwind_Resume_or_Rethrow>:
 8000c80:	46ec      	mov	ip, sp
 8000c82:	b500      	push	{lr}
 8000c84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c94:	a901      	add	r1, sp, #4
 8000c96:	f7ff fc25 	bl	80004e4 <__gnu_Unwind_Resume_or_Rethrow>
 8000c9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9e:	b012      	add	sp, #72	; 0x48
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <_Unwind_ForcedUnwind>:
 8000ca4:	46ec      	mov	ip, sp
 8000ca6:	b500      	push	{lr}
 8000ca8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb8:	ab01      	add	r3, sp, #4
 8000cba:	f7ff fbe7 	bl	800048c <__gnu_Unwind_ForcedUnwind>
 8000cbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc2:	b012      	add	sp, #72	; 0x48
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <_Unwind_Backtrace>:
 8000cc8:	46ec      	mov	ip, sp
 8000cca:	b500      	push	{lr}
 8000ccc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cdc:	aa01      	add	r2, sp, #4
 8000cde:	f7ff fc61 	bl	80005a4 <__gnu_Unwind_Backtrace>
 8000ce2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce6:	b012      	add	sp, #72	; 0x48
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <next_unwind_byte>:
 8000cec:	7a02      	ldrb	r2, [r0, #8]
 8000cee:	b91a      	cbnz	r2, 8000cf8 <next_unwind_byte+0xc>
 8000cf0:	7a43      	ldrb	r3, [r0, #9]
 8000cf2:	b943      	cbnz	r3, 8000d06 <next_unwind_byte+0x1a>
 8000cf4:	20b0      	movs	r0, #176	; 0xb0
 8000cf6:	4770      	bx	lr
 8000cf8:	6803      	ldr	r3, [r0, #0]
 8000cfa:	3a01      	subs	r2, #1
 8000cfc:	7202      	strb	r2, [r0, #8]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	6002      	str	r2, [r0, #0]
 8000d02:	0e18      	lsrs	r0, r3, #24
 8000d04:	4770      	bx	lr
 8000d06:	2103      	movs	r1, #3
 8000d08:	6842      	ldr	r2, [r0, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b410      	push	{r4}
 8000d0e:	7243      	strb	r3, [r0, #9]
 8000d10:	6813      	ldr	r3, [r2, #0]
 8000d12:	1d14      	adds	r4, r2, #4
 8000d14:	7201      	strb	r1, [r0, #8]
 8000d16:	021a      	lsls	r2, r3, #8
 8000d18:	6044      	str	r4, [r0, #4]
 8000d1a:	6002      	str	r2, [r0, #0]
 8000d1c:	bc10      	pop	{r4}
 8000d1e:	0e18      	lsrs	r0, r3, #24
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <_Unwind_GetGR.constprop.0>:
 8000d24:	2300      	movs	r3, #0
 8000d26:	b500      	push	{lr}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	aa03      	add	r2, sp, #12
 8000d2c:	9200      	str	r2, [sp, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	220c      	movs	r2, #12
 8000d32:	f7ff fbe9 	bl	8000508 <_Unwind_VRS_Get>
 8000d36:	9803      	ldr	r0, [sp, #12]
 8000d38:	b005      	add	sp, #20
 8000d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3e:	bf00      	nop

08000d40 <unwind_UCB_from_context>:
 8000d40:	e7f0      	b.n	8000d24 <_Unwind_GetGR.constprop.0>
 8000d42:	bf00      	nop

08000d44 <__gnu_unwind_execute>:
 8000d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d48:	4606      	mov	r6, r0
 8000d4a:	460f      	mov	r7, r1
 8000d4c:	f04f 0800 	mov.w	r8, #0
 8000d50:	b085      	sub	sp, #20
 8000d52:	4638      	mov	r0, r7
 8000d54:	f7ff ffca 	bl	8000cec <next_unwind_byte>
 8000d58:	28b0      	cmp	r0, #176	; 0xb0
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	d023      	beq.n	8000da6 <__gnu_unwind_execute+0x62>
 8000d5e:	0605      	lsls	r5, r0, #24
 8000d60:	d427      	bmi.n	8000db2 <__gnu_unwind_execute+0x6e>
 8000d62:	2300      	movs	r3, #0
 8000d64:	f10d 090c 	add.w	r9, sp, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	0085      	lsls	r5, r0, #2
 8000d6c:	220d      	movs	r2, #13
 8000d6e:	f8cd 9000 	str.w	r9, [sp]
 8000d72:	4630      	mov	r0, r6
 8000d74:	f7ff fbc8 	bl	8000508 <_Unwind_VRS_Get>
 8000d78:	b2ed      	uxtb	r5, r5
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	0660      	lsls	r0, r4, #25
 8000d7e:	f105 0504 	add.w	r5, r5, #4
 8000d82:	bf4c      	ite	mi
 8000d84:	1b5d      	submi	r5, r3, r5
 8000d86:	18ed      	addpl	r5, r5, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	220d      	movs	r2, #13
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f8cd 9000 	str.w	r9, [sp]
 8000d92:	4630      	mov	r0, r6
 8000d94:	9503      	str	r5, [sp, #12]
 8000d96:	f7ff fbdd 	bl	8000554 <_Unwind_VRS_Set>
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	f7ff ffa6 	bl	8000cec <next_unwind_byte>
 8000da0:	28b0      	cmp	r0, #176	; 0xb0
 8000da2:	4604      	mov	r4, r0
 8000da4:	d1db      	bne.n	8000d5e <__gnu_unwind_execute+0x1a>
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	f000 8094 	beq.w	8000ed6 <__gnu_unwind_execute+0x192>
 8000dae:	2000      	movs	r0, #0
 8000db0:	e01c      	b.n	8000dec <__gnu_unwind_execute+0xa8>
 8000db2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000db6:	2b80      	cmp	r3, #128	; 0x80
 8000db8:	d05c      	beq.n	8000e74 <__gnu_unwind_execute+0x130>
 8000dba:	2b90      	cmp	r3, #144	; 0x90
 8000dbc:	d019      	beq.n	8000df2 <__gnu_unwind_execute+0xae>
 8000dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8000dc0:	d02c      	beq.n	8000e1c <__gnu_unwind_execute+0xd8>
 8000dc2:	2bb0      	cmp	r3, #176	; 0xb0
 8000dc4:	d03e      	beq.n	8000e44 <__gnu_unwind_execute+0x100>
 8000dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8000dc8:	d06b      	beq.n	8000ea2 <__gnu_unwind_execute+0x15e>
 8000dca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dce:	2bd0      	cmp	r3, #208	; 0xd0
 8000dd0:	d10b      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000dd2:	f000 0207 	and.w	r2, r0, #7
 8000dd6:	3201      	adds	r2, #1
 8000dd8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ddc:	2305      	movs	r3, #5
 8000dde:	2101      	movs	r1, #1
 8000de0:	4630      	mov	r0, r6
 8000de2:	f7ff fd87 	bl	80008f4 <_Unwind_VRS_Pop>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d0b3      	beq.n	8000d52 <__gnu_unwind_execute+0xe>
 8000dea:	2009      	movs	r0, #9
 8000dec:	b005      	add	sp, #20
 8000dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000df2:	f000 030d 	and.w	r3, r0, #13
 8000df6:	2b0d      	cmp	r3, #13
 8000df8:	d0f7      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	ad03      	add	r5, sp, #12
 8000dfe:	f000 020f 	and.w	r2, r0, #15
 8000e02:	4619      	mov	r1, r3
 8000e04:	9500      	str	r5, [sp, #0]
 8000e06:	4630      	mov	r0, r6
 8000e08:	f7ff fb7e 	bl	8000508 <_Unwind_VRS_Get>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9500      	str	r5, [sp, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	220d      	movs	r2, #13
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff fb9d 	bl	8000554 <_Unwind_VRS_Set>
 8000e1a:	e79a      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e1c:	43c3      	mvns	r3, r0
 8000e1e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	411a      	asrs	r2, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	0701      	lsls	r1, r0, #28
 8000e2c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e30:	bf48      	it	mi
 8000e32:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e36:	4619      	mov	r1, r3
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fd5b 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d1d3      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e42:	e786      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e44:	28b1      	cmp	r0, #177	; 0xb1
 8000e46:	d057      	beq.n	8000ef8 <__gnu_unwind_execute+0x1b4>
 8000e48:	28b2      	cmp	r0, #178	; 0xb2
 8000e4a:	d068      	beq.n	8000f1e <__gnu_unwind_execute+0x1da>
 8000e4c:	28b3      	cmp	r0, #179	; 0xb3
 8000e4e:	f000 8095 	beq.w	8000f7c <__gnu_unwind_execute+0x238>
 8000e52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e56:	2bb4      	cmp	r3, #180	; 0xb4
 8000e58:	d0c7      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 0207 	and.w	r2, r0, #7
 8000e60:	441a      	add	r2, r3
 8000e62:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e66:	4619      	mov	r1, r3
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f7ff fd43 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d1bb      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e72:	e76e      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000e74:	4638      	mov	r0, r7
 8000e76:	f7ff ff39 	bl	8000cec <next_unwind_byte>
 8000e7a:	0224      	lsls	r4, r4, #8
 8000e7c:	4304      	orrs	r4, r0
 8000e7e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e82:	d0b2      	beq.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e84:	2300      	movs	r3, #0
 8000e86:	0124      	lsls	r4, r4, #4
 8000e88:	b2a2      	uxth	r2, r4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f7ff fd31 	bl	80008f4 <_Unwind_VRS_Pop>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d1a9      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000e96:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e9a:	bf18      	it	ne
 8000e9c:	f04f 0801 	movne.w	r8, #1
 8000ea0:	e757      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000ea2:	28c6      	cmp	r0, #198	; 0xc6
 8000ea4:	d07d      	beq.n	8000fa2 <__gnu_unwind_execute+0x25e>
 8000ea6:	28c7      	cmp	r0, #199	; 0xc7
 8000ea8:	f000 8086 	beq.w	8000fb8 <__gnu_unwind_execute+0x274>
 8000eac:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8000eb2:	f000 8094 	beq.w	8000fde <__gnu_unwind_execute+0x29a>
 8000eb6:	28c8      	cmp	r0, #200	; 0xc8
 8000eb8:	f000 809f 	beq.w	8000ffa <__gnu_unwind_execute+0x2b6>
 8000ebc:	28c9      	cmp	r0, #201	; 0xc9
 8000ebe:	d194      	bne.n	8000dea <__gnu_unwind_execute+0xa6>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f7ff ff13 	bl	8000cec <next_unwind_byte>
 8000ec6:	0302      	lsls	r2, r0, #12
 8000ec8:	f000 000f 	and.w	r0, r0, #15
 8000ecc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	4302      	orrs	r2, r0
 8000ed4:	e782      	b.n	8000ddc <__gnu_unwind_execute+0x98>
 8000ed6:	ac03      	add	r4, sp, #12
 8000ed8:	4643      	mov	r3, r8
 8000eda:	220e      	movs	r2, #14
 8000edc:	4641      	mov	r1, r8
 8000ede:	9400      	str	r4, [sp, #0]
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff fb11 	bl	8000508 <_Unwind_VRS_Get>
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	4630      	mov	r0, r6
 8000eea:	4643      	mov	r3, r8
 8000eec:	220f      	movs	r2, #15
 8000eee:	4641      	mov	r1, r8
 8000ef0:	f7ff fb30 	bl	8000554 <_Unwind_VRS_Set>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e779      	b.n	8000dec <__gnu_unwind_execute+0xa8>
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f7ff fef7 	bl	8000cec <next_unwind_byte>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f43f af73 	beq.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f04:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f08:	f47f af6f 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4630      	mov	r0, r6
 8000f12:	f7ff fcef 	bl	80008f4 <_Unwind_VRS_Pop>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	f47f af67 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000f1c:	e719      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f10d 090c 	add.w	r9, sp, #12
 8000f24:	220d      	movs	r2, #13
 8000f26:	4619      	mov	r1, r3
 8000f28:	f8cd 9000 	str.w	r9, [sp]
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f7ff faeb 	bl	8000508 <_Unwind_VRS_Get>
 8000f32:	4638      	mov	r0, r7
 8000f34:	f7ff feda 	bl	8000cec <next_unwind_byte>
 8000f38:	0602      	lsls	r2, r0, #24
 8000f3a:	f04f 0402 	mov.w	r4, #2
 8000f3e:	d50c      	bpl.n	8000f5a <__gnu_unwind_execute+0x216>
 8000f40:	9b03      	ldr	r3, [sp, #12]
 8000f42:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f46:	40a0      	lsls	r0, r4
 8000f48:	4403      	add	r3, r0
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	9303      	str	r3, [sp, #12]
 8000f4e:	f7ff fecd 	bl	8000cec <next_unwind_byte>
 8000f52:	0603      	lsls	r3, r0, #24
 8000f54:	f104 0407 	add.w	r4, r4, #7
 8000f58:	d4f2      	bmi.n	8000f40 <__gnu_unwind_execute+0x1fc>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9903      	ldr	r1, [sp, #12]
 8000f5e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f62:	40a2      	lsls	r2, r4
 8000f64:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f68:	188c      	adds	r4, r1, r2
 8000f6a:	f8cd 9000 	str.w	r9, [sp]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	220d      	movs	r2, #13
 8000f72:	4630      	mov	r0, r6
 8000f74:	9403      	str	r4, [sp, #12]
 8000f76:	f7ff faed 	bl	8000554 <_Unwind_VRS_Set>
 8000f7a:	e6ea      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f7ff feb5 	bl	8000cec <next_unwind_byte>
 8000f82:	2301      	movs	r3, #1
 8000f84:	0301      	lsls	r1, r0, #12
 8000f86:	f000 000f 	and.w	r0, r0, #15
 8000f8a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f8e:	18c2      	adds	r2, r0, r3
 8000f90:	430a      	orrs	r2, r1
 8000f92:	4630      	mov	r0, r6
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fcad 	bl	80008f4 <_Unwind_VRS_Pop>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	f47f af25 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fa0:	e6d7      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f7ff fea2 	bl	8000cec <next_unwind_byte>
 8000fa8:	0301      	lsls	r1, r0, #12
 8000faa:	f000 000f 	and.w	r0, r0, #15
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fb4:	1c42      	adds	r2, r0, #1
 8000fb6:	e7eb      	b.n	8000f90 <__gnu_unwind_execute+0x24c>
 8000fb8:	4638      	mov	r0, r7
 8000fba:	f7ff fe97 	bl	8000cec <next_unwind_byte>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f43f af13 	beq.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fc4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc8:	f47f af0f 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	f7ff fc8f 	bl	80008f4 <_Unwind_VRS_Pop>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f47f af07 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000fdc:	e6b9      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f000 020f 	and.w	r2, r0, #15
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fea:	4619      	mov	r1, r3
 8000fec:	4630      	mov	r0, r6
 8000fee:	f7ff fc81 	bl	80008f4 <_Unwind_VRS_Pop>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	f47f aef9 	bne.w	8000dea <__gnu_unwind_execute+0xa6>
 8000ff8:	e6ab      	b.n	8000d52 <__gnu_unwind_execute+0xe>
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	f7ff fe76 	bl	8000cec <next_unwind_byte>
 8001000:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001004:	f000 030f 	and.w	r3, r0, #15
 8001008:	3210      	adds	r2, #16
 800100a:	3301      	adds	r3, #1
 800100c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001010:	e6e4      	b.n	8000ddc <__gnu_unwind_execute+0x98>
 8001012:	bf00      	nop

08001014 <__gnu_unwind_frame>:
 8001014:	b530      	push	{r4, r5, lr}
 8001016:	2403      	movs	r4, #3
 8001018:	460d      	mov	r5, r1
 800101a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800101c:	b085      	sub	sp, #20
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	f88d 400c 	strb.w	r4, [sp, #12]
 8001024:	79dc      	ldrb	r4, [r3, #7]
 8001026:	0212      	lsls	r2, r2, #8
 8001028:	3308      	adds	r3, #8
 800102a:	a901      	add	r1, sp, #4
 800102c:	4628      	mov	r0, r5
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	f88d 400d 	strb.w	r4, [sp, #13]
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	f7ff fe85 	bl	8000d44 <__gnu_unwind_execute>
 800103a:	b005      	add	sp, #20
 800103c:	bd30      	pop	{r4, r5, pc}
 800103e:	bf00      	nop

08001040 <_Unwind_GetRegionStart>:
 8001040:	b508      	push	{r3, lr}
 8001042:	f7ff fe7d 	bl	8000d40 <unwind_UCB_from_context>
 8001046:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001048:	bd08      	pop	{r3, pc}
 800104a:	bf00      	nop

0800104c <_Unwind_GetLanguageSpecificData>:
 800104c:	b508      	push	{r3, lr}
 800104e:	f7ff fe77 	bl	8000d40 <unwind_UCB_from_context>
 8001052:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001054:	79c3      	ldrb	r3, [r0, #7]
 8001056:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800105a:	3008      	adds	r0, #8
 800105c:	bd08      	pop	{r3, pc}
 800105e:	bf00      	nop

08001060 <_Unwind_GetTextRelBase>:
 8001060:	b508      	push	{r3, lr}
 8001062:	f003 f85d 	bl	8004120 <abort>
 8001066:	bf00      	nop

08001068 <_Unwind_GetDataRelBase>:
 8001068:	b508      	push	{r3, lr}
 800106a:	f7ff fff9 	bl	8001060 <_Unwind_GetTextRelBase>
 800106e:	bf00      	nop

08001070 <_Z13AllTasks_initv>:
float per, volt, perAvrg, voltAvrg ;
uint8_t RXdata;
LedNotifier led(LD2_GPIO_Port, LD2_Pin);


void AllTasks_init(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <_Z13AllTasks_initv+0x60>)
 8001078:	f107 041c 	add.w	r4, r7, #28
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f001 ffcc 	bl	800302e <osThreadCreate>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <_Z13AllTasks_initv+0x64>)
 800109a:	601a      	str	r2, [r3, #0]

	  osThreadDef(LedUpTask, StartLedUpTask, osPriorityBelowNormal, 0, 256);
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <_Z13AllTasks_initv+0x68>)
 800109e:	463c      	mov	r4, r7
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  LedUpHandle = osThreadCreate(osThread(LedUpTask), NULL);
 80010ae:	463b      	mov	r3, r7
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ffbb 	bl	800302e <osThreadCreate>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_Z13AllTasks_initv+0x6c>)
 80010bc:	601a      	str	r2, [r3, #0]


	  HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <_Z13AllTasks_initv+0x70>)
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <_Z13AllTasks_initv+0x74>)
 80010c4:	f001 fea2 	bl	8002e0c <HAL_UART_Receive_IT>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	08004328 	.word	0x08004328
 80010d4:	200000a0 	.word	0x200000a0
 80010d8:	08004350 	.word	0x08004350
 80010dc:	200000a4 	.word	0x200000a4
 80010e0:	200000c0 	.word	0x200000c0
 80010e4:	2000114c 	.word	0x2000114c

080010e8 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]


	uint32_t counter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
//	LipoCell lipo;
	HAL_ADC_Start(&hadc1);
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <_Z23StartBatteryManagerTaskPKv+0x24>)
 80010f6:	f000 fd7f 	bl	8001bf8 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, receiveADC, 2);
 80010fa:	2202      	movs	r2, #2
 80010fc:	4904      	ldr	r1, [pc, #16]	; (8001110 <_Z23StartBatteryManagerTaskPKv+0x28>)
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <_Z23StartBatteryManagerTaskPKv+0x24>)
 8001100:	f000 fddc 	bl	8001cbc <HAL_ADC_Start_DMA>
//		volt= lipo.getVoltage();
//		perAvrg = lipo.getPercentageAvrg();
//		voltAvrg= lipo.getVoltageAvrg();


		osDelay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f001 ffba 	bl	800307e <osDelay>
 800110a:	e7fb      	b.n	8001104 <_Z23StartBatteryManagerTaskPKv+0x1c>
 800110c:	20001090 	.word	0x20001090
 8001110:	200000a8 	.word	0x200000a8

08001114 <_Z14StartLedUpTaskPKv>:


	}
}

void StartLedUpTask(void const * argument){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	for(;;){
		led.process();
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <_Z14StartLedUpTaskPKv+0x18>)
 800111e:	f000 f923 	bl	8001368 <_ZN11LedNotifier7processEv>
		osDelay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f001 ffab 	bl	800307e <osDelay>
		led.process();
 8001128:	e7f8      	b.n	800111c <_Z14StartLedUpTaskPKv+0x8>
 800112a:	bf00      	nop
 800112c:	200000c4 	.word	0x200000c4

08001130 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	static uint16_t per =500;
	if		(RXdata == 'n') led.on();
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b6e      	cmp	r3, #110	; 0x6e
 800113e:	d103      	bne.n	8001148 <HAL_UART_RxCpltCallback+0x18>
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <HAL_UART_RxCpltCallback+0x90>)
 8001142:	f000 f885 	bl	8001250 <_ZN11LedNotifier2onEv>
 8001146:	e02f      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
	else if (RXdata == 'f') led.off();
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b66      	cmp	r3, #102	; 0x66
 800114e:	d103      	bne.n	8001158 <HAL_UART_RxCpltCallback+0x28>
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <HAL_UART_RxCpltCallback+0x90>)
 8001152:	f000 f895 	bl	8001280 <_ZN11LedNotifier3offEv>
 8001156:	e027      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
	else if (RXdata == 'b'){
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b62      	cmp	r3, #98	; 0x62
 800115e:	d10d      	bne.n	800117c <HAL_UART_RxCpltCallback+0x4c>
		led.blink(per);
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	; (80011c0 <HAL_UART_RxCpltCallback+0x90>)
 8001168:	f000 f8cc 	bl	8001304 <_ZN11LedNotifier5blinkEm>
		per +=500;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	e015      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
	}
	else if (RXdata == 'c'){
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b63      	cmp	r3, #99	; 0x63
 8001182:	d111      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x78>
		if(per >500) per -=500;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800118c:	dd06      	ble.n	800119c <HAL_UART_RxCpltCallback+0x6c>
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 800119a:	801a      	strh	r2, [r3, #0]
		led.blink(per);
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_UART_RxCpltCallback+0x94>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <HAL_UART_RxCpltCallback+0x90>)
 80011a4:	f000 f8ae 	bl	8001304 <_ZN11LedNotifier5blinkEm>
	}
	HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4904      	ldr	r1, [pc, #16]	; (80011bc <HAL_UART_RxCpltCallback+0x8c>)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_UART_RxCpltCallback+0x98>)
 80011ae:	f001 fe2d 	bl	8002e0c <HAL_UART_Receive_IT>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000c0 	.word	0x200000c0
 80011c0:	200000c4 	.word	0x200000c4
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000114c 	.word	0x2000114c

080011cc <_Z41__static_initialization_and_destruction_0ii>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d10f      	bne.n	80011fc <_Z41__static_initialization_and_destruction_0ii+0x30>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10a      	bne.n	80011fc <_Z41__static_initialization_and_destruction_0ii+0x30>
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
 80011e6:	2300      	movs	r3, #0
 80011e8:	2220      	movs	r2, #32
 80011ea:	4906      	ldr	r1, [pc, #24]	; (8001204 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80011ee:	f000 f8d9 	bl	80013a4 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80011f8:	f002 fdc7 	bl	8003d8a <__aeabi_atexit>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010800 	.word	0x40010800
 8001208:	200000c4 	.word	0x200000c4
 800120c:	20000000 	.word	0x20000000
 8001210:	08001405 	.word	0x08001405

08001214 <_GLOBAL__sub_I_BatteryManagerHandle>:
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
 8001218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffd5 	bl	80011cc <_Z41__static_initialization_and_destruction_0ii>
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN11LedNotifier13getONPinStateEv>:
	uint32_t blinkPeriodON, blinkPeriodOFF, currPeriod;

	uint8_t isReversed;
	GPIO_PinState onState; //state consider as ON
	GPIO_PinState offState; //state consider as OFF
	GPIO_PinState getONPinState(){ return onState;};
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <_ZN11LedNotifier14getOFFPinStateEv>:
	GPIO_PinState getOFFPinState(){return offState; };
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7e9b      	ldrb	r3, [r3, #26]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <_ZN11LedNotifier2onEv>:
 *      Author: Igor
 */

#include <LedNotifier.h>

void LedNotifier::on(){
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port,Pin, getONPinState());
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685c      	ldr	r4, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	891d      	ldrh	r5, [r3, #8]
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffdf 	bl	8001224 <_ZN11LedNotifier13getONPinStateEv>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4629      	mov	r1, r5
 800126c:	4620      	mov	r0, r4
 800126e:	f001 f8d5 	bl	800241c <HAL_GPIO_WritePin>
	curState = ON;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	729a      	strb	r2, [r3, #10]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bdb0      	pop	{r4, r5, r7, pc}

08001280 <_ZN11LedNotifier3offEv>:
void LedNotifier::off(){
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Port,Pin, getOFFPinState());
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685c      	ldr	r4, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	891d      	ldrh	r5, [r3, #8]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffd2 	bl	800123a <_ZN11LedNotifier14getOFFPinStateEv>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4629      	mov	r1, r5
 800129c:	4620      	mov	r0, r4
 800129e:	f001 f8bd 	bl	800241c <HAL_GPIO_WritePin>
	curState = OFF;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	729a      	strb	r2, [r3, #10]
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}

080012b0 <_ZN11LedNotifier6toggleEv>:

void LedNotifier::toggle(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Port,Pin);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	891b      	ldrh	r3, [r3, #8]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f001 f8af 	bl	8002426 <HAL_GPIO_TogglePin>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZN11LedNotifier9getPeriodEv>:

uint32_t LedNotifier::getPeriod(){
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	if (currPeriod == blinkPeriodON) currPeriod = blinkPeriodOFF;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d104      	bne.n	80012ee <_ZN11LedNotifier9getPeriodEv+0x1e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	e003      	b.n	80012f6 <_ZN11LedNotifier9getPeriodEv+0x26>
	else currPeriod = blinkPeriodON;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]
	return currPeriod;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <_ZN11LedNotifier5blinkEm>:
void LedNotifier::blink( uint32_t perON){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	blink(perON,perON);
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f804 	bl	8001320 <_ZN11LedNotifier5blinkEmm>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN11LedNotifier5blinkEmm>:

void LedNotifier::blink( uint32_t perON, uint32_t perOFF){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	off();
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ffa7 	bl	8001280 <_ZN11LedNotifier3offEv>
	curState = BLINK;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2202      	movs	r2, #2
 8001336:	729a      	strb	r2, [r3, #10]
	blinkPeriodON = perON;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	60da      	str	r2, [r3, #12]
	blinkPeriodOFF = perOFF;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
	currPeriod = perOFF;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	615a      	str	r2, [r3, #20]
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN11LedNotifier8getStateEv>:
LedNotifier::LedState LedNotifier::getState(){
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return curState;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7a9b      	ldrb	r3, [r3, #10]
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <_ZN11LedNotifier7processEv>:

void LedNotifier::process(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(getState() == LedNotifier::BLINK){
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffee 	bl	8001352 <_ZN11LedNotifier8getStateEv>
 8001376:	4603      	mov	r3, r0
 8001378:	2b02      	cmp	r3, #2
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <_ZN11LedNotifier7processEv+0x32>
		toggle();
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff92 	bl	80012b0 <_ZN11LedNotifier6toggleEv>
		osDelay(getPeriod());
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff9f 	bl	80012d0 <_ZN11LedNotifier9getPeriodEv>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fe72 	bl	800307e <osDelay>

	}
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>:

LedNotifier::LedNotifier(GPIO_TypeDef *port, uint16_t pin,uint8_t rev) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	4611      	mov	r1, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	460b      	mov	r3, r1
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x5c>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]
	isReversed = rev;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	797a      	ldrb	r2, [r7, #5]
 80013c4:	761a      	strb	r2, [r3, #24]
	if(isReversed){ onState = GPIO_PIN_RESET; offState= GPIO_PIN_SET;}
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	7e1b      	ldrb	r3, [r3, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x38>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	765a      	strb	r2, [r3, #25]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	769a      	strb	r2, [r3, #26]
 80013da:	e005      	b.n	80013e8 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x44>
	else    {onState = GPIO_PIN_SET;   offState= GPIO_PIN_RESET;}
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	765a      	strb	r2, [r3, #25]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	769a      	strb	r2, [r3, #26]

	Port = port;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	605a      	str	r2, [r3, #4]
	Pin = pin;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	811a      	strh	r2, [r3, #8]

}
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	08004374 	.word	0x08004374

08001404 <_ZN11LedNotifierD1Ev>:

LedNotifier::~LedNotifier() {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <_ZN11LedNotifierD1Ev+0x1c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	08004374 	.word	0x08004374

08001424 <_ZN11LedNotifierD0Ev>:
LedNotifier::~LedNotifier() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
}
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ffe9 	bl	8001404 <_ZN11LedNotifierD1Ev>
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f002 fca7 	bl	8003d86 <_ZdlPv>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001444:	4819      	ldr	r0, [pc, #100]	; (80014ac <MX_ADC1_Init+0x68>)
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_ADC1_Init+0x6c>)
{
 8001448:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 800144a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001452:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001458:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 800145c:	2302      	movs	r3, #2
{
 800145e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001460:	9401      	str	r4, [sp, #4]
 8001462:	9402      	str	r4, [sp, #8]
 8001464:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001466:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001468:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146a:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 800146c:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800146e:	f000 fcd5 	bl	8001e1c <HAL_ADC_Init>
 8001472:	b108      	cbz	r0, 8001478 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8001474:	f000 f9ac 	bl	80017d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001478:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	a901      	add	r1, sp, #4
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_ADC1_Init+0x68>)
  sConfig.Channel = ADC_CHANNEL_0;
 800147e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001482:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001484:	f000 fafc 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8001488:	b108      	cbz	r0, 800148e <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 800148a:	f000 f9a1 	bl	80017d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148e:	2301      	movs	r3, #1
 8001490:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001492:	2302      	movs	r3, #2
 8001494:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001496:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	a901      	add	r1, sp, #4
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_ADC1_Init+0x68>)
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800149c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	f000 faef 	bl	8001a80 <HAL_ADC_ConfigChannel>
 80014a2:	b108      	cbz	r0, 80014a8 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 80014a4:	f000 f994 	bl	80017d0 <Error_Handler>
  }

}
 80014a8:	b005      	add	sp, #20
 80014aa:	bd30      	pop	{r4, r5, pc}
 80014ac:	20001090 	.word	0x20001090
 80014b0:	40012400 	.word	0x40012400

080014b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	4605      	mov	r5, r0
 80014b8:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	2210      	movs	r2, #16
 80014bc:	2100      	movs	r1, #0
 80014be:	a802      	add	r0, sp, #8
 80014c0:	f002 fe81 	bl	80041c6 <memset>
  if(adcHandle->Instance==ADC1)
 80014c4:	682a      	ldr	r2, [r5, #0]
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_ADC_MspInit+0x84>)
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d133      	bne.n	8001534 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014cc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80014d0:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	481a      	ldr	r0, [pc, #104]	; (800153c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014de:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014e8:	4c15      	ldr	r4, [pc, #84]	; (8001540 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	f042 0204 	orr.w	r2, r2, #4
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014fa:	2303      	movs	r3, #3
 80014fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f000 feaa 	bl	8002258 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150c:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001514:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001516:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001518:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151a:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800151c:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151e:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001522:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001524:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001526:	f000 fd4d 	bl	8001fc4 <HAL_DMA_Init>
 800152a:	b108      	cbz	r0, 8001530 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 800152c:	f000 f950 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001530:	622c      	str	r4, [r5, #32]
 8001532:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001534:	b007      	add	sp, #28
 8001536:	bd30      	pop	{r4, r5, pc}
 8001538:	40012400 	.word	0x40012400
 800153c:	40010800 	.word	0x40010800
 8001540:	200010c0 	.word	0x200010c0
 8001544:	40020008 	.word	0x40020008

08001548 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_DMA_Init+0x2c>)
{
 800154a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800154c:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800154e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	615a      	str	r2, [r3, #20]
 8001556:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001558:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001560:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001564:	f000 fcec 	bl	8001f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001568:	200b      	movs	r0, #11
 800156a:	f000 fd1d 	bl	8001fa8 <HAL_NVIC_EnableIRQ>

}
 800156e:	b003      	add	sp, #12
 8001570:	f85d fb04 	ldr.w	pc, [sp], #4
 8001574:	40021000 	.word	0x40021000

08001578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <vApplicationGetIdleTaskMemory+0x28>)
 8001588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800158e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	200000e4 	.word	0x200000e4
 80015a4:	20000138 	.word	0x20000138

080015a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_FREERTOS_Init+0x34>)
 80015b0:	1d3c      	adds	r4, r7, #4
 80015b2:	461d      	mov	r5, r3
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fd32 	bl	800302e <osThreadCreate>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <MX_FREERTOS_Init+0x38>)
 80015ce:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  AllTasks_init();
 80015d0:	f7ff fd4e 	bl	8001070 <_Z13AllTasks_initv>
  /* USER CODE END RTOS_THREADS */

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	080043a0 	.word	0x080043a0
 80015e0:	200000e0 	.word	0x200000e0

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f001 fd46 	bl	800307e <osDelay>
 80015f2:	e7fb      	b.n	80015ec <StartDefaultTask+0x8>

080015f4 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	2210      	movs	r2, #16
{
 80015f6:	b570      	push	{r4, r5, r6, lr}
 80015f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	eb0d 0002 	add.w	r0, sp, r2
 80015fe:	2100      	movs	r1, #0
 8001600:	f002 fde1 	bl	80041c6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001606:	4d2a      	ldr	r5, [pc, #168]	; (80016b0 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800160a:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	f042 0210 	orr.w	r2, r2, #16
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001614:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	f002 0210 	and.w	r2, r2, #16
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	619a      	str	r2, [r3, #24]
 8001628:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162c:	f002 0220 	and.w	r2, r2, #32
 8001630:	9201      	str	r2, [sp, #4]
 8001632:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	f042 0204 	orr.w	r2, r2, #4
 800163a:	619a      	str	r2, [r3, #24]
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	f002 0204 	and.w	r2, r2, #4
 8001642:	9202      	str	r2, [sp, #8]
 8001644:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	f042 0208 	orr.w	r2, r2, #8
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	9303      	str	r3, [sp, #12]
 8001658:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165a:	f000 fedf 	bl	800241c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800165e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001662:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001666:	a904      	add	r1, sp, #16
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800166e:	f000 fdf3 	bl	8002258 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001672:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	a904      	add	r1, sp, #16
 8001676:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001678:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f000 fdeb 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001682:	2320      	movs	r3, #32
 8001684:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001688:	a904      	add	r1, sp, #16
 800168a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001692:	f000 fde1 	bl	8002258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001696:	4622      	mov	r2, r4
 8001698:	2105      	movs	r1, #5
 800169a:	2028      	movs	r0, #40	; 0x28
 800169c:	f000 fc50 	bl	8001f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a0:	2028      	movs	r0, #40	; 0x28
 80016a2:	f000 fc81 	bl	8001fa8 <HAL_NVIC_EnableIRQ>

}
 80016a6:	b008      	add	sp, #32
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40011000 	.word	0x40011000

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 f97e 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f80d 	bl	80016e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f7ff ff94 	bl	80015f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f7ff ff3c 	bl	8001548 <MX_DMA_Init>
  MX_ADC1_Init();
 80016d0:	f7ff feb8 	bl	8001444 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80016d4:	f000 f914 	bl	8001900 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80016d8:	f7ff ff66 	bl	80015a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016dc:	f001 fca2 	bl	8003024 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x24>

080016e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b094      	sub	sp, #80	; 0x50
 80016e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ec:	2228      	movs	r2, #40	; 0x28
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fd68 	bl	80041c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171a:	2310      	movs	r3, #16
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	2302      	movs	r3, #2
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001722:	2300      	movs	r3, #0
 8001724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001726:	2300      	movs	r3, #0
 8001728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fe90 	bl	8002454 <HAL_RCC_OscConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001744:	f000 f844 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001758:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f84f 	bl	8002808 <HAL_RCC_ClockConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800177a:	f000 f829 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800177e:	2302      	movs	r3, #2
 8001780:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4618      	mov	r0, r3
 800178a:	f001 f919 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800179e:	f000 f817 	bl	80017d0 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3750      	adds	r7, #80	; 0x50
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017be:	f000 f911 	bl	80019e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_MspInit+0x48>)
{
 80017de:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017e2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ec:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f0:	f002 0201 	and.w	r2, r2, #1
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017fe:	61da      	str	r2, [r3, #28]
 8001800:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001802:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180c:	f000 fb98 	bl	8001f40 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_MspInit+0x4c>)
 8001812:	6853      	ldr	r3, [r2, #4]
 8001814:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	b003      	add	sp, #12
 8001820:	f85d fb04 	ldr.w	pc, [sp], #4
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000

0800182c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800182e:	4601      	mov	r1, r0
{
 8001830:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001832:	2200      	movs	r2, #0
 8001834:	2019      	movs	r0, #25
 8001836:	f000 fb83 	bl	8001f40 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800183a:	2019      	movs	r0, #25
 800183c:	f000 fbb4 	bl	8001fa8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001842:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001844:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001850:	4c11      	ldr	r4, [pc, #68]	; (8001898 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185a:	f001 f893 	bl	8002984 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800185e:	f001 f881 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_InitTick+0x70>)
 8001864:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001866:	f240 33e7 	movw	r3, #999	; 0x3e7
 800186a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_InitTick+0x74>)
 800186e:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001872:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001874:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001876:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001878:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800187a:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800187e:	f001 fa21 	bl	8002cc4 <HAL_TIM_Base_Init>
 8001882:	b920      	cbnz	r0, 800188e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001884:	4620      	mov	r0, r4
 8001886:	f001 f915 	bl	8002ab4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800188a:	b008      	add	sp, #32
 800188c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e7fb      	b.n	800188a <HAL_InitTick+0x5e>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	20001104 	.word	0x20001104
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	000f4240 	.word	0x000f4240

080018a4 <NMI_Handler>:
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler>

080018ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ae:	4770      	bx	lr

080018b0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b0:	4801      	ldr	r0, [pc, #4]	; (80018b8 <DMA1_Channel1_IRQHandler+0x8>)
 80018b2:	f000 bc3d 	b.w	8002130 <HAL_DMA_IRQHandler>
 80018b6:	bf00      	nop
 80018b8:	200010c0 	.word	0x200010c0

080018bc <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018bc:	4801      	ldr	r0, [pc, #4]	; (80018c4 <TIM1_UP_IRQHandler+0x8>)
 80018be:	f001 b927 	b.w	8002b10 <HAL_TIM_IRQHandler>
 80018c2:	bf00      	nop
 80018c4:	20001104 	.word	0x20001104

080018c8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018c8:	4801      	ldr	r0, [pc, #4]	; (80018d0 <USART3_IRQHandler+0x8>)
 80018ca:	f001 bb03 	b.w	8002ed4 <HAL_UART_IRQHandler>
 80018ce:	bf00      	nop
 80018d0:	2000114c 	.word	0x2000114c

080018d4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018d8:	f000 bdb0 	b.w	800243c <HAL_GPIO_EXTI_IRQHandler>

080018dc <_getpid>:
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr

080018e0 <_kill>:
 80018e0:	b508      	push	{r3, lr}
 80018e2:	f002 fc33 	bl	800414c <__errno>
 80018e6:	2316      	movs	r3, #22
 80018e8:	6003      	str	r3, [r0, #0]
 80018ea:	f04f 30ff 	mov.w	r0, #4294967295
 80018ee:	bd08      	pop	{r3, pc}

080018f0 <_exit>:
 80018f0:	b508      	push	{r3, lr}
 80018f2:	f002 fc2b 	bl	800414c <__errno>
 80018f6:	2316      	movs	r3, #22
 80018f8:	6003      	str	r3, [r0, #0]
 80018fa:	e7fe      	b.n	80018fa <_exit+0xa>

080018fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fc:	4770      	bx	lr
	...

08001900 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001900:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8001902:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800190a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800190c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001910:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001912:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001914:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001916:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001918:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191e:	f001 fa47 	bl	8002db0 <HAL_UART_Init>
 8001922:	b118      	cbz	r0, 800192c <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001928:	f7ff bf52 	b.w	80017d0 <Error_Handler>
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop
 8001930:	2000114c 	.word	0x2000114c
 8001934:	40004800 	.word	0x40004800

08001938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
 800193c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	2210      	movs	r2, #16
 8001940:	2100      	movs	r1, #0
 8001942:	a802      	add	r0, sp, #8
 8001944:	f002 fc3f 	bl	80041c6 <memset>
  if(uartHandle->Instance==USART3)
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_UART_MspInit+0x80>)
 800194c:	429a      	cmp	r2, r3
 800194e:	d130      	bne.n	80019b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001950:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001954:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001958:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800195c:	61da      	str	r2, [r3, #28]
 800195e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	4816      	ldr	r0, [pc, #88]	; (80019bc <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001962:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	f042 0208 	orr.w	r2, r2, #8
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800197e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001982:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198c:	f000 fc64 	bl	8002258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001990:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	a902      	add	r1, sp, #8
 8001996:	4809      	ldr	r0, [pc, #36]	; (80019bc <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001998:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f000 fc5b 	bl	8002258 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019a2:	2027      	movs	r0, #39	; 0x27
 80019a4:	4622      	mov	r2, r4
 80019a6:	2105      	movs	r1, #5
 80019a8:	f000 faca 	bl	8001f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ac:	2027      	movs	r0, #39	; 0x27
 80019ae:	f000 fafb 	bl	8001fa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019b2:	b006      	add	sp, #24
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	bf00      	nop
 80019b8:	40004800 	.word	0x40004800
 80019bc:	40010c00 	.word	0x40010c00

080019c0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_Init+0x20>)
{
 80019c2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ce:	f000 faa5 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff ff2a 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d8:	f7ff ff00 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80019dc:	2000      	movs	r0, #0
 80019de:	bd08      	pop	{r3, pc}
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_IncTick+0x10>)
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <HAL_IncTick+0x14>)
 80019e8:	6811      	ldr	r1, [r2, #0]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	440b      	add	r3, r1
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000118c 	.word	0x2000118c
 80019f8:	2000000c 	.word	0x2000000c

080019fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019fc:	4b01      	ldr	r3, [pc, #4]	; (8001a04 <HAL_GetTick+0x8>)
 80019fe:	6818      	ldr	r0, [r3, #0]
}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2000118c 	.word	0x2000118c

08001a08 <HAL_ADC_ConvCpltCallback>:
 8001a08:	4770      	bx	lr

08001a0a <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001a0c:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a10:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001a14:	d11b      	bne.n	8001a4e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	6892      	ldr	r2, [r2, #8]
 8001a22:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001a26:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001a2a:	d10c      	bne.n	8001a46 <ADC_DMAConvCplt+0x3c>
 8001a2c:	7b1a      	ldrb	r2, [r3, #12]
 8001a2e:	b952      	cbnz	r2, 8001a46 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3c:	bf5e      	ittt	pl
 8001a3e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001a40:	f042 0201 	orrpl.w	r2, r2, #1
 8001a44:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_ADC_ConvCpltCallback>
 8001a4c:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4718      	bx	r3

08001a58 <HAL_ADC_ConvHalfCpltCallback>:
 8001a58:	4770      	bx	lr

08001a5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a5a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a5e:	f7ff fffb 	bl	8001a58 <HAL_ADC_ConvHalfCpltCallback>
 8001a62:	bd08      	pop	{r3, pc}

08001a64 <HAL_ADC_ErrorCallback>:
{
 8001a64:	4770      	bx	lr

08001a66 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a66:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001a68:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a70:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a7a:	f7ff fff3 	bl	8001a64 <HAL_ADC_ErrorCallback>
 8001a7e:	bd08      	pop	{r3, pc}

08001a80 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001a80:	2300      	movs	r3, #0
{ 
 8001a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001a84:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001a86:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d074      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0xf8>
 8001a8e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001a90:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001a92:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001a96:	2d06      	cmp	r5, #6
 8001a98:	6802      	ldr	r2, [r0, #0]
 8001a9a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001a9e:	680c      	ldr	r4, [r1, #0]
 8001aa0:	d825      	bhi.n	8001aee <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa2:	442b      	add	r3, r5
 8001aa4:	251f      	movs	r5, #31
 8001aa6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	409d      	lsls	r5, r3
 8001aac:	ea26 0505 	bic.w	r5, r6, r5
 8001ab0:	fa04 f303 	lsl.w	r3, r4, r3
 8001ab4:	432b      	orrs	r3, r5
 8001ab6:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ab8:	2c09      	cmp	r4, #9
 8001aba:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001abe:	688d      	ldr	r5, [r1, #8]
 8001ac0:	d92f      	bls.n	8001b22 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ac2:	2607      	movs	r6, #7
 8001ac4:	4423      	add	r3, r4
 8001ac6:	68d1      	ldr	r1, [r2, #12]
 8001ac8:	3b1e      	subs	r3, #30
 8001aca:	409e      	lsls	r6, r3
 8001acc:	ea21 0106 	bic.w	r1, r1, r6
 8001ad0:	fa05 f303 	lsl.w	r3, r5, r3
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad8:	f1a4 0310 	sub.w	r3, r4, #16
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d92b      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	b002      	add	sp, #8
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001aee:	2d0c      	cmp	r5, #12
 8001af0:	d80b      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af2:	442b      	add	r3, r5
 8001af4:	251f      	movs	r5, #31
 8001af6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001af8:	3b23      	subs	r3, #35	; 0x23
 8001afa:	409d      	lsls	r5, r3
 8001afc:	ea26 0505 	bic.w	r5, r6, r5
 8001b00:	fa04 f303 	lsl.w	r3, r4, r3
 8001b04:	432b      	orrs	r3, r5
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	e7d6      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b0a:	442b      	add	r3, r5
 8001b0c:	251f      	movs	r5, #31
 8001b0e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001b10:	3b41      	subs	r3, #65	; 0x41
 8001b12:	409d      	lsls	r5, r3
 8001b14:	ea26 0505 	bic.w	r5, r6, r5
 8001b18:	fa04 f303 	lsl.w	r3, r4, r3
 8001b1c:	432b      	orrs	r3, r5
 8001b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b20:	e7ca      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b22:	2607      	movs	r6, #7
 8001b24:	6911      	ldr	r1, [r2, #16]
 8001b26:	4423      	add	r3, r4
 8001b28:	409e      	lsls	r6, r3
 8001b2a:	ea21 0106 	bic.w	r1, r1, r6
 8001b2e:	fa05 f303 	lsl.w	r3, r5, r3
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6113      	str	r3, [r2, #16]
 8001b36:	e7cf      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_ADC_ConfigChannel+0xfc>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d116      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b3e:	6893      	ldr	r3, [r2, #8]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	d4cd      	bmi.n	8001ae0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b44:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b46:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b4c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b4e:	d1c7      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_ADC_ConfigChannel+0x100>)
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_ADC_ConfigChannel+0x104>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	4353      	muls	r3, r2
            wait_loop_index--;
 8001b5e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0bc      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8001b66:	9b01      	ldr	r3, [sp, #4]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	e7f8      	b.n	8001b5e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e7b4      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e7b5      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x68>
 8001b7c:	40012400 	.word	0x40012400
 8001b80:	20000008 	.word	0x20000008
 8001b84:	000f4240 	.word	0x000f4240

08001b88 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001b88:	2300      	movs	r3, #0
{
 8001b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001b8c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b8e:	6803      	ldr	r3, [r0, #0]
{
 8001b90:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	d502      	bpl.n	8001b9e <ADC_Enable+0x16>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	b002      	add	sp, #8
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <ADC_Enable+0x68>)
 8001ba8:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <ADC_Enable+0x6c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001bb0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001bb2:	9b01      	ldr	r3, [sp, #4]
 8001bb4:	b9c3      	cbnz	r3, 8001be8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001bb6:	f7ff ff21 	bl	80019fc <HAL_GetTick>
 8001bba:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	689d      	ldr	r5, [r3, #8]
 8001bc0:	f015 0501 	ands.w	r5, r5, #1
 8001bc4:	d1e8      	bne.n	8001b98 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bc6:	f7ff ff19 	bl	80019fc <HAL_GetTick>
 8001bca:	1b80      	subs	r0, r0, r6
 8001bcc:	2802      	cmp	r0, #2
 8001bce:	d9f5      	bls.n	8001bbc <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001bd2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001bde:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001be6:	e7d8      	b.n	8001b9a <ADC_Enable+0x12>
      wait_loop_index--;
 8001be8:	9b01      	ldr	r3, [sp, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	e7e0      	b.n	8001bb0 <ADC_Enable+0x28>
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	000f4240 	.word	0x000f4240

08001bf8 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001bf8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001bfc:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001bfe:	2b01      	cmp	r3, #1
{
 8001c00:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001c02:	d054      	beq.n	8001cae <HAL_ADC_Start+0xb6>
 8001c04:	2301      	movs	r3, #1
 8001c06:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001c0a:	f7ff ffbd 	bl	8001b88 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d149      	bne.n	8001ca6 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8001c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d104      	bne.n	8001c34 <HAL_ADC_Start+0x3c>
 8001c2a:	4923      	ldr	r1, [pc, #140]	; (8001cb8 <HAL_ADC_Start+0xc0>)
 8001c2c:	684a      	ldr	r2, [r1, #4]
 8001c2e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001c32:	d12e      	bne.n	8001c92 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c3a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c3e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c40:	bf41      	itttt	mi
 8001c42:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8001c44:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001c48:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001c4c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c54:	bf1c      	itt	ne
 8001c56:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8001c58:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c70:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001c74:	d113      	bne.n	8001c9e <HAL_ADC_Start+0xa6>
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_ADC_Start+0xbc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c7c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001c80:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c82:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001c86:	d10a      	bne.n	8001c9e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c98:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c9a:	684a      	ldr	r2, [r1, #4]
 8001c9c:	e7cf      	b.n	8001c3e <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ca4:	e7f3      	b.n	8001c8e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001cac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001cae:	2002      	movs	r0, #2
}
 8001cb0:	bd10      	pop	{r4, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012800 	.word	0x40012800
 8001cb8:	40012400 	.word	0x40012400

08001cbc <HAL_ADC_Start_DMA>:
{
 8001cbc:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8001cc0:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_ADC_Start_DMA+0x108>)
 8001cc4:	6802      	ldr	r2, [r0, #0]
{
 8001cc6:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cc8:	429a      	cmp	r2, r3
{
 8001cca:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_Start_DMA+0x18>
 8001cce:	493e      	ldr	r1, [pc, #248]	; (8001dc8 <HAL_ADC_Start_DMA+0x10c>)
 8001cd0:	428a      	cmp	r2, r1
 8001cd2:	d103      	bne.n	8001cdc <HAL_ADC_Start_DMA+0x20>
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001cda:	d16e      	bne.n	8001dba <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001cdc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d06c      	beq.n	8001dbe <HAL_ADC_Start_DMA+0x102>
 8001ce4:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001ce6:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8001ce8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001cec:	f7ff ff4c 	bl	8001b88 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d15d      	bne.n	8001db2 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cf8:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001d00:	f020 0001 	bic.w	r0, r0, #1
 8001d04:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d08:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d0c:	d104      	bne.n	8001d18 <HAL_ADC_Start_DMA+0x5c>
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_ADC_Start_DMA+0x108>)
 8001d10:	6853      	ldr	r3, [r2, #4]
 8001d12:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001d16:	d13e      	bne.n	8001d96 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d1e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d20:	684b      	ldr	r3, [r1, #4]
 8001d22:	055a      	lsls	r2, r3, #21
 8001d24:	d505      	bpl.n	8001d32 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d30:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d34:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d36:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d3a:	bf18      	it	ne
 8001d3c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d3e:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d40:	bf18      	it	ne
 8001d42:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d50:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d52:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_ADC_Start_DMA+0x114>)
 8001d56:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_ADC_Start_DMA+0x118>)
 8001d5a:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d5c:	f06f 0302 	mvn.w	r3, #2
 8001d60:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d64:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d70:	4643      	mov	r3, r8
 8001d72:	f000 f957 	bl	8002024 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001d7e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	bf0c      	ite	eq
 8001d86:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d8a:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	4630      	mov	r0, r6
 8001d92:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d9c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d9e:	6853      	ldr	r3, [r2, #4]
 8001da0:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da2:	bf41      	itttt	mi
 8001da4:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001da6:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001daa:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001dae:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8001db0:	e7bf      	b.n	8001d32 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8001db2:	2300      	movs	r3, #0
 8001db4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001db8:	e7ea      	b.n	8001d90 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001dba:	2601      	movs	r6, #1
 8001dbc:	e7e8      	b.n	8001d90 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8001dbe:	2602      	movs	r6, #2
 8001dc0:	e7e6      	b.n	8001d90 <HAL_ADC_Start_DMA+0xd4>
 8001dc2:	bf00      	nop
 8001dc4:	40012400 	.word	0x40012400
 8001dc8:	40012800 	.word	0x40012800
 8001dcc:	08001a0b 	.word	0x08001a0b
 8001dd0:	08001a5b 	.word	0x08001a5b
 8001dd4:	08001a67 	.word	0x08001a67

08001dd8 <ADC_ConversionStop_Disable>:
{
 8001dd8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dda:	6803      	ldr	r3, [r0, #0]
{
 8001ddc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	07d2      	lsls	r2, r2, #31
 8001de2:	d401      	bmi.n	8001de8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001de4:	2000      	movs	r0, #0
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001df0:	f7ff fe04 	bl	80019fc <HAL_GetTick>
 8001df4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df6:	6823      	ldr	r3, [r4, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	07db      	lsls	r3, r3, #31
 8001dfc:	d5f2      	bpl.n	8001de4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dfe:	f7ff fdfd 	bl	80019fc <HAL_GetTick>
 8001e02:	1b40      	subs	r0, r0, r5
 8001e04:	2802      	cmp	r0, #2
 8001e06:	d9f6      	bls.n	8001df6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}

08001e1c <HAL_ADC_Init>:
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001e1e:	4604      	mov	r4, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d071      	beq.n	8001f08 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e26:	b923      	cbnz	r3, 8001e32 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001e2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001e2e:	f7ff fb41 	bl	80014b4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e32:	4620      	mov	r0, r4
 8001e34:	f7ff ffd0 	bl	8001dd8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e3a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e40:	d164      	bne.n	8001f0c <HAL_ADC_Init+0xf0>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d162      	bne.n	8001f0c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e46:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e4c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	f023 0302 	bic.w	r3, r3, #2
 8001e52:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e56:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e58:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e5c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e62:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e66:	d038      	beq.n	8001eda <HAL_ADC_Init+0xbe>
 8001e68:	2901      	cmp	r1, #1
 8001e6a:	bf14      	ite	ne
 8001e6c:	4606      	movne	r6, r0
 8001e6e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e72:	7d25      	ldrb	r5, [r4, #20]
 8001e74:	2d01      	cmp	r5, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d130      	bne.n	8001ede <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e7c:	69a3      	ldr	r3, [r4, #24]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001e84:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001e88:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e8a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001e8e:	685d      	ldr	r5, [r3, #4]
 8001e90:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001e94:	ea45 0506 	orr.w	r5, r5, r6
 8001e98:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001e9a:	689e      	ldr	r6, [r3, #8]
 8001e9c:	4d1d      	ldr	r5, [pc, #116]	; (8001f14 <HAL_ADC_Init+0xf8>)
 8001e9e:	ea05 0506 	and.w	r5, r5, r6
 8001ea2:	ea45 0502 	orr.w	r5, r5, r2
 8001ea6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ea8:	d001      	beq.n	8001eae <HAL_ADC_Init+0x92>
 8001eaa:	2901      	cmp	r1, #1
 8001eac:	d120      	bne.n	8001ef0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eae:	6921      	ldr	r1, [r4, #16]
 8001eb0:	3901      	subs	r1, #1
 8001eb2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001eb4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001eb6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001eba:	4329      	orrs	r1, r5
 8001ebc:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_ADC_Init+0xfc>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d115      	bne.n	8001ef4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ece:	f023 0303 	bic.w	r3, r3, #3
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ed8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001eda:	460e      	mov	r6, r1
 8001edc:	e7c9      	b.n	8001e72 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eee:	e7cb      	b.n	8001e88 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	e7df      	b.n	8001eb4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ef6:	f023 0312 	bic.w	r3, r3, #18
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f12:	e7f9      	b.n	8001f08 <HAL_ADC_Init+0xec>
 8001f14:	ffe1f7fd 	.word	0xffe1f7fd
 8001f18:	ff1f0efe 	.word	0xff1f0efe

08001f1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001f36:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001f38:	60d3      	str	r3, [r2, #12]
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b530      	push	{r4, r5, lr}
 8001f44:	68dc      	ldr	r4, [r3, #12]
 8001f46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	bf28      	it	cs
 8001f54:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5c:	bf98      	it	ls
 8001f5e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	fa05 f303 	lsl.w	r3, r5, r3
 8001f64:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f68:	bf88      	it	hi
 8001f6a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4019      	ands	r1, r3
 8001f6e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	fa05 f404 	lsl.w	r4, r5, r4
 8001f74:	3c01      	subs	r4, #1
 8001f76:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001f78:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7a:	ea42 0201 	orr.w	r2, r2, r1
 8001f7e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	bfa9      	itett	ge
 8001f84:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f88:	4b06      	ldrlt	r3, [pc, #24]	; (8001fa4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	b2d2      	uxtbge	r2, r2
 8001f8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	bfbb      	ittet	lt
 8001f92:	f000 000f 	andlt.w	r0, r0, #15
 8001f96:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	541a      	strblt	r2, [r3, r0]
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	e000ed00 	.word	0xe000ed00
 8001fa4:	e000ed14 	.word	0xe000ed14

08001fa8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	db08      	blt.n	8001fbe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fac:	2301      	movs	r3, #1
 8001fae:	0942      	lsrs	r2, r0, #5
 8001fb0:	f000 001f 	and.w	r0, r0, #31
 8001fb4:	fa03 f000 	lsl.w	r0, r3, r0
 8001fb8:	4b01      	ldr	r3, [pc, #4]	; (8001fc0 <HAL_NVIC_EnableIRQ+0x18>)
 8001fba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001fbe:	4770      	bx	lr
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fc4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fc6:	b330      	cbz	r0, 8002016 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fc8:	2214      	movs	r2, #20
 8001fca:	6801      	ldr	r1, [r0, #0]
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fce:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001fdc:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001fde:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001fe0:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fe2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001fe6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	6904      	ldr	r4, [r0, #16]
 8001ff2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	6944      	ldr	r4, [r0, #20]
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	6984      	ldr	r4, [r0, #24]
 8001ffa:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffc:	69c4      	ldr	r4, [r0, #28]
 8001ffe:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002000:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002002:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002004:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002008:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800200e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8002012:	4618      	mov	r0, r3
 8002014:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002016:	2001      	movs	r0, #1
}
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	bffdfff8 	.word	0xbffdfff8
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002026:	f890 4020 	ldrb.w	r4, [r0, #32]
 800202a:	2c01      	cmp	r4, #1
 800202c:	d035      	beq.n	800209a <HAL_DMA_Start_IT+0x76>
 800202e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002030:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002034:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002038:	42a5      	cmp	r5, r4
 800203a:	f04f 0600 	mov.w	r6, #0
 800203e:	f04f 0402 	mov.w	r4, #2
 8002042:	d128      	bne.n	8002096 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002044:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002048:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800204c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800204e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002050:	f026 0601 	bic.w	r6, r6, #1
 8002054:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002056:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002058:	40bd      	lsls	r5, r7
 800205a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800205c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800205e:	6843      	ldr	r3, [r0, #4]
 8002060:	6805      	ldr	r5, [r0, #0]
 8002062:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002064:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002066:	bf0b      	itete	eq
 8002068:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800206a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800206c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800206e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002070:	b14b      	cbz	r3, 8002086 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002078:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800207a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	602b      	str	r3, [r5, #0]
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	f043 030a 	orr.w	r3, r3, #10
 8002094:	e7f0      	b.n	8002078 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8002096:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800209a:	2002      	movs	r0, #2
}
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020a0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80020a4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d003      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020aa:	2304      	movs	r3, #4
 80020ac:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
 80020b0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b2:	6803      	ldr	r3, [r0, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f022 020e 	bic.w	r2, r2, #14
 80020ba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_DMA_Abort_IT+0x88>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_DMA_Abort_IT+0x6a>
 80020ca:	3214      	adds	r2, #20
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01e      	beq.n	800210e <HAL_DMA_Abort_IT+0x6e>
 80020d0:	3214      	adds	r2, #20
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01d      	beq.n	8002112 <HAL_DMA_Abort_IT+0x72>
 80020d6:	3214      	adds	r2, #20
 80020d8:	4293      	cmp	r3, r2
 80020da:	d01d      	beq.n	8002118 <HAL_DMA_Abort_IT+0x78>
 80020dc:	3214      	adds	r2, #20
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_Abort_IT+0x7e>
 80020e2:	3214      	adds	r2, #20
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf0c      	ite	eq
 80020e8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80020ec:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80020f2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80020fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80020fe:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002102:	b17b      	cbz	r3, 8002124 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002104:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	4620      	mov	r0, r4
 8002108:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800210a:	2301      	movs	r3, #1
 800210c:	e7f0      	b.n	80020f0 <HAL_DMA_Abort_IT+0x50>
 800210e:	2310      	movs	r3, #16
 8002110:	e7ee      	b.n	80020f0 <HAL_DMA_Abort_IT+0x50>
 8002112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002116:	e7eb      	b.n	80020f0 <HAL_DMA_Abort_IT+0x50>
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	e7e8      	b.n	80020f0 <HAL_DMA_Abort_IT+0x50>
 800211e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002122:	e7e5      	b.n	80020f0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	4618      	mov	r0, r3
}
 8002126:	bd10      	pop	{r4, pc}
 8002128:	40020008 	.word	0x40020008
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_DMA_IRQHandler>:
{
 8002130:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002132:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002134:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002136:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002138:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800213a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800213c:	4095      	lsls	r5, r2
 800213e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002140:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002142:	d032      	beq.n	80021aa <HAL_DMA_IRQHandler+0x7a>
 8002144:	074d      	lsls	r5, r1, #29
 8002146:	d530      	bpl.n	80021aa <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800214c:	bf5e      	ittt	pl
 800214e:	681a      	ldrpl	r2, [r3, #0]
 8002150:	f022 0204 	bicpl.w	r2, r2, #4
 8002154:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_DMA_IRQHandler+0x120>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d019      	beq.n	8002190 <HAL_DMA_IRQHandler+0x60>
 800215c:	3214      	adds	r2, #20
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_IRQHandler+0x64>
 8002162:	3214      	adds	r2, #20
 8002164:	4293      	cmp	r3, r2
 8002166:	d017      	beq.n	8002198 <HAL_DMA_IRQHandler+0x68>
 8002168:	3214      	adds	r2, #20
 800216a:	4293      	cmp	r3, r2
 800216c:	d017      	beq.n	800219e <HAL_DMA_IRQHandler+0x6e>
 800216e:	3214      	adds	r2, #20
 8002170:	4293      	cmp	r3, r2
 8002172:	d017      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x74>
 8002174:	3214      	adds	r2, #20
 8002176:	4293      	cmp	r3, r2
 8002178:	bf0c      	ite	eq
 800217a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800217e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002182:	4a34      	ldr	r2, [pc, #208]	; (8002254 <HAL_DMA_IRQHandler+0x124>)
 8002184:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002186:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05e      	beq.n	800224a <HAL_DMA_IRQHandler+0x11a>
}
 800218c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800218e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002190:	2304      	movs	r3, #4
 8002192:	e7f6      	b.n	8002182 <HAL_DMA_IRQHandler+0x52>
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	e7f4      	b.n	8002182 <HAL_DMA_IRQHandler+0x52>
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	e7f1      	b.n	8002182 <HAL_DMA_IRQHandler+0x52>
 800219e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a2:	e7ee      	b.n	8002182 <HAL_DMA_IRQHandler+0x52>
 80021a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a8:	e7eb      	b.n	8002182 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021aa:	2502      	movs	r5, #2
 80021ac:	4095      	lsls	r5, r2
 80021ae:	4225      	tst	r5, r4
 80021b0:	d035      	beq.n	800221e <HAL_DMA_IRQHandler+0xee>
 80021b2:	078d      	lsls	r5, r1, #30
 80021b4:	d533      	bpl.n	800221e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	0694      	lsls	r4, r2, #26
 80021ba:	d406      	bmi.n	80021ca <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f022 020a 	bic.w	r2, r2, #10
 80021c2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80021c4:	2201      	movs	r2, #1
 80021c6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021ca:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_DMA_IRQHandler+0x120>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d019      	beq.n	8002204 <HAL_DMA_IRQHandler+0xd4>
 80021d0:	3214      	adds	r2, #20
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d018      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
 80021d6:	3214      	adds	r2, #20
 80021d8:	4293      	cmp	r3, r2
 80021da:	d017      	beq.n	800220c <HAL_DMA_IRQHandler+0xdc>
 80021dc:	3214      	adds	r2, #20
 80021de:	4293      	cmp	r3, r2
 80021e0:	d017      	beq.n	8002212 <HAL_DMA_IRQHandler+0xe2>
 80021e2:	3214      	adds	r2, #20
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d017      	beq.n	8002218 <HAL_DMA_IRQHandler+0xe8>
 80021e8:	3214      	adds	r2, #20
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bf0c      	ite	eq
 80021ee:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80021f2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_DMA_IRQHandler+0x124>)
 80021f8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80021fa:	2300      	movs	r3, #0
 80021fc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002200:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002202:	e7c1      	b.n	8002188 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002204:	2302      	movs	r3, #2
 8002206:	e7f6      	b.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
 8002208:	2320      	movs	r3, #32
 800220a:	e7f4      	b.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
 800220c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002210:	e7f1      	b.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
 8002212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002216:	e7ee      	b.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	e7eb      	b.n	80021f6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800221e:	2508      	movs	r5, #8
 8002220:	4095      	lsls	r5, r2
 8002222:	4225      	tst	r5, r4
 8002224:	d011      	beq.n	800224a <HAL_DMA_IRQHandler+0x11a>
 8002226:	0709      	lsls	r1, r1, #28
 8002228:	d50f      	bpl.n	800224a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f021 010e 	bic.w	r1, r1, #14
 8002230:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002232:	2301      	movs	r3, #1
 8002234:	fa03 f202 	lsl.w	r2, r3, r2
 8002238:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800223a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800223c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002240:	2300      	movs	r3, #0
 8002242:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002246:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002248:	e79e      	b.n	8002188 <HAL_DMA_IRQHandler+0x58>
}
 800224a:	bc70      	pop	{r4, r5, r6}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40020008 	.word	0x40020008
 8002254:	40020000 	.word	0x40020000

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800225e:	4626      	mov	r6, r4
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002262:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800240c <HAL_GPIO_Init+0x1b4>
 8002266:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8002410 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	680a      	ldr	r2, [r1, #0]
 800226c:	fa32 f506 	lsrs.w	r5, r2, r6
 8002270:	d102      	bne.n	8002278 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002272:	b003      	add	sp, #12
 8002274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002278:	f04f 0801 	mov.w	r8, #1
 800227c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002280:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002284:	4590      	cmp	r8, r2
 8002286:	d17f      	bne.n	8002388 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8002288:	684d      	ldr	r5, [r1, #4]
 800228a:	2d12      	cmp	r5, #18
 800228c:	f000 80aa 	beq.w	80023e4 <HAL_GPIO_Init+0x18c>
 8002290:	f200 8083 	bhi.w	800239a <HAL_GPIO_Init+0x142>
 8002294:	2d02      	cmp	r5, #2
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x186>
 800229a:	d877      	bhi.n	800238c <HAL_GPIO_Init+0x134>
 800229c:	2d00      	cmp	r5, #0
 800229e:	f000 8089 	beq.w	80023b4 <HAL_GPIO_Init+0x15c>
 80022a2:	2d01      	cmp	r5, #1
 80022a4:	f000 8099 	beq.w	80023da <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ac:	2aff      	cmp	r2, #255	; 0xff
 80022ae:	bf93      	iteet	ls
 80022b0:	4682      	movls	sl, r0
 80022b2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80022b6:	3d08      	subhi	r5, #8
 80022b8:	f8d0 b000 	ldrls.w	fp, [r0]
 80022bc:	bf92      	itee	ls
 80022be:	00b5      	lslls	r5, r6, #2
 80022c0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80022c4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c6:	fa09 f805 	lsl.w	r8, r9, r5
 80022ca:	ea2b 0808 	bic.w	r8, fp, r8
 80022ce:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d2:	bf88      	it	hi
 80022d4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d8:	ea48 0505 	orr.w	r5, r8, r5
 80022dc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80022e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80022e8:	d04e      	beq.n	8002388 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ea:	4d45      	ldr	r5, [pc, #276]	; (8002400 <HAL_GPIO_Init+0x1a8>)
 80022ec:	4f44      	ldr	r7, [pc, #272]	; (8002400 <HAL_GPIO_Init+0x1a8>)
 80022ee:	69ad      	ldr	r5, [r5, #24]
 80022f0:	f026 0803 	bic.w	r8, r6, #3
 80022f4:	f045 0501 	orr.w	r5, r5, #1
 80022f8:	61bd      	str	r5, [r7, #24]
 80022fa:	69bd      	ldr	r5, [r7, #24]
 80022fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002300:	f005 0501 	and.w	r5, r5, #1
 8002304:	9501      	str	r5, [sp, #4]
 8002306:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002310:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002314:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002318:	fa09 f90b 	lsl.w	r9, r9, fp
 800231c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002320:	4d38      	ldr	r5, [pc, #224]	; (8002404 <HAL_GPIO_Init+0x1ac>)
 8002322:	42a8      	cmp	r0, r5
 8002324:	d063      	beq.n	80023ee <HAL_GPIO_Init+0x196>
 8002326:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800232a:	42a8      	cmp	r0, r5
 800232c:	d061      	beq.n	80023f2 <HAL_GPIO_Init+0x19a>
 800232e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002332:	42a8      	cmp	r0, r5
 8002334:	d05f      	beq.n	80023f6 <HAL_GPIO_Init+0x19e>
 8002336:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800233a:	42a8      	cmp	r0, r5
 800233c:	bf0c      	ite	eq
 800233e:	2503      	moveq	r5, #3
 8002340:	2504      	movne	r5, #4
 8002342:	fa05 f50b 	lsl.w	r5, r5, fp
 8002346:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800234a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800234e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002350:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002354:	bf14      	ite	ne
 8002356:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002358:	4395      	biceq	r5, r2
 800235a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800235c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002362:	bf14      	ite	ne
 8002364:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002366:	4395      	biceq	r5, r2
 8002368:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800236a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002370:	bf14      	ite	ne
 8002372:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002374:	4395      	biceq	r5, r2
 8002376:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800237e:	bf14      	ite	ne
 8002380:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002382:	ea25 0202 	biceq.w	r2, r5, r2
 8002386:	60da      	str	r2, [r3, #12]
	position++;
 8002388:	3601      	adds	r6, #1
 800238a:	e76e      	b.n	800226a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800238c:	2d03      	cmp	r5, #3
 800238e:	d022      	beq.n	80023d6 <HAL_GPIO_Init+0x17e>
 8002390:	2d11      	cmp	r5, #17
 8002392:	d189      	bne.n	80022a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002394:	68cc      	ldr	r4, [r1, #12]
 8002396:	3404      	adds	r4, #4
          break;
 8002398:	e786      	b.n	80022a8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800239a:	4f1b      	ldr	r7, [pc, #108]	; (8002408 <HAL_GPIO_Init+0x1b0>)
 800239c:	42bd      	cmp	r5, r7
 800239e:	d009      	beq.n	80023b4 <HAL_GPIO_Init+0x15c>
 80023a0:	d812      	bhi.n	80023c8 <HAL_GPIO_Init+0x170>
 80023a2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002414 <HAL_GPIO_Init+0x1bc>
 80023a6:	454d      	cmp	r5, r9
 80023a8:	d004      	beq.n	80023b4 <HAL_GPIO_Init+0x15c>
 80023aa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80023ae:	454d      	cmp	r5, r9
 80023b0:	f47f af7a 	bne.w	80022a8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b4:	688c      	ldr	r4, [r1, #8]
 80023b6:	b1c4      	cbz	r4, 80023ea <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80023ba:	bf0c      	ite	eq
 80023bc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80023c0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c4:	2408      	movs	r4, #8
 80023c6:	e76f      	b.n	80022a8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80023c8:	4575      	cmp	r5, lr
 80023ca:	d0f3      	beq.n	80023b4 <HAL_GPIO_Init+0x15c>
 80023cc:	4565      	cmp	r5, ip
 80023ce:	d0f1      	beq.n	80023b4 <HAL_GPIO_Init+0x15c>
 80023d0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002418 <HAL_GPIO_Init+0x1c0>
 80023d4:	e7eb      	b.n	80023ae <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d6:	2400      	movs	r4, #0
 80023d8:	e766      	b.n	80022a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023da:	68cc      	ldr	r4, [r1, #12]
          break;
 80023dc:	e764      	b.n	80022a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023de:	68cc      	ldr	r4, [r1, #12]
 80023e0:	3408      	adds	r4, #8
          break;
 80023e2:	e761      	b.n	80022a8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e4:	68cc      	ldr	r4, [r1, #12]
 80023e6:	340c      	adds	r4, #12
          break;
 80023e8:	e75e      	b.n	80022a8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ea:	2404      	movs	r4, #4
 80023ec:	e75c      	b.n	80022a8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ee:	2500      	movs	r5, #0
 80023f0:	e7a7      	b.n	8002342 <HAL_GPIO_Init+0xea>
 80023f2:	2501      	movs	r5, #1
 80023f4:	e7a5      	b.n	8002342 <HAL_GPIO_Init+0xea>
 80023f6:	2502      	movs	r5, #2
 80023f8:	e7a3      	b.n	8002342 <HAL_GPIO_Init+0xea>
 80023fa:	bf00      	nop
 80023fc:	40010400 	.word	0x40010400
 8002400:	40021000 	.word	0x40021000
 8002404:	40010800 	.word	0x40010800
 8002408:	10210000 	.word	0x10210000
 800240c:	10310000 	.word	0x10310000
 8002410:	10320000 	.word	0x10320000
 8002414:	10110000 	.word	0x10110000
 8002418:	10220000 	.word	0x10220000

0800241c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241c:	b10a      	cbz	r2, 8002422 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241e:	6101      	str	r1, [r0, #16]
 8002420:	4770      	bx	lr
 8002422:	0409      	lsls	r1, r1, #16
 8002424:	e7fb      	b.n	800241e <HAL_GPIO_WritePin+0x2>

08002426 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002426:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002428:	ea03 0201 	and.w	r2, r3, r1
 800242c:	ea21 0103 	bic.w	r1, r1, r3
 8002430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002434:	6101      	str	r1, [r0, #16]
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002438:	4770      	bx	lr
	...

0800243c <HAL_GPIO_EXTI_IRQHandler>:
{
 800243c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002440:	6959      	ldr	r1, [r3, #20]
 8002442:	4201      	tst	r1, r0
 8002444:	d002      	beq.n	800244c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002446:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002448:	f7ff fff6 	bl	8002438 <HAL_GPIO_EXTI_Callback>
 800244c:	bd08      	pop	{r3, pc}
 800244e:	bf00      	nop
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	4605      	mov	r5, r0
 800245a:	b908      	cbnz	r0, 8002460 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	e03c      	b.n	80024da <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002460:	6803      	ldr	r3, [r0, #0]
 8002462:	07db      	lsls	r3, r3, #31
 8002464:	d410      	bmi.n	8002488 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	682b      	ldr	r3, [r5, #0]
 8002468:	079f      	lsls	r7, r3, #30
 800246a:	d45d      	bmi.n	8002528 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	0719      	lsls	r1, r3, #28
 8002470:	f100 8094 	bmi.w	800259c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	075a      	lsls	r2, r3, #29
 8002478:	f100 80be 	bmi.w	80025f8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247c:	69e8      	ldr	r0, [r5, #28]
 800247e:	2800      	cmp	r0, #0
 8002480:	f040 812c 	bne.w	80026dc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002484:	2000      	movs	r0, #0
 8002486:	e028      	b.n	80024da <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002488:	4c8f      	ldr	r4, [pc, #572]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800248a:	6863      	ldr	r3, [r4, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d007      	beq.n	80024a4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002494:	6863      	ldr	r3, [r4, #4]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d109      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5e>
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	03de      	lsls	r6, r3, #15
 80024a2:	d506      	bpl.n	80024b2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	039c      	lsls	r4, r3, #14
 80024a8:	d5dd      	bpl.n	8002466 <HAL_RCC_OscConfig+0x12>
 80024aa:	686b      	ldr	r3, [r5, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1da      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
 80024b0:	e7d4      	b.n	800245c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	686b      	ldr	r3, [r5, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x8c>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024c2:	f7ff fa9b 	bl	80019fc <HAL_GetTick>
 80024c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	0398      	lsls	r0, r3, #14
 80024cc:	d4cb      	bmi.n	8002466 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ce:	f7ff fa95 	bl	80019fc <HAL_GetTick>
 80024d2:	1b80      	subs	r0, r0, r6
 80024d4:	2864      	cmp	r0, #100	; 0x64
 80024d6:	d9f7      	bls.n	80024c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80024d8:	2003      	movs	r0, #3
}
 80024da:	b002      	add	sp, #8
 80024dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	b99b      	cbnz	r3, 800250a <HAL_RCC_OscConfig+0xb6>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024f2:	f7ff fa83 	bl	80019fc <HAL_GetTick>
 80024f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	0399      	lsls	r1, r3, #14
 80024fc:	d5b3      	bpl.n	8002466 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fe:	f7ff fa7d 	bl	80019fc <HAL_GetTick>
 8002502:	1b80      	subs	r0, r0, r6
 8002504:	2864      	cmp	r0, #100	; 0x64
 8002506:	d9f7      	bls.n	80024f8 <HAL_RCC_OscConfig+0xa4>
 8002508:	e7e6      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	d103      	bne.n	800251a <HAL_RCC_OscConfig+0xc6>
 8002512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002516:	6023      	str	r3, [r4, #0]
 8002518:	e7cf      	b.n	80024ba <HAL_RCC_OscConfig+0x66>
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	e7cb      	b.n	80024c0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002528:	4c67      	ldr	r4, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800252a:	6863      	ldr	r3, [r4, #4]
 800252c:	f013 0f0c 	tst.w	r3, #12
 8002530:	d007      	beq.n	8002542 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002532:	6863      	ldr	r3, [r4, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d110      	bne.n	800255e <HAL_RCC_OscConfig+0x10a>
 800253c:	6863      	ldr	r3, [r4, #4]
 800253e:	03da      	lsls	r2, r3, #15
 8002540:	d40d      	bmi.n	800255e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	079b      	lsls	r3, r3, #30
 8002546:	d502      	bpl.n	800254e <HAL_RCC_OscConfig+0xfa>
 8002548:	692b      	ldr	r3, [r5, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d186      	bne.n	800245c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	696a      	ldr	r2, [r5, #20]
 8002552:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002556:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800255a:	6023      	str	r3, [r4, #0]
 800255c:	e786      	b.n	800246c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255e:	692a      	ldr	r2, [r5, #16]
 8002560:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_OscConfig+0x278>)
 8002562:	b16a      	cbz	r2, 8002580 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002568:	f7ff fa48 	bl	80019fc <HAL_GetTick>
 800256c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	079f      	lsls	r7, r3, #30
 8002572:	d4ec      	bmi.n	800254e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fa42 	bl	80019fc <HAL_GetTick>
 8002578:	1b80      	subs	r0, r0, r6
 800257a:	2802      	cmp	r0, #2
 800257c:	d9f7      	bls.n	800256e <HAL_RCC_OscConfig+0x11a>
 800257e:	e7ab      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002580:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002582:	f7ff fa3b 	bl	80019fc <HAL_GetTick>
 8002586:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	0798      	lsls	r0, r3, #30
 800258c:	f57f af6e 	bpl.w	800246c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff fa34 	bl	80019fc <HAL_GetTick>
 8002594:	1b80      	subs	r0, r0, r6
 8002596:	2802      	cmp	r0, #2
 8002598:	d9f6      	bls.n	8002588 <HAL_RCC_OscConfig+0x134>
 800259a:	e79d      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259c:	69aa      	ldr	r2, [r5, #24]
 800259e:	4c4a      	ldr	r4, [pc, #296]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025a2:	b1da      	cbz	r2, 80025dc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025a8:	f7ff fa28 	bl	80019fc <HAL_GetTick>
 80025ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025b0:	079b      	lsls	r3, r3, #30
 80025b2:	d50d      	bpl.n	80025d0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025b8:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_OscConfig+0x280>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80025c2:	bf00      	nop
  }
  while (Delay --);
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	9201      	str	r2, [sp, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_RCC_OscConfig+0x16e>
 80025ce:	e751      	b.n	8002474 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff fa14 	bl	80019fc <HAL_GetTick>
 80025d4:	1b80      	subs	r0, r0, r6
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d9e9      	bls.n	80025ae <HAL_RCC_OscConfig+0x15a>
 80025da:	e77d      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80025dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025de:	f7ff fa0d 	bl	80019fc <HAL_GetTick>
 80025e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e6:	079f      	lsls	r7, r3, #30
 80025e8:	f57f af44 	bpl.w	8002474 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fa06 	bl	80019fc <HAL_GetTick>
 80025f0:	1b80      	subs	r0, r0, r6
 80025f2:	2802      	cmp	r0, #2
 80025f4:	d9f6      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
 80025f6:	e76f      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f8:	4c33      	ldr	r4, [pc, #204]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025fa:	69e3      	ldr	r3, [r4, #28]
 80025fc:	00d8      	lsls	r0, r3, #3
 80025fe:	d424      	bmi.n	800264a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002600:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	69e3      	ldr	r3, [r4, #28]
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61e3      	str	r3, [r4, #28]
 800260a:	69e3      	ldr	r3, [r4, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	4e30      	ldr	r6, [pc, #192]	; (80026d8 <HAL_RCC_OscConfig+0x284>)
 8002616:	6833      	ldr	r3, [r6, #0]
 8002618:	05d9      	lsls	r1, r3, #23
 800261a:	d518      	bpl.n	800264e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	68eb      	ldr	r3, [r5, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d126      	bne.n	8002670 <HAL_RCC_OscConfig+0x21c>
 8002622:	6a23      	ldr	r3, [r4, #32]
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800262a:	f7ff f9e7 	bl	80019fc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002632:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	6a23      	ldr	r3, [r4, #32]
 8002636:	079b      	lsls	r3, r3, #30
 8002638:	d53f      	bpl.n	80026ba <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800263a:	2f00      	cmp	r7, #0
 800263c:	f43f af1e 	beq.w	800247c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	69e3      	ldr	r3, [r4, #28]
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	61e3      	str	r3, [r4, #28]
 8002648:	e718      	b.n	800247c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2700      	movs	r7, #0
 800264c:	e7e2      	b.n	8002614 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	6833      	ldr	r3, [r6, #0]
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002656:	f7ff f9d1 	bl	80019fc <HAL_GetTick>
 800265a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	6833      	ldr	r3, [r6, #0]
 800265e:	05da      	lsls	r2, r3, #23
 8002660:	d4dc      	bmi.n	800261c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7ff f9cb 	bl	80019fc <HAL_GetTick>
 8002666:	eba0 0008 	sub.w	r0, r0, r8
 800266a:	2864      	cmp	r0, #100	; 0x64
 800266c:	d9f6      	bls.n	800265c <HAL_RCC_OscConfig+0x208>
 800266e:	e733      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	b9ab      	cbnz	r3, 800269e <HAL_RCC_OscConfig+0x24a>
 8002672:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6223      	str	r3, [r4, #32]
 800267e:	6a23      	ldr	r3, [r4, #32]
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002686:	f7ff f9b9 	bl	80019fc <HAL_GetTick>
 800268a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	6a23      	ldr	r3, [r4, #32]
 800268e:	0798      	lsls	r0, r3, #30
 8002690:	d5d3      	bpl.n	800263a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff f9b3 	bl	80019fc <HAL_GetTick>
 8002696:	1b80      	subs	r0, r0, r6
 8002698:	4540      	cmp	r0, r8
 800269a:	d9f7      	bls.n	800268c <HAL_RCC_OscConfig+0x238>
 800269c:	e71c      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269e:	2b05      	cmp	r3, #5
 80026a0:	6a23      	ldr	r3, [r4, #32]
 80026a2:	d103      	bne.n	80026ac <HAL_RCC_OscConfig+0x258>
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6223      	str	r3, [r4, #32]
 80026aa:	e7ba      	b.n	8002622 <HAL_RCC_OscConfig+0x1ce>
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6223      	str	r3, [r4, #32]
 80026b2:	6a23      	ldr	r3, [r4, #32]
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	e7b6      	b.n	8002628 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff f99f 	bl	80019fc <HAL_GetTick>
 80026be:	eba0 0008 	sub.w	r0, r0, r8
 80026c2:	42b0      	cmp	r0, r6
 80026c4:	d9b6      	bls.n	8002634 <HAL_RCC_OscConfig+0x1e0>
 80026c6:	e707      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	42420000 	.word	0x42420000
 80026d0:	42420480 	.word	0x42420480
 80026d4:	20000008 	.word	0x20000008
 80026d8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x334>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	461c      	mov	r4, r3
 80026e2:	f002 020c 	and.w	r2, r2, #12
 80026e6:	2a08      	cmp	r2, #8
 80026e8:	d03d      	beq.n	8002766 <HAL_RCC_OscConfig+0x312>
 80026ea:	2300      	movs	r3, #0
 80026ec:	4e27      	ldr	r6, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ee:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80026f0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	d12b      	bne.n	800274c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80026f4:	f7ff f982 	bl	80019fc <HAL_GetTick>
 80026f8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	0199      	lsls	r1, r3, #6
 80026fe:	d41f      	bmi.n	8002740 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002700:	6a2b      	ldr	r3, [r5, #32]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002708:	6862      	ldr	r2, [r4, #4]
 800270a:	68a9      	ldr	r1, [r5, #8]
 800270c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002710:	430a      	orrs	r2, r1
 8002712:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002714:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002716:	6862      	ldr	r2, [r4, #4]
 8002718:	430b      	orrs	r3, r1
 800271a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800271e:	4313      	orrs	r3, r2
 8002720:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002722:	2301      	movs	r3, #1
 8002724:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002726:	f7ff f969 	bl	80019fc <HAL_GetTick>
 800272a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	f53f aea8 	bmi.w	8002484 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff f962 	bl	80019fc <HAL_GetTick>
 8002738:	1b40      	subs	r0, r0, r5
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f6      	bls.n	800272c <HAL_RCC_OscConfig+0x2d8>
 800273e:	e6cb      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7ff f95c 	bl	80019fc <HAL_GetTick>
 8002744:	1bc0      	subs	r0, r0, r7
 8002746:	2802      	cmp	r0, #2
 8002748:	d9d7      	bls.n	80026fa <HAL_RCC_OscConfig+0x2a6>
 800274a:	e6c5      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800274c:	f7ff f956 	bl	80019fc <HAL_GetTick>
 8002750:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	f57f ae95 	bpl.w	8002484 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff f94f 	bl	80019fc <HAL_GetTick>
 800275e:	1b40      	subs	r0, r0, r5
 8002760:	2802      	cmp	r0, #2
 8002762:	d9f6      	bls.n	8002752 <HAL_RCC_OscConfig+0x2fe>
 8002764:	e6b8      	b.n	80024d8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002766:	2801      	cmp	r0, #1
 8002768:	f43f aeb7 	beq.w	80024da <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800276c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	6a2b      	ldr	r3, [r5, #32]
 8002770:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002774:	429a      	cmp	r2, r3
 8002776:	f47f ae71 	bne.w	800245c <HAL_RCC_OscConfig+0x8>
 800277a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800277c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002780:	1ac0      	subs	r0, r0, r3
 8002782:	bf18      	it	ne
 8002784:	2001      	movne	r0, #1
 8002786:	e6a8      	b.n	80024da <HAL_RCC_OscConfig+0x86>
 8002788:	40021000 	.word	0x40021000
 800278c:	42420060 	.word	0x42420060

08002790 <HAL_RCC_GetSysClockFreq>:
{
 8002790:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002794:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002796:	ac02      	add	r4, sp, #8
 8002798:	f103 0510 	add.w	r5, r3, #16
 800279c:	4622      	mov	r2, r4
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	3308      	adds	r3, #8
 80027a4:	c203      	stmia	r2!, {r0, r1}
 80027a6:	42ab      	cmp	r3, r5
 80027a8:	4614      	mov	r4, r2
 80027aa:	d1f7      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ac:	2301      	movs	r3, #1
 80027ae:	f88d 3004 	strb.w	r3, [sp, #4]
 80027b2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80027b4:	4911      	ldr	r1, [pc, #68]	; (80027fc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80027ba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	f003 020c 	and.w	r2, r3, #12
 80027c0:	2a08      	cmp	r2, #8
 80027c2:	d117      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80027c8:	a806      	add	r0, sp, #24
 80027ca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027cc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d2:	d50c      	bpl.n	80027ee <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d6:	480a      	ldr	r0, [pc, #40]	; (8002800 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027dc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027de:	aa06      	add	r2, sp, #24
 80027e0:	4413      	add	r3, r2
 80027e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80027ea:	b007      	add	sp, #28
 80027ec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_RCC_GetSysClockFreq+0x74>)
 80027f0:	4350      	muls	r0, r2
 80027f2:	e7fa      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80027f6:	e7f8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x5a>
 80027f8:	080043bc 	.word	0x080043bc
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	003d0900 	.word	0x003d0900

08002808 <HAL_RCC_ClockConfig>:
{
 8002808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800280e:	4604      	mov	r4, r0
 8002810:	b910      	cbnz	r0, 8002818 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002812:	2001      	movs	r0, #1
 8002814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4a45      	ldr	r2, [pc, #276]	; (8002930 <HAL_RCC_ClockConfig+0x128>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	428b      	cmp	r3, r1
 8002822:	d329      	bcc.n	8002878 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	6821      	ldr	r1, [r4, #0]
 8002826:	078e      	lsls	r6, r1, #30
 8002828:	d431      	bmi.n	800288e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	07ca      	lsls	r2, r1, #31
 800282c:	d444      	bmi.n	80028b8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_RCC_ClockConfig+0x128>)
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	429d      	cmp	r5, r3
 8002838:	d367      	bcc.n	800290a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	4d3d      	ldr	r5, [pc, #244]	; (8002934 <HAL_RCC_ClockConfig+0x12c>)
 800283e:	f012 0f04 	tst.w	r2, #4
 8002842:	d16e      	bne.n	8002922 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	0713      	lsls	r3, r2, #28
 8002846:	d506      	bpl.n	8002856 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002848:	686b      	ldr	r3, [r5, #4]
 800284a:	6922      	ldr	r2, [r4, #16]
 800284c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002850:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002854:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002856:	f7ff ff9b 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800285a:	686b      	ldr	r3, [r5, #4]
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <HAL_RCC_ClockConfig+0x130>)
 800285e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	40d8      	lsrs	r0, r3
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_ClockConfig+0x134>)
 8002868:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_RCC_ClockConfig+0x138>)
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	f7fe ffdd 	bl	800182c <HAL_InitTick>
  return HAL_OK;
 8002872:	2000      	movs	r0, #0
 8002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002878:	6813      	ldr	r3, [r2, #0]
 800287a:	f023 0307 	bic.w	r3, r3, #7
 800287e:	430b      	orrs	r3, r1
 8002880:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4299      	cmp	r1, r3
 800288a:	d1c2      	bne.n	8002812 <HAL_RCC_ClockConfig+0xa>
 800288c:	e7ca      	b.n	8002824 <HAL_RCC_ClockConfig+0x1c>
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	bf1e      	ittt	ne
 8002896:	685a      	ldrne	r2, [r3, #4]
 8002898:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800289c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	bf42      	ittt	mi
 80028a2:	685a      	ldrmi	r2, [r3, #4]
 80028a4:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80028a8:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68a0      	ldr	r0, [r4, #8]
 80028ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028b2:	4302      	orrs	r2, r0
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	e7b8      	b.n	800282a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b8:	6862      	ldr	r2, [r4, #4]
 80028ba:	4e1e      	ldr	r6, [pc, #120]	; (8002934 <HAL_RCC_ClockConfig+0x12c>)
 80028bc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c0:	d11b      	bne.n	80028fa <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	d0a4      	beq.n	8002812 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ca:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80028d6:	f7ff f891 	bl	80019fc <HAL_GetTick>
 80028da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028dc:	6873      	ldr	r3, [r6, #4]
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028e8:	d0a1      	beq.n	800282e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ea:	f7ff f887 	bl	80019fc <HAL_GetTick>
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	4540      	cmp	r0, r8
 80028f2:	d9f3      	bls.n	80028dc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80028f4:	2003      	movs	r0, #3
}
 80028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	2a02      	cmp	r2, #2
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002902:	e7e0      	b.n	80028c6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	f013 0f02 	tst.w	r3, #2
 8002908:	e7dd      	b.n	80028c6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	f023 0307 	bic.w	r3, r3, #7
 8002910:	432b      	orrs	r3, r5
 8002912:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002914:	6813      	ldr	r3, [r2, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	429d      	cmp	r5, r3
 800291c:	f47f af79 	bne.w	8002812 <HAL_RCC_ClockConfig+0xa>
 8002920:	e78b      	b.n	800283a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002922:	686b      	ldr	r3, [r5, #4]
 8002924:	68e1      	ldr	r1, [r4, #12]
 8002926:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800292a:	430b      	orrs	r3, r1
 800292c:	606b      	str	r3, [r5, #4]
 800292e:	e789      	b.n	8002844 <HAL_RCC_ClockConfig+0x3c>
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	080043cc 	.word	0x080043cc
 800293c:	20000008 	.word	0x20000008
 8002940:	20000010 	.word	0x20000010

08002944 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	4a03      	ldr	r2, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002952:	6810      	ldr	r0, [r2, #0]
}
 8002954:	40d8      	lsrs	r0, r3
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000
 800295c:	080043dc 	.word	0x080043dc
 8002960:	20000008 	.word	0x20000008

08002964 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002972:	6810      	ldr	r0, [r2, #0]
}
 8002974:	40d8      	lsrs	r0, r3
 8002976:	4770      	bx	lr
 8002978:	40021000 	.word	0x40021000
 800297c:	080043dc 	.word	0x080043dc
 8002980:	20000008 	.word	0x20000008

08002984 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002984:	230f      	movs	r3, #15
 8002986:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetClockConfig+0x34>)
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002998:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80029a0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029aa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_GetClockConfig+0x38>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	600b      	str	r3, [r1, #0]
 80029b6:	4770      	bx	lr
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40022000 	.word	0x40022000

080029c0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c0:	6803      	ldr	r3, [r0, #0]
{
 80029c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c6:	07d9      	lsls	r1, r3, #31
{
 80029c8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029ca:	d520      	bpl.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029cc:	4c35      	ldr	r4, [pc, #212]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80029ce:	69e3      	ldr	r3, [r4, #28]
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	d432      	bmi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80029d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	69e3      	ldr	r3, [r4, #28]
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	61e3      	str	r3, [r4, #28]
 80029de:	69e3      	ldr	r3, [r4, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4e2f      	ldr	r6, [pc, #188]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029ea:	6833      	ldr	r3, [r6, #0]
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	d526      	bpl.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029f6:	d136      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f8:	6a23      	ldr	r3, [r4, #32]
 80029fa:	686a      	ldr	r2, [r5, #4]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a00:	4313      	orrs	r3, r2
 8002a02:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a04:	b11f      	cbz	r7, 8002a0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a06:	69e3      	ldr	r3, [r4, #28]
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0e:	6828      	ldr	r0, [r5, #0]
 8002a10:	0783      	lsls	r3, r0, #30
 8002a12:	d506      	bpl.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002a16:	68a9      	ldr	r1, [r5, #8]
 8002a18:	6853      	ldr	r3, [r2, #4]
 8002a1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	f010 0010 	ands.w	r0, r0, #16
 8002a26:	d01b      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a28:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002a2a:	68e9      	ldr	r1, [r5, #12]
 8002a2c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a2e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a34:	430b      	orrs	r3, r1
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	e012      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2700      	movs	r7, #0
 8002a3c:	e7d4      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	6833      	ldr	r3, [r6, #0]
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a46:	f7fe ffd9 	bl	80019fc <HAL_GetTick>
 8002a4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	6833      	ldr	r3, [r6, #0]
 8002a4e:	05d8      	lsls	r0, r3, #23
 8002a50:	d4ce      	bmi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe ffd3 	bl	80019fc <HAL_GetTick>
 8002a56:	eba0 0008 	sub.w	r0, r0, r8
 8002a5a:	2864      	cmp	r0, #100	; 0x64
 8002a5c:	d9f6      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002a5e:	2003      	movs	r0, #3
}
 8002a60:	b002      	add	sp, #8
 8002a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a66:	686a      	ldr	r2, [r5, #4]
 8002a68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d0c3      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a70:	2001      	movs	r0, #1
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a76:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a78:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002a80:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a82:	07d9      	lsls	r1, r3, #31
 8002a84:	d5b8      	bpl.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002a86:	f7fe ffb9 	bl	80019fc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002a8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	6a23      	ldr	r3, [r4, #32]
 8002a92:	079a      	lsls	r2, r3, #30
 8002a94:	d4b0      	bmi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe ffb1 	bl	80019fc <HAL_GetTick>
 8002a9a:	1b80      	subs	r0, r0, r6
 8002a9c:	4540      	cmp	r0, r8
 8002a9e:	d9f7      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002aa0:	e7dd      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	42420440 	.word	0x42420440

08002ab0 <HAL_TIM_Base_MspInit>:
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d120      	bne.n	8002afe <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac2:	6803      	ldr	r3, [r0, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_TIM_Base_Start_IT+0x50>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x34>
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x34>
 8002ad8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x34>
 8002ae0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	2a06      	cmp	r2, #6
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002afa:	2000      	movs	r0, #0
}
 8002afc:	4770      	bx	lr
    return HAL_ERROR;
 8002afe:	2001      	movs	r0, #1
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00

08002b08 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIM_IC_CaptureCallback>:
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_TriggerCallback>:
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b10:	6803      	ldr	r3, [r0, #0]
{
 8002b12:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	691a      	ldr	r2, [r3, #16]
{
 8002b16:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b18:	0791      	lsls	r1, r2, #30
 8002b1a:	d50e      	bpl.n	8002b3a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	0792      	lsls	r2, r2, #30
 8002b20:	d50b      	bpl.n	8002b3a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b22:	f06f 0202 	mvn.w	r2, #2
 8002b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b28:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b2e:	079b      	lsls	r3, r3, #30
 8002b30:	d077      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	f7ff ffea 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	2300      	movs	r3, #0
 8002b38:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	0750      	lsls	r0, r2, #29
 8002b40:	d510      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	0751      	lsls	r1, r2, #29
 8002b46:	d50d      	bpl.n	8002b64 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b50:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b5a:	d068      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	f7ff ffd5 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	2300      	movs	r3, #0
 8002b62:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	0712      	lsls	r2, r2, #28
 8002b6a:	d50f      	bpl.n	8002b8c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	0710      	lsls	r0, r2, #28
 8002b70:	d50c      	bpl.n	8002b8c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b72:	f06f 0208 	mvn.w	r2, #8
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b82:	d05a      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b84:	f7ff ffc1 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	06d2      	lsls	r2, r2, #27
 8002b92:	d510      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	06d0      	lsls	r0, r2, #27
 8002b98:	d50d      	bpl.n	8002bb6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b9a:	f06f 0210 	mvn.w	r2, #16
 8002b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba0:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bac:	d04b      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	f7ff ffac 	bl	8002b0a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	07d1      	lsls	r1, r2, #31
 8002bbc:	d508      	bpl.n	8002bd0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	07d2      	lsls	r2, r2, #31
 8002bc2:	d505      	bpl.n	8002bd0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc4:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bcc:	f7fe fdee 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	0610      	lsls	r0, r2, #24
 8002bd6:	d508      	bpl.n	8002bea <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	0611      	lsls	r1, r2, #24
 8002bdc:	d505      	bpl.n	8002bea <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002be6:	f000 f89a 	bl	8002d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	0652      	lsls	r2, r2, #25
 8002bf0:	d508      	bpl.n	8002c04 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	0650      	lsls	r0, r2, #25
 8002bf6:	d505      	bpl.n	8002c04 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bfe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c00:	f7ff ff85 	bl	8002b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	0691      	lsls	r1, r2, #26
 8002c0a:	d522      	bpl.n	8002c52 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	0692      	lsls	r2, r2, #26
 8002c10:	d51f      	bpl.n	8002c52 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c12:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c1c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c1e:	f000 b87d 	b.w	8002d1c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	f7ff ff71 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff ff70 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c2c:	e783      	b.n	8002b36 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	f7ff ff6b 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff ff6a 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c38:	e792      	b.n	8002b60 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	f7ff ff65 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ff64 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c44:	e7a0      	b.n	8002b88 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	f7ff ff5f 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff ff5e 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c50:	e7af      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xa2>
 8002c52:	bd10      	pop	{r4, pc}

08002c54 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002c56:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	4290      	cmp	r0, r2
 8002c5a:	d00a      	beq.n	8002c72 <TIM_Base_SetConfig+0x1e>
 8002c5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0x1e>
 8002c62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c66:	4290      	cmp	r0, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0x1e>
 8002c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c6e:	4290      	cmp	r0, r2
 8002c70:	d115      	bne.n	8002c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002c72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c78:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <TIM_Base_SetConfig+0x6c>)
 8002c7c:	4290      	cmp	r0, r2
 8002c7e:	d00a      	beq.n	8002c96 <TIM_Base_SetConfig+0x42>
 8002c80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x42>
 8002c86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c8a:	4290      	cmp	r0, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x42>
 8002c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c92:	4290      	cmp	r0, r2
 8002c94:	d103      	bne.n	8002c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c96:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c9e:	694a      	ldr	r2, [r1, #20]
 8002ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ca6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	688b      	ldr	r3, [r1, #8]
 8002caa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	680b      	ldr	r3, [r1, #0]
 8002cae:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <TIM_Base_SetConfig+0x6c>)
 8002cb2:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb4:	bf04      	itt	eq
 8002cb6:	690b      	ldreq	r3, [r1, #16]
 8002cb8:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6143      	str	r3, [r0, #20]
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <HAL_TIM_Base_Init>:
{
 8002cc4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	b330      	cbz	r0, 8002d18 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002cd2:	b91b      	cbnz	r3, 8002cdc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002cd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cd8:	f7ff feea 	bl	8002ab0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cde:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	1d21      	adds	r1, r4, #4
 8002ce6:	f7ff ffb5 	bl	8002c54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cea:	2301      	movs	r3, #1
  return HAL_OK;
 8002cec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002cf6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002cfa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002cfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d18:	2001      	movs	r0, #1
}
 8002d1a:	bd10      	pop	{r4, pc}

08002d1c <HAL_TIMEx_CommutCallback>:
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	4770      	bx	lr

08002d20 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d32:	2320      	movs	r3, #32
 8002d34:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002d38:	4770      	bx	lr
	...

08002d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	68c1      	ldr	r1, [r0, #12]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d4e:	6882      	ldr	r2, [r0, #8]
 8002d50:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002d52:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d54:	4302      	orrs	r2, r0
 8002d56:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002d58:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002d5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	69a1      	ldr	r1, [r4, #24]
 8002d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <UART_SetConfig+0x70>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d115      	bne.n	8002da4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff fdf4 	bl	8002964 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d7c:	2319      	movs	r3, #25
 8002d7e:	4358      	muls	r0, r3
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2264      	movs	r2, #100	; 0x64
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d8a:	fbb0 f1f2 	udiv	r1, r0, r2
 8002d8e:	fb02 0311 	mls	r3, r2, r1, r0
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9a:	6825      	ldr	r5, [r4, #0]
 8002d9c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002da0:	60ab      	str	r3, [r5, #8]
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002da4:	f7ff fdce 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 8002da8:	e7e8      	b.n	8002d7c <UART_SetConfig+0x40>
 8002daa:	bf00      	nop
 8002dac:	40013800 	.word	0x40013800

08002db0 <HAL_UART_Init>:
{
 8002db0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002db2:	4604      	mov	r4, r0
 8002db4:	b340      	cbz	r0, 8002e08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dbe:	b91b      	cbnz	r3, 8002dc8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002dc0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002dc4:	f7fe fdb8 	bl	8001938 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002dca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002dd0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002dd2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002dda:	f7ff ffaf 	bl	8002d3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dde:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002e06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e08:	2001      	movs	r0, #1
}
 8002e0a:	bd10      	pop	{r4, pc}

08002e0c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e0c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d120      	bne.n	8002e56 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002e14:	b1e9      	cbz	r1, 8002e52 <HAL_UART_Receive_IT+0x46>
 8002e16:	b1e2      	cbz	r2, 8002e52 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002e18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d01a      	beq.n	8002e56 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002e20:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002e22:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e24:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e26:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e2a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e2e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002e30:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e32:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002e34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002e3c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e3e:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002e40:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e42:	f041 0101 	orr.w	r1, r1, #1
 8002e46:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e48:	68d1      	ldr	r1, [r2, #12]
 8002e4a:	f041 0120 	orr.w	r1, r1, #32
 8002e4e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002e50:	4770      	bx	lr
      return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
 8002e54:	4770      	bx	lr
    return HAL_BUSY;
 8002e56:	2002      	movs	r0, #2
}
 8002e58:	4770      	bx	lr

08002e5a <HAL_UART_TxCpltCallback>:
 8002e5a:	4770      	bx	lr

08002e5c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e5c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002e60:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e62:	2b22      	cmp	r3, #34	; 0x22
 8002e64:	d132      	bne.n	8002ecc <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e66:	6881      	ldr	r1, [r0, #8]
 8002e68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e6a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002e6e:	6802      	ldr	r2, [r0, #0]
 8002e70:	d120      	bne.n	8002eb4 <UART_Receive_IT+0x58>
 8002e72:	6901      	ldr	r1, [r0, #16]
 8002e74:	bb09      	cbnz	r1, 8002eba <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e7c:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8002e80:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002e82:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002e84:	3c01      	subs	r4, #1
 8002e86:	b2a4      	uxth	r4, r4
 8002e88:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002e8a:	b98c      	cbnz	r4, 8002eb0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e8c:	6803      	ldr	r3, [r0, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	f022 0220 	bic.w	r2, r2, #32
 8002e94:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002eac:	f7fe f940 	bl	8001130 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002eb0:	2000      	movs	r0, #0
}
 8002eb2:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb4:	b931      	cbnz	r1, 8002ec4 <UART_Receive_IT+0x68>
 8002eb6:	6901      	ldr	r1, [r0, #16]
 8002eb8:	b921      	cbnz	r1, 8002ec4 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eba:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ebc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002ebe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e7dd      	b.n	8002e80 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eca:	e7f7      	b.n	8002ebc <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8002ecc:	2002      	movs	r0, #2
 8002ece:	bd10      	pop	{r4, pc}

08002ed0 <HAL_UART_ErrorCallback>:
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed4:	6803      	ldr	r3, [r0, #0]
{
 8002ed6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed8:	681a      	ldr	r2, [r3, #0]
{
 8002eda:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002edc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ede:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002ee2:	d107      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee4:	0696      	lsls	r6, r2, #26
 8002ee6:	d55c      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0xce>
 8002ee8:	068d      	lsls	r5, r1, #26
 8002eea:	d55a      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0xce>
}
 8002eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ef0:	f7ff bfb4 	b.w	8002e5c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ef4:	f015 0501 	ands.w	r5, r5, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_UART_IRQHandler+0x2c>
 8002efa:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002efe:	d050      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f00:	07d0      	lsls	r0, r2, #31
 8002f02:	d505      	bpl.n	8002f10 <HAL_UART_IRQHandler+0x3c>
 8002f04:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f06:	bf42      	ittt	mi
 8002f08:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002f0a:	f043 0301 	orrmi.w	r3, r3, #1
 8002f0e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f10:	0756      	lsls	r6, r2, #29
 8002f12:	d504      	bpl.n	8002f1e <HAL_UART_IRQHandler+0x4a>
 8002f14:	b11d      	cbz	r5, 8002f1e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1e:	0790      	lsls	r0, r2, #30
 8002f20:	d504      	bpl.n	8002f2c <HAL_UART_IRQHandler+0x58>
 8002f22:	b11d      	cbz	r5, 8002f2c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f2c:	0713      	lsls	r3, r2, #28
 8002f2e:	d506      	bpl.n	8002f3e <HAL_UART_IRQHandler+0x6a>
 8002f30:	068e      	lsls	r6, r1, #26
 8002f32:	d400      	bmi.n	8002f36 <HAL_UART_IRQHandler+0x62>
 8002f34:	b11d      	cbz	r5, 8002f3e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d064      	beq.n	800300e <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f44:	0695      	lsls	r5, r2, #26
 8002f46:	d504      	bpl.n	8002f52 <HAL_UART_IRQHandler+0x7e>
 8002f48:	0688      	lsls	r0, r1, #26
 8002f4a:	d502      	bpl.n	8002f52 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff ff85 	bl	8002e5c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002f54:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f5a:	0711      	lsls	r1, r2, #28
 8002f5c:	d402      	bmi.n	8002f64 <HAL_UART_IRQHandler+0x90>
 8002f5e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002f62:	d01a      	beq.n	8002f9a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002f64:	f7ff fedc 	bl	8002d20 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	0652      	lsls	r2, r2, #25
 8002f6e:	d510      	bpl.n	8002f92 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f70:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f72:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f7a:	b150      	cbz	r0, 8002f92 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_UART_IRQHandler+0x13c>)
 8002f7e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f80:	f7ff f88e 	bl	80020a0 <HAL_DMA_Abort_IT>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d042      	beq.n	800300e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f90:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7ff ff9c 	bl	8002ed0 <HAL_UART_ErrorCallback>
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002f9a:	f7ff ff99 	bl	8002ed0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fa2:	0616      	lsls	r6, r2, #24
 8002fa4:	d525      	bpl.n	8002ff2 <HAL_UART_IRQHandler+0x11e>
 8002fa6:	060d      	lsls	r5, r1, #24
 8002fa8:	d523      	bpl.n	8002ff2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002faa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002fae:	2a21      	cmp	r2, #33	; 0x21
 8002fb0:	d12d      	bne.n	800300e <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb2:	68a2      	ldr	r2, [r4, #8]
 8002fb4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002fb8:	6a22      	ldr	r2, [r4, #32]
 8002fba:	d115      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x114>
 8002fbc:	6921      	ldr	r1, [r4, #16]
 8002fbe:	b999      	cbnz	r1, 8002fe8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fc0:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002fc4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002fc8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fca:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002fcc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002fd4:	b9da      	cbnz	r2, 800300e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fdc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fe8:	1c51      	adds	r1, r2, #1
 8002fea:	6221      	str	r1, [r4, #32]
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	e7ec      	b.n	8002fcc <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff2:	0650      	lsls	r0, r2, #25
 8002ff4:	d50b      	bpl.n	800300e <HAL_UART_IRQHandler+0x13a>
 8002ff6:	064a      	lsls	r2, r1, #25
 8002ff8:	d509      	bpl.n	800300e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002ffc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003004:	2320      	movs	r3, #32
 8003006:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800300a:	f7ff ff26 	bl	8002e5a <HAL_UART_TxCpltCallback>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	08003015 	.word	0x08003015

08003014 <UART_DMAAbortOnError>:
{
 8003014:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003016:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003018:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800301a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800301c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800301e:	f7ff ff57 	bl	8002ed0 <HAL_UART_ErrorCallback>
 8003022:	bd08      	pop	{r3, pc}

08003024 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003024:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003026:	f000 fc5f 	bl	80038e8 <vTaskStartScheduler>
  
  return osOK;
}
 800302a:	2000      	movs	r0, #0
 800302c:	bd08      	pop	{r3, pc}

0800302e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800302e:	b570      	push	{r4, r5, r6, lr}
 8003030:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003032:	6946      	ldr	r6, [r0, #20]
{
 8003034:	460b      	mov	r3, r1
 8003036:	b086      	sub	sp, #24
 8003038:	6840      	ldr	r0, [r0, #4]
 800303a:	6829      	ldr	r1, [r5, #0]
 800303c:	692a      	ldr	r2, [r5, #16]
 800303e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003042:	b176      	cbz	r6, 8003062 <osThreadCreate+0x34>
 8003044:	69ad      	ldr	r5, [r5, #24]
 8003046:	b165      	cbz	r5, 8003062 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003048:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800304a:	bf0c      	ite	eq
 800304c:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800304e:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003050:	9502      	str	r5, [sp, #8]
 8003052:	e88d 0050 	stmia.w	sp, {r4, r6}
 8003056:	f000 fbe3 	bl	8003820 <xTaskCreateStatic>
 800305a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800305c:	9805      	ldr	r0, [sp, #20]
}
 800305e:	b006      	add	sp, #24
 8003060:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003062:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003064:	bf0c      	ite	eq
 8003066:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8003068:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306a:	ad05      	add	r5, sp, #20
 800306c:	b292      	uxth	r2, r2
 800306e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003072:	f000 fc0c 	bl	800388e <xTaskCreate>
 8003076:	2801      	cmp	r0, #1
 8003078:	d0f0      	beq.n	800305c <osThreadCreate+0x2e>
      return NULL;
 800307a:	2000      	movs	r0, #0
 800307c:	e7ef      	b.n	800305e <osThreadCreate+0x30>

0800307e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800307e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003080:	2800      	cmp	r0, #0
 8003082:	bf08      	it	eq
 8003084:	2001      	moveq	r0, #1
 8003086:	f000 fd77 	bl	8003b78 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800308a:	2000      	movs	r0, #0
 800308c:	bd08      	pop	{r3, pc}

0800308e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800308e:	f100 0308 	add.w	r3, r0, #8
 8003092:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003094:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003098:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800309a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800309c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030a0:	6003      	str	r3, [r0, #0]
 80030a2:	4770      	bx	lr

080030a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	6103      	str	r3, [r0, #16]
 80030a8:	4770      	bx	lr

080030aa <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80030aa:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030ac:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80030ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030b0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030b6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80030b8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ba:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80030bc:	3301      	adds	r3, #1
 80030be:	6003      	str	r3, [r0, #0]
 80030c0:	4770      	bx	lr

080030c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030c2:	680a      	ldr	r2, [r1, #0]
{
 80030c4:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030c6:	1c53      	adds	r3, r2, #1
 80030c8:	d10a      	bne.n	80030e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ca:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030d0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030d2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80030d4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80030d6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030d8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80030da:	3301      	adds	r3, #1
 80030dc:	6003      	str	r3, [r0, #0]
 80030de:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e0:	f100 0308 	add.w	r3, r0, #8
 80030e4:	685c      	ldr	r4, [r3, #4]
 80030e6:	6825      	ldr	r5, [r4, #0]
 80030e8:	42aa      	cmp	r2, r5
 80030ea:	d3ef      	bcc.n	80030cc <vListInsert+0xa>
 80030ec:	4623      	mov	r3, r4
 80030ee:	e7f9      	b.n	80030e4 <vListInsert+0x22>

080030f0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f0:	6841      	ldr	r1, [r0, #4]
 80030f2:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030f4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030f8:	6882      	ldr	r2, [r0, #8]
 80030fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003100:	bf08      	it	eq
 8003102:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003104:	2200      	movs	r2, #0
 8003106:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	3a01      	subs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800310e:	6818      	ldr	r0, [r3, #0]
}
 8003110:	4770      	bx	lr
	...

08003114 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8003114:	2300      	movs	r3, #0
{
 8003116:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8003118:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <prvTaskExitError+0x3c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	d008      	beq.n	8003134 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	e7fe      	b.n	8003132 <prvTaskExitError+0x1e>
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0fc      	beq.n	8003144 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800314a:	b002      	add	sp, #8
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000014 	.word	0x20000014

08003154 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003154:	4806      	ldr	r0, [pc, #24]	; (8003170 <prvPortStartFirstTask+0x1c>)
 8003156:	6800      	ldr	r0, [r0, #0]
 8003158:	6800      	ldr	r0, [r0, #0]
 800315a:	f380 8808 	msr	MSP, r0
 800315e:	b662      	cpsie	i
 8003160:	b661      	cpsie	f
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	df00      	svc	0
 800316c:	bf00      	nop
 800316e:	0000      	.short	0x0000
 8003170:	e000ed08 	.word	0xe000ed08

08003174 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003178:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800317e:	f021 0101 	bic.w	r1, r1, #1
 8003182:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003186:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800318a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800318e:	3840      	subs	r0, #64	; 0x40
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	08003115 	.word	0x08003115
	...

080031a0 <SVC_Handler>:
	__asm volatile (
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <pxCurrentTCBConst2>)
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	6808      	ldr	r0, [r1, #0]
 80031a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031aa:	f380 8809 	msr	PSP, r0
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f380 8811 	msr	BASEPRI, r0
 80031ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80031be:	4770      	bx	lr

080031c0 <pxCurrentTCBConst2>:
 80031c0:	20000f58 	.word	0x20000f58

080031c4 <vPortEnterCritical>:
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <vPortEnterCritical+0x3c>)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80031dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80031de:	d10d      	bne.n	80031fc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <vPortEnterCritical+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80031e8:	d008      	beq.n	80031fc <vPortEnterCritical+0x38>
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	e7fe      	b.n	80031fa <vPortEnterCritical+0x36>
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000014 	.word	0x20000014
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <vPortExitCritical+0x24>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b943      	cbnz	r3, 8003220 <vPortExitCritical+0x18>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	e7fe      	b.n	800321e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003220:	3b01      	subs	r3, #1
 8003222:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003224:	b90b      	cbnz	r3, 800322a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	4770      	bx	lr
 800322c:	20000014 	.word	0x20000014

08003230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003230:	f3ef 8009 	mrs	r0, PSP
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <pxCurrentTCBConst>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003240:	6010      	str	r0, [r2, #0]
 8003242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800324a:	f380 8811 	msr	BASEPRI, r0
 800324e:	f000 fcb7 	bl	8003bc0 <vTaskSwitchContext>
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8811 	msr	BASEPRI, r0
 800325a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6808      	ldr	r0, [r1, #0]
 8003262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003266:	f380 8809 	msr	PSP, r0
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	4770      	bx	lr

08003270 <pxCurrentTCBConst>:
 8003270:	20000f58 	.word	0x20000f58

08003274 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003274:	b508      	push	{r3, lr}
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003286:	f000 fb6d 	bl	8003964 <xTaskIncrementTick>
 800328a:	b118      	cbz	r0, 8003294 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800328c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <SysTick_Handler+0x28>)
 8003292:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003294:	2300      	movs	r3, #0
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	bd08      	pop	{r3, pc}
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032a4:	4908      	ldr	r1, [pc, #32]	; (80032c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032a8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <vPortSetupTimerInterrupt+0x2c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b6:	4906      	ldr	r1, [pc, #24]	; (80032d0 <vPortSetupTimerInterrupt+0x30>)
 80032b8:	3b01      	subs	r3, #1
 80032ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032bc:	2307      	movs	r3, #7
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e010 	.word	0xe000e010
 80032c8:	e000e018 	.word	0xe000e018
 80032cc:	20000008 	.word	0x20000008
 80032d0:	e000e014 	.word	0xe000e014

080032d4 <xPortStartScheduler>:
{
 80032d4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032d8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032e4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032e6:	4a24      	ldr	r2, [pc, #144]	; (8003378 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80032f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032f8:	2207      	movs	r2, #7
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <xPortStartScheduler+0xa8>)
 80032fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003302:	1e54      	subs	r4, r2, #1
 8003304:	0600      	lsls	r0, r0, #24
 8003306:	d40d      	bmi.n	8003324 <xPortStartScheduler+0x50>
 8003308:	b101      	cbz	r1, 800330c <xPortStartScheduler+0x38>
 800330a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2a03      	cmp	r2, #3
 8003310:	d011      	beq.n	8003336 <xPortStartScheduler+0x62>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	e7fe      	b.n	8003322 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003324:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003328:	2101      	movs	r1, #1
 800332a:	0052      	lsls	r2, r2, #1
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003332:	4622      	mov	r2, r4
 8003334:	e7e3      	b.n	80032fe <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003336:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003338:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800333a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800333e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003340:	9b01      	ldr	r3, [sp, #4]
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <xPortStartScheduler+0xa0>)
 8003344:	b2db      	uxtb	r3, r3
 8003346:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <xPortStartScheduler+0xac>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003350:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003358:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800335a:	f7ff ffa1 	bl	80032a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <xPortStartScheduler+0xb0>)
 8003360:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003362:	f7ff fef7 	bl	8003154 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003366:	f000 fc2b 	bl	8003bc0 <vTaskSwitchContext>
	prvTaskExitError();
 800336a:	f7ff fed3 	bl	8003114 <prvTaskExitError>
}
 800336e:	4620      	mov	r0, r4
 8003370:	b002      	add	sp, #8
 8003372:	bd10      	pop	{r4, pc}
 8003374:	e000e400 	.word	0xe000e400
 8003378:	20000338 	.word	0x20000338
 800337c:	2000033c 	.word	0x2000033c
 8003380:	e000ed20 	.word	0xe000ed20
 8003384:	20000014 	.word	0x20000014

08003388 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003388:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <prvInsertBlockIntoFreeList+0x40>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4282      	cmp	r2, r0
 8003390:	d318      	bcc.n	80033c4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003392:	685c      	ldr	r4, [r3, #4]
 8003394:	1919      	adds	r1, r3, r4
 8003396:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003398:	bf01      	itttt	eq
 800339a:	6841      	ldreq	r1, [r0, #4]
 800339c:	4618      	moveq	r0, r3
 800339e:	1909      	addeq	r1, r1, r4
 80033a0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033a2:	6844      	ldr	r4, [r0, #4]
 80033a4:	1901      	adds	r1, r0, r4
 80033a6:	428a      	cmp	r2, r1
 80033a8:	d107      	bne.n	80033ba <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <prvInsertBlockIntoFreeList+0x44>)
 80033ac:	6809      	ldr	r1, [r1, #0]
 80033ae:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033b0:	bf1f      	itttt	ne
 80033b2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033b4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033b6:	1909      	addne	r1, r1, r4
 80033b8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033ba:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033bc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033be:	bf18      	it	ne
 80033c0:	6018      	strne	r0, [r3, #0]
 80033c2:	bd10      	pop	{r4, pc}
 80033c4:	4613      	mov	r3, r2
 80033c6:	e7e1      	b.n	800338c <prvInsertBlockIntoFreeList+0x4>
 80033c8:	20000f50 	.word	0x20000f50
 80033cc:	20000340 	.word	0x20000340

080033d0 <pvPortMalloc>:
{
 80033d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80033d6:	f000 fabd 	bl	8003954 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80033da:	493e      	ldr	r1, [pc, #248]	; (80034d4 <pvPortMalloc+0x104>)
 80033dc:	4d3e      	ldr	r5, [pc, #248]	; (80034d8 <pvPortMalloc+0x108>)
 80033de:	680b      	ldr	r3, [r1, #0]
 80033e0:	bb0b      	cbnz	r3, 8003426 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80033e2:	4a3e      	ldr	r2, [pc, #248]	; (80034dc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033e4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033e6:	bf1d      	ittte	ne
 80033e8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033ea:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033ee:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033f2:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033f6:	bf1c      	itt	ne
 80033f8:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033fa:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80033fc:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033fe:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003400:	4e37      	ldr	r6, [pc, #220]	; (80034e0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8003402:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003404:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003408:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800340a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800340c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800340e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003410:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003412:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003414:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003416:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003418:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800341a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800341c:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <pvPortMalloc+0x118>)
 800341e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003424:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003426:	682f      	ldr	r7, [r5, #0]
 8003428:	4227      	tst	r7, r4
 800342a:	d116      	bne.n	800345a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800342c:	2c00      	cmp	r4, #0
 800342e:	d040      	beq.n	80034b2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8003430:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003434:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003436:	bf1c      	itt	ne
 8003438:	f023 0307 	bicne.w	r3, r3, #7
 800343c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800343e:	b163      	cbz	r3, 800345a <pvPortMalloc+0x8a>
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <pvPortMalloc+0x118>)
 8003442:	6816      	ldr	r6, [r2, #0]
 8003444:	4690      	mov	r8, r2
 8003446:	42b3      	cmp	r3, r6
 8003448:	d807      	bhi.n	800345a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800344a:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <pvPortMalloc+0x110>)
 800344c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800344e:	6868      	ldr	r0, [r5, #4]
 8003450:	4283      	cmp	r3, r0
 8003452:	d804      	bhi.n	800345e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003454:	6809      	ldr	r1, [r1, #0]
 8003456:	428d      	cmp	r5, r1
 8003458:	d107      	bne.n	800346a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800345a:	2400      	movs	r4, #0
 800345c:	e029      	b.n	80034b2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800345e:	682c      	ldr	r4, [r5, #0]
 8003460:	2c00      	cmp	r4, #0
 8003462:	d0f7      	beq.n	8003454 <pvPortMalloc+0x84>
 8003464:	462a      	mov	r2, r5
 8003466:	4625      	mov	r5, r4
 8003468:	e7f1      	b.n	800344e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800346a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800346c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800346e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003470:	1ac2      	subs	r2, r0, r3
 8003472:	2a10      	cmp	r2, #16
 8003474:	d90f      	bls.n	8003496 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003476:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003478:	0741      	lsls	r1, r0, #29
 800347a:	d008      	beq.n	800348e <pvPortMalloc+0xbe>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	e7fe      	b.n	800348c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800348e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003490:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003492:	f7ff ff79 	bl	8003388 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003496:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003498:	4912      	ldr	r1, [pc, #72]	; (80034e4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800349a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800349c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800349e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034a0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034a2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034a6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034a8:	bf38      	it	cc
 80034aa:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034ac:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034ae:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80034b0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80034b2:	f000 fae9 	bl	8003a88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034b6:	0763      	lsls	r3, r4, #29
 80034b8:	d008      	beq.n	80034cc <pvPortMalloc+0xfc>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	e7fe      	b.n	80034ca <pvPortMalloc+0xfa>
}
 80034cc:	4620      	mov	r0, r4
 80034ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034d2:	bf00      	nop
 80034d4:	20000340 	.word	0x20000340
 80034d8:	20000f44 	.word	0x20000f44
 80034dc:	20000344 	.word	0x20000344
 80034e0:	20000f50 	.word	0x20000f50
 80034e4:	20000f4c 	.word	0x20000f4c
 80034e8:	20000f48 	.word	0x20000f48

080034ec <vPortFree>:
{
 80034ec:	b510      	push	{r4, lr}
	if( pv != NULL )
 80034ee:	4604      	mov	r4, r0
 80034f0:	b370      	cbz	r0, 8003550 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <vPortFree+0x68>)
 80034f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4213      	tst	r3, r2
 80034fc:	d108      	bne.n	8003510 <vPortFree+0x24>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	e7fe      	b.n	800350e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003510:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003514:	b141      	cbz	r1, 8003528 <vPortFree+0x3c>
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	e7fe      	b.n	8003526 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003528:	ea23 0302 	bic.w	r3, r3, r2
 800352c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003530:	f000 fa10 	bl	8003954 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <vPortFree+0x6c>)
 8003536:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800353a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800353c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003540:	440b      	add	r3, r1
 8003542:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003544:	f7ff ff20 	bl	8003388 <prvInsertBlockIntoFreeList>
}
 8003548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800354c:	f000 ba9c 	b.w	8003a88 <xTaskResumeAll>
 8003550:	bd10      	pop	{r4, pc}
 8003552:	bf00      	nop
 8003554:	20000f44 	.word	0x20000f44
 8003558:	20000f48 	.word	0x20000f48

0800355c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003560:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003562:	f7ff fe2f 	bl	80031c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003568:	4c2d      	ldr	r4, [pc, #180]	; (8003620 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4f2d      	ldr	r7, [pc, #180]	; (8003624 <prvAddNewTaskToReadyList+0xc8>)
 800356e:	3201      	adds	r2, #1
 8003570:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003572:	6825      	ldr	r5, [r4, #0]
 8003574:	2d00      	cmp	r5, #0
 8003576:	d145      	bne.n	8003604 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003578:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d11c      	bne.n	80035ba <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003580:	1978      	adds	r0, r7, r5
 8003582:	3514      	adds	r5, #20
 8003584:	f7ff fd83 	bl	800308e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003588:	2d8c      	cmp	r5, #140	; 0x8c
 800358a:	d1f9      	bne.n	8003580 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800358c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003650 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003590:	4d25      	ldr	r5, [pc, #148]	; (8003628 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003592:	4640      	mov	r0, r8
 8003594:	f7ff fd7b 	bl	800308e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003598:	4628      	mov	r0, r5
 800359a:	f7ff fd78 	bl	800308e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800359e:	4823      	ldr	r0, [pc, #140]	; (800362c <prvAddNewTaskToReadyList+0xd0>)
 80035a0:	f7ff fd75 	bl	800308e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035a4:	4822      	ldr	r0, [pc, #136]	; (8003630 <prvAddNewTaskToReadyList+0xd4>)
 80035a6:	f7ff fd72 	bl	800308e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035aa:	4822      	ldr	r0, [pc, #136]	; (8003634 <prvAddNewTaskToReadyList+0xd8>)
 80035ac:	f7ff fd6f 	bl	800308e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <prvAddNewTaskToReadyList+0xdc>)
 80035b2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <prvAddNewTaskToReadyList+0xe0>)
 80035b8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80035bc:	4921      	ldr	r1, [pc, #132]	; (8003644 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80035be:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80035c0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80035c2:	3301      	adds	r3, #1
 80035c4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80035c6:	2301      	movs	r3, #1
 80035c8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80035ca:	4093      	lsls	r3, r2
 80035cc:	4303      	orrs	r3, r0
 80035ce:	2014      	movs	r0, #20
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	fb00 7002 	mla	r0, r0, r2, r7
 80035d6:	1d31      	adds	r1, r6, #4
 80035d8:	f7ff fd67 	bl	80030aa <vListInsertEnd>
	taskEXIT_CRITICAL();
 80035dc:	f7ff fe14 	bl	8003208 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <prvAddNewTaskToReadyList+0xec>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b163      	cbz	r3, 8003600 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80035f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f4:	4b15      	ldr	r3, [pc, #84]	; (800364c <prvAddNewTaskToReadyList+0xf0>)
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003604:	4b10      	ldr	r3, [pc, #64]	; (8003648 <prvAddNewTaskToReadyList+0xec>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1d6      	bne.n	80035ba <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003612:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003614:	bf98      	it	ls
 8003616:	6026      	strls	r6, [r4, #0]
 8003618:	e7cf      	b.n	80035ba <prvAddNewTaskToReadyList+0x5e>
 800361a:	bf00      	nop
 800361c:	20000ff0 	.word	0x20000ff0
 8003620:	20000f58 	.word	0x20000f58
 8003624:	20000f64 	.word	0x20000f64
 8003628:	2000101c 	.word	0x2000101c
 800362c:	20001038 	.word	0x20001038
 8003630:	20001064 	.word	0x20001064
 8003634:	20001050 	.word	0x20001050
 8003638:	20000f5c 	.word	0x20000f5c
 800363c:	20000f60 	.word	0x20000f60
 8003640:	20001000 	.word	0x20001000
 8003644:	20001004 	.word	0x20001004
 8003648:	2000104c 	.word	0x2000104c
 800364c:	e000ed04 	.word	0xe000ed04
 8003650:	20001008 	.word	0x20001008

08003654 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003654:	4a06      	ldr	r2, [pc, #24]	; (8003670 <prvResetNextTaskUnblockTime+0x1c>)
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <prvResetNextTaskUnblockTime+0x20>)
 800365c:	b919      	cbnz	r1, 8003666 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800365e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800366a:	68d2      	ldr	r2, [r2, #12]
 800366c:	6852      	ldr	r2, [r2, #4]
 800366e:	e7f8      	b.n	8003662 <prvResetNextTaskUnblockTime+0xe>
 8003670:	20000f5c 	.word	0x20000f5c
 8003674:	20001030 	.word	0x20001030

08003678 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4681      	mov	r9, r0
 800367e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003680:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003684:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003686:	3a01      	subs	r2, #1
 8003688:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800368c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003690:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003692:	f026 0607 	bic.w	r6, r6, #7
 8003696:	1e4b      	subs	r3, r1, #1
 8003698:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800369c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800369e:	7858      	ldrb	r0, [r3, #1]
 80036a0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80036a4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80036a8:	b108      	cbz	r0, 80036ae <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036aa:	428b      	cmp	r3, r1
 80036ac:	d1f7      	bne.n	800369e <prvInitialiseNewTask.isra.2+0x26>
 80036ae:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036b0:	2700      	movs	r7, #0
 80036b2:	2d06      	cmp	r5, #6
 80036b4:	bf28      	it	cs
 80036b6:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036b8:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80036ba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80036bc:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036be:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80036c2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036c4:	f7ff fcee 	bl	80030a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036cc:	f104 0018 	add.w	r0, r4, #24
 80036d0:	f7ff fce8 	bl	80030a4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80036d4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036da:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036dc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036e0:	4652      	mov	r2, sl
 80036e2:	4649      	mov	r1, r9
 80036e4:	4630      	mov	r0, r6
 80036e6:	f7ff fd45 	bl	8003174 <pxPortInitialiseStack>
 80036ea:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80036ec:	f1b8 0f00 	cmp.w	r8, #0
 80036f0:	d001      	beq.n	80036f6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036f2:	f8c8 4000 	str.w	r4, [r8]
 80036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036fa <prvDeleteTCB>:
	{
 80036fa:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036fc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003700:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003702:	b93b      	cbnz	r3, 8003714 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003704:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003706:	f7ff fef1 	bl	80034ec <vPortFree>
				vPortFree( pxTCB );
 800370a:	4620      	mov	r0, r4
	}
 800370c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003710:	f7ff beec 	b.w	80034ec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003714:	2b01      	cmp	r3, #1
 8003716:	d0f9      	beq.n	800370c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003718:	2b02      	cmp	r3, #2
 800371a:	d008      	beq.n	800372e <prvDeleteTCB+0x34>
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	e7fe      	b.n	800372c <prvDeleteTCB+0x32>
 800372e:	bd10      	pop	{r4, pc}

08003730 <prvIdleTask>:
{
 8003730:	b580      	push	{r7, lr}
				taskYIELD();
 8003732:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003790 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003736:	4f12      	ldr	r7, [pc, #72]	; (8003780 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003738:	4c12      	ldr	r4, [pc, #72]	; (8003784 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800373a:	4d13      	ldr	r5, [pc, #76]	; (8003788 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	b963      	cbnz	r3, 800375a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <prvIdleTask+0x5c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d9f8      	bls.n	800373a <prvIdleTask+0xa>
				taskYIELD();
 8003748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800374c:	f8c8 3000 	str.w	r3, [r8]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	e7ee      	b.n	8003738 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800375a:	f7ff fd33 	bl	80031c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003762:	1d30      	adds	r0, r6, #4
 8003764:	f7ff fcc4 	bl	80030f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003774:	f7ff fd48 	bl	8003208 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003778:	4630      	mov	r0, r6
 800377a:	f7ff ffbe 	bl	80036fa <prvDeleteTCB>
 800377e:	e7dd      	b.n	800373c <prvIdleTask+0xc>
 8003780:	20001064 	.word	0x20001064
 8003784:	20000ff4 	.word	0x20000ff4
 8003788:	20000ff0 	.word	0x20000ff0
 800378c:	20000f64 	.word	0x20000f64
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003798:	4e1b      	ldr	r6, [pc, #108]	; (8003808 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800379a:	681d      	ldr	r5, [r3, #0]
{
 800379c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800379e:	6830      	ldr	r0, [r6, #0]
{
 80037a0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037a2:	3004      	adds	r0, #4
 80037a4:	f7ff fca4 	bl	80030f0 <uxListRemove>
 80037a8:	4633      	mov	r3, r6
 80037aa:	b940      	cbnz	r0, 80037be <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80037ac:	2001      	movs	r0, #1
 80037ae:	6831      	ldr	r1, [r6, #0]
 80037b0:	4e16      	ldr	r6, [pc, #88]	; (800380c <prvAddCurrentTaskToDelayedList+0x78>)
 80037b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80037b4:	6832      	ldr	r2, [r6, #0]
 80037b6:	4088      	lsls	r0, r1
 80037b8:	ea22 0200 	bic.w	r2, r2, r0
 80037bc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037be:	1c62      	adds	r2, r4, #1
 80037c0:	d107      	bne.n	80037d2 <prvAddCurrentTaskToDelayedList+0x3e>
 80037c2:	b137      	cbz	r7, 80037d2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	4812      	ldr	r0, [pc, #72]	; (8003810 <prvAddCurrentTaskToDelayedList+0x7c>)
 80037c8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ce:	f7ff bc6c 	b.w	80030aa <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037d2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037d4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80037d6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037d8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80037da:	d907      	bls.n	80037ec <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <prvAddCurrentTaskToDelayedList+0x80>)
 80037de:	6810      	ldr	r0, [r2, #0]
 80037e0:	6819      	ldr	r1, [r3, #0]
}
 80037e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e6:	3104      	adds	r1, #4
 80037e8:	f7ff bc6b 	b.w	80030c2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <prvAddCurrentTaskToDelayedList+0x84>)
 80037ee:	6810      	ldr	r0, [r2, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	3104      	adds	r1, #4
 80037f4:	f7ff fc65 	bl	80030c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <prvAddCurrentTaskToDelayedList+0x88>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80037fe:	bf38      	it	cc
 8003800:	601c      	strcc	r4, [r3, #0]
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	20001078 	.word	0x20001078
 8003808:	20000f58 	.word	0x20000f58
 800380c:	20001004 	.word	0x20001004
 8003810:	20001050 	.word	0x20001050
 8003814:	20000f60 	.word	0x20000f60
 8003818:	20000f5c 	.word	0x20000f5c
 800381c:	20001030 	.word	0x20001030

08003820 <xTaskCreateStatic>:
	{
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003826:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003828:	b945      	cbnz	r5, 800383c <xTaskCreateStatic+0x1c>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800383c:	b944      	cbnz	r4, 8003850 <xTaskCreateStatic+0x30>
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	e7fe      	b.n	800384e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003850:	2654      	movs	r6, #84	; 0x54
 8003852:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003854:	9e04      	ldr	r6, [sp, #16]
 8003856:	2e54      	cmp	r6, #84	; 0x54
 8003858:	d008      	beq.n	800386c <xTaskCreateStatic+0x4c>
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	e7fe      	b.n	800386a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800386c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800386e:	2502      	movs	r5, #2
 8003870:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003874:	ad05      	add	r5, sp, #20
 8003876:	9501      	str	r5, [sp, #4]
 8003878:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800387a:	9402      	str	r4, [sp, #8]
 800387c:	9500      	str	r5, [sp, #0]
 800387e:	f7ff fefb 	bl	8003678 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff fe6a 	bl	800355c <prvAddNewTaskToReadyList>
	}
 8003888:	9805      	ldr	r0, [sp, #20]
 800388a:	b006      	add	sp, #24
 800388c:	bd70      	pop	{r4, r5, r6, pc}

0800388e <xTaskCreate>:
	{
 800388e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003892:	4607      	mov	r7, r0
 8003894:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003896:	0090      	lsls	r0, r2, #2
	{
 8003898:	4688      	mov	r8, r1
 800389a:	4616      	mov	r6, r2
 800389c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389e:	f7ff fd97 	bl	80033d0 <pvPortMalloc>
			if( pxStack != NULL )
 80038a2:	4605      	mov	r5, r0
 80038a4:	b1e8      	cbz	r0, 80038e2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038a6:	2054      	movs	r0, #84	; 0x54
 80038a8:	f7ff fd92 	bl	80033d0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80038ac:	4604      	mov	r4, r0
 80038ae:	b1a8      	cbz	r0, 80038dc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80038b8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038be:	9002      	str	r0, [sp, #8]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4632      	mov	r2, r6
 80038c4:	464b      	mov	r3, r9
 80038c6:	4641      	mov	r1, r8
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7ff fed5 	bl	8003678 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff fe44 	bl	800355c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d4:	2001      	movs	r0, #1
	}
 80038d6:	b005      	add	sp, #20
 80038d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80038dc:	4628      	mov	r0, r5
 80038de:	f7ff fe05 	bl	80034ec <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038e2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80038e6:	e7f6      	b.n	80038d6 <xTaskCreate+0x48>

080038e8 <vTaskStartScheduler>:
{
 80038e8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ea:	2400      	movs	r4, #0
{
 80038ec:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ee:	aa07      	add	r2, sp, #28
 80038f0:	a906      	add	r1, sp, #24
 80038f2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038f4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038f6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038f8:	f7fd fe3e 	bl	8001578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038fc:	9b05      	ldr	r3, [sp, #20]
 80038fe:	9400      	str	r4, [sp, #0]
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	9b06      	ldr	r3, [sp, #24]
 8003904:	9a07      	ldr	r2, [sp, #28]
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	490d      	ldr	r1, [pc, #52]	; (8003940 <vTaskStartScheduler+0x58>)
 800390a:	4623      	mov	r3, r4
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <vTaskStartScheduler+0x5c>)
 800390e:	f7ff ff87 	bl	8003820 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003912:	b190      	cbz	r0, 800393a <vTaskStartScheduler+0x52>
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003924:	f04f 32ff 	mov.w	r2, #4294967295
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <vTaskStartScheduler+0x60>)
 800392a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800392c:	2201      	movs	r2, #1
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <vTaskStartScheduler+0x64>)
 8003930:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <vTaskStartScheduler+0x68>)
 8003934:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003936:	f7ff fccd 	bl	80032d4 <xPortStartScheduler>
}
 800393a:	b008      	add	sp, #32
 800393c:	bd10      	pop	{r4, pc}
 800393e:	bf00      	nop
 8003940:	080043e4 	.word	0x080043e4
 8003944:	08003731 	.word	0x08003731
 8003948:	20001030 	.word	0x20001030
 800394c:	2000104c 	.word	0x2000104c
 8003950:	20001078 	.word	0x20001078

08003954 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003954:	4a02      	ldr	r2, [pc, #8]	; (8003960 <vTaskSuspendAll+0xc>)
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000ffc 	.word	0x20000ffc

08003964 <xTaskIncrementTick>:
{
 8003964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003968:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <xTaskIncrementTick+0xf8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d153      	bne.n	8003a18 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003970:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <xTaskIncrementTick+0xfc>)
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003976:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003978:	b9bc      	cbnz	r4, 80039aa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800397a:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <xTaskIncrementTick+0x100>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	b142      	cbz	r2, 8003994 <xTaskIncrementTick+0x30>
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	e7fe      	b.n	8003992 <xTaskIncrementTick+0x2e>
 8003994:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <xTaskIncrementTick+0x104>)
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	6810      	ldr	r0, [r2, #0]
 800399a:	6018      	str	r0, [r3, #0]
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <xTaskIncrementTick+0x108>)
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	3301      	adds	r3, #1
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	f7ff fe55 	bl	8003654 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039aa:	4d31      	ldr	r5, [pc, #196]	; (8003a70 <xTaskIncrementTick+0x10c>)
 80039ac:	f04f 0b00 	mov.w	fp, #0
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	4f30      	ldr	r7, [pc, #192]	; (8003a74 <xTaskIncrementTick+0x110>)
 80039b4:	429c      	cmp	r4, r3
 80039b6:	d33e      	bcc.n	8003a36 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003a64 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80039bc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003a84 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c0:	f8d8 2000 	ldr.w	r2, [r8]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	bb72      	cbnz	r2, 8003a26 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	602a      	str	r2, [r5, #0]
					break;
 80039ce:	e032      	b.n	8003a36 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d0:	f106 0a04 	add.w	sl, r6, #4
 80039d4:	4650      	mov	r0, sl
 80039d6:	f7ff fb8b 	bl	80030f0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039da:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80039dc:	b119      	cbz	r1, 80039e6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039de:	f106 0018 	add.w	r0, r6, #24
 80039e2:	f7ff fb85 	bl	80030f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e6:	2201      	movs	r2, #1
 80039e8:	f04f 0e14 	mov.w	lr, #20
 80039ec:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80039ee:	f8d9 3000 	ldr.w	r3, [r9]
 80039f2:	fa02 f100 	lsl.w	r1, r2, r0
 80039f6:	4319      	orrs	r1, r3
 80039f8:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <xTaskIncrementTick+0x114>)
 80039fa:	f8c9 1000 	str.w	r1, [r9]
 80039fe:	fb0e 3000 	mla	r0, lr, r0, r3
 8003a02:	4651      	mov	r1, sl
 8003a04:	f7ff fb51 	bl	80030aa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003a0c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	bf28      	it	cs
 8003a12:	f04f 0b01 	movcs.w	fp, #1
 8003a16:	e7d3      	b.n	80039c0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003a1a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e011      	b.n	8003a4a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a26:	f8d8 2000 	ldr.w	r2, [r8]
 8003a2a:	68d2      	ldr	r2, [r2, #12]
 8003a2c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a2e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003a30:	428c      	cmp	r4, r1
 8003a32:	d2cd      	bcs.n	80039d0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003a34:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <xTaskIncrementTick+0x114>)
 8003a3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a3c:	2214      	movs	r2, #20
 8003a3e:	434a      	muls	r2, r1
 8003a40:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003a42:	2a02      	cmp	r2, #2
 8003a44:	bf28      	it	cs
 8003a46:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <xTaskIncrementTick+0x11c>)
 8003a4c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	bf18      	it	ne
 8003a52:	f04f 0b01 	movne.w	fp, #1
}
 8003a56:	4658      	mov	r0, fp
 8003a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5c:	20000ffc 	.word	0x20000ffc
 8003a60:	20001078 	.word	0x20001078
 8003a64:	20000f5c 	.word	0x20000f5c
 8003a68:	20000f60 	.word	0x20000f60
 8003a6c:	20001034 	.word	0x20001034
 8003a70:	20001030 	.word	0x20001030
 8003a74:	20000f58 	.word	0x20000f58
 8003a78:	20000f64 	.word	0x20000f64
 8003a7c:	20000ff8 	.word	0x20000ff8
 8003a80:	2000107c 	.word	0x2000107c
 8003a84:	20001004 	.word	0x20001004

08003a88 <xTaskResumeAll>:
{
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003a8c:	4c31      	ldr	r4, [pc, #196]	; (8003b54 <xTaskResumeAll+0xcc>)
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	b943      	cbnz	r3, 8003aa4 <xTaskResumeAll+0x1c>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	e7fe      	b.n	8003aa2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003aa4:	f7ff fb8e 	bl	80031c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aae:	6824      	ldr	r4, [r4, #0]
 8003ab0:	b12c      	cbz	r4, 8003abe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003ab2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003ab4:	f7ff fba8 	bl	8003208 <vPortExitCritical>
}
 8003ab8:	4620      	mov	r0, r4
 8003aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <xTaskResumeAll+0xd0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f5      	beq.n	8003ab2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003b70 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003aca:	4f24      	ldr	r7, [pc, #144]	; (8003b5c <xTaskResumeAll+0xd4>)
 8003acc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003b74 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8003ad4:	b9e3      	cbnz	r3, 8003b10 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003ad6:	b10c      	cbz	r4, 8003adc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003ad8:	f7ff fdbc 	bl	8003654 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003adc:	4d20      	ldr	r5, [pc, #128]	; (8003b60 <xTaskResumeAll+0xd8>)
 8003ade:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ae0:	b144      	cbz	r4, 8003af4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003ae2:	2701      	movs	r7, #1
 8003ae4:	4e1f      	ldr	r6, [pc, #124]	; (8003b64 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003ae6:	f7ff ff3d 	bl	8003964 <xTaskIncrementTick>
 8003aea:	b100      	cbz	r0, 8003aee <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003aec:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003aee:	3c01      	subs	r4, #1
 8003af0:	d1f9      	bne.n	8003ae6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003af2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <xTaskResumeAll+0xdc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0da      	beq.n	8003ab2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <xTaskResumeAll+0xe0>)
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003b0c:	2401      	movs	r4, #1
 8003b0e:	e7d1      	b.n	8003ab4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b10:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003b14:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b16:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b18:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1a:	f104 0018 	add.w	r0, r4, #24
 8003b1e:	f7ff fae7 	bl	80030f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7ff fae4 	bl	80030f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b28:	2014      	movs	r0, #20
 8003b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	fa05 f302 	lsl.w	r3, r5, r2
 8003b32:	430b      	orrs	r3, r1
 8003b34:	fb00 8002 	mla	r0, r0, r2, r8
 8003b38:	4631      	mov	r1, r6
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	f7ff fab5 	bl	80030aa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <xTaskResumeAll+0xe4>)
 8003b42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003b4a:	bf24      	itt	cs
 8003b4c:	4b05      	ldrcs	r3, [pc, #20]	; (8003b64 <xTaskResumeAll+0xdc>)
 8003b4e:	601d      	strcs	r5, [r3, #0]
 8003b50:	e7be      	b.n	8003ad0 <xTaskResumeAll+0x48>
 8003b52:	bf00      	nop
 8003b54:	20000ffc 	.word	0x20000ffc
 8003b58:	20000ff0 	.word	0x20000ff0
 8003b5c:	20001004 	.word	0x20001004
 8003b60:	20000ff8 	.word	0x20000ff8
 8003b64:	2000107c 	.word	0x2000107c
 8003b68:	e000ed04 	.word	0xe000ed04
 8003b6c:	20000f58 	.word	0x20000f58
 8003b70:	20001038 	.word	0x20001038
 8003b74:	20000f64 	.word	0x20000f64

08003b78 <vTaskDelay>:
	{
 8003b78:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b7a:	b940      	cbnz	r0, 8003b8e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <vTaskDelay+0x40>)
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <vTaskDelay+0x44>)
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	b141      	cbz	r1, 8003ba6 <vTaskDelay+0x2e>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	e7fe      	b.n	8003ba4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ba6:	f7ff fed5 	bl	8003954 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003baa:	f7ff fdf3 	bl	8003794 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003bae:	f7ff ff6b 	bl	8003a88 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0e2      	beq.n	8003b7c <vTaskDelay+0x4>
 8003bb6:	bd08      	pop	{r3, pc}
 8003bb8:	e000ed04 	.word	0xe000ed04
 8003bbc:	20000ffc 	.word	0x20000ffc

08003bc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <vTaskSwitchContext+0x60>)
{
 8003bc2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <vTaskSwitchContext+0x64>)
 8003bc8:	b112      	cbz	r2, 8003bd0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003bca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003bd0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <vTaskSwitchContext+0x68>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	2214      	movs	r2, #20
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f1c3 031f 	rsb	r3, r3, #31
 8003be2:	435a      	muls	r2, r3
 8003be4:	4911      	ldr	r1, [pc, #68]	; (8003c2c <vTaskSwitchContext+0x6c>)
 8003be6:	588c      	ldr	r4, [r1, r2]
 8003be8:	1888      	adds	r0, r1, r2
 8003bea:	b944      	cbnz	r4, 8003bfe <vTaskSwitchContext+0x3e>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	e7fe      	b.n	8003bfc <vTaskSwitchContext+0x3c>
 8003bfe:	6844      	ldr	r4, [r0, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	6864      	ldr	r4, [r4, #4]
 8003c04:	440a      	add	r2, r1
 8003c06:	4294      	cmp	r4, r2
 8003c08:	bf08      	it	eq
 8003c0a:	6862      	ldreq	r2, [r4, #4]
 8003c0c:	6044      	str	r4, [r0, #4]
 8003c0e:	bf08      	it	eq
 8003c10:	6042      	streq	r2, [r0, #4]
 8003c12:	2214      	movs	r2, #20
 8003c14:	fb02 1303 	mla	r3, r2, r3, r1
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <vTaskSwitchContext+0x70>)
 8003c1e:	e7d5      	b.n	8003bcc <vTaskSwitchContext+0xc>
 8003c20:	20000ffc 	.word	0x20000ffc
 8003c24:	2000107c 	.word	0x2000107c
 8003c28:	20001004 	.word	0x20001004
 8003c2c:	20000f64 	.word	0x20000f64
 8003c30:	20000f58 	.word	0x20000f58

08003c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c36:	e003      	b.n	8003c40 <LoopCopyDataInit>

08003c38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c3e:	3104      	adds	r1, #4

08003c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c40:	480a      	ldr	r0, [pc, #40]	; (8003c6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c48:	d3f6      	bcc.n	8003c38 <CopyDataInit>
  ldr r2, =_sbss
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c4c:	e002      	b.n	8003c54 <LoopFillZerobss>

08003c4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c50:	f842 3b04 	str.w	r3, [r2], #4

08003c54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c58:	d3f9      	bcc.n	8003c4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c5a:	f7fd fe4f 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c5e:	f000 fa7b 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c62:	f7fd fd2b 	bl	80016bc <main>
  bx lr
 8003c66:	4770      	bx	lr
  ldr r3, =_sidata
 8003c68:	08004740 	.word	0x08004740
  ldr r0, =_sdata
 8003c6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c70:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8003c74:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8003c78:	20001194 	.word	0x20001194

08003c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c7c:	e7fe      	b.n	8003c7c <ADC1_2_IRQHandler>
	...

08003c80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	4604      	mov	r4, r0
 8003c84:	4b02      	ldr	r3, [pc, #8]	; (8003c90 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003c86:	6003      	str	r3, [r0, #0]
 8003c88:	f000 f940 	bl	8003f0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	08004428 	.word	0x08004428

08003c94 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	f7ff fff2 	bl	8003c80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	210c      	movs	r1, #12
 8003ca0:	f000 f911 	bl	8003ec6 <_ZdlPvj>
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	9e06      	ldr	r6, [sp, #24]
 8003cae:	4680      	mov	r8, r0
 8003cb0:	4296      	cmp	r6, r2
 8003cb2:	460f      	mov	r7, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	461d      	mov	r5, r3
 8003cb8:	d103      	bne.n	8003cc2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f000 f97a 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003cc0:	b958      	cbnz	r0, 8003cda <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8003cc2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	6803      	ldr	r3, [r0, #0]
 8003cca:	9606      	str	r6, [sp, #24]
 8003ccc:	6a1e      	ldr	r6, [r3, #32]
 8003cce:	4639      	mov	r1, r7
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	46b4      	mov	ip, r6
 8003cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd8:	4760      	bx	ip
 8003cda:	2006      	movs	r0, #6
 8003cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8003ce0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4683      	mov	fp, r0
 8003cea:	4617      	mov	r7, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003cf0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003cf4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003cf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003cfa:	f000 f95b 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003cfe:	b190      	cbz	r0, 8003d26 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8003d00:	2e00      	cmp	r6, #0
 8003d02:	602c      	str	r4, [r5, #0]
 8003d04:	712f      	strb	r7, [r5, #4]
 8003d06:	db09      	blt.n	8003d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8003d08:	4434      	add	r4, r6
 8003d0a:	45a0      	cmp	r8, r4
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2406      	moveq	r4, #6
 8003d10:	2401      	movne	r4, #1
 8003d12:	71ac      	strb	r4, [r5, #6]
 8003d14:	2000      	movs	r0, #0
 8003d16:	b001      	add	sp, #4
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1c:	3602      	adds	r6, #2
 8003d1e:	d1f9      	bne.n	8003d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8003d20:	2301      	movs	r3, #1
 8003d22:	71ab      	strb	r3, [r5, #6]
 8003d24:	e7f6      	b.n	8003d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8003d26:	4544      	cmp	r4, r8
 8003d28:	d104      	bne.n	8003d34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	4658      	mov	r0, fp
 8003d2e:	f000 f941 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003d32:	b988      	cbnz	r0, 8003d58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8003d34:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003d38:	463a      	mov	r2, r7
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	950d      	str	r5, [sp, #52]	; 0x34
 8003d3e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003d42:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003d46:	940a      	str	r4, [sp, #40]	; 0x28
 8003d48:	69dc      	ldr	r4, [r3, #28]
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	46a4      	mov	ip, r4
 8003d50:	b001      	add	sp, #4
 8003d52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	4760      	bx	ip
 8003d58:	716f      	strb	r7, [r5, #5]
 8003d5a:	e7db      	b.n	8003d14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08003d5c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d60:	4604      	mov	r4, r0
 8003d62:	460d      	mov	r5, r1
 8003d64:	4616      	mov	r6, r2
 8003d66:	461f      	mov	r7, r3
 8003d68:	f000 f8e4 	bl	8003f34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003d6c:	b948      	cbnz	r0, 8003d82 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8003d6e:	68a0      	ldr	r0, [r4, #8]
 8003d70:	4632      	mov	r2, r6
 8003d72:	6803      	ldr	r3, [r0, #0]
 8003d74:	4629      	mov	r1, r5
 8003d76:	699c      	ldr	r4, [r3, #24]
 8003d78:	463b      	mov	r3, r7
 8003d7a:	46a4      	mov	ip, r4
 8003d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d80:	4760      	bx	ip
 8003d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d86 <_ZdlPv>:
 8003d86:	f000 ba0b 	b.w	80041a0 <free>

08003d8a <__aeabi_atexit>:
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 b9ce 	b.w	8004130 <__cxa_atexit>

08003d94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003d94:	7803      	ldrb	r3, [r0, #0]
 8003d96:	2b47      	cmp	r3, #71	; 0x47
 8003d98:	d117      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003d9a:	7843      	ldrb	r3, [r0, #1]
 8003d9c:	2b4e      	cmp	r3, #78	; 0x4e
 8003d9e:	d114      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003da0:	7883      	ldrb	r3, [r0, #2]
 8003da2:	2b55      	cmp	r3, #85	; 0x55
 8003da4:	d111      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003da6:	78c3      	ldrb	r3, [r0, #3]
 8003da8:	2b43      	cmp	r3, #67	; 0x43
 8003daa:	d10e      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003dac:	7903      	ldrb	r3, [r0, #4]
 8003dae:	2b43      	cmp	r3, #67	; 0x43
 8003db0:	d10b      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003db2:	7943      	ldrb	r3, [r0, #5]
 8003db4:	2b2b      	cmp	r3, #43	; 0x2b
 8003db6:	d108      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003db8:	7983      	ldrb	r3, [r0, #6]
 8003dba:	2b2b      	cmp	r3, #43	; 0x2b
 8003dbc:	d105      	bne.n	8003dca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003dbe:	79c0      	ldrb	r0, [r0, #7]
 8003dc0:	2801      	cmp	r0, #1
 8003dc2:	bf8c      	ite	hi
 8003dc4:	2000      	movhi	r0, #0
 8003dc6:	2001      	movls	r0, #1
 8003dc8:	4770      	bx	lr
 8003dca:	2000      	movs	r0, #0
 8003dcc:	4770      	bx	lr
	...

08003dd0 <__cxa_type_match>:
 8003dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003dd4:	461e      	mov	r6, r3
 8003dd6:	7803      	ldrb	r3, [r0, #0]
 8003dd8:	460d      	mov	r5, r1
 8003dda:	2b47      	cmp	r3, #71	; 0x47
 8003ddc:	4602      	mov	r2, r0
 8003dde:	79c1      	ldrb	r1, [r0, #7]
 8003de0:	d147      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003de2:	7843      	ldrb	r3, [r0, #1]
 8003de4:	2b4e      	cmp	r3, #78	; 0x4e
 8003de6:	d144      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003de8:	7883      	ldrb	r3, [r0, #2]
 8003dea:	2b55      	cmp	r3, #85	; 0x55
 8003dec:	d141      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003dee:	78c3      	ldrb	r3, [r0, #3]
 8003df0:	2b43      	cmp	r3, #67	; 0x43
 8003df2:	d13e      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003df4:	7903      	ldrb	r3, [r0, #4]
 8003df6:	2b46      	cmp	r3, #70	; 0x46
 8003df8:	d13b      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003dfa:	7943      	ldrb	r3, [r0, #5]
 8003dfc:	2b4f      	cmp	r3, #79	; 0x4f
 8003dfe:	d138      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003e00:	7983      	ldrb	r3, [r0, #6]
 8003e02:	2b52      	cmp	r3, #82	; 0x52
 8003e04:	d135      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003e06:	2900      	cmp	r1, #0
 8003e08:	d133      	bne.n	8003e72 <__cxa_type_match+0xa2>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	2400      	movs	r4, #0
 8003e10:	9401      	str	r4, [sp, #4]
 8003e12:	bb33      	cbnz	r3, 8003e62 <__cxa_type_match+0x92>
 8003e14:	bb38      	cbnz	r0, 8003e66 <__cxa_type_match+0x96>
 8003e16:	2901      	cmp	r1, #1
 8003e18:	bf0a      	itet	eq
 8003e1a:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8003e1e:	f1a2 0320 	subne.w	r3, r2, #32
 8003e22:	3b78      	subeq	r3, #120	; 0x78
 8003e24:	2901      	cmp	r1, #1
 8003e26:	bf0c      	ite	eq
 8003e28:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8003e2c:	3258      	addne	r2, #88	; 0x58
 8003e2e:	681c      	ldr	r4, [r3, #0]
 8003e30:	9201      	str	r2, [sp, #4]
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	4620      	mov	r0, r4
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4798      	blx	r3
 8003e3a:	b1b0      	cbz	r0, 8003e6a <__cxa_type_match+0x9a>
 8003e3c:	2702      	movs	r7, #2
 8003e3e:	9b01      	ldr	r3, [sp, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	aa01      	add	r2, sp, #4
 8003e48:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4628      	mov	r0, r5
 8003e52:	47c0      	blx	r8
 8003e54:	b158      	cbz	r0, 8003e6e <__cxa_type_match+0x9e>
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e62:	4c08      	ldr	r4, [pc, #32]	; (8003e84 <__cxa_type_match+0xb4>)
 8003e64:	e7e5      	b.n	8003e32 <__cxa_type_match+0x62>
 8003e66:	4c08      	ldr	r4, [pc, #32]	; (8003e88 <__cxa_type_match+0xb8>)
 8003e68:	e7e3      	b.n	8003e32 <__cxa_type_match+0x62>
 8003e6a:	2701      	movs	r7, #1
 8003e6c:	e7ea      	b.n	8003e44 <__cxa_type_match+0x74>
 8003e6e:	4607      	mov	r7, r0
 8003e70:	e7f3      	b.n	8003e5a <__cxa_type_match+0x8a>
 8003e72:	4610      	mov	r0, r2
 8003e74:	f7ff ff8e 	bl	8003d94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003e78:	f080 0001 	eor.w	r0, r0, #1
 8003e7c:	b2c0      	uxtb	r0, r0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e7c5      	b.n	8003e0e <__cxa_type_match+0x3e>
 8003e82:	bf00      	nop
 8003e84:	080044c0 	.word	0x080044c0
 8003e88:	080044c8 	.word	0x080044c8

08003e8c <__cxa_begin_cleanup>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	f000 f942 	bl	8004118 <__cxa_get_globals>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4620      	mov	r0, r4
 8003e98:	f1a4 0120 	sub.w	r1, r4, #32
 8003e9c:	f7ff ff7a 	bl	8003d94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003ea0:	b160      	cbz	r0, 8003ebc <__cxa_begin_cleanup+0x30>
 8003ea2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f844 3c04 	str.w	r3, [r4, #-4]
 8003eae:	d103      	bne.n	8003eb8 <__cxa_begin_cleanup+0x2c>
 8003eb0:	6893      	ldr	r3, [r2, #8]
 8003eb2:	f844 3c08 	str.w	r3, [r4, #-8]
 8003eb6:	6091      	str	r1, [r2, #8]
 8003eb8:	2001      	movs	r0, #1
 8003eba:	bd10      	pop	{r4, pc}
 8003ebc:	6893      	ldr	r3, [r2, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f9      	beq.n	8003eb6 <__cxa_begin_cleanup+0x2a>
 8003ec2:	f000 f911 	bl	80040e8 <_ZSt9terminatev>

08003ec6 <_ZdlPvj>:
 8003ec6:	f7ff bf5e 	b.w	8003d86 <_ZdlPv>

08003eca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8003eca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003ecc:	2310      	movs	r3, #16
 8003ece:	2400      	movs	r4, #0
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	6803      	ldr	r3, [r0, #0]
 8003ed4:	4615      	mov	r5, r2
 8003ed6:	699e      	ldr	r6, [r3, #24]
 8003ed8:	9400      	str	r4, [sp, #0]
 8003eda:	466b      	mov	r3, sp
 8003edc:	f88d 4004 	strb.w	r4, [sp, #4]
 8003ee0:	9403      	str	r4, [sp, #12]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	47b0      	blx	r6
 8003ee6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	bf09      	itett	eq
 8003ef2:	2001      	moveq	r0, #1
 8003ef4:	4620      	movne	r0, r4
 8003ef6:	9b00      	ldreq	r3, [sp, #0]
 8003ef8:	602b      	streq	r3, [r5, #0]
 8003efa:	b004      	add	sp, #16
 8003efc:	bd70      	pop	{r4, r5, r6, pc}

08003efe <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8003efe:	9800      	ldr	r0, [sp, #0]
 8003f00:	4290      	cmp	r0, r2
 8003f02:	bf0c      	ite	eq
 8003f04:	2006      	moveq	r0, #6
 8003f06:	2001      	movne	r0, #1
 8003f08:	4770      	bx	lr
	...

08003f0c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4b02      	ldr	r3, [pc, #8]	; (8003f1c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8003f12:	6003      	str	r3, [r0, #0]
 8003f14:	f000 f84b 	bl	8003fae <_ZNSt9type_infoD1Ev>
 8003f18:	4620      	mov	r0, r4
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	08004484 	.word	0x08004484

08003f20 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4604      	mov	r4, r0
 8003f24:	f7ff fff2 	bl	8003f0c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003f28:	4620      	mov	r0, r4
 8003f2a:	2108      	movs	r1, #8
 8003f2c:	f7ff ffcb 	bl	8003ec6 <_ZdlPvj>
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4615      	mov	r5, r2
 8003f38:	461c      	mov	r4, r3
 8003f3a:	f000 f83b 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003f3e:	b120      	cbz	r0, 8003f4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8003f40:	2308      	movs	r3, #8
 8003f42:	60e3      	str	r3, [r4, #12]
 8003f44:	2306      	movs	r3, #6
 8003f46:	6025      	str	r5, [r4, #0]
 8003f48:	7123      	strb	r3, [r4, #4]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}

08003f4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4605      	mov	r5, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	461f      	mov	r7, r3
 8003f58:	f000 f82c 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003f5c:	b948      	cbnz	r0, 8003f72 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003f5e:	2f03      	cmp	r7, #3
 8003f60:	d807      	bhi.n	8003f72 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	4632      	mov	r2, r6
 8003f66:	4629      	mov	r1, r5
 8003f68:	4620      	mov	r0, r4
 8003f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4718      	bx	r3
 8003f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f76 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8003f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	9e06      	ldr	r6, [sp, #24]
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	9b08      	ldr	r3, [sp, #32]
 8003f80:	4607      	mov	r7, r0
 8003f82:	429e      	cmp	r6, r3
 8003f84:	4615      	mov	r5, r2
 8003f86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003f88:	d103      	bne.n	8003f92 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8003f8a:	9907      	ldr	r1, [sp, #28]
 8003f8c:	f000 f812 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003f90:	b958      	cbnz	r0, 8003faa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8003f92:	4641      	mov	r1, r8
 8003f94:	4638      	mov	r0, r7
 8003f96:	f000 f80d 	bl	8003fb4 <_ZNKSt9type_infoeqERKS_>
 8003f9a:	b118      	cbz	r0, 8003fa4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	6026      	str	r6, [r4, #0]
 8003fa0:	7125      	strb	r5, [r4, #4]
 8003fa2:	71a3      	strb	r3, [r4, #6]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003faa:	7165      	strb	r5, [r4, #5]
 8003fac:	e7fa      	b.n	8003fa4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08003fae <_ZNSt9type_infoD1Ev>:
 8003fae:	4770      	bx	lr

08003fb0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	4770      	bx	lr

08003fb4 <_ZNKSt9type_infoeqERKS_>:
 8003fb4:	4281      	cmp	r1, r0
 8003fb6:	b508      	push	{r3, lr}
 8003fb8:	d00e      	beq.n	8003fd8 <_ZNKSt9type_infoeqERKS_+0x24>
 8003fba:	6840      	ldr	r0, [r0, #4]
 8003fbc:	7803      	ldrb	r3, [r0, #0]
 8003fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc0:	d00c      	beq.n	8003fdc <_ZNKSt9type_infoeqERKS_+0x28>
 8003fc2:	6849      	ldr	r1, [r1, #4]
 8003fc4:	780b      	ldrb	r3, [r1, #0]
 8003fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc8:	bf08      	it	eq
 8003fca:	3101      	addeq	r1, #1
 8003fcc:	f7fc f8c0 	bl	8000150 <strcmp>
 8003fd0:	fab0 f080 	clz	r0, r0
 8003fd4:	0940      	lsrs	r0, r0, #5
 8003fd6:	bd08      	pop	{r3, pc}
 8003fd8:	2001      	movs	r0, #1
 8003fda:	bd08      	pop	{r3, pc}
 8003fdc:	2000      	movs	r0, #0
 8003fde:	bd08      	pop	{r3, pc}

08003fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003fe0:	7803      	ldrb	r3, [r0, #0]
 8003fe2:	2b47      	cmp	r3, #71	; 0x47
 8003fe4:	d117      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003fe6:	7843      	ldrb	r3, [r0, #1]
 8003fe8:	2b4e      	cmp	r3, #78	; 0x4e
 8003fea:	d114      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003fec:	7883      	ldrb	r3, [r0, #2]
 8003fee:	2b55      	cmp	r3, #85	; 0x55
 8003ff0:	d111      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003ff2:	78c3      	ldrb	r3, [r0, #3]
 8003ff4:	2b43      	cmp	r3, #67	; 0x43
 8003ff6:	d10e      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003ff8:	7903      	ldrb	r3, [r0, #4]
 8003ffa:	2b43      	cmp	r3, #67	; 0x43
 8003ffc:	d10b      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003ffe:	7943      	ldrb	r3, [r0, #5]
 8004000:	2b2b      	cmp	r3, #43	; 0x2b
 8004002:	d108      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004004:	7983      	ldrb	r3, [r0, #6]
 8004006:	2b2b      	cmp	r3, #43	; 0x2b
 8004008:	d105      	bne.n	8004016 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800400a:	79c0      	ldrb	r0, [r0, #7]
 800400c:	2801      	cmp	r0, #1
 800400e:	bf8c      	ite	hi
 8004010:	2000      	movhi	r0, #0
 8004012:	2001      	movls	r0, #1
 8004014:	4770      	bx	lr
 8004016:	2000      	movs	r0, #0
 8004018:	4770      	bx	lr

0800401a <__cxa_call_unexpected>:
 800401a:	b538      	push	{r3, r4, r5, lr}
 800401c:	4602      	mov	r2, r0
 800401e:	f7ff ffdf 	bl	8003fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004022:	b140      	cbz	r0, 8004036 <__cxa_call_unexpected+0x1c>
 8004024:	2500      	movs	r5, #0
 8004026:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800402a:	4610      	mov	r0, r2
 800402c:	f000 f826 	bl	800407c <__cxa_begin_catch>
 8004030:	b125      	cbz	r5, 800403c <__cxa_call_unexpected+0x22>
 8004032:	f000 f86b 	bl	800410c <_ZSt10unexpectedv>
 8004036:	4604      	mov	r4, r0
 8004038:	2501      	movs	r5, #1
 800403a:	e7f6      	b.n	800402a <__cxa_call_unexpected+0x10>
 800403c:	4620      	mov	r0, r4
 800403e:	f000 f858 	bl	80040f2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004042 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004042:	7803      	ldrb	r3, [r0, #0]
 8004044:	2b47      	cmp	r3, #71	; 0x47
 8004046:	d117      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004048:	7843      	ldrb	r3, [r0, #1]
 800404a:	2b4e      	cmp	r3, #78	; 0x4e
 800404c:	d114      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800404e:	7883      	ldrb	r3, [r0, #2]
 8004050:	2b55      	cmp	r3, #85	; 0x55
 8004052:	d111      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004054:	78c3      	ldrb	r3, [r0, #3]
 8004056:	2b43      	cmp	r3, #67	; 0x43
 8004058:	d10e      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800405a:	7903      	ldrb	r3, [r0, #4]
 800405c:	2b43      	cmp	r3, #67	; 0x43
 800405e:	d10b      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004060:	7943      	ldrb	r3, [r0, #5]
 8004062:	2b2b      	cmp	r3, #43	; 0x2b
 8004064:	d108      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004066:	7983      	ldrb	r3, [r0, #6]
 8004068:	2b2b      	cmp	r3, #43	; 0x2b
 800406a:	d105      	bne.n	8004078 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800406c:	79c0      	ldrb	r0, [r0, #7]
 800406e:	2801      	cmp	r0, #1
 8004070:	bf8c      	ite	hi
 8004072:	2000      	movhi	r0, #0
 8004074:	2001      	movls	r0, #1
 8004076:	4770      	bx	lr
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr

0800407c <__cxa_begin_catch>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4605      	mov	r5, r0
 8004080:	f000 f84a 	bl	8004118 <__cxa_get_globals>
 8004084:	4601      	mov	r1, r0
 8004086:	6802      	ldr	r2, [r0, #0]
 8004088:	4628      	mov	r0, r5
 800408a:	f1a5 0420 	sub.w	r4, r5, #32
 800408e:	f7ff ffd8 	bl	8004042 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004092:	b930      	cbnz	r0, 80040a2 <__cxa_begin_catch+0x26>
 8004094:	b10a      	cbz	r2, 800409a <__cxa_begin_catch+0x1e>
 8004096:	f000 f827 	bl	80040e8 <_ZSt9terminatev>
 800409a:	600c      	str	r4, [r1, #0]
 800409c:	4614      	mov	r4, r2
 800409e:	4620      	mov	r0, r4
 80040a0:	bd38      	pop	{r3, r4, r5, pc}
 80040a2:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 80040a6:	4628      	mov	r0, r5
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bfb4      	ite	lt
 80040ac:	f1c3 0301 	rsblt	r3, r3, #1
 80040b0:	3301      	addge	r3, #1
 80040b2:	f845 3c0c 	str.w	r3, [r5, #-12]
 80040b6:	684b      	ldr	r3, [r1, #4]
 80040b8:	42a2      	cmp	r2, r4
 80040ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	bf1c      	itt	ne
 80040c2:	f845 2c10 	strne.w	r2, [r5, #-16]
 80040c6:	600c      	strne	r4, [r1, #0]
 80040c8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80040ca:	f7fc fa15 	bl	80004f8 <_Unwind_Complete>
 80040ce:	e7e6      	b.n	800409e <__cxa_begin_catch+0x22>

080040d0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80040d0:	b508      	push	{r3, lr}
 80040d2:	4780      	blx	r0
 80040d4:	f000 f824 	bl	8004120 <abort>

080040d8 <_ZSt13get_terminatev>:
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <_ZSt13get_terminatev+0xc>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f3bf 8f5b 	dmb	ish
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000018 	.word	0x20000018

080040e8 <_ZSt9terminatev>:
 80040e8:	b508      	push	{r3, lr}
 80040ea:	f7ff fff5 	bl	80040d8 <_ZSt13get_terminatev>
 80040ee:	f7ff ffef 	bl	80040d0 <_ZN10__cxxabiv111__terminateEPFvvE>

080040f2 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80040f2:	b508      	push	{r3, lr}
 80040f4:	4780      	blx	r0
 80040f6:	f7ff fff7 	bl	80040e8 <_ZSt9terminatev>
	...

080040fc <_ZSt14get_unexpectedv>:
 80040fc:	4b02      	ldr	r3, [pc, #8]	; (8004108 <_ZSt14get_unexpectedv+0xc>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f3bf 8f5b 	dmb	ish
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000001c 	.word	0x2000001c

0800410c <_ZSt10unexpectedv>:
 800410c:	b508      	push	{r3, lr}
 800410e:	f7ff fff5 	bl	80040fc <_ZSt14get_unexpectedv>
 8004112:	f7ff ffee 	bl	80040f2 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08004118 <__cxa_get_globals>:
 8004118:	4800      	ldr	r0, [pc, #0]	; (800411c <__cxa_get_globals+0x4>)
 800411a:	4770      	bx	lr
 800411c:	20001080 	.word	0x20001080

08004120 <abort>:
 8004120:	b508      	push	{r3, lr}
 8004122:	2006      	movs	r0, #6
 8004124:	f000 f8cc 	bl	80042c0 <raise>
 8004128:	2001      	movs	r0, #1
 800412a:	f7fd fbe1 	bl	80018f0 <_exit>
	...

08004130 <__cxa_atexit>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4c05      	ldr	r4, [pc, #20]	; (8004148 <__cxa_atexit+0x18>)
 8004134:	4613      	mov	r3, r2
 8004136:	b12c      	cbz	r4, 8004144 <__cxa_atexit+0x14>
 8004138:	460a      	mov	r2, r1
 800413a:	4601      	mov	r1, r0
 800413c:	2002      	movs	r0, #2
 800413e:	f3af 8000 	nop.w
 8004142:	bd10      	pop	{r4, pc}
 8004144:	4620      	mov	r0, r4
 8004146:	bd10      	pop	{r4, pc}
 8004148:	00000000 	.word	0x00000000

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	; (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000020 	.word	0x20000020

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	2500      	movs	r5, #0
 800415c:	4e0c      	ldr	r6, [pc, #48]	; (8004190 <__libc_init_array+0x38>)
 800415e:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 8004160:	1ba4      	subs	r4, r4, r6
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	42a5      	cmp	r5, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	f000 f8c8 	bl	80042fc <_init>
 800416c:	2500      	movs	r5, #0
 800416e:	4e0a      	ldr	r6, [pc, #40]	; (8004198 <__libc_init_array+0x40>)
 8004170:	4c0a      	ldr	r4, [pc, #40]	; (800419c <__libc_init_array+0x44>)
 8004172:	1ba4      	subs	r4, r4, r6
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	42a5      	cmp	r5, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004180:	4798      	blx	r3
 8004182:	3501      	adds	r5, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418a:	4798      	blx	r3
 800418c:	3501      	adds	r5, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004734 	.word	0x08004734
 8004194:	08004734 	.word	0x08004734
 8004198:	08004734 	.word	0x08004734
 800419c:	0800473c 	.word	0x0800473c

080041a0 <free>:
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <free+0xc>)
 80041a2:	4601      	mov	r1, r0
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f000 b817 	b.w	80041d8 <_free_r>
 80041aa:	bf00      	nop
 80041ac:	20000020 	.word	0x20000020

080041b0 <memcpy>:
 80041b0:	b510      	push	{r4, lr}
 80041b2:	1e43      	subs	r3, r0, #1
 80041b4:	440a      	add	r2, r1
 80041b6:	4291      	cmp	r1, r2
 80041b8:	d100      	bne.n	80041bc <memcpy+0xc>
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c4:	e7f7      	b.n	80041b6 <memcpy+0x6>

080041c6 <memset>:
 80041c6:	4603      	mov	r3, r0
 80041c8:	4402      	add	r2, r0
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d100      	bne.n	80041d0 <memset+0xa>
 80041ce:	4770      	bx	lr
 80041d0:	f803 1b01 	strb.w	r1, [r3], #1
 80041d4:	e7f9      	b.n	80041ca <memset+0x4>
	...

080041d8 <_free_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4605      	mov	r5, r0
 80041dc:	2900      	cmp	r1, #0
 80041de:	d043      	beq.n	8004268 <_free_r+0x90>
 80041e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e4:	1f0c      	subs	r4, r1, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfb8      	it	lt
 80041ea:	18e4      	addlt	r4, r4, r3
 80041ec:	f000 f884 	bl	80042f8 <__malloc_lock>
 80041f0:	4a1e      	ldr	r2, [pc, #120]	; (800426c <_free_r+0x94>)
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	4610      	mov	r0, r2
 80041f6:	b933      	cbnz	r3, 8004206 <_free_r+0x2e>
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	6014      	str	r4, [r2, #0]
 80041fc:	4628      	mov	r0, r5
 80041fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004202:	f000 b87a 	b.w	80042fa <__malloc_unlock>
 8004206:	42a3      	cmp	r3, r4
 8004208:	d90b      	bls.n	8004222 <_free_r+0x4a>
 800420a:	6821      	ldr	r1, [r4, #0]
 800420c:	1862      	adds	r2, r4, r1
 800420e:	4293      	cmp	r3, r2
 8004210:	bf01      	itttt	eq
 8004212:	681a      	ldreq	r2, [r3, #0]
 8004214:	685b      	ldreq	r3, [r3, #4]
 8004216:	1852      	addeq	r2, r2, r1
 8004218:	6022      	streq	r2, [r4, #0]
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	6004      	str	r4, [r0, #0]
 800421e:	e7ed      	b.n	80041fc <_free_r+0x24>
 8004220:	4613      	mov	r3, r2
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	b10a      	cbz	r2, 800422a <_free_r+0x52>
 8004226:	42a2      	cmp	r2, r4
 8004228:	d9fa      	bls.n	8004220 <_free_r+0x48>
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	1858      	adds	r0, r3, r1
 800422e:	42a0      	cmp	r0, r4
 8004230:	d10b      	bne.n	800424a <_free_r+0x72>
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	4401      	add	r1, r0
 8004236:	1858      	adds	r0, r3, r1
 8004238:	4282      	cmp	r2, r0
 800423a:	6019      	str	r1, [r3, #0]
 800423c:	d1de      	bne.n	80041fc <_free_r+0x24>
 800423e:	6810      	ldr	r0, [r2, #0]
 8004240:	6852      	ldr	r2, [r2, #4]
 8004242:	4401      	add	r1, r0
 8004244:	6019      	str	r1, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	e7d8      	b.n	80041fc <_free_r+0x24>
 800424a:	d902      	bls.n	8004252 <_free_r+0x7a>
 800424c:	230c      	movs	r3, #12
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	e7d4      	b.n	80041fc <_free_r+0x24>
 8004252:	6820      	ldr	r0, [r4, #0]
 8004254:	1821      	adds	r1, r4, r0
 8004256:	428a      	cmp	r2, r1
 8004258:	bf01      	itttt	eq
 800425a:	6811      	ldreq	r1, [r2, #0]
 800425c:	6852      	ldreq	r2, [r2, #4]
 800425e:	1809      	addeq	r1, r1, r0
 8004260:	6021      	streq	r1, [r4, #0]
 8004262:	6062      	str	r2, [r4, #4]
 8004264:	605c      	str	r4, [r3, #4]
 8004266:	e7c9      	b.n	80041fc <_free_r+0x24>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	2000108c 	.word	0x2000108c

08004270 <_raise_r>:
 8004270:	291f      	cmp	r1, #31
 8004272:	b538      	push	{r3, r4, r5, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	460d      	mov	r5, r1
 8004278:	d904      	bls.n	8004284 <_raise_r+0x14>
 800427a:	2316      	movs	r3, #22
 800427c:	6003      	str	r3, [r0, #0]
 800427e:	f04f 30ff 	mov.w	r0, #4294967295
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004286:	b112      	cbz	r2, 800428e <_raise_r+0x1e>
 8004288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800428c:	b94b      	cbnz	r3, 80042a2 <_raise_r+0x32>
 800428e:	4620      	mov	r0, r4
 8004290:	f000 f830 	bl	80042f4 <_getpid_r>
 8004294:	462a      	mov	r2, r5
 8004296:	4601      	mov	r1, r0
 8004298:	4620      	mov	r0, r4
 800429a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800429e:	f000 b817 	b.w	80042d0 <_kill_r>
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d00a      	beq.n	80042bc <_raise_r+0x4c>
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	d103      	bne.n	80042b2 <_raise_r+0x42>
 80042aa:	2316      	movs	r3, #22
 80042ac:	6003      	str	r3, [r0, #0]
 80042ae:	2001      	movs	r0, #1
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
 80042b2:	2400      	movs	r4, #0
 80042b4:	4628      	mov	r0, r5
 80042b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042ba:	4798      	blx	r3
 80042bc:	2000      	movs	r0, #0
 80042be:	bd38      	pop	{r3, r4, r5, pc}

080042c0 <raise>:
 80042c0:	4b02      	ldr	r3, [pc, #8]	; (80042cc <raise+0xc>)
 80042c2:	4601      	mov	r1, r0
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	f7ff bfd3 	b.w	8004270 <_raise_r>
 80042ca:	bf00      	nop
 80042cc:	20000020 	.word	0x20000020

080042d0 <_kill_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	2300      	movs	r3, #0
 80042d4:	4c06      	ldr	r4, [pc, #24]	; (80042f0 <_kill_r+0x20>)
 80042d6:	4605      	mov	r5, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	f7fd faff 	bl	80018e0 <_kill>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d102      	bne.n	80042ec <_kill_r+0x1c>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	b103      	cbz	r3, 80042ec <_kill_r+0x1c>
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	bf00      	nop
 80042f0:	20001190 	.word	0x20001190

080042f4 <_getpid_r>:
 80042f4:	f7fd baf2 	b.w	80018dc <_getpid>

080042f8 <__malloc_lock>:
 80042f8:	4770      	bx	lr

080042fa <__malloc_unlock>:
 80042fa:	4770      	bx	lr

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
