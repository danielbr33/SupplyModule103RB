
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010bc  20000010  08002360  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200010cc  08002360  000210cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000163c5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000391e  00000000  00000000  000363fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a72c  00000000  00000000  00039d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f10  00000000  00000000  00044448  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001270  00000000  00000000  00045358  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008c4b  00000000  00000000  000465c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005b90  00000000  00000000  0004f213  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054da3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b6c  00000000  00000000  00054e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080022d8 	.word	0x080022d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080022d8 	.word	0x080022d8

08000150 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000150:	4818      	ldr	r0, [pc, #96]	; (80001b4 <MX_ADC1_Init+0x64>)
 8000152:	4b19      	ldr	r3, [pc, #100]	; (80001b8 <MX_ADC1_Init+0x68>)
{
 8000154:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8000156:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800015c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800015e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000164:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000166:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 8000168:	2302      	movs	r3, #2
{
 800016a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800016c:	9401      	str	r4, [sp, #4]
 800016e:	9402      	str	r4, [sp, #8]
 8000170:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000172:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000176:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000178:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800017a:	f000 fafb 	bl	8000774 <HAL_ADC_Init>
 800017e:	b108      	cbz	r0, 8000184 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8000180:	f000 f958 	bl	8000434 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000184:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000186:	a901      	add	r1, sp, #4
 8000188:	480a      	ldr	r0, [pc, #40]	; (80001b4 <MX_ADC1_Init+0x64>)
  sConfig.Channel = ADC_CHANNEL_0;
 800018a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800018c:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800018e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000190:	f000 fa4a 	bl	8000628 <HAL_ADC_ConfigChannel>
 8000194:	b108      	cbz	r0, 800019a <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8000196:	f000 f94d 	bl	8000434 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800019a:	2301      	movs	r3, #1
 800019c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800019e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a0:	a901      	add	r1, sp, #4
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <MX_ADC1_Init+0x64>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001a4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	f000 fa3f 	bl	8000628 <HAL_ADC_ConfigChannel>
 80001aa:	b108      	cbz	r0, 80001b0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 f942 	bl	8000434 <Error_Handler>
  }

}
 80001b0:	b005      	add	sp, #20
 80001b2:	bd30      	pop	{r4, r5, pc}
 80001b4:	20000fc8 	.word	0x20000fc8
 80001b8:	40012400 	.word	0x40012400

080001bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001bc:	b530      	push	{r4, r5, lr}
 80001be:	4605      	mov	r5, r0
 80001c0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	2210      	movs	r2, #16
 80001c4:	2100      	movs	r1, #0
 80001c6:	a802      	add	r0, sp, #8
 80001c8:	f002 f87e 	bl	80022c8 <memset>
  if(adcHandle->Instance==ADC1)
 80001cc:	682a      	ldr	r2, [r5, #0]
 80001ce:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <HAL_ADC_MspInit+0x84>)
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d133      	bne.n	800023c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001d4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80001d8:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001da:	481a      	ldr	r0, [pc, #104]	; (8000244 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001e0:	619a      	str	r2, [r3, #24]
 80001e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80001ea:	9200      	str	r2, [sp, #0]
 80001ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ee:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80001f0:	4c15      	ldr	r4, [pc, #84]	; (8000248 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f2:	f042 0204 	orr.w	r2, r2, #4
 80001f6:	619a      	str	r2, [r3, #24]
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	f003 0304 	and.w	r3, r3, #4
 80001fe:	9301      	str	r3, [sp, #4]
 8000200:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000202:	2303      	movs	r3, #3
 8000204:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000206:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	f000 fc4c 	bl	8000aa4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800020c:	2280      	movs	r2, #128	; 0x80
 800020e:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000214:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000216:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800021c:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 800021e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000220:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000222:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000224:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000226:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000228:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800022a:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800022c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800022e:	f000 fb75 	bl	800091c <HAL_DMA_Init>
 8000232:	b108      	cbz	r0, 8000238 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8000234:	f000 f8fe 	bl	8000434 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000238:	622c      	str	r4, [r5, #32]
 800023a:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800023c:	b007      	add	sp, #28
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	40012400 	.word	0x40012400
 8000244:	40010800 	.word	0x40010800
 8000248:	20000ff8 	.word	0x20000ff8
 800024c:	40020008 	.word	0x40020008

08000250 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <MX_DMA_Init+0x2c>)
{
 8000252:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000254:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000256:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000258:	f042 0201 	orr.w	r2, r2, #1
 800025c:	615a      	str	r2, [r3, #20]
 800025e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000260:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000268:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800026c:	f000 fb14 	bl	8000898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000270:	200b      	movs	r0, #11
 8000272:	f000 fb45 	bl	8000900 <HAL_NVIC_EnableIRQ>

}
 8000276:	b003      	add	sp, #12
 8000278:	f85d fb04 	ldr.w	pc, [sp], #4
 800027c:	40021000 	.word	0x40021000

08000280 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f001 f9fd 	bl	8001682 <osDelay>
 8000288:	e7fb      	b.n	8000282 <StartDefaultTask+0x2>
	...

0800028c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <vApplicationGetIdleTaskMemory+0x10>)
 800028e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <vApplicationGetIdleTaskMemory+0x14>)
 8000292:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000022c 	.word	0x2000022c
 80002a0:	2000002c 	.word	0x2000002c

080002a4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80002a4:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002a6:	4d08      	ldr	r5, [pc, #32]	; (80002c8 <MX_FREERTOS_Init+0x24>)
void MX_FREERTOS_Init(void) {
 80002a8:	b089      	sub	sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002aa:	ac01      	add	r4, sp, #4
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002b8:	2100      	movs	r1, #0
 80002ba:	a801      	add	r0, sp, #4
 80002bc:	f001 f9b9 	bl	8001632 <osThreadCreate>
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <MX_FREERTOS_Init+0x28>)
 80002c2:	6018      	str	r0, [r3, #0]
}
 80002c4:	b009      	add	sp, #36	; 0x24
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	080022f0 	.word	0x080022f0
 80002cc:	2000103c 	.word	0x2000103c

080002d0 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	2210      	movs	r2, #16
{
 80002d2:	b570      	push	{r4, r5, r6, lr}
 80002d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	eb0d 0002 	add.w	r0, sp, r2
 80002da:	2100      	movs	r1, #0
 80002dc:	f001 fff4 	bl	80022c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b29      	ldr	r3, [pc, #164]	; (8000388 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e2:	4d2a      	ldr	r5, [pc, #168]	; (800038c <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e6:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e8:	f042 0210 	orr.w	r2, r2, #16
 80002ec:	619a      	str	r2, [r3, #24]
 80002ee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f2:	f002 0210 	and.w	r2, r2, #16
 80002f6:	9200      	str	r2, [sp, #0]
 80002f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fa:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fe:	f042 0220 	orr.w	r2, r2, #32
 8000302:	619a      	str	r2, [r3, #24]
 8000304:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000306:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000308:	f002 0220 	and.w	r2, r2, #32
 800030c:	9201      	str	r2, [sp, #4]
 800030e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	699a      	ldr	r2, [r3, #24]
 8000312:	f042 0204 	orr.w	r2, r2, #4
 8000316:	619a      	str	r2, [r3, #24]
 8000318:	699a      	ldr	r2, [r3, #24]
 800031a:	f002 0204 	and.w	r2, r2, #4
 800031e:	9202      	str	r2, [sp, #8]
 8000320:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	f042 0208 	orr.w	r2, r2, #8
 8000328:	619a      	str	r2, [r3, #24]
 800032a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	f003 0308 	and.w	r3, r3, #8
 8000332:	9303      	str	r3, [sp, #12]
 8000334:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000336:	f000 fc97 	bl	8000c68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800033a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000342:	a904      	add	r1, sp, #16
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000346:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800034a:	f000 fbab 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800034e:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	a904      	add	r1, sp, #16
 8000352:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000354:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000356:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035a:	f000 fba3 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800035e:	2320      	movs	r3, #32
 8000360:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000362:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000364:	a904      	add	r1, sp, #16
 8000366:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800036e:	f000 fb99 	bl	8000aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000372:	4622      	mov	r2, r4
 8000374:	2105      	movs	r1, #5
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f000 fa8e 	bl	8000898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037c:	2028      	movs	r0, #40	; 0x28
 800037e:	f000 fabf 	bl	8000900 <HAL_NVIC_EnableIRQ>

}
 8000382:	b008      	add	sp, #32
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800
 8000390:	10110000 	.word	0x10110000
 8000394:	40011000 	.word	0x40011000

08000398 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000398:	2228      	movs	r2, #40	; 0x28
{
 800039a:	b530      	push	{r4, r5, lr}
 800039c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	eb0d 0002 	add.w	r0, sp, r2
 80003a2:	2100      	movs	r1, #0
 80003a4:	f001 ff90 	bl	80022c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003aa:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	eb0d 0002 	add.w	r0, sp, r2
 80003b0:	2100      	movs	r1, #0
 80003b2:	f001 ff89 	bl	80022c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b6:	4622      	mov	r2, r4
 80003b8:	2100      	movs	r1, #0
 80003ba:	a801      	add	r0, sp, #4
 80003bc:	f001 ff84 	bl	80022c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f000 fc5d 	bl	8000c8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003dc:	4621      	mov	r1, r4
 80003de:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e4:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	f000 fe2a 	bl	8001040 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ee:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003f0:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	f000 ff01 	bl	80011f8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80003f6:	b015      	add	sp, #84	; 0x54
 80003f8:	bd30      	pop	{r4, r5, pc}

080003fa <main>:
{
 80003fa:	b508      	push	{r3, lr}
  HAL_Init();
 80003fc:	f000 f8f0 	bl	80005e0 <HAL_Init>
  SystemClock_Config();
 8000400:	f7ff ffca 	bl	8000398 <SystemClock_Config>
  MX_GPIO_Init();
 8000404:	f7ff ff64 	bl	80002d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000408:	f7ff ff22 	bl	8000250 <MX_DMA_Init>
  MX_ADC1_Init();
 800040c:	f7ff fea0 	bl	8000150 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000410:	f000 f88e 	bl	8000530 <MX_USART3_UART_Init>
  MX_FREERTOS_Init(); 
 8000414:	f7ff ff46 	bl	80002a4 <MX_FREERTOS_Init>
  osKernelStart();
 8000418:	f001 f906 	bl	8001628 <osKernelStart>
 800041c:	e7fe      	b.n	800041c <main+0x22>
	...

08000420 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000420:	6802      	ldr	r2, [r0, #0]
 8000422:	4b03      	ldr	r3, [pc, #12]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d101      	bne.n	800042c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000428:	f000 b8ec 	b.w	8000604 <HAL_IncTick>
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40012c00 	.word	0x40012c00

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	4770      	bx	lr
	...

08000438 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_MspInit+0x48>)
{
 800043a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800043c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000440:	f042 0201 	orr.w	r2, r2, #1
 8000444:	619a      	str	r2, [r3, #24]
 8000446:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000448:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 800044c:	f002 0201 	and.w	r2, r2, #1
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000454:	69da      	ldr	r2, [r3, #28]
 8000456:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800045a:	61da      	str	r2, [r3, #28]
 800045c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800045e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000468:	f000 fa16 	bl	8000898 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <HAL_MspInit+0x4c>)
 800046e:	6853      	ldr	r3, [r2, #4]
 8000470:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	b003      	add	sp, #12
 800047c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000488:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800048a:	4601      	mov	r1, r0
{
 800048c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800048e:	2200      	movs	r2, #0
 8000490:	2019      	movs	r0, #25
 8000492:	f000 fa01 	bl	8000898 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000496:	2019      	movs	r0, #25
 8000498:	f000 fa32 	bl	8000900 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800049e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004a0:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004a8:	619a      	str	r2, [r3, #24]
 80004aa:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004ac:	4c11      	ldr	r4, [pc, #68]	; (80004f4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004b6:	f000 fe81 	bl	80011bc <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004ba:	f000 fe6f 	bl	800119c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_InitTick+0x70>)
 80004c0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80004c2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80004c6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_InitTick+0x74>)
 80004ca:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80004ce:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004d0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80004d2:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004d4:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80004d6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004da:	f001 f80f 	bl	80014fc <HAL_TIM_Base_Init>
 80004de:	b920      	cbnz	r0, 80004ea <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004e0:	4620      	mov	r0, r4
 80004e2:	f000 ff03 	bl	80012ec <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80004e6:	b008      	add	sp, #32
 80004e8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
 80004ec:	e7fb      	b.n	80004e6 <HAL_InitTick+0x5e>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	20001040 	.word	0x20001040
 80004f8:	40012c00 	.word	0x40012c00
 80004fc:	000f4240 	.word	0x000f4240

08000500 <NMI_Handler>:
 8000500:	4770      	bx	lr

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler>

08000506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler>

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	4770      	bx	lr

0800050c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800050c:	4801      	ldr	r0, [pc, #4]	; (8000514 <DMA1_Channel1_IRQHandler+0x8>)
 800050e:	f000 ba35 	b.w	800097c <HAL_DMA_IRQHandler>
 8000512:	bf00      	nop
 8000514:	20000ff8 	.word	0x20000ff8

08000518 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000518:	4801      	ldr	r0, [pc, #4]	; (8000520 <TIM1_UP_IRQHandler+0x8>)
 800051a:	f000 bf15 	b.w	8001348 <HAL_TIM_IRQHandler>
 800051e:	bf00      	nop
 8000520:	20001040 	.word	0x20001040

08000524 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000528:	f000 bba4 	b.w	8000c74 <HAL_GPIO_EXTI_IRQHandler>

0800052c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052c:	4770      	bx	lr
	...

08000530 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000530:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8000532:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800053a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800053c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000540:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000542:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000544:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000546:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000548:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800054e:	f001 f83d 	bl	80015cc <HAL_UART_Init>
 8000552:	b118      	cbz	r0, 800055c <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000558:	f7ff bf6c 	b.w	8000434 <Error_Handler>
 800055c:	bd08      	pop	{r3, pc}
 800055e:	bf00      	nop
 8000560:	20001088 	.word	0x20001088
 8000564:	40004800 	.word	0x40004800

08000568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	4604      	mov	r4, r0
 800056c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	2210      	movs	r2, #16
 8000570:	2100      	movs	r1, #0
 8000572:	a802      	add	r0, sp, #8
 8000574:	f001 fea8 	bl	80022c8 <memset>
  if(uartHandle->Instance==USART3)
 8000578:	6822      	ldr	r2, [r4, #0]
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_UART_MspInit+0x70>)
 800057c:	429a      	cmp	r2, r3
 800057e:	d128      	bne.n	80005d2 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000580:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8000584:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8000588:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800058c:	61da      	str	r2, [r3, #28]
 800058e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000592:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	f042 0208 	orr.w	r2, r2, #8
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f000 fa73 	bl	8000aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	a902      	add	r1, sp, #8
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f000 fa69 	bl	8000aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80005d2:	b006      	add	sp, #24
 80005d4:	bd10      	pop	{r4, pc}
 80005d6:	bf00      	nop
 80005d8:	40004800 	.word	0x40004800
 80005dc:	40010c00 	.word	0x40010c00

080005e0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x20>)
{
 80005e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	f043 0310 	orr.w	r3, r3, #16
 80005ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ee:	f000 f941 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff ff48 	bl	8000488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f7ff ff1e 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005fc:	2000      	movs	r0, #0
 80005fe:	bd08      	pop	{r3, pc}
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x10>)
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_IncTick+0x14>)
 8000608:	6811      	ldr	r1, [r2, #0]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	440b      	add	r3, r1
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200010c8 	.word	0x200010c8
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_GetTick+0x8>)
 800061e:	6818      	ldr	r0, [r3, #0]
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200010c8 	.word	0x200010c8

08000628 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000628:	2300      	movs	r3, #0
{ 
 800062a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800062c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800062e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000632:	2b01      	cmp	r3, #1
 8000634:	d074      	beq.n	8000720 <HAL_ADC_ConfigChannel+0xf8>
 8000636:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000638:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800063a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800063e:	2d06      	cmp	r5, #6
 8000640:	6802      	ldr	r2, [r0, #0]
 8000642:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000646:	680c      	ldr	r4, [r1, #0]
 8000648:	d825      	bhi.n	8000696 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800064a:	442b      	add	r3, r5
 800064c:	251f      	movs	r5, #31
 800064e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000650:	3b05      	subs	r3, #5
 8000652:	409d      	lsls	r5, r3
 8000654:	ea26 0505 	bic.w	r5, r6, r5
 8000658:	fa04 f303 	lsl.w	r3, r4, r3
 800065c:	432b      	orrs	r3, r5
 800065e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000660:	2c09      	cmp	r4, #9
 8000662:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000666:	688d      	ldr	r5, [r1, #8]
 8000668:	d92f      	bls.n	80006ca <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800066a:	2607      	movs	r6, #7
 800066c:	4423      	add	r3, r4
 800066e:	68d1      	ldr	r1, [r2, #12]
 8000670:	3b1e      	subs	r3, #30
 8000672:	409e      	lsls	r6, r3
 8000674:	ea21 0106 	bic.w	r1, r1, r6
 8000678:	fa05 f303 	lsl.w	r3, r5, r3
 800067c:	430b      	orrs	r3, r1
 800067e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000680:	f1a4 0310 	sub.w	r3, r4, #16
 8000684:	2b01      	cmp	r3, #1
 8000686:	d92b      	bls.n	80006e0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000688:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800068a:	2200      	movs	r2, #0
 800068c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000690:	4618      	mov	r0, r3
 8000692:	b002      	add	sp, #8
 8000694:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000696:	2d0c      	cmp	r5, #12
 8000698:	d80b      	bhi.n	80006b2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800069a:	442b      	add	r3, r5
 800069c:	251f      	movs	r5, #31
 800069e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80006a0:	3b23      	subs	r3, #35	; 0x23
 80006a2:	409d      	lsls	r5, r3
 80006a4:	ea26 0505 	bic.w	r5, r6, r5
 80006a8:	fa04 f303 	lsl.w	r3, r4, r3
 80006ac:	432b      	orrs	r3, r5
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	e7d6      	b.n	8000660 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80006b2:	442b      	add	r3, r5
 80006b4:	251f      	movs	r5, #31
 80006b6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80006b8:	3b41      	subs	r3, #65	; 0x41
 80006ba:	409d      	lsls	r5, r3
 80006bc:	ea26 0505 	bic.w	r5, r6, r5
 80006c0:	fa04 f303 	lsl.w	r3, r4, r3
 80006c4:	432b      	orrs	r3, r5
 80006c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c8:	e7ca      	b.n	8000660 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006ca:	2607      	movs	r6, #7
 80006cc:	6911      	ldr	r1, [r2, #16]
 80006ce:	4423      	add	r3, r4
 80006d0:	409e      	lsls	r6, r3
 80006d2:	ea21 0106 	bic.w	r1, r1, r6
 80006d6:	fa05 f303 	lsl.w	r3, r5, r3
 80006da:	430b      	orrs	r3, r1
 80006dc:	6113      	str	r3, [r2, #16]
 80006de:	e7cf      	b.n	8000680 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_ADC_ConfigChannel+0xfc>)
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d116      	bne.n	8000714 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80006e6:	6893      	ldr	r3, [r2, #8]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	d4cd      	bmi.n	8000688 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006ec:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006ee:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80006f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006f4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006f6:	d1c7      	bne.n	8000688 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_ADC_ConfigChannel+0x100>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <HAL_ADC_ConfigChannel+0x104>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000702:	230a      	movs	r3, #10
 8000704:	4353      	muls	r3, r2
            wait_loop_index--;
 8000706:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000708:	9b01      	ldr	r3, [sp, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0bc      	beq.n	8000688 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	3b01      	subs	r3, #1
 8000712:	e7f8      	b.n	8000706 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000714:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	e7b4      	b.n	800068a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000720:	2302      	movs	r3, #2
 8000722:	e7b5      	b.n	8000690 <HAL_ADC_ConfigChannel+0x68>
 8000724:	40012400 	.word	0x40012400
 8000728:	20000000 	.word	0x20000000
 800072c:	000f4240 	.word	0x000f4240

08000730 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000730:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000732:	6803      	ldr	r3, [r0, #0]
{
 8000734:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	07d2      	lsls	r2, r2, #31
 800073a:	d401      	bmi.n	8000740 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800073c:	2000      	movs	r0, #0
 800073e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000740:	689a      	ldr	r2, [r3, #8]
 8000742:	f022 0201 	bic.w	r2, r2, #1
 8000746:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000748:	f7ff ff68 	bl	800061c <HAL_GetTick>
 800074c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	07db      	lsls	r3, r3, #31
 8000754:	d5f2      	bpl.n	800073c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000756:	f7ff ff61 	bl	800061c <HAL_GetTick>
 800075a:	1b40      	subs	r0, r0, r5
 800075c:	2802      	cmp	r0, #2
 800075e:	d9f6      	bls.n	800074e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000760:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000762:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000772:	bd38      	pop	{r3, r4, r5, pc}

08000774 <HAL_ADC_Init>:
{
 8000774:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000776:	4604      	mov	r4, r0
 8000778:	2800      	cmp	r0, #0
 800077a:	d071      	beq.n	8000860 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800077c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800077e:	b923      	cbnz	r3, 800078a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000780:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000782:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000786:	f7ff fd19 	bl	80001bc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff ffd0 	bl	8000730 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000792:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000798:	d164      	bne.n	8000864 <HAL_ADC_Init+0xf0>
 800079a:	2800      	cmp	r0, #0
 800079c:	d162      	bne.n	8000864 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800079e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007a4:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80007a6:	f023 0302 	bic.w	r3, r3, #2
 80007aa:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ae:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007b0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80007b2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007b4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007ba:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007be:	d038      	beq.n	8000832 <HAL_ADC_Init+0xbe>
 80007c0:	2901      	cmp	r1, #1
 80007c2:	bf14      	ite	ne
 80007c4:	4606      	movne	r6, r0
 80007c6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007ca:	7d25      	ldrb	r5, [r4, #20]
 80007cc:	2d01      	cmp	r5, #1
 80007ce:	d107      	bne.n	80007e0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d130      	bne.n	8000836 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007d4:	69a3      	ldr	r3, [r4, #24]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80007dc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80007e0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80007e6:	685d      	ldr	r5, [r3, #4]
 80007e8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80007ec:	ea45 0506 	orr.w	r5, r5, r6
 80007f0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80007f2:	689e      	ldr	r6, [r3, #8]
 80007f4:	4d1d      	ldr	r5, [pc, #116]	; (800086c <HAL_ADC_Init+0xf8>)
 80007f6:	ea05 0506 	and.w	r5, r5, r6
 80007fa:	ea45 0502 	orr.w	r5, r5, r2
 80007fe:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000800:	d001      	beq.n	8000806 <HAL_ADC_Init+0x92>
 8000802:	2901      	cmp	r1, #1
 8000804:	d120      	bne.n	8000848 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000806:	6921      	ldr	r1, [r4, #16]
 8000808:	3901      	subs	r1, #1
 800080a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800080c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800080e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000812:	4329      	orrs	r1, r5
 8000814:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000816:	6899      	ldr	r1, [r3, #8]
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_ADC_Init+0xfc>)
 800081a:	400b      	ands	r3, r1
 800081c:	429a      	cmp	r2, r3
 800081e:	d115      	bne.n	800084c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000820:	2300      	movs	r3, #0
 8000822:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000826:	f023 0303 	bic.w	r3, r3, #3
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000830:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000832:	460e      	mov	r6, r1
 8000834:	e7c9      	b.n	80007ca <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000838:	f043 0320 	orr.w	r3, r3, #32
 800083c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800083e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000846:	e7cb      	b.n	80007e0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000848:	2100      	movs	r1, #0
 800084a:	e7df      	b.n	800080c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800084c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800084e:	f023 0312 	bic.w	r3, r3, #18
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000858:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
}
 8000862:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	62a3      	str	r3, [r4, #40]	; 0x28
 800086a:	e7f9      	b.n	8000860 <HAL_ADC_Init+0xec>
 800086c:	ffe1f7fd 	.word	0xffe1f7fd
 8000870:	ff1f0efe 	.word	0xff1f0efe

08000874 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000876:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800087a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800088e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000890:	60d3      	str	r3, [r2, #12]
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089a:	b530      	push	{r4, r5, lr}
 800089c:	68dc      	ldr	r4, [r3, #12]
 800089e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	bf28      	it	cs
 80008ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b4:	bf98      	it	ls
 80008b6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	fa05 f303 	lsl.w	r3, r5, r3
 80008bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c0:	bf88      	it	hi
 80008c2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4019      	ands	r1, r3
 80008c6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c8:	fa05 f404 	lsl.w	r4, r5, r4
 80008cc:	3c01      	subs	r4, #1
 80008ce:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80008d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d2:	ea42 0201 	orr.w	r2, r2, r1
 80008d6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	bfa9      	itett	ge
 80008dc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	4b06      	ldrlt	r3, [pc, #24]	; (80008fc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	b2d2      	uxtbge	r2, r2
 80008e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	bfbb      	ittet	lt
 80008ea:	f000 000f 	andlt.w	r0, r0, #15
 80008ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	541a      	strblt	r2, [r3, r0]
 80008f6:	bd30      	pop	{r4, r5, pc}
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	e000ed14 	.word	0xe000ed14

08000900 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000900:	2800      	cmp	r0, #0
 8000902:	db08      	blt.n	8000916 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000904:	2301      	movs	r3, #1
 8000906:	0942      	lsrs	r2, r0, #5
 8000908:	f000 001f 	and.w	r0, r0, #31
 800090c:	fa03 f000 	lsl.w	r0, r3, r0
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <HAL_NVIC_EnableIRQ+0x18>)
 8000912:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100

0800091c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800091c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800091e:	b330      	cbz	r0, 800096e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000920:	2214      	movs	r2, #20
 8000922:	6801      	ldr	r1, [r0, #0]
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000926:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000928:	440b      	add	r3, r1
 800092a:	fbb3 f3f2 	udiv	r3, r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000934:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000936:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000938:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800093a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800093e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000940:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000942:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000946:	4323      	orrs	r3, r4
 8000948:	6904      	ldr	r4, [r0, #16]
 800094a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094c:	6944      	ldr	r4, [r0, #20]
 800094e:	4323      	orrs	r3, r4
 8000950:	6984      	ldr	r4, [r0, #24]
 8000952:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000954:	69c4      	ldr	r4, [r0, #28]
 8000956:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000958:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800095a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800095c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800095e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000960:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000964:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000966:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800096a:	4618      	mov	r0, r3
 800096c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
}
 8000970:	bd10      	pop	{r4, pc}
 8000972:	bf00      	nop
 8000974:	bffdfff8 	.word	0xbffdfff8
 8000978:	40020000 	.word	0x40020000

0800097c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800097c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800097e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000980:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000982:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000984:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000986:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000988:	4095      	lsls	r5, r2
 800098a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800098c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800098e:	d032      	beq.n	80009f6 <HAL_DMA_IRQHandler+0x7a>
 8000990:	074d      	lsls	r5, r1, #29
 8000992:	d530      	bpl.n	80009f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000998:	bf5e      	ittt	pl
 800099a:	681a      	ldrpl	r2, [r3, #0]
 800099c:	f022 0204 	bicpl.w	r2, r2, #4
 80009a0:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009a2:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <HAL_DMA_IRQHandler+0x120>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d019      	beq.n	80009dc <HAL_DMA_IRQHandler+0x60>
 80009a8:	3214      	adds	r2, #20
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d018      	beq.n	80009e0 <HAL_DMA_IRQHandler+0x64>
 80009ae:	3214      	adds	r2, #20
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d017      	beq.n	80009e4 <HAL_DMA_IRQHandler+0x68>
 80009b4:	3214      	adds	r2, #20
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d017      	beq.n	80009ea <HAL_DMA_IRQHandler+0x6e>
 80009ba:	3214      	adds	r2, #20
 80009bc:	4293      	cmp	r3, r2
 80009be:	d017      	beq.n	80009f0 <HAL_DMA_IRQHandler+0x74>
 80009c0:	3214      	adds	r2, #20
 80009c2:	4293      	cmp	r3, r2
 80009c4:	bf0c      	ite	eq
 80009c6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80009ca:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80009ce:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <HAL_DMA_IRQHandler+0x124>)
 80009d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80009d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d05e      	beq.n	8000a96 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80009d8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80009da:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80009dc:	2304      	movs	r3, #4
 80009de:	e7f6      	b.n	80009ce <HAL_DMA_IRQHandler+0x52>
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	e7f4      	b.n	80009ce <HAL_DMA_IRQHandler+0x52>
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	e7f1      	b.n	80009ce <HAL_DMA_IRQHandler+0x52>
 80009ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ee:	e7ee      	b.n	80009ce <HAL_DMA_IRQHandler+0x52>
 80009f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009f4:	e7eb      	b.n	80009ce <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80009f6:	2502      	movs	r5, #2
 80009f8:	4095      	lsls	r5, r2
 80009fa:	4225      	tst	r5, r4
 80009fc:	d035      	beq.n	8000a6a <HAL_DMA_IRQHandler+0xee>
 80009fe:	078d      	lsls	r5, r1, #30
 8000a00:	d533      	bpl.n	8000a6a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	0694      	lsls	r4, r2, #26
 8000a06:	d406      	bmi.n	8000a16 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	f022 020a 	bic.w	r2, r2, #10
 8000a0e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000a10:	2201      	movs	r2, #1
 8000a12:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <HAL_DMA_IRQHandler+0x120>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d019      	beq.n	8000a50 <HAL_DMA_IRQHandler+0xd4>
 8000a1c:	3214      	adds	r2, #20
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d018      	beq.n	8000a54 <HAL_DMA_IRQHandler+0xd8>
 8000a22:	3214      	adds	r2, #20
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d017      	beq.n	8000a58 <HAL_DMA_IRQHandler+0xdc>
 8000a28:	3214      	adds	r2, #20
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d017      	beq.n	8000a5e <HAL_DMA_IRQHandler+0xe2>
 8000a2e:	3214      	adds	r2, #20
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d017      	beq.n	8000a64 <HAL_DMA_IRQHandler+0xe8>
 8000a34:	3214      	adds	r2, #20
 8000a36:	4293      	cmp	r3, r2
 8000a38:	bf0c      	ite	eq
 8000a3a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000a3e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_DMA_IRQHandler+0x124>)
 8000a44:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000a46:	2300      	movs	r3, #0
 8000a48:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000a4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a4e:	e7c1      	b.n	80009d4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a50:	2302      	movs	r3, #2
 8000a52:	e7f6      	b.n	8000a42 <HAL_DMA_IRQHandler+0xc6>
 8000a54:	2320      	movs	r3, #32
 8000a56:	e7f4      	b.n	8000a42 <HAL_DMA_IRQHandler+0xc6>
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	e7f1      	b.n	8000a42 <HAL_DMA_IRQHandler+0xc6>
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	e7ee      	b.n	8000a42 <HAL_DMA_IRQHandler+0xc6>
 8000a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a68:	e7eb      	b.n	8000a42 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a6a:	2508      	movs	r5, #8
 8000a6c:	4095      	lsls	r5, r2
 8000a6e:	4225      	tst	r5, r4
 8000a70:	d011      	beq.n	8000a96 <HAL_DMA_IRQHandler+0x11a>
 8000a72:	0709      	lsls	r1, r1, #28
 8000a74:	d50f      	bpl.n	8000a96 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	f021 010e 	bic.w	r1, r1, #14
 8000a7c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a7e:	2301      	movs	r3, #1
 8000a80:	fa03 f202 	lsl.w	r2, r3, r2
 8000a84:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a86:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000a88:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000a92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a94:	e79e      	b.n	80009d4 <HAL_DMA_IRQHandler+0x58>
}
 8000a96:	bc70      	pop	{r4, r5, r6}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40020008 	.word	0x40020008
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aa8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000aaa:	4626      	mov	r6, r4
 8000aac:	4b66      	ldr	r3, [pc, #408]	; (8000c48 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aae:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000c58 <HAL_GPIO_Init+0x1b4>
 8000ab2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000c5c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	680a      	ldr	r2, [r1, #0]
 8000ab8:	fa32 f506 	lsrs.w	r5, r2, r6
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000abe:	b003      	add	sp, #12
 8000ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000ac4:	f04f 0801 	mov.w	r8, #1
 8000ac8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000acc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000ad0:	4590      	cmp	r8, r2
 8000ad2:	d17f      	bne.n	8000bd4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000ad4:	684d      	ldr	r5, [r1, #4]
 8000ad6:	2d12      	cmp	r5, #18
 8000ad8:	f000 80aa 	beq.w	8000c30 <HAL_GPIO_Init+0x18c>
 8000adc:	f200 8083 	bhi.w	8000be6 <HAL_GPIO_Init+0x142>
 8000ae0:	2d02      	cmp	r5, #2
 8000ae2:	f000 80a2 	beq.w	8000c2a <HAL_GPIO_Init+0x186>
 8000ae6:	d877      	bhi.n	8000bd8 <HAL_GPIO_Init+0x134>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	f000 8089 	beq.w	8000c00 <HAL_GPIO_Init+0x15c>
 8000aee:	2d01      	cmp	r5, #1
 8000af0:	f000 8099 	beq.w	8000c26 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af8:	2aff      	cmp	r2, #255	; 0xff
 8000afa:	bf93      	iteet	ls
 8000afc:	4682      	movls	sl, r0
 8000afe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b02:	3d08      	subhi	r5, #8
 8000b04:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b08:	bf92      	itee	ls
 8000b0a:	00b5      	lslls	r5, r6, #2
 8000b0c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b10:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b12:	fa09 f805 	lsl.w	r8, r9, r5
 8000b16:	ea2b 0808 	bic.w	r8, fp, r8
 8000b1a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1e:	bf88      	it	hi
 8000b20:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b24:	ea48 0505 	orr.w	r5, r8, r5
 8000b28:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b30:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b34:	d04e      	beq.n	8000bd4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4d45      	ldr	r5, [pc, #276]	; (8000c4c <HAL_GPIO_Init+0x1a8>)
 8000b38:	4f44      	ldr	r7, [pc, #272]	; (8000c4c <HAL_GPIO_Init+0x1a8>)
 8000b3a:	69ad      	ldr	r5, [r5, #24]
 8000b3c:	f026 0803 	bic.w	r8, r6, #3
 8000b40:	f045 0501 	orr.w	r5, r5, #1
 8000b44:	61bd      	str	r5, [r7, #24]
 8000b46:	69bd      	ldr	r5, [r7, #24]
 8000b48:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000b4c:	f005 0501 	and.w	r5, r5, #1
 8000b50:	9501      	str	r5, [sp, #4]
 8000b52:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b56:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000b60:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b64:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b68:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b6c:	4d38      	ldr	r5, [pc, #224]	; (8000c50 <HAL_GPIO_Init+0x1ac>)
 8000b6e:	42a8      	cmp	r0, r5
 8000b70:	d063      	beq.n	8000c3a <HAL_GPIO_Init+0x196>
 8000b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b76:	42a8      	cmp	r0, r5
 8000b78:	d061      	beq.n	8000c3e <HAL_GPIO_Init+0x19a>
 8000b7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b7e:	42a8      	cmp	r0, r5
 8000b80:	d05f      	beq.n	8000c42 <HAL_GPIO_Init+0x19e>
 8000b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b86:	42a8      	cmp	r0, r5
 8000b88:	bf0c      	ite	eq
 8000b8a:	2503      	moveq	r5, #3
 8000b8c:	2504      	movne	r5, #4
 8000b8e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b92:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000b96:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b9a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba0:	bf14      	ite	ne
 8000ba2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4395      	biceq	r5, r2
 8000ba6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000baa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bae:	bf14      	ite	ne
 8000bb0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb2:	4395      	biceq	r5, r2
 8000bb4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bbc:	bf14      	ite	ne
 8000bbe:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bc0:	4395      	biceq	r5, r2
 8000bc2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bca:	bf14      	ite	ne
 8000bcc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bce:	ea25 0202 	biceq.w	r2, r5, r2
 8000bd2:	60da      	str	r2, [r3, #12]
	position++;
 8000bd4:	3601      	adds	r6, #1
 8000bd6:	e76e      	b.n	8000ab6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000bd8:	2d03      	cmp	r5, #3
 8000bda:	d022      	beq.n	8000c22 <HAL_GPIO_Init+0x17e>
 8000bdc:	2d11      	cmp	r5, #17
 8000bde:	d189      	bne.n	8000af4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	68cc      	ldr	r4, [r1, #12]
 8000be2:	3404      	adds	r4, #4
          break;
 8000be4:	e786      	b.n	8000af4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000be6:	4f1b      	ldr	r7, [pc, #108]	; (8000c54 <HAL_GPIO_Init+0x1b0>)
 8000be8:	42bd      	cmp	r5, r7
 8000bea:	d009      	beq.n	8000c00 <HAL_GPIO_Init+0x15c>
 8000bec:	d812      	bhi.n	8000c14 <HAL_GPIO_Init+0x170>
 8000bee:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000c60 <HAL_GPIO_Init+0x1bc>
 8000bf2:	454d      	cmp	r5, r9
 8000bf4:	d004      	beq.n	8000c00 <HAL_GPIO_Init+0x15c>
 8000bf6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000bfa:	454d      	cmp	r5, r9
 8000bfc:	f47f af7a 	bne.w	8000af4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c00:	688c      	ldr	r4, [r1, #8]
 8000c02:	b1c4      	cbz	r4, 8000c36 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c04:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000c06:	bf0c      	ite	eq
 8000c08:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c0c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c10:	2408      	movs	r4, #8
 8000c12:	e76f      	b.n	8000af4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000c14:	4575      	cmp	r5, lr
 8000c16:	d0f3      	beq.n	8000c00 <HAL_GPIO_Init+0x15c>
 8000c18:	4565      	cmp	r5, ip
 8000c1a:	d0f1      	beq.n	8000c00 <HAL_GPIO_Init+0x15c>
 8000c1c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000c64 <HAL_GPIO_Init+0x1c0>
 8000c20:	e7eb      	b.n	8000bfa <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c22:	2400      	movs	r4, #0
 8000c24:	e766      	b.n	8000af4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c26:	68cc      	ldr	r4, [r1, #12]
          break;
 8000c28:	e764      	b.n	8000af4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2a:	68cc      	ldr	r4, [r1, #12]
 8000c2c:	3408      	adds	r4, #8
          break;
 8000c2e:	e761      	b.n	8000af4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c30:	68cc      	ldr	r4, [r1, #12]
 8000c32:	340c      	adds	r4, #12
          break;
 8000c34:	e75e      	b.n	8000af4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c36:	2404      	movs	r4, #4
 8000c38:	e75c      	b.n	8000af4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c3a:	2500      	movs	r5, #0
 8000c3c:	e7a7      	b.n	8000b8e <HAL_GPIO_Init+0xea>
 8000c3e:	2501      	movs	r5, #1
 8000c40:	e7a5      	b.n	8000b8e <HAL_GPIO_Init+0xea>
 8000c42:	2502      	movs	r5, #2
 8000c44:	e7a3      	b.n	8000b8e <HAL_GPIO_Init+0xea>
 8000c46:	bf00      	nop
 8000c48:	40010400 	.word	0x40010400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	10210000 	.word	0x10210000
 8000c58:	10310000 	.word	0x10310000
 8000c5c:	10320000 	.word	0x10320000
 8000c60:	10110000 	.word	0x10110000
 8000c64:	10220000 	.word	0x10220000

08000c68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	b10a      	cbz	r2, 8000c6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c6a:	6101      	str	r1, [r0, #16]
 8000c6c:	4770      	bx	lr
 8000c6e:	0409      	lsls	r1, r1, #16
 8000c70:	e7fb      	b.n	8000c6a <HAL_GPIO_WritePin+0x2>

08000c72 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c72:	4770      	bx	lr

08000c74 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000c74:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000c78:	6959      	ldr	r1, [r3, #20]
 8000c7a:	4201      	tst	r1, r0
 8000c7c:	d002      	beq.n	8000c84 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c7e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c80:	f7ff fff7 	bl	8000c72 <HAL_GPIO_EXTI_Callback>
 8000c84:	bd08      	pop	{r3, pc}
 8000c86:	bf00      	nop
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c90:	4605      	mov	r5, r0
 8000c92:	b908      	cbnz	r0, 8000c98 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000c94:	2001      	movs	r0, #1
 8000c96:	e03c      	b.n	8000d12 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c98:	6803      	ldr	r3, [r0, #0]
 8000c9a:	07db      	lsls	r3, r3, #31
 8000c9c:	d410      	bmi.n	8000cc0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	079f      	lsls	r7, r3, #30
 8000ca2:	d45d      	bmi.n	8000d60 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	0719      	lsls	r1, r3, #28
 8000ca8:	f100 8094 	bmi.w	8000dd4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	075a      	lsls	r2, r3, #29
 8000cb0:	f100 80be 	bmi.w	8000e30 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cb4:	69e8      	ldr	r0, [r5, #28]
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	f040 812c 	bne.w	8000f14 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e028      	b.n	8000d12 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc0:	4c8f      	ldr	r4, [pc, #572]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d007      	beq.n	8000cdc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d109      	bne.n	8000cea <HAL_RCC_OscConfig+0x5e>
 8000cd6:	6863      	ldr	r3, [r4, #4]
 8000cd8:	03de      	lsls	r6, r3, #15
 8000cda:	d506      	bpl.n	8000cea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	039c      	lsls	r4, r3, #14
 8000ce0:	d5dd      	bpl.n	8000c9e <HAL_RCC_OscConfig+0x12>
 8000ce2:	686b      	ldr	r3, [r5, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1da      	bne.n	8000c9e <HAL_RCC_OscConfig+0x12>
 8000ce8:	e7d4      	b.n	8000c94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cea:	686b      	ldr	r3, [r5, #4]
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf0:	d112      	bne.n	8000d18 <HAL_RCC_OscConfig+0x8c>
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fc8f 	bl	800061c <HAL_GetTick>
 8000cfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	0398      	lsls	r0, r3, #14
 8000d04:	d4cb      	bmi.n	8000c9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff fc89 	bl	800061c <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	2864      	cmp	r0, #100	; 0x64
 8000d0e:	d9f7      	bls.n	8000d00 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d10:	2003      	movs	r0, #3
}
 8000d12:	b002      	add	sp, #8
 8000d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d18:	b99b      	cbnz	r3, 8000d42 <HAL_RCC_OscConfig+0xb6>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc77 	bl	800061c <HAL_GetTick>
 8000d2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	0399      	lsls	r1, r3, #14
 8000d34:	d5b3      	bpl.n	8000c9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fc71 	bl	800061c <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d9f7      	bls.n	8000d30 <HAL_RCC_OscConfig+0xa4>
 8000d40:	e7e6      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	d103      	bne.n	8000d52 <HAL_RCC_OscConfig+0xc6>
 8000d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4e:	6023      	str	r3, [r4, #0]
 8000d50:	e7cf      	b.n	8000cf2 <HAL_RCC_OscConfig+0x66>
 8000d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d56:	6023      	str	r3, [r4, #0]
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	e7cb      	b.n	8000cf8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d60:	4c67      	ldr	r4, [pc, #412]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000d62:	6863      	ldr	r3, [r4, #4]
 8000d64:	f013 0f0c 	tst.w	r3, #12
 8000d68:	d007      	beq.n	8000d7a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d110      	bne.n	8000d96 <HAL_RCC_OscConfig+0x10a>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	03da      	lsls	r2, r3, #15
 8000d78:	d40d      	bmi.n	8000d96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	079b      	lsls	r3, r3, #30
 8000d7e:	d502      	bpl.n	8000d86 <HAL_RCC_OscConfig+0xfa>
 8000d80:	692b      	ldr	r3, [r5, #16]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d186      	bne.n	8000c94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	696a      	ldr	r2, [r5, #20]
 8000d8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d92:	6023      	str	r3, [r4, #0]
 8000d94:	e786      	b.n	8000ca4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d96:	692a      	ldr	r2, [r5, #16]
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <HAL_RCC_OscConfig+0x278>)
 8000d9a:	b16a      	cbz	r2, 8000db8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc3c 	bl	800061c <HAL_GetTick>
 8000da4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	079f      	lsls	r7, r3, #30
 8000daa:	d4ec      	bmi.n	8000d86 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc36 	bl	800061c <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f7      	bls.n	8000da6 <HAL_RCC_OscConfig+0x11a>
 8000db6:	e7ab      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000db8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dba:	f7ff fc2f 	bl	800061c <HAL_GetTick>
 8000dbe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	0798      	lsls	r0, r3, #30
 8000dc4:	f57f af6e 	bpl.w	8000ca4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc28 	bl	800061c <HAL_GetTick>
 8000dcc:	1b80      	subs	r0, r0, r6
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9f6      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x134>
 8000dd2:	e79d      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd4:	69aa      	ldr	r2, [r5, #24]
 8000dd6:	4c4a      	ldr	r4, [pc, #296]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <HAL_RCC_OscConfig+0x27c>)
 8000dda:	b1da      	cbz	r2, 8000e14 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc1c 	bl	800061c <HAL_GetTick>
 8000de4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de8:	079b      	lsls	r3, r3, #30
 8000dea:	d50d      	bpl.n	8000e08 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000df0:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <HAL_RCC_OscConfig+0x280>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000df8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000dfa:	bf00      	nop
  }
  while (Delay --);
 8000dfc:	9b01      	ldr	r3, [sp, #4]
 8000dfe:	1e5a      	subs	r2, r3, #1
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f9      	bne.n	8000dfa <HAL_RCC_OscConfig+0x16e>
 8000e06:	e751      	b.n	8000cac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e08:	f7ff fc08 	bl	800061c <HAL_GetTick>
 8000e0c:	1b80      	subs	r0, r0, r6
 8000e0e:	2802      	cmp	r0, #2
 8000e10:	d9e9      	bls.n	8000de6 <HAL_RCC_OscConfig+0x15a>
 8000e12:	e77d      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e16:	f7ff fc01 	bl	800061c <HAL_GetTick>
 8000e1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1e:	079f      	lsls	r7, r3, #30
 8000e20:	f57f af44 	bpl.w	8000cac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e24:	f7ff fbfa 	bl	800061c <HAL_GetTick>
 8000e28:	1b80      	subs	r0, r0, r6
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f6      	bls.n	8000e1c <HAL_RCC_OscConfig+0x190>
 8000e2e:	e76f      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e30:	4c33      	ldr	r4, [pc, #204]	; (8000f00 <HAL_RCC_OscConfig+0x274>)
 8000e32:	69e3      	ldr	r3, [r4, #28]
 8000e34:	00d8      	lsls	r0, r3, #3
 8000e36:	d424      	bmi.n	8000e82 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000e38:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	69e3      	ldr	r3, [r4, #28]
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61e3      	str	r3, [r4, #28]
 8000e42:	69e3      	ldr	r3, [r4, #28]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4e30      	ldr	r6, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x284>)
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	05d9      	lsls	r1, r3, #23
 8000e52:	d518      	bpl.n	8000e86 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e54:	68eb      	ldr	r3, [r5, #12]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d126      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x21c>
 8000e5a:	6a23      	ldr	r3, [r4, #32]
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e62:	f7ff fbdb 	bl	800061c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e66:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e6a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6c:	6a23      	ldr	r3, [r4, #32]
 8000e6e:	079b      	lsls	r3, r3, #30
 8000e70:	d53f      	bpl.n	8000ef2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000e72:	2f00      	cmp	r7, #0
 8000e74:	f43f af1e 	beq.w	8000cb4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e78:	69e3      	ldr	r3, [r4, #28]
 8000e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	61e3      	str	r3, [r4, #28]
 8000e80:	e718      	b.n	8000cb4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000e82:	2700      	movs	r7, #0
 8000e84:	e7e2      	b.n	8000e4c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e86:	6833      	ldr	r3, [r6, #0]
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fbc5 	bl	800061c <HAL_GetTick>
 8000e92:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	6833      	ldr	r3, [r6, #0]
 8000e96:	05da      	lsls	r2, r3, #23
 8000e98:	d4dc      	bmi.n	8000e54 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9a:	f7ff fbbf 	bl	800061c <HAL_GetTick>
 8000e9e:	eba0 0008 	sub.w	r0, r0, r8
 8000ea2:	2864      	cmp	r0, #100	; 0x64
 8000ea4:	d9f6      	bls.n	8000e94 <HAL_RCC_OscConfig+0x208>
 8000ea6:	e733      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	b9ab      	cbnz	r3, 8000ed6 <HAL_RCC_OscConfig+0x24a>
 8000eaa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6223      	str	r3, [r4, #32]
 8000eb6:	6a23      	ldr	r3, [r4, #32]
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fbad 	bl	800061c <HAL_GetTick>
 8000ec2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	6a23      	ldr	r3, [r4, #32]
 8000ec6:	0798      	lsls	r0, r3, #30
 8000ec8:	d5d3      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff fba7 	bl	800061c <HAL_GetTick>
 8000ece:	1b80      	subs	r0, r0, r6
 8000ed0:	4540      	cmp	r0, r8
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x238>
 8000ed4:	e71c      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	6a23      	ldr	r3, [r4, #32]
 8000eda:	d103      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x258>
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6223      	str	r3, [r4, #32]
 8000ee2:	e7ba      	b.n	8000e5a <HAL_RCC_OscConfig+0x1ce>
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6223      	str	r3, [r4, #32]
 8000eea:	6a23      	ldr	r3, [r4, #32]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	e7b6      	b.n	8000e60 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fb93 	bl	800061c <HAL_GetTick>
 8000ef6:	eba0 0008 	sub.w	r0, r0, r8
 8000efa:	42b0      	cmp	r0, r6
 8000efc:	d9b6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1e0>
 8000efe:	e707      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_OscConfig+0x334>)
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	461c      	mov	r4, r3
 8000f1a:	f002 020c 	and.w	r2, r2, #12
 8000f1e:	2a08      	cmp	r2, #8
 8000f20:	d03d      	beq.n	8000f9e <HAL_RCC_OscConfig+0x312>
 8000f22:	2300      	movs	r3, #0
 8000f24:	4e27      	ldr	r6, [pc, #156]	; (8000fc4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f26:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f28:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2a:	d12b      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fb76 	bl	800061c <HAL_GetTick>
 8000f30:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	0199      	lsls	r1, r3, #6
 8000f36:	d41f      	bmi.n	8000f78 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f38:	6a2b      	ldr	r3, [r5, #32]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d105      	bne.n	8000f4c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f40:	6862      	ldr	r2, [r4, #4]
 8000f42:	68a9      	ldr	r1, [r5, #8]
 8000f44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f4e:	6862      	ldr	r2, [r4, #4]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb5d 	bl	800061c <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	019a      	lsls	r2, r3, #6
 8000f68:	f53f aea8 	bmi.w	8000cbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fb56 	bl	800061c <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2d8>
 8000f76:	e6cb      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff fb50 	bl	800061c <HAL_GetTick>
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9d7      	bls.n	8000f32 <HAL_RCC_OscConfig+0x2a6>
 8000f82:	e6c5      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f84:	f7ff fb4a 	bl	800061c <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	f57f ae95 	bpl.w	8000cbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fb43 	bl	800061c <HAL_GetTick>
 8000f96:	1b40      	subs	r0, r0, r5
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9f6      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2fe>
 8000f9c:	e6b8      	b.n	8000d10 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9e:	2801      	cmp	r0, #1
 8000fa0:	f43f aeb7 	beq.w	8000d12 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000fa4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa6:	6a2b      	ldr	r3, [r5, #32]
 8000fa8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f47f ae71 	bne.w	8000c94 <HAL_RCC_OscConfig+0x8>
 8000fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fb4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000fb8:	1ac0      	subs	r0, r0, r3
 8000fba:	bf18      	it	ne
 8000fbc:	2001      	movne	r0, #1
 8000fbe:	e6a8      	b.n	8000d12 <HAL_RCC_OscConfig+0x86>
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	42420060 	.word	0x42420060

08000fc8 <HAL_RCC_GetSysClockFreq>:
{
 8000fc8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fcc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fce:	ac02      	add	r4, sp, #8
 8000fd0:	f103 0510 	add.w	r5, r3, #16
 8000fd4:	4622      	mov	r2, r4
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	c203      	stmia	r2!, {r0, r1}
 8000fde:	42ab      	cmp	r3, r5
 8000fe0:	4614      	mov	r4, r2
 8000fe2:	d1f7      	bne.n	8000fd4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000fec:	4911      	ldr	r1, [pc, #68]	; (8001034 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000ff2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ff4:	f003 020c 	and.w	r2, r3, #12
 8000ff8:	2a08      	cmp	r2, #8
 8000ffa:	d117      	bne.n	800102c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ffc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001000:	a806      	add	r0, sp, #24
 8001002:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001004:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001006:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800100a:	d50c      	bpl.n	8001026 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800100c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800100e:	480a      	ldr	r0, [pc, #40]	; (8001038 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001010:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001014:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001016:	aa06      	add	r2, sp, #24
 8001018:	4413      	add	r3, r2
 800101a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800101e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001022:	b007      	add	sp, #28
 8001024:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_RCC_GetSysClockFreq+0x74>)
 8001028:	4350      	muls	r0, r2
 800102a:	e7fa      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800102e:	e7f8      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0x5a>
 8001030:	0800230c 	.word	0x0800230c
 8001034:	40021000 	.word	0x40021000
 8001038:	007a1200 	.word	0x007a1200
 800103c:	003d0900 	.word	0x003d0900

08001040 <HAL_RCC_ClockConfig>:
{
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001046:	4604      	mov	r4, r0
 8001048:	b910      	cbnz	r0, 8001050 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800104a:	2001      	movs	r0, #1
 800104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_RCC_ClockConfig+0x128>)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	428b      	cmp	r3, r1
 800105a:	d329      	bcc.n	80010b0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	6821      	ldr	r1, [r4, #0]
 800105e:	078e      	lsls	r6, r1, #30
 8001060:	d431      	bmi.n	80010c6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001062:	07ca      	lsls	r2, r1, #31
 8001064:	d444      	bmi.n	80010f0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <HAL_RCC_ClockConfig+0x128>)
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	429d      	cmp	r5, r3
 8001070:	d367      	bcc.n	8001142 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001072:	6822      	ldr	r2, [r4, #0]
 8001074:	4d3d      	ldr	r5, [pc, #244]	; (800116c <HAL_RCC_ClockConfig+0x12c>)
 8001076:	f012 0f04 	tst.w	r2, #4
 800107a:	d16e      	bne.n	800115a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107c:	0713      	lsls	r3, r2, #28
 800107e:	d506      	bpl.n	800108e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001080:	686b      	ldr	r3, [r5, #4]
 8001082:	6922      	ldr	r2, [r4, #16]
 8001084:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001088:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800108c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800108e:	f7ff ff9b 	bl	8000fc8 <HAL_RCC_GetSysClockFreq>
 8001092:	686b      	ldr	r3, [r5, #4]
 8001094:	4a36      	ldr	r2, [pc, #216]	; (8001170 <HAL_RCC_ClockConfig+0x130>)
 8001096:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	40d8      	lsrs	r0, r3
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HAL_RCC_ClockConfig+0x134>)
 80010a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <HAL_RCC_ClockConfig+0x138>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f7ff f9ef 	bl	8000488 <HAL_InitTick>
  return HAL_OK;
 80010aa:	2000      	movs	r0, #0
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f023 0307 	bic.w	r3, r3, #7
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4299      	cmp	r1, r3
 80010c2:	d1c2      	bne.n	800104a <HAL_RCC_ClockConfig+0xa>
 80010c4:	e7ca      	b.n	800105c <HAL_RCC_ClockConfig+0x1c>
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010cc:	bf1e      	ittt	ne
 80010ce:	685a      	ldrne	r2, [r3, #4]
 80010d0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010d4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d8:	bf42      	ittt	mi
 80010da:	685a      	ldrmi	r2, [r3, #4]
 80010dc:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010e0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	68a0      	ldr	r0, [r4, #8]
 80010e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010ea:	4302      	orrs	r2, r0
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e7b8      	b.n	8001062 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f0:	6862      	ldr	r2, [r4, #4]
 80010f2:	4e1e      	ldr	r6, [pc, #120]	; (800116c <HAL_RCC_ClockConfig+0x12c>)
 80010f4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f8:	d11b      	bne.n	8001132 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	d0a4      	beq.n	800104a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001100:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001102:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	4313      	orrs	r3, r2
 800110c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800110e:	f7ff fa85 	bl	800061c <HAL_GetTick>
 8001112:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001114:	6873      	ldr	r3, [r6, #4]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001120:	d0a1      	beq.n	8001066 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001122:	f7ff fa7b 	bl	800061c <HAL_GetTick>
 8001126:	1bc0      	subs	r0, r0, r7
 8001128:	4540      	cmp	r0, r8
 800112a:	d9f3      	bls.n	8001114 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800112c:	2003      	movs	r0, #3
}
 800112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001132:	2a02      	cmp	r2, #2
 8001134:	d102      	bne.n	800113c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001136:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800113a:	e7e0      	b.n	80010fe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	f013 0f02 	tst.w	r3, #2
 8001140:	e7dd      	b.n	80010fe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	f023 0307 	bic.w	r3, r3, #7
 8001148:	432b      	orrs	r3, r5
 800114a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	429d      	cmp	r5, r3
 8001154:	f47f af79 	bne.w	800104a <HAL_RCC_ClockConfig+0xa>
 8001158:	e78b      	b.n	8001072 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800115a:	686b      	ldr	r3, [r5, #4]
 800115c:	68e1      	ldr	r1, [r4, #12]
 800115e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001162:	430b      	orrs	r3, r1
 8001164:	606b      	str	r3, [r5, #4]
 8001166:	e789      	b.n	800107c <HAL_RCC_ClockConfig+0x3c>
 8001168:	40022000 	.word	0x40022000
 800116c:	40021000 	.word	0x40021000
 8001170:	08002328 	.word	0x08002328
 8001174:	20000000 	.word	0x20000000
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RCC_GetPCLK1Freq+0x14>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800118a:	6810      	ldr	r0, [r2, #0]
}
 800118c:	40d8      	lsrs	r0, r3
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	08002338 	.word	0x08002338
 8001198:	20000000 	.word	0x20000000

0800119c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011aa:	6810      	ldr	r0, [r2, #0]
}
 80011ac:	40d8      	lsrs	r0, r3
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08002338 	.word	0x08002338
 80011b8:	20000000 	.word	0x20000000

080011bc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011bc:	230f      	movs	r3, #15
 80011be:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_GetClockConfig+0x34>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80011d0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80011d8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011e2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_RCC_GetClockConfig+0x38>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	600b      	str	r3, [r1, #0]
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011f8:	6803      	ldr	r3, [r0, #0]
{
 80011fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011fe:	07d9      	lsls	r1, r3, #31
{
 8001200:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001202:	d520      	bpl.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001204:	4c35      	ldr	r4, [pc, #212]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001206:	69e3      	ldr	r3, [r4, #28]
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	d432      	bmi.n	8001272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800120c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	69e3      	ldr	r3, [r4, #28]
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	61e3      	str	r3, [r4, #28]
 8001216:	69e3      	ldr	r3, [r4, #28]
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4e2f      	ldr	r6, [pc, #188]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001222:	6833      	ldr	r3, [r6, #0]
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	d526      	bpl.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001228:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800122a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800122e:	d136      	bne.n	800129e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001230:	6a23      	ldr	r3, [r4, #32]
 8001232:	686a      	ldr	r2, [r5, #4]
 8001234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001238:	4313      	orrs	r3, r2
 800123a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	b11f      	cbz	r7, 8001246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800123e:	69e3      	ldr	r3, [r4, #28]
 8001240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001244:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001246:	6828      	ldr	r0, [r5, #0]
 8001248:	0783      	lsls	r3, r0, #30
 800124a:	d506      	bpl.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800124e:	68a9      	ldr	r1, [r5, #8]
 8001250:	6853      	ldr	r3, [r2, #4]
 8001252:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001256:	430b      	orrs	r3, r1
 8001258:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800125a:	f010 0010 	ands.w	r0, r0, #16
 800125e:	d01b      	beq.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001262:	68e9      	ldr	r1, [r5, #12]
 8001264:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001266:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001268:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800126c:	430b      	orrs	r3, r1
 800126e:	6053      	str	r3, [r2, #4]
 8001270:	e012      	b.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2700      	movs	r7, #0
 8001274:	e7d4      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800127e:	f7ff f9cd 	bl	800061c <HAL_GetTick>
 8001282:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	6833      	ldr	r3, [r6, #0]
 8001286:	05d8      	lsls	r0, r3, #23
 8001288:	d4ce      	bmi.n	8001228 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128a:	f7ff f9c7 	bl	800061c <HAL_GetTick>
 800128e:	eba0 0008 	sub.w	r0, r0, r8
 8001292:	2864      	cmp	r0, #100	; 0x64
 8001294:	d9f6      	bls.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001296:	2003      	movs	r0, #3
}
 8001298:	b002      	add	sp, #8
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800129e:	686a      	ldr	r2, [r5, #4]
 80012a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d0c3      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80012a8:	2001      	movs	r0, #1
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012ac:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80012ae:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80012b8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80012ba:	07d9      	lsls	r1, r3, #31
 80012bc:	d5b8      	bpl.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80012be:	f7ff f9ad 	bl	800061c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80012c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	6a23      	ldr	r3, [r4, #32]
 80012ca:	079a      	lsls	r2, r3, #30
 80012cc:	d4b0      	bmi.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff f9a5 	bl	800061c <HAL_GetTick>
 80012d2:	1b80      	subs	r0, r0, r6
 80012d4:	4540      	cmp	r0, r8
 80012d6:	d9f7      	bls.n	80012c8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80012d8:	e7dd      	b.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	42420440 	.word	0x42420440

080012e8 <HAL_TIM_Base_MspInit>:
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80012ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d120      	bne.n	8001336 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012fa:	6803      	ldr	r3, [r0, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_TIM_Base_Start_IT+0x50>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00a      	beq.n	8001320 <HAL_TIM_Base_Start_IT+0x34>
 800130a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130e:	d007      	beq.n	8001320 <HAL_TIM_Base_Start_IT+0x34>
 8001310:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001314:	4293      	cmp	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_TIM_Base_Start_IT+0x34>
 8001318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800131c:	4293      	cmp	r3, r2
 800131e:	d104      	bne.n	800132a <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001326:	2a06      	cmp	r2, #6
 8001328:	d003      	beq.n	8001332 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2000      	movs	r0, #0
}
 8001334:	4770      	bx	lr
    return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40012c00 	.word	0x40012c00

08001340 <HAL_TIM_OC_DelayElapsedCallback>:
 8001340:	4770      	bx	lr

08001342 <HAL_TIM_IC_CaptureCallback>:
 8001342:	4770      	bx	lr

08001344 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001344:	4770      	bx	lr

08001346 <HAL_TIM_TriggerCallback>:
 8001346:	4770      	bx	lr

08001348 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001348:	6803      	ldr	r3, [r0, #0]
{
 800134a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800134c:	691a      	ldr	r2, [r3, #16]
{
 800134e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001350:	0791      	lsls	r1, r2, #30
 8001352:	d50e      	bpl.n	8001372 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	0792      	lsls	r2, r2, #30
 8001358:	d50b      	bpl.n	8001372 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800135a:	f06f 0202 	mvn.w	r2, #2
 800135e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001360:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001362:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001364:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001366:	079b      	lsls	r3, r3, #30
 8001368:	d077      	beq.n	800145a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800136a:	f7ff ffea 	bl	8001342 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800136e:	2300      	movs	r3, #0
 8001370:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	0750      	lsls	r0, r2, #29
 8001378:	d510      	bpl.n	800139c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	0751      	lsls	r1, r2, #29
 800137e:	d50d      	bpl.n	800139c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001380:	f06f 0204 	mvn.w	r2, #4
 8001384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001386:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001388:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800138a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800138c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001390:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001392:	d068      	beq.n	8001466 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001394:	f7ff ffd5 	bl	8001342 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001398:	2300      	movs	r3, #0
 800139a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	0712      	lsls	r2, r2, #28
 80013a2:	d50f      	bpl.n	80013c4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	0710      	lsls	r0, r2, #28
 80013a8:	d50c      	bpl.n	80013c4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013aa:	f06f 0208 	mvn.w	r2, #8
 80013ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013b0:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013b2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013b6:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013ba:	d05a      	beq.n	8001472 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80013bc:	f7ff ffc1 	bl	8001342 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013c0:	2300      	movs	r3, #0
 80013c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	06d2      	lsls	r2, r2, #27
 80013ca:	d510      	bpl.n	80013ee <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	06d0      	lsls	r0, r2, #27
 80013d0:	d50d      	bpl.n	80013ee <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013d2:	f06f 0210 	mvn.w	r2, #16
 80013d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013d8:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013dc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013de:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013e4:	d04b      	beq.n	800147e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80013e6:	f7ff ffac 	bl	8001342 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ea:	2300      	movs	r3, #0
 80013ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	07d1      	lsls	r1, r2, #31
 80013f4:	d508      	bpl.n	8001408 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	07d2      	lsls	r2, r2, #31
 80013fa:	d505      	bpl.n	8001408 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013fc:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001400:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001402:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001404:	f7ff f80c 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	0610      	lsls	r0, r2, #24
 800140e:	d508      	bpl.n	8001422 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	0611      	lsls	r1, r2, #24
 8001414:	d505      	bpl.n	8001422 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001416:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800141a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800141c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800141e:	f000 f89a 	bl	8001556 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	0652      	lsls	r2, r2, #25
 8001428:	d508      	bpl.n	800143c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	0650      	lsls	r0, r2, #25
 800142e:	d505      	bpl.n	800143c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001430:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001434:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001436:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001438:	f7ff ff85 	bl	8001346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	0691      	lsls	r1, r2, #26
 8001442:	d522      	bpl.n	800148a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	0692      	lsls	r2, r2, #26
 8001448:	d51f      	bpl.n	800148a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800144a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800144e:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001454:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001456:	f000 b87d 	b.w	8001554 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800145a:	f7ff ff71 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff ff70 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
 8001464:	e783      	b.n	800136e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001466:	f7ff ff6b 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff ff6a 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
 8001470:	e792      	b.n	8001398 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001472:	f7ff ff65 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff ff64 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
 800147c:	e7a0      	b.n	80013c0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800147e:	f7ff ff5f 	bl	8001340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff ff5e 	bl	8001344 <HAL_TIM_PWM_PulseFinishedCallback>
 8001488:	e7af      	b.n	80013ea <HAL_TIM_IRQHandler+0xa2>
 800148a:	bd10      	pop	{r4, pc}

0800148c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800148e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001490:	4290      	cmp	r0, r2
 8001492:	d00a      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 8001494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001498:	d007      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 800149a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800149e:	4290      	cmp	r0, r2
 80014a0:	d003      	beq.n	80014aa <TIM_Base_SetConfig+0x1e>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d115      	bne.n	80014d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80014aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014b0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
 80014b4:	4290      	cmp	r0, r2
 80014b6:	d00a      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014bc:	d007      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80014c2:	4290      	cmp	r0, r2
 80014c4:	d003      	beq.n	80014ce <TIM_Base_SetConfig+0x42>
 80014c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ca:	4290      	cmp	r0, r2
 80014cc:	d103      	bne.n	80014d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014d4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014d6:	694a      	ldr	r2, [r1, #20]
 80014d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014dc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80014de:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014e0:	688b      	ldr	r3, [r1, #8]
 80014e2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014e4:	680b      	ldr	r3, [r1, #0]
 80014e6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <TIM_Base_SetConfig+0x6c>)
 80014ea:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014ec:	bf04      	itt	eq
 80014ee:	690b      	ldreq	r3, [r1, #16]
 80014f0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014f2:	2301      	movs	r3, #1
 80014f4:	6143      	str	r3, [r0, #20]
 80014f6:	4770      	bx	lr
 80014f8:	40012c00 	.word	0x40012c00

080014fc <HAL_TIM_Base_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b330      	cbz	r0, 8001550 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001506:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800150c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001510:	f7ff feea 	bl	80012e8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001516:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151c:	1d21      	adds	r1, r4, #4
 800151e:	f7ff ffb5 	bl	800148c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001522:	2301      	movs	r3, #1
  return HAL_OK;
 8001524:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001526:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800152e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800153e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800154a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800154e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
}
 8001552:	bd10      	pop	{r4, pc}

08001554 <HAL_TIMEx_CommutCallback>:
 8001554:	4770      	bx	lr

08001556 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001556:	4770      	bx	lr

08001558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800155c:	6803      	ldr	r3, [r0, #0]
 800155e:	68c1      	ldr	r1, [r0, #12]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001566:	430a      	orrs	r2, r1
 8001568:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800156a:	6882      	ldr	r2, [r0, #8]
 800156c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800156e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001570:	4302      	orrs	r2, r0
 8001572:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001574:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001578:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800157c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	69a1      	ldr	r1, [r4, #24]
 8001586:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800158a:	430a      	orrs	r2, r1
 800158c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <UART_SetConfig+0x70>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d115      	bne.n	80015c0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001594:	f7ff fe02 	bl	800119c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001598:	2319      	movs	r3, #25
 800159a:	4358      	muls	r0, r3
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2264      	movs	r2, #100	; 0x64
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015a6:	fbb0 f1f2 	udiv	r1, r0, r2
 80015aa:	fb02 0311 	mls	r3, r2, r1, r0
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	3332      	adds	r3, #50	; 0x32
 80015b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015b6:	6825      	ldr	r5, [r4, #0]
 80015b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80015bc:	60ab      	str	r3, [r5, #8]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80015c0:	f7ff fddc 	bl	800117c <HAL_RCC_GetPCLK1Freq>
 80015c4:	e7e8      	b.n	8001598 <UART_SetConfig+0x40>
 80015c6:	bf00      	nop
 80015c8:	40013800 	.word	0x40013800

080015cc <HAL_UART_Init>:
{
 80015cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80015ce:	4604      	mov	r4, r0
 80015d0:	b340      	cbz	r0, 8001624 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80015d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015da:	b91b      	cbnz	r3, 80015e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80015e0:	f7fe ffc2 	bl	8000568 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015e4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015ec:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80015ee:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80015f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015f6:	f7ff ffaf 	bl	8001558 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015fa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800160c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001614:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001616:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001618:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800161a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800161e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001622:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001624:	2001      	movs	r0, #1
}
 8001626:	bd10      	pop	{r4, pc}

08001628 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001628:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800162a:	f000 fc5d 	bl	8001ee8 <vTaskStartScheduler>
  
  return osOK;
}
 800162e:	2000      	movs	r0, #0
 8001630:	bd08      	pop	{r3, pc}

08001632 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001632:	b570      	push	{r4, r5, r6, lr}
 8001634:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001636:	6946      	ldr	r6, [r0, #20]
{
 8001638:	460b      	mov	r3, r1
 800163a:	b086      	sub	sp, #24
 800163c:	6840      	ldr	r0, [r0, #4]
 800163e:	6829      	ldr	r1, [r5, #0]
 8001640:	692a      	ldr	r2, [r5, #16]
 8001642:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001646:	b176      	cbz	r6, 8001666 <osThreadCreate+0x34>
 8001648:	69ad      	ldr	r5, [r5, #24]
 800164a:	b165      	cbz	r5, 8001666 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800164c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800164e:	bf0c      	ite	eq
 8001650:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8001652:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001654:	9502      	str	r5, [sp, #8]
 8001656:	e88d 0050 	stmia.w	sp, {r4, r6}
 800165a:	f000 fbe1 	bl	8001e20 <xTaskCreateStatic>
 800165e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001660:	9805      	ldr	r0, [sp, #20]
}
 8001662:	b006      	add	sp, #24
 8001664:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001666:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001668:	bf0c      	ite	eq
 800166a:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800166c:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800166e:	ad05      	add	r5, sp, #20
 8001670:	b292      	uxth	r2, r2
 8001672:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001676:	f000 fc0a 	bl	8001e8e <xTaskCreate>
 800167a:	2801      	cmp	r0, #1
 800167c:	d0f0      	beq.n	8001660 <osThreadCreate+0x2e>
      return NULL;
 800167e:	2000      	movs	r0, #0
 8001680:	e7ef      	b.n	8001662 <osThreadCreate+0x30>

08001682 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001682:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001684:	2800      	cmp	r0, #0
 8001686:	bf08      	it	eq
 8001688:	2001      	moveq	r0, #1
 800168a:	f000 fd75 	bl	8002178 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800168e:	2000      	movs	r0, #0
 8001690:	bd08      	pop	{r3, pc}

08001692 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001692:	f100 0308 	add.w	r3, r0, #8
 8001696:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001698:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800169c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800169e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80016a2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80016a4:	6003      	str	r3, [r0, #0]
 80016a6:	4770      	bx	lr

080016a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	6103      	str	r3, [r0, #16]
 80016ac:	4770      	bx	lr

080016ae <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80016ae:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016b0:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80016b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016b4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016ba:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80016bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80016c0:	3301      	adds	r3, #1
 80016c2:	6003      	str	r3, [r0, #0]
 80016c4:	4770      	bx	lr

080016c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80016c6:	680a      	ldr	r2, [r1, #0]
{
 80016c8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80016ca:	1c53      	adds	r3, r2, #1
 80016cc:	d10a      	bne.n	80016e4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80016ce:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80016d4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80016d6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80016d8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80016da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80016dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80016de:	3301      	adds	r3, #1
 80016e0:	6003      	str	r3, [r0, #0]
 80016e2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016e4:	f100 0308 	add.w	r3, r0, #8
 80016e8:	685c      	ldr	r4, [r3, #4]
 80016ea:	6825      	ldr	r5, [r4, #0]
 80016ec:	42aa      	cmp	r2, r5
 80016ee:	d3ef      	bcc.n	80016d0 <vListInsert+0xa>
 80016f0:	4623      	mov	r3, r4
 80016f2:	e7f9      	b.n	80016e8 <vListInsert+0x22>

080016f4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016f4:	6841      	ldr	r1, [r0, #4]
 80016f6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80016f8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016fa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016fc:	6882      	ldr	r2, [r0, #8]
 80016fe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001704:	bf08      	it	eq
 8001706:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001708:	2200      	movs	r2, #0
 800170a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	3a01      	subs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001712:	6818      	ldr	r0, [r3, #0]
}
 8001714:	4770      	bx	lr
	...

08001718 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8001718:	2300      	movs	r3, #0
{
 800171a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800171c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <prvTaskExitError+0x3c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	d008      	beq.n	8001738 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	e7fe      	b.n	8001736 <prvTaskExitError+0x1e>
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001748:	9b01      	ldr	r3, [sp, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0fc      	beq.n	8001748 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800174e:	b002      	add	sp, #8
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c

08001758 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <prvPortStartFirstTask+0x1c>)
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	6800      	ldr	r0, [r0, #0]
 800175e:	f380 8808 	msr	MSP, r0
 8001762:	b662      	cpsie	i
 8001764:	b661      	cpsie	f
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	df00      	svc	0
 8001770:	bf00      	nop
 8001772:	0000      	.short	0x0000
 8001774:	e000ed08 	.word	0xe000ed08

08001778 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001782:	f021 0101 	bic.w	r1, r1, #1
 8001786:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800178a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800178e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001792:	3840      	subs	r0, #64	; 0x40
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	08001719 	.word	0x08001719
 800179c:	00000000 	.word	0x00000000

080017a0 <SVC_Handler>:
	__asm volatile (
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <pxCurrentTCBConst2>)
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	6808      	ldr	r0, [r1, #0]
 80017a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017aa:	f380 8809 	msr	PSP, r0
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f380 8811 	msr	BASEPRI, r0
 80017ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80017be:	4770      	bx	lr

080017c0 <pxCurrentTCBConst2>:
 80017c0:	20000ea0 	.word	0x20000ea0

080017c4 <vPortEnterCritical>:
 80017c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c8:	f383 8811 	msr	BASEPRI, r3
 80017cc:	f3bf 8f6f 	isb	sy
 80017d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80017d4:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <vPortEnterCritical+0x3c>)
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80017da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80017dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80017de:	d10d      	bne.n	80017fc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <vPortEnterCritical+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80017e8:	d008      	beq.n	80017fc <vPortEnterCritical+0x38>
 80017ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ee:	f383 8811 	msr	BASEPRI, r3
 80017f2:	f3bf 8f6f 	isb	sy
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	e7fe      	b.n	80017fa <vPortEnterCritical+0x36>
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000000c 	.word	0x2000000c
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001808:	4a08      	ldr	r2, [pc, #32]	; (800182c <vPortExitCritical+0x24>)
 800180a:	6813      	ldr	r3, [r2, #0]
 800180c:	b943      	cbnz	r3, 8001820 <vPortExitCritical+0x18>
 800180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	e7fe      	b.n	800181e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001820:	3b01      	subs	r3, #1
 8001822:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001824:	b90b      	cbnz	r3, 800182a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	4770      	bx	lr
 800182c:	2000000c 	.word	0x2000000c

08001830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001830:	f3ef 8009 	mrs	r0, PSP
 8001834:	f3bf 8f6f 	isb	sy
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <pxCurrentTCBConst>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001840:	6010      	str	r0, [r2, #0]
 8001842:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001846:	f04f 0050 	mov.w	r0, #80	; 0x50
 800184a:	f380 8811 	msr	BASEPRI, r0
 800184e:	f000 fcb7 	bl	80021c0 <vTaskSwitchContext>
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f380 8811 	msr	BASEPRI, r0
 800185a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	6808      	ldr	r0, [r1, #0]
 8001862:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001866:	f380 8809 	msr	PSP, r0
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	4770      	bx	lr

08001870 <pxCurrentTCBConst>:
 8001870:	20000ea0 	.word	0x20000ea0

08001874 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001874:	b508      	push	{r3, lr}
	__asm volatile
 8001876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187a:	f383 8811 	msr	BASEPRI, r3
 800187e:	f3bf 8f6f 	isb	sy
 8001882:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001886:	f000 fb6d 	bl	8001f64 <xTaskIncrementTick>
 800188a:	b118      	cbz	r0, 8001894 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800188c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <SysTick_Handler+0x28>)
 8001892:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001894:	2300      	movs	r3, #0
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	bd08      	pop	{r3, pc}
 800189c:	e000ed04 	.word	0xe000ed04

080018a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80018a4:	4908      	ldr	r1, [pc, #32]	; (80018c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80018a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80018a8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80018aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <vPortSetupTimerInterrupt+0x2c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	4906      	ldr	r1, [pc, #24]	; (80018d0 <vPortSetupTimerInterrupt+0x30>)
 80018b8:	3b01      	subs	r3, #1
 80018ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80018bc:	2307      	movs	r3, #7
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010
 80018c8:	e000e018 	.word	0xe000e018
 80018cc:	20000000 	.word	0x20000000
 80018d0:	e000e014 	.word	0xe000e014

080018d4 <xPortStartScheduler>:
{
 80018d4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018d8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018e0:	22ff      	movs	r2, #255	; 0xff
 80018e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018e4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018f8:	2207      	movs	r2, #7
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <xPortStartScheduler+0xa8>)
 80018fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001902:	1e54      	subs	r4, r2, #1
 8001904:	0600      	lsls	r0, r0, #24
 8001906:	d40d      	bmi.n	8001924 <xPortStartScheduler+0x50>
 8001908:	b101      	cbz	r1, 800190c <xPortStartScheduler+0x38>
 800190a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2a03      	cmp	r2, #3
 8001910:	d011      	beq.n	8001936 <xPortStartScheduler+0x62>
	__asm volatile
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	e7fe      	b.n	8001922 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001924:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001928:	2101      	movs	r1, #1
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f88d 2003 	strb.w	r2, [sp, #3]
 8001932:	4622      	mov	r2, r4
 8001934:	e7e3      	b.n	80018fe <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8001936:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001938:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800193a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800193e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001940:	9b01      	ldr	r3, [sp, #4]
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <xPortStartScheduler+0xa0>)
 8001944:	b2db      	uxtb	r3, r3
 8001946:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <xPortStartScheduler+0xac>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001950:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001958:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800195a:	f7ff ffa1 	bl	80018a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <xPortStartScheduler+0xb0>)
 8001960:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8001962:	f7ff fef9 	bl	8001758 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001966:	f000 fc2b 	bl	80021c0 <vTaskSwitchContext>
	prvTaskExitError();
 800196a:	f7ff fed5 	bl	8001718 <prvTaskExitError>
}
 800196e:	4620      	mov	r0, r4
 8001970:	b002      	add	sp, #8
 8001972:	bd10      	pop	{r4, pc}
 8001974:	e000e400 	.word	0xe000e400
 8001978:	20000280 	.word	0x20000280
 800197c:	20000284 	.word	0x20000284
 8001980:	e000ed20 	.word	0xe000ed20
 8001984:	2000000c 	.word	0x2000000c

08001988 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001988:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <prvInsertBlockIntoFreeList+0x40>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4282      	cmp	r2, r0
 8001990:	d318      	bcc.n	80019c4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001992:	685c      	ldr	r4, [r3, #4]
 8001994:	1919      	adds	r1, r3, r4
 8001996:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001998:	bf01      	itttt	eq
 800199a:	6841      	ldreq	r1, [r0, #4]
 800199c:	4618      	moveq	r0, r3
 800199e:	1909      	addeq	r1, r1, r4
 80019a0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80019a2:	6844      	ldr	r4, [r0, #4]
 80019a4:	1901      	adds	r1, r0, r4
 80019a6:	428a      	cmp	r2, r1
 80019a8:	d107      	bne.n	80019ba <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <prvInsertBlockIntoFreeList+0x44>)
 80019ac:	6809      	ldr	r1, [r1, #0]
 80019ae:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80019b0:	bf1f      	itttt	ne
 80019b2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80019b4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80019b6:	1909      	addne	r1, r1, r4
 80019b8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80019ba:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80019bc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80019be:	bf18      	it	ne
 80019c0:	6018      	strne	r0, [r3, #0]
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	4613      	mov	r3, r2
 80019c6:	e7e1      	b.n	800198c <prvInsertBlockIntoFreeList+0x4>
 80019c8:	20000e98 	.word	0x20000e98
 80019cc:	20000288 	.word	0x20000288

080019d0 <pvPortMalloc>:
{
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80019d6:	f000 fabd 	bl	8001f54 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80019da:	493e      	ldr	r1, [pc, #248]	; (8001ad4 <pvPortMalloc+0x104>)
 80019dc:	4d3e      	ldr	r5, [pc, #248]	; (8001ad8 <pvPortMalloc+0x108>)
 80019de:	680b      	ldr	r3, [r1, #0]
 80019e0:	bb0b      	cbnz	r3, 8001a26 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019e4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019e6:	bf1d      	ittte	ne
 80019e8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019ea:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019ee:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019f2:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019f6:	bf1c      	itt	ne
 80019f8:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019fa:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80019fc:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019fe:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a00:	4e37      	ldr	r6, [pc, #220]	; (8001ae0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001a02:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a04:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001a08:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a0a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001a0c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a0e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001a10:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a12:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a14:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a18:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a1a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <pvPortMalloc+0x118>)
 8001a1e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a24:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a26:	682f      	ldr	r7, [r5, #0]
 8001a28:	4227      	tst	r7, r4
 8001a2a:	d116      	bne.n	8001a5a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001a2c:	2c00      	cmp	r4, #0
 8001a2e:	d040      	beq.n	8001ab2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001a30:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a34:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a36:	bf1c      	itt	ne
 8001a38:	f023 0307 	bicne.w	r3, r3, #7
 8001a3c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a3e:	b163      	cbz	r3, 8001a5a <pvPortMalloc+0x8a>
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <pvPortMalloc+0x118>)
 8001a42:	6816      	ldr	r6, [r2, #0]
 8001a44:	4690      	mov	r8, r2
 8001a46:	42b3      	cmp	r3, r6
 8001a48:	d807      	bhi.n	8001a5a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <pvPortMalloc+0x110>)
 8001a4c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a4e:	6868      	ldr	r0, [r5, #4]
 8001a50:	4283      	cmp	r3, r0
 8001a52:	d804      	bhi.n	8001a5e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001a54:	6809      	ldr	r1, [r1, #0]
 8001a56:	428d      	cmp	r5, r1
 8001a58:	d107      	bne.n	8001a6a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	e029      	b.n	8001ab2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a5e:	682c      	ldr	r4, [r5, #0]
 8001a60:	2c00      	cmp	r4, #0
 8001a62:	d0f7      	beq.n	8001a54 <pvPortMalloc+0x84>
 8001a64:	462a      	mov	r2, r5
 8001a66:	4625      	mov	r5, r4
 8001a68:	e7f1      	b.n	8001a4e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a6a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a6c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a6e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a70:	1ac2      	subs	r2, r0, r3
 8001a72:	2a10      	cmp	r2, #16
 8001a74:	d90f      	bls.n	8001a96 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a76:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a78:	0741      	lsls	r1, r0, #29
 8001a7a:	d008      	beq.n	8001a8e <pvPortMalloc+0xbe>
 8001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a80:	f383 8811 	msr	BASEPRI, r3
 8001a84:	f3bf 8f6f 	isb	sy
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	e7fe      	b.n	8001a8c <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a8e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a90:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a92:	f7ff ff79 	bl	8001988 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a96:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a98:	4912      	ldr	r1, [pc, #72]	; (8001ae4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a9a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a9c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001a9e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001aa0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001aa2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001aa6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001aa8:	bf38      	it	cc
 8001aaa:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001aac:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001aae:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ab0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001ab2:	f000 fae9 	bl	8002088 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ab6:	0763      	lsls	r3, r4, #29
 8001ab8:	d008      	beq.n	8001acc <pvPortMalloc+0xfc>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	e7fe      	b.n	8001aca <pvPortMalloc+0xfa>
}
 8001acc:	4620      	mov	r0, r4
 8001ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000288 	.word	0x20000288
 8001ad8:	20000e8c 	.word	0x20000e8c
 8001adc:	2000028c 	.word	0x2000028c
 8001ae0:	20000e98 	.word	0x20000e98
 8001ae4:	20000e94 	.word	0x20000e94
 8001ae8:	20000e90 	.word	0x20000e90

08001aec <vPortFree>:
{
 8001aec:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001aee:	4604      	mov	r4, r0
 8001af0:	b370      	cbz	r0, 8001b50 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <vPortFree+0x68>)
 8001af4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4213      	tst	r3, r2
 8001afc:	d108      	bne.n	8001b10 <vPortFree+0x24>
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	e7fe      	b.n	8001b0e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b10:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001b14:	b141      	cbz	r1, 8001b28 <vPortFree+0x3c>
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	e7fe      	b.n	8001b26 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b28:	ea23 0302 	bic.w	r3, r3, r2
 8001b2c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001b30:	f000 fa10 	bl	8001f54 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <vPortFree+0x6c>)
 8001b36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001b3a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b3c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b40:	440b      	add	r3, r1
 8001b42:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b44:	f7ff ff20 	bl	8001988 <prvInsertBlockIntoFreeList>
}
 8001b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001b4c:	f000 ba9c 	b.w	8002088 <xTaskResumeAll>
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	bf00      	nop
 8001b54:	20000e8c 	.word	0x20000e8c
 8001b58:	20000e90 	.word	0x20000e90

08001b5c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b60:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b62:	f7ff fe2f 	bl	80017c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001b68:	4c2d      	ldr	r4, [pc, #180]	; (8001c20 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4f2d      	ldr	r7, [pc, #180]	; (8001c24 <prvAddNewTaskToReadyList+0xc8>)
 8001b6e:	3201      	adds	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001b72:	6825      	ldr	r5, [r4, #0]
 8001b74:	2d00      	cmp	r5, #0
 8001b76:	d145      	bne.n	8001c04 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b78:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d11c      	bne.n	8001bba <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b80:	1978      	adds	r0, r7, r5
 8001b82:	3514      	adds	r5, #20
 8001b84:	f7ff fd85 	bl	8001692 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b88:	2d8c      	cmp	r5, #140	; 0x8c
 8001b8a:	d1f9      	bne.n	8001b80 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b8c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001c50 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001b90:	4d25      	ldr	r5, [pc, #148]	; (8001c28 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001b92:	4640      	mov	r0, r8
 8001b94:	f7ff fd7d 	bl	8001692 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7ff fd7a 	bl	8001692 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b9e:	4823      	ldr	r0, [pc, #140]	; (8001c2c <prvAddNewTaskToReadyList+0xd0>)
 8001ba0:	f7ff fd77 	bl	8001692 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ba4:	4822      	ldr	r0, [pc, #136]	; (8001c30 <prvAddNewTaskToReadyList+0xd4>)
 8001ba6:	f7ff fd74 	bl	8001692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001baa:	4822      	ldr	r0, [pc, #136]	; (8001c34 <prvAddNewTaskToReadyList+0xd8>)
 8001bac:	f7ff fd71 	bl	8001692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <prvAddNewTaskToReadyList+0xdc>)
 8001bb2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <prvAddNewTaskToReadyList+0xe0>)
 8001bb8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001bbc:	4921      	ldr	r1, [pc, #132]	; (8001c44 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001bbe:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001bc0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	4303      	orrs	r3, r0
 8001bce:	2014      	movs	r0, #20
 8001bd0:	600b      	str	r3, [r1, #0]
 8001bd2:	fb00 7002 	mla	r0, r0, r2, r7
 8001bd6:	1d31      	adds	r1, r6, #4
 8001bd8:	f7ff fd69 	bl	80016ae <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001bdc:	f7ff fe14 	bl	8001808 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <prvAddNewTaskToReadyList+0xec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b163      	cbz	r3, 8001c00 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <prvAddNewTaskToReadyList+0xf0>)
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <prvAddNewTaskToReadyList+0xec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1d6      	bne.n	8001bba <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c10:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001c12:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001c14:	bf98      	it	ls
 8001c16:	6026      	strls	r6, [r4, #0]
 8001c18:	e7cf      	b.n	8001bba <prvAddNewTaskToReadyList+0x5e>
 8001c1a:	bf00      	nop
 8001c1c:	20000f38 	.word	0x20000f38
 8001c20:	20000ea0 	.word	0x20000ea0
 8001c24:	20000eac 	.word	0x20000eac
 8001c28:	20000f64 	.word	0x20000f64
 8001c2c:	20000f80 	.word	0x20000f80
 8001c30:	20000fac 	.word	0x20000fac
 8001c34:	20000f98 	.word	0x20000f98
 8001c38:	20000ea4 	.word	0x20000ea4
 8001c3c:	20000ea8 	.word	0x20000ea8
 8001c40:	20000f48 	.word	0x20000f48
 8001c44:	20000f4c 	.word	0x20000f4c
 8001c48:	20000f94 	.word	0x20000f94
 8001c4c:	e000ed04 	.word	0xe000ed04
 8001c50:	20000f50 	.word	0x20000f50

08001c54 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <prvResetNextTaskUnblockTime+0x1c>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <prvResetNextTaskUnblockTime+0x20>)
 8001c5c:	b919      	cbnz	r1, 8001c66 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c5e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c6a:	68d2      	ldr	r2, [r2, #12]
 8001c6c:	6852      	ldr	r2, [r2, #4]
 8001c6e:	e7f8      	b.n	8001c62 <prvResetNextTaskUnblockTime+0xe>
 8001c70:	20000ea4 	.word	0x20000ea4
 8001c74:	20000f78 	.word	0x20000f78

08001c78 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c7c:	4681      	mov	r9, r0
 8001c7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c80:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001c84:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001c86:	3a01      	subs	r2, #1
 8001c88:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001c8c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001c90:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001c92:	f026 0607 	bic.w	r6, r6, #7
 8001c96:	1e4b      	subs	r3, r1, #1
 8001c98:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001c9c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c9e:	7858      	ldrb	r0, [r3, #1]
 8001ca0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001ca4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001ca8:	b108      	cbz	r0, 8001cae <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001caa:	428b      	cmp	r3, r1
 8001cac:	d1f7      	bne.n	8001c9e <prvInitialiseNewTask.isra.2+0x26>
 8001cae:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cb0:	2700      	movs	r7, #0
 8001cb2:	2d06      	cmp	r5, #6
 8001cb4:	bf28      	it	cs
 8001cb6:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cb8:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001cba:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001cbc:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cbe:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001cc2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cc4:	f7ff fcf0 	bl	80016a8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cc8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ccc:	f104 0018 	add.w	r0, r4, #24
 8001cd0:	f7ff fcea 	bl	80016a8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001cd4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cd6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cd8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cda:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001cdc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ce0:	4652      	mov	r2, sl
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f7ff fd47 	bl	8001778 <pxPortInitialiseStack>
 8001cea:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001cec:	f1b8 0f00 	cmp.w	r8, #0
 8001cf0:	d001      	beq.n	8001cf6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cf2:	f8c8 4000 	str.w	r4, [r8]
 8001cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001cfa <prvDeleteTCB>:
	{
 8001cfa:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001cfc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001d00:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001d02:	b93b      	cbnz	r3, 8001d14 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001d04:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001d06:	f7ff fef1 	bl	8001aec <vPortFree>
				vPortFree( pxTCB );
 8001d0a:	4620      	mov	r0, r4
	}
 8001d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001d10:	f7ff beec 	b.w	8001aec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d0f9      	beq.n	8001d0c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d008      	beq.n	8001d2e <prvDeleteTCB+0x34>
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	e7fe      	b.n	8001d2c <prvDeleteTCB+0x32>
 8001d2e:	bd10      	pop	{r4, pc}

08001d30 <prvIdleTask>:
{
 8001d30:	b580      	push	{r7, lr}
				taskYIELD();
 8001d32:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001d90 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d36:	4f12      	ldr	r7, [pc, #72]	; (8001d80 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d38:	4c12      	ldr	r4, [pc, #72]	; (8001d84 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001d3a:	4d13      	ldr	r5, [pc, #76]	; (8001d88 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	b963      	cbnz	r3, 8001d5a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <prvIdleTask+0x5c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d9f8      	bls.n	8001d3a <prvIdleTask+0xa>
				taskYIELD();
 8001d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d4c:	f8c8 3000 	str.w	r3, [r8]
 8001d50:	f3bf 8f4f 	dsb	sy
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	e7ee      	b.n	8001d38 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001d5a:	f7ff fd33 	bl	80017c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d62:	1d30      	adds	r0, r6, #4
 8001d64:	f7ff fcc6 	bl	80016f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001d74:	f7ff fd48 	bl	8001808 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f7ff ffbe 	bl	8001cfa <prvDeleteTCB>
 8001d7e:	e7dd      	b.n	8001d3c <prvIdleTask+0xc>
 8001d80:	20000fac 	.word	0x20000fac
 8001d84:	20000f3c 	.word	0x20000f3c
 8001d88:	20000f38 	.word	0x20000f38
 8001d8c:	20000eac 	.word	0x20000eac
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d98:	4e1b      	ldr	r6, [pc, #108]	; (8001e08 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001d9a:	681d      	ldr	r5, [r3, #0]
{
 8001d9c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d9e:	6830      	ldr	r0, [r6, #0]
{
 8001da0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001da2:	3004      	adds	r0, #4
 8001da4:	f7ff fca6 	bl	80016f4 <uxListRemove>
 8001da8:	4633      	mov	r3, r6
 8001daa:	b940      	cbnz	r0, 8001dbe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001dac:	2001      	movs	r0, #1
 8001dae:	6831      	ldr	r1, [r6, #0]
 8001db0:	4e16      	ldr	r6, [pc, #88]	; (8001e0c <prvAddCurrentTaskToDelayedList+0x78>)
 8001db2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001db4:	6832      	ldr	r2, [r6, #0]
 8001db6:	4088      	lsls	r0, r1
 8001db8:	ea22 0200 	bic.w	r2, r2, r0
 8001dbc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dbe:	1c62      	adds	r2, r4, #1
 8001dc0:	d107      	bne.n	8001dd2 <prvAddCurrentTaskToDelayedList+0x3e>
 8001dc2:	b137      	cbz	r7, 8001dd2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	4812      	ldr	r0, [pc, #72]	; (8001e10 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001dc8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001dca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dce:	f7ff bc6e 	b.w	80016ae <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001dd2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dd4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001dd6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001dd8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001dda:	d907      	bls.n	8001dec <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <prvAddCurrentTaskToDelayedList+0x80>)
 8001dde:	6810      	ldr	r0, [r2, #0]
 8001de0:	6819      	ldr	r1, [r3, #0]
}
 8001de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de6:	3104      	adds	r1, #4
 8001de8:	f7ff bc6d 	b.w	80016c6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <prvAddCurrentTaskToDelayedList+0x84>)
 8001dee:	6810      	ldr	r0, [r2, #0]
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	3104      	adds	r1, #4
 8001df4:	f7ff fc67 	bl	80016c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <prvAddCurrentTaskToDelayedList+0x88>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001dfe:	bf38      	it	cc
 8001e00:	601c      	strcc	r4, [r3, #0]
 8001e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e04:	20000fc0 	.word	0x20000fc0
 8001e08:	20000ea0 	.word	0x20000ea0
 8001e0c:	20000f4c 	.word	0x20000f4c
 8001e10:	20000f98 	.word	0x20000f98
 8001e14:	20000ea8 	.word	0x20000ea8
 8001e18:	20000ea4 	.word	0x20000ea4
 8001e1c:	20000f78 	.word	0x20000f78

08001e20 <xTaskCreateStatic>:
	{
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001e26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001e28:	b945      	cbnz	r5, 8001e3c <xTaskCreateStatic+0x1c>
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	e7fe      	b.n	8001e3a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001e3c:	b944      	cbnz	r4, 8001e50 <xTaskCreateStatic+0x30>
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	e7fe      	b.n	8001e4e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e50:	2654      	movs	r6, #84	; 0x54
 8001e52:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e54:	9e04      	ldr	r6, [sp, #16]
 8001e56:	2e54      	cmp	r6, #84	; 0x54
 8001e58:	d008      	beq.n	8001e6c <xTaskCreateStatic+0x4c>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e6c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e6e:	2502      	movs	r5, #2
 8001e70:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e74:	ad05      	add	r5, sp, #20
 8001e76:	9501      	str	r5, [sp, #4]
 8001e78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001e7a:	9402      	str	r4, [sp, #8]
 8001e7c:	9500      	str	r5, [sp, #0]
 8001e7e:	f7ff fefb 	bl	8001c78 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff fe6a 	bl	8001b5c <prvAddNewTaskToReadyList>
	}
 8001e88:	9805      	ldr	r0, [sp, #20]
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd70      	pop	{r4, r5, r6, pc}

08001e8e <xTaskCreate>:
	{
 8001e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e92:	4607      	mov	r7, r0
 8001e94:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e96:	0090      	lsls	r0, r2, #2
	{
 8001e98:	4688      	mov	r8, r1
 8001e9a:	4616      	mov	r6, r2
 8001e9c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e9e:	f7ff fd97 	bl	80019d0 <pvPortMalloc>
			if( pxStack != NULL )
 8001ea2:	4605      	mov	r5, r0
 8001ea4:	b1e8      	cbz	r0, 8001ee2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001ea6:	2054      	movs	r0, #84	; 0x54
 8001ea8:	f7ff fd92 	bl	80019d0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001eac:	4604      	mov	r4, r0
 8001eae:	b1a8      	cbz	r0, 8001edc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8001eb8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ebe:	9002      	str	r0, [sp, #8]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4632      	mov	r2, r6
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	4638      	mov	r0, r7
 8001eca:	f7ff fed5 	bl	8001c78 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff fe44 	bl	8001b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ed4:	2001      	movs	r0, #1
	}
 8001ed6:	b005      	add	sp, #20
 8001ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8001edc:	4628      	mov	r0, r5
 8001ede:	f7ff fe05 	bl	8001aec <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001ee6:	e7f6      	b.n	8001ed6 <xTaskCreate+0x48>

08001ee8 <vTaskStartScheduler>:
{
 8001ee8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001eea:	2400      	movs	r4, #0
{
 8001eec:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001eee:	aa07      	add	r2, sp, #28
 8001ef0:	a906      	add	r1, sp, #24
 8001ef2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ef4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ef6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ef8:	f7fe f9c8 	bl	800028c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001efc:	9b05      	ldr	r3, [sp, #20]
 8001efe:	9400      	str	r4, [sp, #0]
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	9b06      	ldr	r3, [sp, #24]
 8001f04:	9a07      	ldr	r2, [sp, #28]
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	490d      	ldr	r1, [pc, #52]	; (8001f40 <vTaskStartScheduler+0x58>)
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <vTaskStartScheduler+0x5c>)
 8001f0e:	f7ff ff87 	bl	8001e20 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8001f12:	b190      	cbz	r0, 8001f3a <vTaskStartScheduler+0x52>
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <vTaskStartScheduler+0x60>)
 8001f2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <vTaskStartScheduler+0x64>)
 8001f30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <vTaskStartScheduler+0x68>)
 8001f34:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001f36:	f7ff fccd 	bl	80018d4 <xPortStartScheduler>
}
 8001f3a:	b008      	add	sp, #32
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	08002340 	.word	0x08002340
 8001f44:	08001d31 	.word	0x08001d31
 8001f48:	20000f78 	.word	0x20000f78
 8001f4c:	20000f94 	.word	0x20000f94
 8001f50:	20000fc0 	.word	0x20000fc0

08001f54 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001f54:	4a02      	ldr	r2, [pc, #8]	; (8001f60 <vTaskSuspendAll+0xc>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000f44 	.word	0x20000f44

08001f64 <xTaskIncrementTick>:
{
 8001f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <xTaskIncrementTick+0xf8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d153      	bne.n	8002018 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <xTaskIncrementTick+0xfc>)
 8001f72:	681c      	ldr	r4, [r3, #0]
 8001f74:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001f76:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f78:	b9bc      	cbnz	r4, 8001faa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <xTaskIncrementTick+0x100>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	b142      	cbz	r2, 8001f94 <xTaskIncrementTick+0x30>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	e7fe      	b.n	8001f92 <xTaskIncrementTick+0x2e>
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <xTaskIncrementTick+0x104>)
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	6810      	ldr	r0, [r2, #0]
 8001f9a:	6018      	str	r0, [r3, #0]
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <xTaskIncrementTick+0x108>)
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	f7ff fe55 	bl	8001c54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001faa:	4d31      	ldr	r5, [pc, #196]	; (8002070 <xTaskIncrementTick+0x10c>)
 8001fac:	f04f 0b00 	mov.w	fp, #0
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	4f30      	ldr	r7, [pc, #192]	; (8002074 <xTaskIncrementTick+0x110>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d33e      	bcc.n	8002036 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002064 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001fbc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002084 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc0:	f8d8 2000 	ldr.w	r2, [r8]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	bb72      	cbnz	r2, 8002026 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	602a      	str	r2, [r5, #0]
					break;
 8001fce:	e032      	b.n	8002036 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd0:	f106 0a04 	add.w	sl, r6, #4
 8001fd4:	4650      	mov	r0, sl
 8001fd6:	f7ff fb8d 	bl	80016f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001fdc:	b119      	cbz	r1, 8001fe6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fde:	f106 0018 	add.w	r0, r6, #24
 8001fe2:	f7ff fb87 	bl	80016f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f04f 0e14 	mov.w	lr, #20
 8001fec:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001fee:	f8d9 3000 	ldr.w	r3, [r9]
 8001ff2:	fa02 f100 	lsl.w	r1, r2, r0
 8001ff6:	4319      	orrs	r1, r3
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <xTaskIncrementTick+0x114>)
 8001ffa:	f8c9 1000 	str.w	r1, [r9]
 8001ffe:	fb0e 3000 	mla	r0, lr, r0, r3
 8002002:	4651      	mov	r1, sl
 8002004:	f7ff fb53 	bl	80016ae <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800200c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800200e:	4291      	cmp	r1, r2
 8002010:	bf28      	it	cs
 8002012:	f04f 0b01 	movcs.w	fp, #1
 8002016:	e7d3      	b.n	8001fc0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800201a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e011      	b.n	800204a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002026:	f8d8 2000 	ldr.w	r2, [r8]
 800202a:	68d2      	ldr	r2, [r2, #12]
 800202c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800202e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002030:	428c      	cmp	r4, r1
 8002032:	d2cd      	bcs.n	8001fd0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002034:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <xTaskIncrementTick+0x114>)
 800203a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800203c:	2214      	movs	r2, #20
 800203e:	434a      	muls	r2, r1
 8002040:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002042:	2a02      	cmp	r2, #2
 8002044:	bf28      	it	cs
 8002046:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <xTaskIncrementTick+0x11c>)
 800204c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800204e:	2a00      	cmp	r2, #0
 8002050:	bf18      	it	ne
 8002052:	f04f 0b01 	movne.w	fp, #1
}
 8002056:	4658      	mov	r0, fp
 8002058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800205c:	20000f44 	.word	0x20000f44
 8002060:	20000fc0 	.word	0x20000fc0
 8002064:	20000ea4 	.word	0x20000ea4
 8002068:	20000ea8 	.word	0x20000ea8
 800206c:	20000f7c 	.word	0x20000f7c
 8002070:	20000f78 	.word	0x20000f78
 8002074:	20000ea0 	.word	0x20000ea0
 8002078:	20000eac 	.word	0x20000eac
 800207c:	20000f40 	.word	0x20000f40
 8002080:	20000fc4 	.word	0x20000fc4
 8002084:	20000f4c 	.word	0x20000f4c

08002088 <xTaskResumeAll>:
{
 8002088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800208c:	4c31      	ldr	r4, [pc, #196]	; (8002154 <xTaskResumeAll+0xcc>)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	b943      	cbnz	r3, 80020a4 <xTaskResumeAll+0x1c>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	e7fe      	b.n	80020a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80020a4:	f7ff fb8e 	bl	80017c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ae:	6824      	ldr	r4, [r4, #0]
 80020b0:	b12c      	cbz	r4, 80020be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80020b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80020b4:	f7ff fba8 	bl	8001808 <vPortExitCritical>
}
 80020b8:	4620      	mov	r0, r4
 80020ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <xTaskResumeAll+0xd0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f5      	beq.n	80020b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002170 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80020ca:	4f24      	ldr	r7, [pc, #144]	; (800215c <xTaskResumeAll+0xd4>)
 80020cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002174 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020d0:	f8d9 3000 	ldr.w	r3, [r9]
 80020d4:	b9e3      	cbnz	r3, 8002110 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80020d6:	b10c      	cbz	r4, 80020dc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80020d8:	f7ff fdbc 	bl	8001c54 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020dc:	4d20      	ldr	r5, [pc, #128]	; (8002160 <xTaskResumeAll+0xd8>)
 80020de:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020e0:	b144      	cbz	r4, 80020f4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80020e2:	2701      	movs	r7, #1
 80020e4:	4e1f      	ldr	r6, [pc, #124]	; (8002164 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80020e6:	f7ff ff3d 	bl	8001f64 <xTaskIncrementTick>
 80020ea:	b100      	cbz	r0, 80020ee <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80020ec:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020ee:	3c01      	subs	r4, #1
 80020f0:	d1f9      	bne.n	80020e6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80020f2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <xTaskResumeAll+0xdc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0da      	beq.n	80020b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80020fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <xTaskResumeAll+0xe0>)
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800210c:	2401      	movs	r4, #1
 800210e:	e7d1      	b.n	80020b4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002110:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002114:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002116:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002118:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800211a:	f104 0018 	add.w	r0, r4, #24
 800211e:	f7ff fae9 	bl	80016f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002122:	4630      	mov	r0, r6
 8002124:	f7ff fae6 	bl	80016f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002128:	2014      	movs	r0, #20
 800212a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	fa05 f302 	lsl.w	r3, r5, r2
 8002132:	430b      	orrs	r3, r1
 8002134:	fb00 8002 	mla	r0, r0, r2, r8
 8002138:	4631      	mov	r1, r6
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	f7ff fab7 	bl	80016ae <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <xTaskResumeAll+0xe4>)
 8002142:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800214a:	bf24      	itt	cs
 800214c:	4b05      	ldrcs	r3, [pc, #20]	; (8002164 <xTaskResumeAll+0xdc>)
 800214e:	601d      	strcs	r5, [r3, #0]
 8002150:	e7be      	b.n	80020d0 <xTaskResumeAll+0x48>
 8002152:	bf00      	nop
 8002154:	20000f44 	.word	0x20000f44
 8002158:	20000f38 	.word	0x20000f38
 800215c:	20000f4c 	.word	0x20000f4c
 8002160:	20000f40 	.word	0x20000f40
 8002164:	20000fc4 	.word	0x20000fc4
 8002168:	e000ed04 	.word	0xe000ed04
 800216c:	20000ea0 	.word	0x20000ea0
 8002170:	20000f80 	.word	0x20000f80
 8002174:	20000eac 	.word	0x20000eac

08002178 <vTaskDelay>:
	{
 8002178:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800217a:	b940      	cbnz	r0, 800218e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800217c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <vTaskDelay+0x40>)
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <vTaskDelay+0x44>)
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	b141      	cbz	r1, 80021a6 <vTaskDelay+0x2e>
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	e7fe      	b.n	80021a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80021a6:	f7ff fed5 	bl	8001f54 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021aa:	f7ff fdf3 	bl	8001d94 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80021ae:	f7ff ff6b 	bl	8002088 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d0e2      	beq.n	800217c <vTaskDelay+0x4>
 80021b6:	bd08      	pop	{r3, pc}
 80021b8:	e000ed04 	.word	0xe000ed04
 80021bc:	20000f44 	.word	0x20000f44

080021c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <vTaskSwitchContext+0x60>)
{
 80021c2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <vTaskSwitchContext+0x64>)
 80021c8:	b112      	cbz	r2, 80021d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80021ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80021d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <vTaskSwitchContext+0x68>)
 80021d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	2214      	movs	r2, #20
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f1c3 031f 	rsb	r3, r3, #31
 80021e2:	435a      	muls	r2, r3
 80021e4:	4911      	ldr	r1, [pc, #68]	; (800222c <vTaskSwitchContext+0x6c>)
 80021e6:	588c      	ldr	r4, [r1, r2]
 80021e8:	1888      	adds	r0, r1, r2
 80021ea:	b944      	cbnz	r4, 80021fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	e7fe      	b.n	80021fc <vTaskSwitchContext+0x3c>
 80021fe:	6844      	ldr	r4, [r0, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	6864      	ldr	r4, [r4, #4]
 8002204:	440a      	add	r2, r1
 8002206:	4294      	cmp	r4, r2
 8002208:	bf08      	it	eq
 800220a:	6862      	ldreq	r2, [r4, #4]
 800220c:	6044      	str	r4, [r0, #4]
 800220e:	bf08      	it	eq
 8002210:	6042      	streq	r2, [r0, #4]
 8002212:	2214      	movs	r2, #20
 8002214:	fb02 1303 	mla	r3, r2, r3, r1
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <vTaskSwitchContext+0x70>)
 800221e:	e7d5      	b.n	80021cc <vTaskSwitchContext+0xc>
 8002220:	20000f44 	.word	0x20000f44
 8002224:	20000fc4 	.word	0x20000fc4
 8002228:	20000f4c 	.word	0x20000f4c
 800222c:	20000eac 	.word	0x20000eac
 8002230:	20000ea0 	.word	0x20000ea0

08002234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002236:	e003      	b.n	8002240 <LoopCopyDataInit>

08002238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800223a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800223c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800223e:	3104      	adds	r1, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002240:	480a      	ldr	r0, [pc, #40]	; (800226c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002248:	d3f6      	bcc.n	8002238 <CopyDataInit>
  ldr r2, =_sbss
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800224c:	e002      	b.n	8002254 <LoopFillZerobss>

0800224e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002250:	f842 3b04 	str.w	r3, [r2], #4

08002254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002258:	d3f9      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800225a:	f7fe f967 	bl	800052c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f000 f80f 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002262:	f7fe f8ca 	bl	80003fa <main>
  bx lr
 8002266:	4770      	bx	lr
  ldr r3, =_sidata
 8002268:	08002350 	.word	0x08002350
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002270:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002274:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002278:	200010cc 	.word	0x200010cc

0800227c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC1_2_IRQHandler>
	...

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	2500      	movs	r5, #0
 8002284:	4e0c      	ldr	r6, [pc, #48]	; (80022b8 <__libc_init_array+0x38>)
 8002286:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <__libc_init_array+0x3c>)
 8002288:	1ba4      	subs	r4, r4, r6
 800228a:	10a4      	asrs	r4, r4, #2
 800228c:	42a5      	cmp	r5, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	f000 f822 	bl	80022d8 <_init>
 8002294:	2500      	movs	r5, #0
 8002296:	4e0a      	ldr	r6, [pc, #40]	; (80022c0 <__libc_init_array+0x40>)
 8002298:	4c0a      	ldr	r4, [pc, #40]	; (80022c4 <__libc_init_array+0x44>)
 800229a:	1ba4      	subs	r4, r4, r6
 800229c:	10a4      	asrs	r4, r4, #2
 800229e:	42a5      	cmp	r5, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a8:	4798      	blx	r3
 80022aa:	3501      	adds	r5, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b2:	4798      	blx	r3
 80022b4:	3501      	adds	r5, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	08002348 	.word	0x08002348
 80022bc:	08002348 	.word	0x08002348
 80022c0:	08002348 	.word	0x08002348
 80022c4:	0800234c 	.word	0x0800234c

080022c8 <memset>:
 80022c8:	4603      	mov	r3, r0
 80022ca:	4402      	add	r2, r0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d100      	bne.n	80022d2 <memset+0xa>
 80022d0:	4770      	bx	lr
 80022d2:	f803 1b01 	strb.w	r1, [r3], #1
 80022d6:	e7f9      	b.n	80022cc <memset+0x4>

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
