
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a4  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000138  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  08004ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000010ec  2000007c  08004f24  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001168  08004f24  00021168  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019500  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004396  00000000  00000000  000395a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010b0  00000000  00000000  0003d940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013b8  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009959  00000000  00000000  0003fda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000063e1  00000000  00000000  00049701  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004fae2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003db4  00000000  00000000  0004fb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000a9ab  00000000  00000000  00053914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ab4 	.word	0x08004ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08004ab4 	.word	0x08004ab4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	; 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000220:	f1a2 0201 	sub.w	r2, r2, #1
 8000224:	d1ed      	bne.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003d2:	2afd      	cmp	r2, #253	; 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	; 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	; 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	; 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <selfrel_offset31>:
 8000620:	6803      	ldr	r3, [r0, #0]
 8000622:	005a      	lsls	r2, r3, #1
 8000624:	bf4c      	ite	mi
 8000626:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800062a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800062e:	4418      	add	r0, r3
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <search_EIT_table>:
 8000634:	b361      	cbz	r1, 8000690 <search_EIT_table+0x5c>
 8000636:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800063a:	f101 3aff 	add.w	sl, r1, #4294967295
 800063e:	4690      	mov	r8, r2
 8000640:	4606      	mov	r6, r0
 8000642:	46d1      	mov	r9, sl
 8000644:	2700      	movs	r7, #0
 8000646:	eb07 0409 	add.w	r4, r7, r9
 800064a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800064e:	1064      	asrs	r4, r4, #1
 8000650:	00e5      	lsls	r5, r4, #3
 8000652:	1971      	adds	r1, r6, r5
 8000654:	4608      	mov	r0, r1
 8000656:	f7ff ffe3 	bl	8000620 <selfrel_offset31>
 800065a:	45a2      	cmp	sl, r4
 800065c:	4683      	mov	fp, r0
 800065e:	f105 0008 	add.w	r0, r5, #8
 8000662:	4430      	add	r0, r6
 8000664:	d009      	beq.n	800067a <search_EIT_table+0x46>
 8000666:	f7ff ffdb 	bl	8000620 <selfrel_offset31>
 800066a:	45c3      	cmp	fp, r8
 800066c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000670:	d805      	bhi.n	800067e <search_EIT_table+0x4a>
 8000672:	4540      	cmp	r0, r8
 8000674:	d209      	bcs.n	800068a <search_EIT_table+0x56>
 8000676:	1c67      	adds	r7, r4, #1
 8000678:	e7e5      	b.n	8000646 <search_EIT_table+0x12>
 800067a:	45c3      	cmp	fp, r8
 800067c:	d905      	bls.n	800068a <search_EIT_table+0x56>
 800067e:	42a7      	cmp	r7, r4
 8000680:	d002      	beq.n	8000688 <search_EIT_table+0x54>
 8000682:	f104 39ff 	add.w	r9, r4, #4294967295
 8000686:	e7de      	b.n	8000646 <search_EIT_table+0x12>
 8000688:	2100      	movs	r1, #0
 800068a:	4608      	mov	r0, r1
 800068c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000690:	4608      	mov	r0, r1
 8000692:	4770      	bx	lr

08000694 <__gnu_unwind_get_pr_addr>:
 8000694:	2801      	cmp	r0, #1
 8000696:	d007      	beq.n	80006a8 <__gnu_unwind_get_pr_addr+0x14>
 8000698:	2802      	cmp	r0, #2
 800069a:	d007      	beq.n	80006ac <__gnu_unwind_get_pr_addr+0x18>
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__gnu_unwind_get_pr_addr+0x1c>)
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf0c      	ite	eq
 80006a2:	4618      	moveq	r0, r3
 80006a4:	2000      	movne	r0, #0
 80006a6:	4770      	bx	lr
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <__gnu_unwind_get_pr_addr+0x20>)
 80006aa:	4770      	bx	lr
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <__gnu_unwind_get_pr_addr+0x24>)
 80006ae:	4770      	bx	lr
 80006b0:	08000da5 	.word	0x08000da5
 80006b4:	08000da9 	.word	0x08000da9
 80006b8:	08000dad 	.word	0x08000dad

080006bc <get_eit_entry>:
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <get_eit_entry+0x98>)
 80006c0:	b083      	sub	sp, #12
 80006c2:	4604      	mov	r4, r0
 80006c4:	1e8d      	subs	r5, r1, #2
 80006c6:	b373      	cbz	r3, 8000726 <get_eit_entry+0x6a>
 80006c8:	a901      	add	r1, sp, #4
 80006ca:	4628      	mov	r0, r5
 80006cc:	f3af 8000 	nop.w
 80006d0:	b318      	cbz	r0, 800071a <get_eit_entry+0x5e>
 80006d2:	9901      	ldr	r1, [sp, #4]
 80006d4:	462a      	mov	r2, r5
 80006d6:	f7ff ffad 	bl	8000634 <search_EIT_table>
 80006da:	4601      	mov	r1, r0
 80006dc:	b1e8      	cbz	r0, 800071a <get_eit_entry+0x5e>
 80006de:	f7ff ff9f 	bl	8000620 <selfrel_offset31>
 80006e2:	684b      	ldr	r3, [r1, #4]
 80006e4:	64a0      	str	r0, [r4, #72]	; 0x48
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d011      	beq.n	800070e <get_eit_entry+0x52>
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db22      	blt.n	8000734 <get_eit_entry+0x78>
 80006ee:	1d08      	adds	r0, r1, #4
 80006f0:	f7ff ff96 	bl	8000620 <selfrel_offset31>
 80006f4:	2300      	movs	r3, #0
 80006f6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006f8:	6523      	str	r3, [r4, #80]	; 0x50
 80006fa:	6803      	ldr	r3, [r0, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db1e      	blt.n	800073e <get_eit_entry+0x82>
 8000700:	f7ff ff8e 	bl	8000620 <selfrel_offset31>
 8000704:	2300      	movs	r3, #0
 8000706:	6120      	str	r0, [r4, #16]
 8000708:	4618      	mov	r0, r3
 800070a:	b003      	add	sp, #12
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	2305      	movs	r3, #5
 8000710:	2200      	movs	r2, #0
 8000712:	4618      	mov	r0, r3
 8000714:	6122      	str	r2, [r4, #16]
 8000716:	b003      	add	sp, #12
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	2309      	movs	r3, #9
 800071c:	2200      	movs	r2, #0
 800071e:	4618      	mov	r0, r3
 8000720:	6122      	str	r2, [r4, #16]
 8000722:	b003      	add	sp, #12
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <get_eit_entry+0x9c>)
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <get_eit_entry+0xa0>)
 800072a:	4618      	mov	r0, r3
 800072c:	1ac9      	subs	r1, r1, r3
 800072e:	10c9      	asrs	r1, r1, #3
 8000730:	9101      	str	r1, [sp, #4]
 8000732:	e7cf      	b.n	80006d4 <get_eit_entry+0x18>
 8000734:	2301      	movs	r3, #1
 8000736:	1d08      	adds	r0, r1, #4
 8000738:	64e0      	str	r0, [r4, #76]	; 0x4c
 800073a:	6523      	str	r3, [r4, #80]	; 0x50
 800073c:	e7dd      	b.n	80006fa <get_eit_entry+0x3e>
 800073e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000742:	f7ff ffa7 	bl	8000694 <__gnu_unwind_get_pr_addr>
 8000746:	2800      	cmp	r0, #0
 8000748:	6120      	str	r0, [r4, #16]
 800074a:	bf14      	ite	ne
 800074c:	2300      	movne	r3, #0
 800074e:	2309      	moveq	r3, #9
 8000750:	e7da      	b.n	8000708 <get_eit_entry+0x4c>
 8000752:	bf00      	nop
 8000754:	00000000 	.word	0x00000000
 8000758:	08004d68 	.word	0x08004d68
 800075c:	08004ea0 	.word	0x08004ea0

08000760 <restore_non_core_regs>:
 8000760:	6803      	ldr	r3, [r0, #0]
 8000762:	b510      	push	{r4, lr}
 8000764:	07da      	lsls	r2, r3, #31
 8000766:	4604      	mov	r4, r0
 8000768:	d406      	bmi.n	8000778 <restore_non_core_regs+0x18>
 800076a:	079b      	lsls	r3, r3, #30
 800076c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000770:	d509      	bpl.n	8000786 <restore_non_core_regs+0x26>
 8000772:	f000 fc57 	bl	8001024 <__gnu_Unwind_Restore_VFP_D>
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	0759      	lsls	r1, r3, #29
 800077a:	d509      	bpl.n	8000790 <restore_non_core_regs+0x30>
 800077c:	071a      	lsls	r2, r3, #28
 800077e:	d50e      	bpl.n	800079e <restore_non_core_regs+0x3e>
 8000780:	06db      	lsls	r3, r3, #27
 8000782:	d513      	bpl.n	80007ac <restore_non_core_regs+0x4c>
 8000784:	bd10      	pop	{r4, pc}
 8000786:	f000 fc45 	bl	8001014 <__gnu_Unwind_Restore_VFP>
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	0759      	lsls	r1, r3, #29
 800078e:	d4f5      	bmi.n	800077c <restore_non_core_regs+0x1c>
 8000790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000794:	f000 fc4e 	bl	8001034 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	071a      	lsls	r2, r3, #28
 800079c:	d4f0      	bmi.n	8000780 <restore_non_core_regs+0x20>
 800079e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80007a2:	f000 fc4f 	bl	8001044 <__gnu_Unwind_Restore_WMMXD>
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	06db      	lsls	r3, r3, #27
 80007aa:	d4eb      	bmi.n	8000784 <restore_non_core_regs+0x24>
 80007ac:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80007b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b4:	f000 bc8a 	b.w	80010cc <__gnu_Unwind_Restore_WMMXC>

080007b8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80007b8:	6803      	ldr	r3, [r0, #0]
 80007ba:	b103      	cbz	r3, 80007be <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80007bc:	4403      	add	r3, r0
 80007be:	4618      	mov	r0, r3
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <__gnu_unwind_24bit.isra.1>:
 80007c4:	2009      	movs	r0, #9
 80007c6:	4770      	bx	lr

080007c8 <_Unwind_DebugHook>:
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <unwind_phase2>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4604      	mov	r4, r0
 80007d0:	460d      	mov	r5, r1
 80007d2:	e008      	b.n	80007e6 <unwind_phase2+0x1a>
 80007d4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007d6:	6923      	ldr	r3, [r4, #16]
 80007d8:	6162      	str	r2, [r4, #20]
 80007da:	4621      	mov	r1, r4
 80007dc:	462a      	mov	r2, r5
 80007de:	2001      	movs	r0, #1
 80007e0:	4798      	blx	r3
 80007e2:	2808      	cmp	r0, #8
 80007e4:	d108      	bne.n	80007f8 <unwind_phase2+0x2c>
 80007e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007e8:	4620      	mov	r0, r4
 80007ea:	f7ff ff67 	bl	80006bc <get_eit_entry>
 80007ee:	4606      	mov	r6, r0
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d0ef      	beq.n	80007d4 <unwind_phase2+0x8>
 80007f4:	f004 f87e 	bl	80048f4 <abort>
 80007f8:	2807      	cmp	r0, #7
 80007fa:	d1fb      	bne.n	80007f4 <unwind_phase2+0x28>
 80007fc:	4630      	mov	r0, r6
 80007fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000800:	f7ff ffe2 	bl	80007c8 <_Unwind_DebugHook>
 8000804:	1d28      	adds	r0, r5, #4
 8000806:	f000 fbf9 	bl	8000ffc <__restore_core_regs>
 800080a:	bf00      	nop

0800080c <unwind_phase2_forced>:
 800080c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000810:	4605      	mov	r5, r0
 8000812:	2700      	movs	r7, #0
 8000814:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000818:	ac03      	add	r4, sp, #12
 800081a:	1d0e      	adds	r6, r1, #4
 800081c:	4692      	mov	sl, r2
 800081e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000822:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800082e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000832:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800083a:	ac02      	add	r4, sp, #8
 800083c:	4628      	mov	r0, r5
 800083e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000840:	6027      	str	r7, [r4, #0]
 8000842:	f7ff ff3b 	bl	80006bc <get_eit_entry>
 8000846:	f1ba 0f00 	cmp.w	sl, #0
 800084a:	4607      	mov	r7, r0
 800084c:	bf14      	ite	ne
 800084e:	260a      	movne	r6, #10
 8000850:	2609      	moveq	r6, #9
 8000852:	b17f      	cbz	r7, 8000874 <unwind_phase2_forced+0x68>
 8000854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000856:	f046 0110 	orr.w	r1, r6, #16
 800085a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800085e:	462a      	mov	r2, r5
 8000860:	6463      	str	r3, [r4, #68]	; 0x44
 8000862:	2001      	movs	r0, #1
 8000864:	462b      	mov	r3, r5
 8000866:	47c0      	blx	r8
 8000868:	bb78      	cbnz	r0, 80008ca <unwind_phase2_forced+0xbe>
 800086a:	4638      	mov	r0, r7
 800086c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000876:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800087a:	616b      	str	r3, [r5, #20]
 800087c:	4621      	mov	r1, r4
 800087e:	a87a      	add	r0, sp, #488	; 0x1e8
 8000880:	f004 f872 	bl	8004968 <memcpy>
 8000884:	692b      	ldr	r3, [r5, #16]
 8000886:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000888:	4629      	mov	r1, r5
 800088a:	4630      	mov	r0, r6
 800088c:	4798      	blx	r3
 800088e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000890:	4682      	mov	sl, r0
 8000892:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000896:	4631      	mov	r1, r6
 8000898:	6463      	str	r3, [r4, #68]	; 0x44
 800089a:	462a      	mov	r2, r5
 800089c:	462b      	mov	r3, r5
 800089e:	2001      	movs	r0, #1
 80008a0:	47c0      	blx	r8
 80008a2:	b990      	cbnz	r0, 80008ca <unwind_phase2_forced+0xbe>
 80008a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80008a8:	a97a      	add	r1, sp, #488	; 0x1e8
 80008aa:	4620      	mov	r0, r4
 80008ac:	f004 f85c 	bl	8004968 <memcpy>
 80008b0:	f1ba 0f08 	cmp.w	sl, #8
 80008b4:	d106      	bne.n	80008c4 <unwind_phase2_forced+0xb8>
 80008b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008b8:	4628      	mov	r0, r5
 80008ba:	f7ff feff 	bl	80006bc <get_eit_entry>
 80008be:	2609      	movs	r6, #9
 80008c0:	4607      	mov	r7, r0
 80008c2:	e7c6      	b.n	8000852 <unwind_phase2_forced+0x46>
 80008c4:	f1ba 0f07 	cmp.w	sl, #7
 80008c8:	d005      	beq.n	80008d6 <unwind_phase2_forced+0xca>
 80008ca:	2709      	movs	r7, #9
 80008cc:	4638      	mov	r0, r7
 80008ce:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	4638      	mov	r0, r7
 80008d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008da:	f7ff ff75 	bl	80007c8 <_Unwind_DebugHook>
 80008de:	a803      	add	r0, sp, #12
 80008e0:	f000 fb8c 	bl	8000ffc <__restore_core_regs>

080008e4 <_Unwind_GetCFA>:
 80008e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80008e6:	4770      	bx	lr

080008e8 <__gnu_Unwind_RaiseException>:
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	f04f 3eff 	mov.w	lr, #4294967295
 80008ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80008f0:	b0f9      	sub	sp, #484	; 0x1e4
 80008f2:	640b      	str	r3, [r1, #64]	; 0x40
 80008f4:	1d0e      	adds	r6, r1, #4
 80008f6:	ad01      	add	r5, sp, #4
 80008f8:	460f      	mov	r7, r1
 80008fa:	4604      	mov	r4, r0
 80008fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000904:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800090c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000910:	f8cd e000 	str.w	lr, [sp]
 8000914:	e006      	b.n	8000924 <__gnu_Unwind_RaiseException+0x3c>
 8000916:	6923      	ldr	r3, [r4, #16]
 8000918:	466a      	mov	r2, sp
 800091a:	4621      	mov	r1, r4
 800091c:	4798      	blx	r3
 800091e:	2808      	cmp	r0, #8
 8000920:	4605      	mov	r5, r0
 8000922:	d108      	bne.n	8000936 <__gnu_Unwind_RaiseException+0x4e>
 8000924:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000926:	4620      	mov	r0, r4
 8000928:	f7ff fec8 	bl	80006bc <get_eit_entry>
 800092c:	2800      	cmp	r0, #0
 800092e:	d0f2      	beq.n	8000916 <__gnu_Unwind_RaiseException+0x2e>
 8000930:	2009      	movs	r0, #9
 8000932:	b079      	add	sp, #484	; 0x1e4
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	4668      	mov	r0, sp
 8000938:	f7ff ff12 	bl	8000760 <restore_non_core_regs>
 800093c:	2d06      	cmp	r5, #6
 800093e:	d1f7      	bne.n	8000930 <__gnu_Unwind_RaiseException+0x48>
 8000940:	4639      	mov	r1, r7
 8000942:	4620      	mov	r0, r4
 8000944:	f7ff ff42 	bl	80007cc <unwind_phase2>

08000948 <__gnu_Unwind_ForcedUnwind>:
 8000948:	b430      	push	{r4, r5}
 800094a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800094c:	60c1      	str	r1, [r0, #12]
 800094e:	6182      	str	r2, [r0, #24]
 8000950:	4619      	mov	r1, r3
 8000952:	641d      	str	r5, [r3, #64]	; 0x40
 8000954:	2200      	movs	r2, #0
 8000956:	bc30      	pop	{r4, r5}
 8000958:	e758      	b.n	800080c <unwind_phase2_forced>
 800095a:	bf00      	nop

0800095c <__gnu_Unwind_Resume>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	6943      	ldr	r3, [r0, #20]
 8000960:	68c6      	ldr	r6, [r0, #12]
 8000962:	640b      	str	r3, [r1, #64]	; 0x40
 8000964:	b126      	cbz	r6, 8000970 <__gnu_Unwind_Resume+0x14>
 8000966:	2201      	movs	r2, #1
 8000968:	f7ff ff50 	bl	800080c <unwind_phase2_forced>
 800096c:	f003 ffc2 	bl	80048f4 <abort>
 8000970:	6903      	ldr	r3, [r0, #16]
 8000972:	460a      	mov	r2, r1
 8000974:	4604      	mov	r4, r0
 8000976:	460d      	mov	r5, r1
 8000978:	4601      	mov	r1, r0
 800097a:	2002      	movs	r0, #2
 800097c:	4798      	blx	r3
 800097e:	2807      	cmp	r0, #7
 8000980:	d007      	beq.n	8000992 <__gnu_Unwind_Resume+0x36>
 8000982:	2808      	cmp	r0, #8
 8000984:	d103      	bne.n	800098e <__gnu_Unwind_Resume+0x32>
 8000986:	4629      	mov	r1, r5
 8000988:	4620      	mov	r0, r4
 800098a:	f7ff ff1f 	bl	80007cc <unwind_phase2>
 800098e:	f003 ffb1 	bl	80048f4 <abort>
 8000992:	4630      	mov	r0, r6
 8000994:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000996:	f7ff ff17 	bl	80007c8 <_Unwind_DebugHook>
 800099a:	1d28      	adds	r0, r5, #4
 800099c:	f000 fb2e 	bl	8000ffc <__restore_core_regs>

080009a0 <__gnu_Unwind_Resume_or_Rethrow>:
 80009a0:	68c2      	ldr	r2, [r0, #12]
 80009a2:	b12a      	cbz	r2, 80009b0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80009a4:	b410      	push	{r4}
 80009a6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80009a8:	2200      	movs	r2, #0
 80009aa:	640c      	str	r4, [r1, #64]	; 0x40
 80009ac:	bc10      	pop	{r4}
 80009ae:	e72d      	b.n	800080c <unwind_phase2_forced>
 80009b0:	e79a      	b.n	80008e8 <__gnu_Unwind_RaiseException>
 80009b2:	bf00      	nop

080009b4 <_Unwind_Complete>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <_Unwind_DeleteException>:
 80009b8:	6883      	ldr	r3, [r0, #8]
 80009ba:	b113      	cbz	r3, 80009c2 <_Unwind_DeleteException+0xa>
 80009bc:	4601      	mov	r1, r0
 80009be:	2001      	movs	r0, #1
 80009c0:	4718      	bx	r3
 80009c2:	4770      	bx	lr

080009c4 <_Unwind_VRS_Get>:
 80009c4:	b500      	push	{lr}
 80009c6:	2904      	cmp	r1, #4
 80009c8:	d807      	bhi.n	80009da <_Unwind_VRS_Get+0x16>
 80009ca:	e8df f001 	tbb	[pc, r1]
 80009ce:	0903      	.short	0x0903
 80009d0:	0906      	.short	0x0906
 80009d2:	09          	.byte	0x09
 80009d3:	00          	.byte	0x00
 80009d4:	b90b      	cbnz	r3, 80009da <_Unwind_VRS_Get+0x16>
 80009d6:	2a0f      	cmp	r2, #15
 80009d8:	d905      	bls.n	80009e6 <_Unwind_VRS_Get+0x22>
 80009da:	2002      	movs	r0, #2
 80009dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80009e0:	2001      	movs	r0, #1
 80009e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009ea:	6852      	ldr	r2, [r2, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f6:	bf00      	nop

080009f8 <_Unwind_GetGR>:
 80009f8:	2300      	movs	r3, #0
 80009fa:	b510      	push	{r4, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	ac03      	add	r4, sp, #12
 8000a00:	460a      	mov	r2, r1
 8000a02:	9400      	str	r4, [sp, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f7ff ffdd 	bl	80009c4 <_Unwind_VRS_Get>
 8000a0a:	9803      	ldr	r0, [sp, #12]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	bd10      	pop	{r4, pc}

08000a10 <_Unwind_VRS_Set>:
 8000a10:	b500      	push	{lr}
 8000a12:	2904      	cmp	r1, #4
 8000a14:	d807      	bhi.n	8000a26 <_Unwind_VRS_Set+0x16>
 8000a16:	e8df f001 	tbb	[pc, r1]
 8000a1a:	0903      	.short	0x0903
 8000a1c:	0906      	.short	0x0906
 8000a1e:	09          	.byte	0x09
 8000a1f:	00          	.byte	0x00
 8000a20:	b90b      	cbnz	r3, 8000a26 <_Unwind_VRS_Set+0x16>
 8000a22:	2a0f      	cmp	r2, #15
 8000a24:	d905      	bls.n	8000a32 <_Unwind_VRS_Set+0x22>
 8000a26:	2002      	movs	r0, #2
 8000a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a32:	9901      	ldr	r1, [sp, #4]
 8000a34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000a38:	6809      	ldr	r1, [r1, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	6051      	str	r1, [r2, #4]
 8000a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a42:	bf00      	nop

08000a44 <_Unwind_SetGR>:
 8000a44:	2300      	movs	r3, #0
 8000a46:	b510      	push	{r4, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	ac04      	add	r4, sp, #16
 8000a4c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000a50:	9400      	str	r4, [sp, #0]
 8000a52:	460a      	mov	r2, r1
 8000a54:	4619      	mov	r1, r3
 8000a56:	f7ff ffdb 	bl	8000a10 <_Unwind_VRS_Set>
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	bf00      	nop

08000a60 <__gnu_Unwind_Backtrace>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	f04f 3eff 	mov.w	lr, #4294967295
 8000a66:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a68:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	1d15      	adds	r5, r2, #4
 8000a70:	ac17      	add	r4, sp, #92	; 0x5c
 8000a72:	4607      	mov	r7, r0
 8000a74:	460e      	mov	r6, r1
 8000a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a8a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000a8e:	e012      	b.n	8000ab6 <__gnu_Unwind_Backtrace+0x56>
 8000a90:	210c      	movs	r1, #12
 8000a92:	a816      	add	r0, sp, #88	; 0x58
 8000a94:	466a      	mov	r2, sp
 8000a96:	f7ff ffd5 	bl	8000a44 <_Unwind_SetGR>
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	a816      	add	r0, sp, #88	; 0x58
 8000a9e:	47b8      	blx	r7
 8000aa0:	b978      	cbnz	r0, 8000ac2 <__gnu_Unwind_Backtrace+0x62>
 8000aa2:	9b04      	ldr	r3, [sp, #16]
 8000aa4:	aa16      	add	r2, sp, #88	; 0x58
 8000aa6:	4669      	mov	r1, sp
 8000aa8:	2008      	movs	r0, #8
 8000aaa:	4798      	blx	r3
 8000aac:	2805      	cmp	r0, #5
 8000aae:	4604      	mov	r4, r0
 8000ab0:	d008      	beq.n	8000ac4 <__gnu_Unwind_Backtrace+0x64>
 8000ab2:	2809      	cmp	r0, #9
 8000ab4:	d005      	beq.n	8000ac2 <__gnu_Unwind_Backtrace+0x62>
 8000ab6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f7ff fdff 	bl	80006bc <get_eit_entry>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d0e6      	beq.n	8000a90 <__gnu_Unwind_Backtrace+0x30>
 8000ac2:	2409      	movs	r4, #9
 8000ac4:	a816      	add	r0, sp, #88	; 0x58
 8000ac6:	f7ff fe4b 	bl	8000760 <restore_non_core_regs>
 8000aca:	4620      	mov	r0, r4
 8000acc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	bf00      	nop

08000ad4 <__gnu_unwind_pr_common>:
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000ada:	4691      	mov	r9, r2
 8000adc:	6822      	ldr	r2, [r4, #0]
 8000ade:	b08b      	sub	sp, #44	; 0x2c
 8000ae0:	3404      	adds	r4, #4
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	9207      	str	r2, [sp, #28]
 8000ae6:	9408      	str	r4, [sp, #32]
 8000ae8:	f000 0b03 	and.w	fp, r0, #3
 8000aec:	461e      	mov	r6, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d160      	bne.n	8000bb4 <__gnu_unwind_pr_common+0xe0>
 8000af2:	2303      	movs	r3, #3
 8000af4:	0212      	lsls	r2, r2, #8
 8000af6:	9207      	str	r2, [sp, #28]
 8000af8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000afc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b00:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b02:	f1bb 0f02 	cmp.w	fp, #2
 8000b06:	bf08      	it	eq
 8000b08:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000b0a:	f013 0301 	ands.w	r3, r3, #1
 8000b0e:	d140      	bne.n	8000b92 <__gnu_unwind_pr_common+0xbe>
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	f000 0308 	and.w	r3, r0, #8
 8000b16:	9303      	str	r3, [sp, #12]
 8000b18:	f8d4 8000 	ldr.w	r8, [r4]
 8000b1c:	f1b8 0f00 	cmp.w	r8, #0
 8000b20:	d039      	beq.n	8000b96 <__gnu_unwind_pr_common+0xc2>
 8000b22:	2e02      	cmp	r6, #2
 8000b24:	d043      	beq.n	8000bae <__gnu_unwind_pr_common+0xda>
 8000b26:	f8b4 8000 	ldrh.w	r8, [r4]
 8000b2a:	8867      	ldrh	r7, [r4, #2]
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000b30:	f027 0a01 	bic.w	sl, r7, #1
 8000b34:	210f      	movs	r1, #15
 8000b36:	4648      	mov	r0, r9
 8000b38:	449a      	add	sl, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <_Unwind_GetGR>
 8000b3e:	4582      	cmp	sl, r0
 8000b40:	d833      	bhi.n	8000baa <__gnu_unwind_pr_common+0xd6>
 8000b42:	f028 0301 	bic.w	r3, r8, #1
 8000b46:	449a      	add	sl, r3
 8000b48:	4550      	cmp	r0, sl
 8000b4a:	bf2c      	ite	cs
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	2001      	movcc	r0, #1
 8000b50:	007f      	lsls	r7, r7, #1
 8000b52:	f007 0702 	and.w	r7, r7, #2
 8000b56:	f008 0801 	and.w	r8, r8, #1
 8000b5a:	ea47 0708 	orr.w	r7, r7, r8
 8000b5e:	2f01      	cmp	r7, #1
 8000b60:	d03e      	beq.n	8000be0 <__gnu_unwind_pr_common+0x10c>
 8000b62:	d335      	bcc.n	8000bd0 <__gnu_unwind_pr_common+0xfc>
 8000b64:	2f02      	cmp	r7, #2
 8000b66:	d11c      	bne.n	8000ba2 <__gnu_unwind_pr_common+0xce>
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b6e:	9202      	str	r2, [sp, #8]
 8000b70:	f1bb 0f00 	cmp.w	fp, #0
 8000b74:	d176      	bne.n	8000c64 <__gnu_unwind_pr_common+0x190>
 8000b76:	b128      	cbz	r0, 8000b84 <__gnu_unwind_pr_common+0xb0>
 8000b78:	9903      	ldr	r1, [sp, #12]
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d07e      	beq.n	8000c7c <__gnu_unwind_pr_common+0x1a8>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	f000 80a6 	beq.w	8000cd0 <__gnu_unwind_pr_common+0x1fc>
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db77      	blt.n	8000c78 <__gnu_unwind_pr_common+0x1a4>
 8000b88:	9b02      	ldr	r3, [sp, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000b90:	e7c2      	b.n	8000b18 <__gnu_unwind_pr_common+0x44>
 8000b92:	2300      	movs	r3, #0
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2e02      	cmp	r6, #2
 8000b98:	dd3e      	ble.n	8000c18 <__gnu_unwind_pr_common+0x144>
 8000b9a:	f7ff fe13 	bl	80007c4 <__gnu_unwind_24bit.isra.1>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d040      	beq.n	8000c24 <__gnu_unwind_pr_common+0x150>
 8000ba2:	2009      	movs	r0, #9
 8000ba4:	b00b      	add	sp, #44	; 0x2c
 8000ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000baa:	2000      	movs	r0, #0
 8000bac:	e7d0      	b.n	8000b50 <__gnu_unwind_pr_common+0x7c>
 8000bae:	6867      	ldr	r7, [r4, #4]
 8000bb0:	3408      	adds	r4, #8
 8000bb2:	e7bc      	b.n	8000b2e <__gnu_unwind_pr_common+0x5a>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	dca3      	bgt.n	8000b00 <__gnu_unwind_pr_common+0x2c>
 8000bb8:	2102      	movs	r1, #2
 8000bba:	0c13      	lsrs	r3, r2, #16
 8000bbc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000bc0:	0412      	lsls	r2, r2, #16
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000bc8:	9207      	str	r2, [sp, #28]
 8000bca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000bce:	e797      	b.n	8000b00 <__gnu_unwind_pr_common+0x2c>
 8000bd0:	f1bb 0f00 	cmp.w	fp, #0
 8000bd4:	d002      	beq.n	8000bdc <__gnu_unwind_pr_common+0x108>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	f040 80bd 	bne.w	8000d56 <__gnu_unwind_pr_common+0x282>
 8000bdc:	3404      	adds	r4, #4
 8000bde:	e79b      	b.n	8000b18 <__gnu_unwind_pr_common+0x44>
 8000be0:	f1bb 0f00 	cmp.w	fp, #0
 8000be4:	d125      	bne.n	8000c32 <__gnu_unwind_pr_common+0x15e>
 8000be6:	b1a8      	cbz	r0, 8000c14 <__gnu_unwind_pr_common+0x140>
 8000be8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000bec:	1c99      	adds	r1, r3, #2
 8000bee:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000bf2:	d0d6      	beq.n	8000ba2 <__gnu_unwind_pr_common+0xce>
 8000bf4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	9106      	str	r1, [sp, #24]
 8000bfc:	f000 80a3 	beq.w	8000d46 <__gnu_unwind_pr_common+0x272>
 8000c00:	1d20      	adds	r0, r4, #4
 8000c02:	f7ff fdd9 	bl	80007b8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c06:	ab06      	add	r3, sp, #24
 8000c08:	4601      	mov	r1, r0
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f003 fa0e 	bl	800402c <__cxa_type_match>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d177      	bne.n	8000d04 <__gnu_unwind_pr_common+0x230>
 8000c14:	3408      	adds	r4, #8
 8000c16:	e77f      	b.n	8000b18 <__gnu_unwind_pr_common+0x44>
 8000c18:	a907      	add	r1, sp, #28
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	f000 faf0 	bl	8001200 <__gnu_unwind_execute>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d1be      	bne.n	8000ba2 <__gnu_unwind_pr_common+0xce>
 8000c24:	9b01      	ldr	r3, [sp, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d15c      	bne.n	8000ce4 <__gnu_unwind_pr_common+0x210>
 8000c2a:	2008      	movs	r0, #8
 8000c2c:	b00b      	add	sp, #44	; 0x2c
 8000c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c32:	210d      	movs	r1, #13
 8000c34:	4648      	mov	r0, r9
 8000c36:	6a2f      	ldr	r7, [r5, #32]
 8000c38:	f7ff fede 	bl	80009f8 <_Unwind_GetGR>
 8000c3c:	4287      	cmp	r7, r0
 8000c3e:	d1e9      	bne.n	8000c14 <__gnu_unwind_pr_common+0x140>
 8000c40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d1e6      	bne.n	8000c14 <__gnu_unwind_pr_common+0x140>
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fcea 	bl	8000620 <selfrel_offset31>
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	4602      	mov	r2, r0
 8000c50:	4648      	mov	r0, r9
 8000c52:	f7ff fef7 	bl	8000a44 <_Unwind_SetGR>
 8000c56:	4648      	mov	r0, r9
 8000c58:	462a      	mov	r2, r5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f7ff fef2 	bl	8000a44 <_Unwind_SetGR>
 8000c60:	2007      	movs	r0, #7
 8000c62:	e79f      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000c64:	210d      	movs	r1, #13
 8000c66:	4648      	mov	r0, r9
 8000c68:	6a2f      	ldr	r7, [r5, #32]
 8000c6a:	f7ff fec5 	bl	80009f8 <_Unwind_GetGR>
 8000c6e:	4287      	cmp	r7, r0
 8000c70:	d058      	beq.n	8000d24 <__gnu_unwind_pr_common+0x250>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da87      	bge.n	8000b88 <__gnu_unwind_pr_common+0xb4>
 8000c78:	3404      	adds	r4, #4
 8000c7a:	e785      	b.n	8000b88 <__gnu_unwind_pr_common+0xb4>
 8000c7c:	9b02      	ldr	r3, [sp, #8]
 8000c7e:	b33b      	cbz	r3, 8000cd0 <__gnu_unwind_pr_common+0x1fc>
 8000c80:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000c84:	1d27      	adds	r7, r4, #4
 8000c86:	f8cd b010 	str.w	fp, [sp, #16]
 8000c8a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c8e:	46a3      	mov	fp, r4
 8000c90:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000c94:	461c      	mov	r4, r3
 8000c96:	9605      	str	r6, [sp, #20]
 8000c98:	e002      	b.n	8000ca0 <__gnu_unwind_pr_common+0x1cc>
 8000c9a:	45b2      	cmp	sl, r6
 8000c9c:	46b0      	mov	r8, r6
 8000c9e:	d016      	beq.n	8000cce <__gnu_unwind_pr_common+0x1fa>
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	9406      	str	r4, [sp, #24]
 8000ca4:	f7ff fd88 	bl	80007b8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ca8:	ab06      	add	r3, sp, #24
 8000caa:	4601      	mov	r1, r0
 8000cac:	2200      	movs	r2, #0
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f003 f9bc 	bl	800402c <__cxa_type_match>
 8000cb4:	f108 0601 	add.w	r6, r8, #1
 8000cb8:	3704      	adds	r7, #4
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d0ed      	beq.n	8000c9a <__gnu_unwind_pr_common+0x1c6>
 8000cbe:	9b02      	ldr	r3, [sp, #8]
 8000cc0:	465c      	mov	r4, fp
 8000cc2:	4543      	cmp	r3, r8
 8000cc4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000cc8:	9e05      	ldr	r6, [sp, #20]
 8000cca:	d1d2      	bne.n	8000c72 <__gnu_unwind_pr_common+0x19e>
 8000ccc:	e000      	b.n	8000cd0 <__gnu_unwind_pr_common+0x1fc>
 8000cce:	465c      	mov	r4, fp
 8000cd0:	4648      	mov	r0, r9
 8000cd2:	210d      	movs	r1, #13
 8000cd4:	f7ff fe90 	bl	80009f8 <_Unwind_GetGR>
 8000cd8:	9b06      	ldr	r3, [sp, #24]
 8000cda:	6228      	str	r0, [r5, #32]
 8000cdc:	62ac      	str	r4, [r5, #40]	; 0x28
 8000cde:	626b      	str	r3, [r5, #36]	; 0x24
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	e75f      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	f7ff fe86 	bl	80009f8 <_Unwind_GetGR>
 8000cec:	210e      	movs	r1, #14
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	f7ff fea7 	bl	8000a44 <_Unwind_SetGR>
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <__gnu_unwind_pr_common+0x2cc>)
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	f7ff fea2 	bl	8000a44 <_Unwind_SetGR>
 8000d00:	2007      	movs	r0, #7
 8000d02:	e74f      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000d04:	4607      	mov	r7, r0
 8000d06:	210d      	movs	r1, #13
 8000d08:	4648      	mov	r0, r9
 8000d0a:	f7ff fe75 	bl	80009f8 <_Unwind_GetGR>
 8000d0e:	2f02      	cmp	r7, #2
 8000d10:	6228      	str	r0, [r5, #32]
 8000d12:	d11d      	bne.n	8000d50 <__gnu_unwind_pr_common+0x27c>
 8000d14:	462b      	mov	r3, r5
 8000d16:	9a06      	ldr	r2, [sp, #24]
 8000d18:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000d1c:	626b      	str	r3, [r5, #36]	; 0x24
 8000d1e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000d20:	2006      	movs	r0, #6
 8000d22:	e73f      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000d24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d1a3      	bne.n	8000c72 <__gnu_unwind_pr_common+0x19e>
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	9902      	ldr	r1, [sp, #8]
 8000d30:	18a3      	adds	r3, r4, r2
 8000d32:	62a9      	str	r1, [r5, #40]	; 0x28
 8000d34:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000d36:	632a      	str	r2, [r5, #48]	; 0x30
 8000d38:	636b      	str	r3, [r5, #52]	; 0x34
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	42bb      	cmp	r3, r7
 8000d3e:	db1d      	blt.n	8000d7c <__gnu_unwind_pr_common+0x2a8>
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	e720      	b.n	8000b88 <__gnu_unwind_pr_common+0xb4>
 8000d46:	4648      	mov	r0, r9
 8000d48:	210d      	movs	r1, #13
 8000d4a:	f7ff fe55 	bl	80009f8 <_Unwind_GetGR>
 8000d4e:	6228      	str	r0, [r5, #32]
 8000d50:	9b06      	ldr	r3, [sp, #24]
 8000d52:	626b      	str	r3, [r5, #36]	; 0x24
 8000d54:	e7e3      	b.n	8000d1e <__gnu_unwind_pr_common+0x24a>
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff fc62 	bl	8000620 <selfrel_offset31>
 8000d5c:	3404      	adds	r4, #4
 8000d5e:	4606      	mov	r6, r0
 8000d60:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d62:	4628      	mov	r0, r5
 8000d64:	f003 f9c0 	bl	80040e8 <__cxa_begin_cleanup>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	f43f af1a 	beq.w	8000ba2 <__gnu_unwind_pr_common+0xce>
 8000d6e:	4648      	mov	r0, r9
 8000d70:	4632      	mov	r2, r6
 8000d72:	210f      	movs	r1, #15
 8000d74:	f7ff fe66 	bl	8000a44 <_Unwind_SetGR>
 8000d78:	2007      	movs	r0, #7
 8000d7a:	e713      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	3001      	adds	r0, #1
 8000d80:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000d84:	f7ff fc4c 	bl	8000620 <selfrel_offset31>
 8000d88:	210f      	movs	r1, #15
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	4648      	mov	r0, r9
 8000d8e:	f7ff fe59 	bl	8000a44 <_Unwind_SetGR>
 8000d92:	4648      	mov	r0, r9
 8000d94:	462a      	mov	r2, r5
 8000d96:	4639      	mov	r1, r7
 8000d98:	f7ff fe54 	bl	8000a44 <_Unwind_SetGR>
 8000d9c:	2007      	movs	r0, #7
 8000d9e:	e701      	b.n	8000ba4 <__gnu_unwind_pr_common+0xd0>
 8000da0:	080047ed 	.word	0x080047ed

08000da4 <__aeabi_unwind_cpp_pr0>:
 8000da4:	2300      	movs	r3, #0
 8000da6:	e695      	b.n	8000ad4 <__gnu_unwind_pr_common>

08000da8 <__aeabi_unwind_cpp_pr1>:
 8000da8:	2301      	movs	r3, #1
 8000daa:	e693      	b.n	8000ad4 <__gnu_unwind_pr_common>

08000dac <__aeabi_unwind_cpp_pr2>:
 8000dac:	2302      	movs	r3, #2
 8000dae:	e691      	b.n	8000ad4 <__gnu_unwind_pr_common>

08000db0 <_Unwind_VRS_Pop>:
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db2:	4604      	mov	r4, r0
 8000db4:	b0c5      	sub	sp, #276	; 0x114
 8000db6:	2904      	cmp	r1, #4
 8000db8:	d80d      	bhi.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000dba:	e8df f001 	tbb	[pc, r1]
 8000dbe:	0355      	.short	0x0355
 8000dc0:	310c      	.short	0x310c
 8000dc2:	0f          	.byte	0x0f
 8000dc3:	00          	.byte	0x00
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000dca:	b295      	uxth	r5, r2
 8000dcc:	d164      	bne.n	8000e98 <_Unwind_VRS_Pop+0xe8>
 8000dce:	1972      	adds	r2, r6, r5
 8000dd0:	2a10      	cmp	r2, #16
 8000dd2:	f240 809d 	bls.w	8000f10 <_Unwind_VRS_Pop+0x160>
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	b045      	add	sp, #276	; 0x114
 8000dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1fa      	bne.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000de0:	2a10      	cmp	r2, #16
 8000de2:	d8f8      	bhi.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	06d8      	lsls	r0, r3, #27
 8000de8:	f100 80c8 	bmi.w	8000f7c <_Unwind_VRS_Pop+0x1cc>
 8000dec:	ae22      	add	r6, sp, #136	; 0x88
 8000dee:	4630      	mov	r0, r6
 8000df0:	9201      	str	r2, [sp, #4]
 8000df2:	2501      	movs	r5, #1
 8000df4:	f000 f974 	bl	80010e0 <__gnu_Unwind_Save_WMMXC>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000dfc:	9a01      	ldr	r2, [sp, #4]
 8000dfe:	fa05 f103 	lsl.w	r1, r5, r3
 8000e02:	4211      	tst	r1, r2
 8000e04:	d003      	beq.n	8000e0e <_Unwind_VRS_Pop+0x5e>
 8000e06:	6801      	ldr	r1, [r0, #0]
 8000e08:	3004      	adds	r0, #4
 8000e0a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d1f4      	bne.n	8000dfe <_Unwind_VRS_Pop+0x4e>
 8000e14:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e16:	4630      	mov	r0, r6
 8000e18:	f000 f958 	bl	80010cc <__gnu_Unwind_Restore_WMMXC>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e7db      	b.n	8000dd8 <_Unwind_VRS_Pop+0x28>
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d1d8      	bne.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000e24:	0c15      	lsrs	r5, r2, #16
 8000e26:	b297      	uxth	r7, r2
 8000e28:	19eb      	adds	r3, r5, r7
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d8d3      	bhi.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	071e      	lsls	r6, r3, #28
 8000e32:	f100 80b7 	bmi.w	8000fa4 <_Unwind_VRS_Pop+0x1f4>
 8000e36:	ae22      	add	r6, sp, #136	; 0x88
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f000 f925 	bl	8001088 <__gnu_Unwind_Save_WMMXD>
 8000e3e:	00ed      	lsls	r5, r5, #3
 8000e40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e42:	b15f      	cbz	r7, 8000e5c <_Unwind_VRS_Pop+0xac>
 8000e44:	3d04      	subs	r5, #4
 8000e46:	4603      	mov	r3, r0
 8000e48:	1971      	adds	r1, r6, r5
 8000e4a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e52:	4283      	cmp	r3, r0
 8000e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8000e58:	d1f9      	bne.n	8000e4e <_Unwind_VRS_Pop+0x9e>
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e5e:	4630      	mov	r0, r6
 8000e60:	f000 f8f0 	bl	8001044 <__gnu_Unwind_Restore_WMMXD>
 8000e64:	2000      	movs	r0, #0
 8000e66:	e7b7      	b.n	8000dd8 <_Unwind_VRS_Pop+0x28>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1b4      	bne.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000e6c:	2701      	movs	r7, #1
 8000e6e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e70:	b296      	uxth	r6, r2
 8000e72:	1d20      	adds	r0, r4, #4
 8000e74:	fa07 f103 	lsl.w	r1, r7, r3
 8000e78:	4231      	tst	r1, r6
 8000e7a:	f103 0301 	add.w	r3, r3, #1
 8000e7e:	d002      	beq.n	8000e86 <_Unwind_VRS_Pop+0xd6>
 8000e80:	6829      	ldr	r1, [r5, #0]
 8000e82:	3504      	adds	r5, #4
 8000e84:	6001      	str	r1, [r0, #0]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	f100 0004 	add.w	r0, r0, #4
 8000e8c:	d1f2      	bne.n	8000e74 <_Unwind_VRS_Pop+0xc4>
 8000e8e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000e92:	d13b      	bne.n	8000f0c <_Unwind_VRS_Pop+0x15c>
 8000e94:	63a5      	str	r5, [r4, #56]	; 0x38
 8000e96:	e79f      	b.n	8000dd8 <_Unwind_VRS_Pop+0x28>
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d19c      	bne.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000e9c:	1977      	adds	r7, r6, r5
 8000e9e:	2f20      	cmp	r7, #32
 8000ea0:	d899      	bhi.n	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000ea2:	2e0f      	cmp	r6, #15
 8000ea4:	d966      	bls.n	8000f74 <_Unwind_VRS_Pop+0x1c4>
 8000ea6:	462f      	mov	r7, r5
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	d13a      	bne.n	8000f22 <_Unwind_VRS_Pop+0x172>
 8000eac:	462a      	mov	r2, r5
 8000eae:	2700      	movs	r7, #0
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000eb4:	dd72      	ble.n	8000f9c <_Unwind_VRS_Pop+0x1ec>
 8000eb6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000eba:	4601      	mov	r1, r0
 8000ebc:	a844      	add	r0, sp, #272	; 0x110
 8000ebe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000ec2:	388c      	subs	r0, #140	; 0x8c
 8000ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ec8:	4291      	cmp	r1, r2
 8000eca:	f840 5f04 	str.w	r5, [r0, #4]!
 8000ece:	d1f9      	bne.n	8000ec4 <_Unwind_VRS_Pop+0x114>
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	b197      	cbz	r7, 8000efa <_Unwind_VRS_Pop+0x14a>
 8000ed4:	2e10      	cmp	r6, #16
 8000ed6:	4632      	mov	r2, r6
 8000ed8:	bf38      	it	cc
 8000eda:	2210      	movcc	r2, #16
 8000edc:	a944      	add	r1, sp, #272	; 0x110
 8000ede:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000ee2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000ee6:	0079      	lsls	r1, r7, #1
 8000ee8:	3a04      	subs	r2, #4
 8000eea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000eee:	f850 5b04 	ldr.w	r5, [r0], #4
 8000ef2:	4288      	cmp	r0, r1
 8000ef4:	f842 5f04 	str.w	r5, [r2, #4]!
 8000ef8:	d1f9      	bne.n	8000eee <_Unwind_VRS_Pop+0x13e>
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d048      	beq.n	8000f90 <_Unwind_VRS_Pop+0x1e0>
 8000efe:	2e0f      	cmp	r6, #15
 8000f00:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f02:	d933      	bls.n	8000f6c <_Unwind_VRS_Pop+0x1bc>
 8000f04:	b117      	cbz	r7, 8000f0c <_Unwind_VRS_Pop+0x15c>
 8000f06:	a802      	add	r0, sp, #8
 8000f08:	f000 f894 	bl	8001034 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	e763      	b.n	8000dd8 <_Unwind_VRS_Pop+0x28>
 8000f10:	2e0f      	cmp	r6, #15
 8000f12:	f63f af60 	bhi.w	8000dd6 <_Unwind_VRS_Pop+0x26>
 8000f16:	2700      	movs	r7, #0
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	07d1      	lsls	r1, r2, #31
 8000f1c:	d417      	bmi.n	8000f4e <_Unwind_VRS_Pop+0x19e>
 8000f1e:	2f00      	cmp	r7, #0
 8000f20:	d060      	beq.n	8000fe4 <_Unwind_VRS_Pop+0x234>
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	0751      	lsls	r1, r2, #29
 8000f26:	d445      	bmi.n	8000fb4 <_Unwind_VRS_Pop+0x204>
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d04d      	beq.n	8000fc8 <_Unwind_VRS_Pop+0x218>
 8000f2c:	2e0f      	cmp	r6, #15
 8000f2e:	d806      	bhi.n	8000f3e <_Unwind_VRS_Pop+0x18e>
 8000f30:	a822      	add	r0, sp, #136	; 0x88
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	f000 f87a 	bl	800102c <__gnu_Unwind_Save_VFP_D>
 8000f38:	9b01      	ldr	r3, [sp, #4]
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d0b6      	beq.n	8000eac <_Unwind_VRS_Pop+0xfc>
 8000f3e:	a802      	add	r0, sp, #8
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	f000 f87b 	bl	800103c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f46:	9b01      	ldr	r3, [sp, #4]
 8000f48:	f1c6 0210 	rsb	r2, r6, #16
 8000f4c:	e7b0      	b.n	8000eb0 <_Unwind_VRS_Pop+0x100>
 8000f4e:	f022 0101 	bic.w	r1, r2, #1
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	6021      	str	r1, [r4, #0]
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	4620      	mov	r0, r4
 8000f5a:	d03b      	beq.n	8000fd4 <_Unwind_VRS_Pop+0x224>
 8000f5c:	f022 0203 	bic.w	r2, r2, #3
 8000f60:	f840 2b48 	str.w	r2, [r0], #72
 8000f64:	f000 f85a 	bl	800101c <__gnu_Unwind_Save_VFP>
 8000f68:	9b01      	ldr	r3, [sp, #4]
 8000f6a:	e7d8      	b.n	8000f1e <_Unwind_VRS_Pop+0x16e>
 8000f6c:	a822      	add	r0, sp, #136	; 0x88
 8000f6e:	f000 f859 	bl	8001024 <__gnu_Unwind_Restore_VFP_D>
 8000f72:	e7c7      	b.n	8000f04 <_Unwind_VRS_Pop+0x154>
 8000f74:	2f10      	cmp	r7, #16
 8000f76:	d9ce      	bls.n	8000f16 <_Unwind_VRS_Pop+0x166>
 8000f78:	3f10      	subs	r7, #16
 8000f7a:	e7cd      	b.n	8000f18 <_Unwind_VRS_Pop+0x168>
 8000f7c:	f023 0310 	bic.w	r3, r3, #16
 8000f80:	6023      	str	r3, [r4, #0]
 8000f82:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f86:	9201      	str	r2, [sp, #4]
 8000f88:	f000 f8aa 	bl	80010e0 <__gnu_Unwind_Save_WMMXC>
 8000f8c:	9a01      	ldr	r2, [sp, #4]
 8000f8e:	e72d      	b.n	8000dec <_Unwind_VRS_Pop+0x3c>
 8000f90:	3104      	adds	r1, #4
 8000f92:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f94:	a822      	add	r0, sp, #136	; 0x88
 8000f96:	f000 f83d 	bl	8001014 <__gnu_Unwind_Restore_VFP>
 8000f9a:	e7b7      	b.n	8000f0c <_Unwind_VRS_Pop+0x15c>
 8000f9c:	2f00      	cmp	r7, #0
 8000f9e:	d199      	bne.n	8000ed4 <_Unwind_VRS_Pop+0x124>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e7aa      	b.n	8000efa <_Unwind_VRS_Pop+0x14a>
 8000fa4:	f023 0308 	bic.w	r3, r3, #8
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000fae:	f000 f86b 	bl	8001088 <__gnu_Unwind_Save_WMMXD>
 8000fb2:	e740      	b.n	8000e36 <_Unwind_VRS_Pop+0x86>
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f022 0204 	bic.w	r2, r2, #4
 8000fba:	f840 2bd0 	str.w	r2, [r0], #208
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f000 f83c 	bl	800103c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000fc4:	9b01      	ldr	r3, [sp, #4]
 8000fc6:	e7af      	b.n	8000f28 <_Unwind_VRS_Pop+0x178>
 8000fc8:	a822      	add	r0, sp, #136	; 0x88
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f000 f826 	bl	800101c <__gnu_Unwind_Save_VFP>
 8000fd0:	9b01      	ldr	r3, [sp, #4]
 8000fd2:	e7b9      	b.n	8000f48 <_Unwind_VRS_Pop+0x198>
 8000fd4:	f041 0102 	orr.w	r1, r1, #2
 8000fd8:	f840 1b48 	str.w	r1, [r0], #72
 8000fdc:	f000 f826 	bl	800102c <__gnu_Unwind_Save_VFP_D>
 8000fe0:	9b01      	ldr	r3, [sp, #4]
 8000fe2:	e79c      	b.n	8000f1e <_Unwind_VRS_Pop+0x16e>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <_Unwind_VRS_Pop+0x240>
 8000fe8:	2e0f      	cmp	r6, #15
 8000fea:	f63f af5f 	bhi.w	8000eac <_Unwind_VRS_Pop+0xfc>
 8000fee:	e79f      	b.n	8000f30 <_Unwind_VRS_Pop+0x180>
 8000ff0:	a822      	add	r0, sp, #136	; 0x88
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f000 f812 	bl	800101c <__gnu_Unwind_Save_VFP>
 8000ff8:	9b01      	ldr	r3, [sp, #4]
 8000ffa:	e757      	b.n	8000eac <_Unwind_VRS_Pop+0xfc>

08000ffc <__restore_core_regs>:
 8000ffc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001000:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001004:	469c      	mov	ip, r3
 8001006:	46a6      	mov	lr, r4
 8001008:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800100c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001010:	46e5      	mov	sp, ip
 8001012:	bd00      	pop	{pc}

08001014 <__gnu_Unwind_Restore_VFP>:
 8001014:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <__gnu_Unwind_Save_VFP>:
 800101c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__gnu_Unwind_Restore_VFP_D>:
 8001024:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_VFP_D>:
 800102c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001034:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800103c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__gnu_Unwind_Restore_WMMXD>:
 8001044:	ecf0 0102 	ldfe	f0, [r0], #8
 8001048:	ecf0 1102 	ldfe	f1, [r0], #8
 800104c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001050:	ecf0 3102 	ldfe	f3, [r0], #8
 8001054:	ecf0 4102 	ldfe	f4, [r0], #8
 8001058:	ecf0 5102 	ldfe	f5, [r0], #8
 800105c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001060:	ecf0 7102 	ldfe	f7, [r0], #8
 8001064:	ecf0 8102 	ldfp	f0, [r0], #8
 8001068:	ecf0 9102 	ldfp	f1, [r0], #8
 800106c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001070:	ecf0 b102 	ldfp	f3, [r0], #8
 8001074:	ecf0 c102 	ldfp	f4, [r0], #8
 8001078:	ecf0 d102 	ldfp	f5, [r0], #8
 800107c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001080:	ecf0 f102 	ldfp	f7, [r0], #8
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <__gnu_Unwind_Save_WMMXD>:
 8001088:	ece0 0102 	stfe	f0, [r0], #8
 800108c:	ece0 1102 	stfe	f1, [r0], #8
 8001090:	ece0 2102 	stfe	f2, [r0], #8
 8001094:	ece0 3102 	stfe	f3, [r0], #8
 8001098:	ece0 4102 	stfe	f4, [r0], #8
 800109c:	ece0 5102 	stfe	f5, [r0], #8
 80010a0:	ece0 6102 	stfe	f6, [r0], #8
 80010a4:	ece0 7102 	stfe	f7, [r0], #8
 80010a8:	ece0 8102 	stfp	f0, [r0], #8
 80010ac:	ece0 9102 	stfp	f1, [r0], #8
 80010b0:	ece0 a102 	stfp	f2, [r0], #8
 80010b4:	ece0 b102 	stfp	f3, [r0], #8
 80010b8:	ece0 c102 	stfp	f4, [r0], #8
 80010bc:	ece0 d102 	stfp	f5, [r0], #8
 80010c0:	ece0 e102 	stfp	f6, [r0], #8
 80010c4:	ece0 f102 	stfp	f7, [r0], #8
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__gnu_Unwind_Restore_WMMXC>:
 80010cc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80010d0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80010d4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80010d8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__gnu_Unwind_Save_WMMXC>:
 80010e0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80010e4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80010e8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80010ec:	fca0 b101 	stc2	1, cr11, [r0], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <_Unwind_RaiseException>:
 80010f4:	46ec      	mov	ip, sp
 80010f6:	b500      	push	{lr}
 80010f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001108:	a901      	add	r1, sp, #4
 800110a:	f7ff fbed 	bl	80008e8 <__gnu_Unwind_RaiseException>
 800110e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001112:	b012      	add	sp, #72	; 0x48
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <_Unwind_Resume>:
 8001118:	46ec      	mov	ip, sp
 800111a:	b500      	push	{lr}
 800111c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001120:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	e92d 000c 	stmdb	sp!, {r2, r3}
 800112c:	a901      	add	r1, sp, #4
 800112e:	f7ff fc15 	bl	800095c <__gnu_Unwind_Resume>
 8001132:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001136:	b012      	add	sp, #72	; 0x48
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <_Unwind_Resume_or_Rethrow>:
 800113c:	46ec      	mov	ip, sp
 800113e:	b500      	push	{lr}
 8001140:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001144:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001150:	a901      	add	r1, sp, #4
 8001152:	f7ff fc25 	bl	80009a0 <__gnu_Unwind_Resume_or_Rethrow>
 8001156:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800115a:	b012      	add	sp, #72	; 0x48
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop

08001160 <_Unwind_ForcedUnwind>:
 8001160:	46ec      	mov	ip, sp
 8001162:	b500      	push	{lr}
 8001164:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001168:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001174:	ab01      	add	r3, sp, #4
 8001176:	f7ff fbe7 	bl	8000948 <__gnu_Unwind_ForcedUnwind>
 800117a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800117e:	b012      	add	sp, #72	; 0x48
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <_Unwind_Backtrace>:
 8001184:	46ec      	mov	ip, sp
 8001186:	b500      	push	{lr}
 8001188:	e92d 5000 	stmdb	sp!, {ip, lr}
 800118c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001198:	aa01      	add	r2, sp, #4
 800119a:	f7ff fc61 	bl	8000a60 <__gnu_Unwind_Backtrace>
 800119e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80011a2:	b012      	add	sp, #72	; 0x48
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <next_unwind_byte>:
 80011a8:	7a02      	ldrb	r2, [r0, #8]
 80011aa:	b91a      	cbnz	r2, 80011b4 <next_unwind_byte+0xc>
 80011ac:	7a43      	ldrb	r3, [r0, #9]
 80011ae:	b943      	cbnz	r3, 80011c2 <next_unwind_byte+0x1a>
 80011b0:	20b0      	movs	r0, #176	; 0xb0
 80011b2:	4770      	bx	lr
 80011b4:	6803      	ldr	r3, [r0, #0]
 80011b6:	3a01      	subs	r2, #1
 80011b8:	7202      	strb	r2, [r0, #8]
 80011ba:	021a      	lsls	r2, r3, #8
 80011bc:	6002      	str	r2, [r0, #0]
 80011be:	0e18      	lsrs	r0, r3, #24
 80011c0:	4770      	bx	lr
 80011c2:	2103      	movs	r1, #3
 80011c4:	6842      	ldr	r2, [r0, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b410      	push	{r4}
 80011ca:	7243      	strb	r3, [r0, #9]
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	1d14      	adds	r4, r2, #4
 80011d0:	7201      	strb	r1, [r0, #8]
 80011d2:	021a      	lsls	r2, r3, #8
 80011d4:	6044      	str	r4, [r0, #4]
 80011d6:	6002      	str	r2, [r0, #0]
 80011d8:	bc10      	pop	{r4}
 80011da:	0e18      	lsrs	r0, r3, #24
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <_Unwind_GetGR.constprop.0>:
 80011e0:	2300      	movs	r3, #0
 80011e2:	b500      	push	{lr}
 80011e4:	b085      	sub	sp, #20
 80011e6:	aa03      	add	r2, sp, #12
 80011e8:	9200      	str	r2, [sp, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	220c      	movs	r2, #12
 80011ee:	f7ff fbe9 	bl	80009c4 <_Unwind_VRS_Get>
 80011f2:	9803      	ldr	r0, [sp, #12]
 80011f4:	b005      	add	sp, #20
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fa:	bf00      	nop

080011fc <unwind_UCB_from_context>:
 80011fc:	e7f0      	b.n	80011e0 <_Unwind_GetGR.constprop.0>
 80011fe:	bf00      	nop

08001200 <__gnu_unwind_execute>:
 8001200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001204:	4606      	mov	r6, r0
 8001206:	460f      	mov	r7, r1
 8001208:	f04f 0800 	mov.w	r8, #0
 800120c:	b085      	sub	sp, #20
 800120e:	4638      	mov	r0, r7
 8001210:	f7ff ffca 	bl	80011a8 <next_unwind_byte>
 8001214:	28b0      	cmp	r0, #176	; 0xb0
 8001216:	4604      	mov	r4, r0
 8001218:	d023      	beq.n	8001262 <__gnu_unwind_execute+0x62>
 800121a:	0605      	lsls	r5, r0, #24
 800121c:	d427      	bmi.n	800126e <__gnu_unwind_execute+0x6e>
 800121e:	2300      	movs	r3, #0
 8001220:	f10d 090c 	add.w	r9, sp, #12
 8001224:	4619      	mov	r1, r3
 8001226:	0085      	lsls	r5, r0, #2
 8001228:	220d      	movs	r2, #13
 800122a:	f8cd 9000 	str.w	r9, [sp]
 800122e:	4630      	mov	r0, r6
 8001230:	f7ff fbc8 	bl	80009c4 <_Unwind_VRS_Get>
 8001234:	b2ed      	uxtb	r5, r5
 8001236:	9b03      	ldr	r3, [sp, #12]
 8001238:	0660      	lsls	r0, r4, #25
 800123a:	f105 0504 	add.w	r5, r5, #4
 800123e:	bf4c      	ite	mi
 8001240:	1b5d      	submi	r5, r3, r5
 8001242:	18ed      	addpl	r5, r5, r3
 8001244:	2300      	movs	r3, #0
 8001246:	220d      	movs	r2, #13
 8001248:	4619      	mov	r1, r3
 800124a:	f8cd 9000 	str.w	r9, [sp]
 800124e:	4630      	mov	r0, r6
 8001250:	9503      	str	r5, [sp, #12]
 8001252:	f7ff fbdd 	bl	8000a10 <_Unwind_VRS_Set>
 8001256:	4638      	mov	r0, r7
 8001258:	f7ff ffa6 	bl	80011a8 <next_unwind_byte>
 800125c:	28b0      	cmp	r0, #176	; 0xb0
 800125e:	4604      	mov	r4, r0
 8001260:	d1db      	bne.n	800121a <__gnu_unwind_execute+0x1a>
 8001262:	f1b8 0f00 	cmp.w	r8, #0
 8001266:	f000 8094 	beq.w	8001392 <__gnu_unwind_execute+0x192>
 800126a:	2000      	movs	r0, #0
 800126c:	e01c      	b.n	80012a8 <__gnu_unwind_execute+0xa8>
 800126e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001272:	2b80      	cmp	r3, #128	; 0x80
 8001274:	d05c      	beq.n	8001330 <__gnu_unwind_execute+0x130>
 8001276:	2b90      	cmp	r3, #144	; 0x90
 8001278:	d019      	beq.n	80012ae <__gnu_unwind_execute+0xae>
 800127a:	2ba0      	cmp	r3, #160	; 0xa0
 800127c:	d02c      	beq.n	80012d8 <__gnu_unwind_execute+0xd8>
 800127e:	2bb0      	cmp	r3, #176	; 0xb0
 8001280:	d03e      	beq.n	8001300 <__gnu_unwind_execute+0x100>
 8001282:	2bc0      	cmp	r3, #192	; 0xc0
 8001284:	d06b      	beq.n	800135e <__gnu_unwind_execute+0x15e>
 8001286:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800128a:	2bd0      	cmp	r3, #208	; 0xd0
 800128c:	d10b      	bne.n	80012a6 <__gnu_unwind_execute+0xa6>
 800128e:	f000 0207 	and.w	r2, r0, #7
 8001292:	3201      	adds	r2, #1
 8001294:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001298:	2305      	movs	r3, #5
 800129a:	2101      	movs	r1, #1
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff fd87 	bl	8000db0 <_Unwind_VRS_Pop>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d0b3      	beq.n	800120e <__gnu_unwind_execute+0xe>
 80012a6:	2009      	movs	r0, #9
 80012a8:	b005      	add	sp, #20
 80012aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ae:	f000 030d 	and.w	r3, r0, #13
 80012b2:	2b0d      	cmp	r3, #13
 80012b4:	d0f7      	beq.n	80012a6 <__gnu_unwind_execute+0xa6>
 80012b6:	2300      	movs	r3, #0
 80012b8:	ad03      	add	r5, sp, #12
 80012ba:	f000 020f 	and.w	r2, r0, #15
 80012be:	4619      	mov	r1, r3
 80012c0:	9500      	str	r5, [sp, #0]
 80012c2:	4630      	mov	r0, r6
 80012c4:	f7ff fb7e 	bl	80009c4 <_Unwind_VRS_Get>
 80012c8:	2300      	movs	r3, #0
 80012ca:	9500      	str	r5, [sp, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	220d      	movs	r2, #13
 80012d0:	4630      	mov	r0, r6
 80012d2:	f7ff fb9d 	bl	8000a10 <_Unwind_VRS_Set>
 80012d6:	e79a      	b.n	800120e <__gnu_unwind_execute+0xe>
 80012d8:	43c3      	mvns	r3, r0
 80012da:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	411a      	asrs	r2, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	0701      	lsls	r1, r0, #28
 80012e8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80012ec:	bf48      	it	mi
 80012ee:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80012f2:	4619      	mov	r1, r3
 80012f4:	4630      	mov	r0, r6
 80012f6:	f7ff fd5b 	bl	8000db0 <_Unwind_VRS_Pop>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d1d3      	bne.n	80012a6 <__gnu_unwind_execute+0xa6>
 80012fe:	e786      	b.n	800120e <__gnu_unwind_execute+0xe>
 8001300:	28b1      	cmp	r0, #177	; 0xb1
 8001302:	d057      	beq.n	80013b4 <__gnu_unwind_execute+0x1b4>
 8001304:	28b2      	cmp	r0, #178	; 0xb2
 8001306:	d068      	beq.n	80013da <__gnu_unwind_execute+0x1da>
 8001308:	28b3      	cmp	r0, #179	; 0xb3
 800130a:	f000 8095 	beq.w	8001438 <__gnu_unwind_execute+0x238>
 800130e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001312:	2bb4      	cmp	r3, #180	; 0xb4
 8001314:	d0c7      	beq.n	80012a6 <__gnu_unwind_execute+0xa6>
 8001316:	2301      	movs	r3, #1
 8001318:	f000 0207 	and.w	r2, r0, #7
 800131c:	441a      	add	r2, r3
 800131e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001322:	4619      	mov	r1, r3
 8001324:	4630      	mov	r0, r6
 8001326:	f7ff fd43 	bl	8000db0 <_Unwind_VRS_Pop>
 800132a:	2800      	cmp	r0, #0
 800132c:	d1bb      	bne.n	80012a6 <__gnu_unwind_execute+0xa6>
 800132e:	e76e      	b.n	800120e <__gnu_unwind_execute+0xe>
 8001330:	4638      	mov	r0, r7
 8001332:	f7ff ff39 	bl	80011a8 <next_unwind_byte>
 8001336:	0224      	lsls	r4, r4, #8
 8001338:	4304      	orrs	r4, r0
 800133a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800133e:	d0b2      	beq.n	80012a6 <__gnu_unwind_execute+0xa6>
 8001340:	2300      	movs	r3, #0
 8001342:	0124      	lsls	r4, r4, #4
 8001344:	b2a2      	uxth	r2, r4
 8001346:	4619      	mov	r1, r3
 8001348:	4630      	mov	r0, r6
 800134a:	f7ff fd31 	bl	8000db0 <_Unwind_VRS_Pop>
 800134e:	2800      	cmp	r0, #0
 8001350:	d1a9      	bne.n	80012a6 <__gnu_unwind_execute+0xa6>
 8001352:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001356:	bf18      	it	ne
 8001358:	f04f 0801 	movne.w	r8, #1
 800135c:	e757      	b.n	800120e <__gnu_unwind_execute+0xe>
 800135e:	28c6      	cmp	r0, #198	; 0xc6
 8001360:	d07d      	beq.n	800145e <__gnu_unwind_execute+0x25e>
 8001362:	28c7      	cmp	r0, #199	; 0xc7
 8001364:	f000 8086 	beq.w	8001474 <__gnu_unwind_execute+0x274>
 8001368:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800136c:	2bc0      	cmp	r3, #192	; 0xc0
 800136e:	f000 8094 	beq.w	800149a <__gnu_unwind_execute+0x29a>
 8001372:	28c8      	cmp	r0, #200	; 0xc8
 8001374:	f000 809f 	beq.w	80014b6 <__gnu_unwind_execute+0x2b6>
 8001378:	28c9      	cmp	r0, #201	; 0xc9
 800137a:	d194      	bne.n	80012a6 <__gnu_unwind_execute+0xa6>
 800137c:	4638      	mov	r0, r7
 800137e:	f7ff ff13 	bl	80011a8 <next_unwind_byte>
 8001382:	0302      	lsls	r2, r0, #12
 8001384:	f000 000f 	and.w	r0, r0, #15
 8001388:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800138c:	3001      	adds	r0, #1
 800138e:	4302      	orrs	r2, r0
 8001390:	e782      	b.n	8001298 <__gnu_unwind_execute+0x98>
 8001392:	ac03      	add	r4, sp, #12
 8001394:	4643      	mov	r3, r8
 8001396:	220e      	movs	r2, #14
 8001398:	4641      	mov	r1, r8
 800139a:	9400      	str	r4, [sp, #0]
 800139c:	4630      	mov	r0, r6
 800139e:	f7ff fb11 	bl	80009c4 <_Unwind_VRS_Get>
 80013a2:	9400      	str	r4, [sp, #0]
 80013a4:	4630      	mov	r0, r6
 80013a6:	4643      	mov	r3, r8
 80013a8:	220f      	movs	r2, #15
 80013aa:	4641      	mov	r1, r8
 80013ac:	f7ff fb30 	bl	8000a10 <_Unwind_VRS_Set>
 80013b0:	4640      	mov	r0, r8
 80013b2:	e779      	b.n	80012a8 <__gnu_unwind_execute+0xa8>
 80013b4:	4638      	mov	r0, r7
 80013b6:	f7ff fef7 	bl	80011a8 <next_unwind_byte>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	f43f af73 	beq.w	80012a6 <__gnu_unwind_execute+0xa6>
 80013c0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013c4:	f47f af6f 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4619      	mov	r1, r3
 80013cc:	4630      	mov	r0, r6
 80013ce:	f7ff fcef 	bl	8000db0 <_Unwind_VRS_Pop>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	f47f af67 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 80013d8:	e719      	b.n	800120e <__gnu_unwind_execute+0xe>
 80013da:	2300      	movs	r3, #0
 80013dc:	f10d 090c 	add.w	r9, sp, #12
 80013e0:	220d      	movs	r2, #13
 80013e2:	4619      	mov	r1, r3
 80013e4:	f8cd 9000 	str.w	r9, [sp]
 80013e8:	4630      	mov	r0, r6
 80013ea:	f7ff faeb 	bl	80009c4 <_Unwind_VRS_Get>
 80013ee:	4638      	mov	r0, r7
 80013f0:	f7ff feda 	bl	80011a8 <next_unwind_byte>
 80013f4:	0602      	lsls	r2, r0, #24
 80013f6:	f04f 0402 	mov.w	r4, #2
 80013fa:	d50c      	bpl.n	8001416 <__gnu_unwind_execute+0x216>
 80013fc:	9b03      	ldr	r3, [sp, #12]
 80013fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001402:	40a0      	lsls	r0, r4
 8001404:	4403      	add	r3, r0
 8001406:	4638      	mov	r0, r7
 8001408:	9303      	str	r3, [sp, #12]
 800140a:	f7ff fecd 	bl	80011a8 <next_unwind_byte>
 800140e:	0603      	lsls	r3, r0, #24
 8001410:	f104 0407 	add.w	r4, r4, #7
 8001414:	d4f2      	bmi.n	80013fc <__gnu_unwind_execute+0x1fc>
 8001416:	2300      	movs	r3, #0
 8001418:	9903      	ldr	r1, [sp, #12]
 800141a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800141e:	40a2      	lsls	r2, r4
 8001420:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001424:	188c      	adds	r4, r1, r2
 8001426:	f8cd 9000 	str.w	r9, [sp]
 800142a:	4619      	mov	r1, r3
 800142c:	220d      	movs	r2, #13
 800142e:	4630      	mov	r0, r6
 8001430:	9403      	str	r4, [sp, #12]
 8001432:	f7ff faed 	bl	8000a10 <_Unwind_VRS_Set>
 8001436:	e6ea      	b.n	800120e <__gnu_unwind_execute+0xe>
 8001438:	4638      	mov	r0, r7
 800143a:	f7ff feb5 	bl	80011a8 <next_unwind_byte>
 800143e:	2301      	movs	r3, #1
 8001440:	0301      	lsls	r1, r0, #12
 8001442:	f000 000f 	and.w	r0, r0, #15
 8001446:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800144a:	18c2      	adds	r2, r0, r3
 800144c:	430a      	orrs	r2, r1
 800144e:	4630      	mov	r0, r6
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fcad 	bl	8000db0 <_Unwind_VRS_Pop>
 8001456:	2800      	cmp	r0, #0
 8001458:	f47f af25 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 800145c:	e6d7      	b.n	800120e <__gnu_unwind_execute+0xe>
 800145e:	4638      	mov	r0, r7
 8001460:	f7ff fea2 	bl	80011a8 <next_unwind_byte>
 8001464:	0301      	lsls	r1, r0, #12
 8001466:	f000 000f 	and.w	r0, r0, #15
 800146a:	2303      	movs	r3, #3
 800146c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001470:	1c42      	adds	r2, r0, #1
 8001472:	e7eb      	b.n	800144c <__gnu_unwind_execute+0x24c>
 8001474:	4638      	mov	r0, r7
 8001476:	f7ff fe97 	bl	80011a8 <next_unwind_byte>
 800147a:	2800      	cmp	r0, #0
 800147c:	f43f af13 	beq.w	80012a6 <__gnu_unwind_execute+0xa6>
 8001480:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001484:	f47f af0f 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 8001488:	4602      	mov	r2, r0
 800148a:	2104      	movs	r1, #4
 800148c:	4630      	mov	r0, r6
 800148e:	f7ff fc8f 	bl	8000db0 <_Unwind_VRS_Pop>
 8001492:	2800      	cmp	r0, #0
 8001494:	f47f af07 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 8001498:	e6b9      	b.n	800120e <__gnu_unwind_execute+0xe>
 800149a:	2303      	movs	r3, #3
 800149c:	f000 020f 	and.w	r2, r0, #15
 80014a0:	3201      	adds	r2, #1
 80014a2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80014a6:	4619      	mov	r1, r3
 80014a8:	4630      	mov	r0, r6
 80014aa:	f7ff fc81 	bl	8000db0 <_Unwind_VRS_Pop>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	f47f aef9 	bne.w	80012a6 <__gnu_unwind_execute+0xa6>
 80014b4:	e6ab      	b.n	800120e <__gnu_unwind_execute+0xe>
 80014b6:	4638      	mov	r0, r7
 80014b8:	f7ff fe76 	bl	80011a8 <next_unwind_byte>
 80014bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80014c0:	f000 030f 	and.w	r3, r0, #15
 80014c4:	3210      	adds	r2, #16
 80014c6:	3301      	adds	r3, #1
 80014c8:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80014cc:	e6e4      	b.n	8001298 <__gnu_unwind_execute+0x98>
 80014ce:	bf00      	nop

080014d0 <__gnu_unwind_frame>:
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	2403      	movs	r4, #3
 80014d4:	460d      	mov	r5, r1
 80014d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80014d8:	b085      	sub	sp, #20
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	f88d 400c 	strb.w	r4, [sp, #12]
 80014e0:	79dc      	ldrb	r4, [r3, #7]
 80014e2:	0212      	lsls	r2, r2, #8
 80014e4:	3308      	adds	r3, #8
 80014e6:	a901      	add	r1, sp, #4
 80014e8:	4628      	mov	r0, r5
 80014ea:	9201      	str	r2, [sp, #4]
 80014ec:	f88d 400d 	strb.w	r4, [sp, #13]
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	f7ff fe85 	bl	8001200 <__gnu_unwind_execute>
 80014f6:	b005      	add	sp, #20
 80014f8:	bd30      	pop	{r4, r5, pc}
 80014fa:	bf00      	nop

080014fc <_Unwind_GetRegionStart>:
 80014fc:	b508      	push	{r3, lr}
 80014fe:	f7ff fe7d 	bl	80011fc <unwind_UCB_from_context>
 8001502:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001504:	bd08      	pop	{r3, pc}
 8001506:	bf00      	nop

08001508 <_Unwind_GetLanguageSpecificData>:
 8001508:	b508      	push	{r3, lr}
 800150a:	f7ff fe77 	bl	80011fc <unwind_UCB_from_context>
 800150e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001510:	79c3      	ldrb	r3, [r0, #7]
 8001512:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001516:	3008      	adds	r0, #8
 8001518:	bd08      	pop	{r3, pc}
 800151a:	bf00      	nop

0800151c <_Unwind_GetTextRelBase>:
 800151c:	b508      	push	{r3, lr}
 800151e:	f003 f9e9 	bl	80048f4 <abort>
 8001522:	bf00      	nop

08001524 <_Unwind_GetDataRelBase>:
 8001524:	b508      	push	{r3, lr}
 8001526:	f7ff fff9 	bl	800151c <_Unwind_GetTextRelBase>
 800152a:	bf00      	nop

0800152c <_ZN9ADC_Tools12getValueAvrgEv>:

class ADC_Tools
{
public:
	float getValue()const				   { return value; };
	virtual float getValueAvrg()      { return value; };
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <_ZN9ADC_Tools17getPercentageAvrgEv>:
	float getPercentage()const			   { return per; };
	virtual float getPercentageAvrg() { return per; };
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <_ZN9ADC_ToolsC1Effm>:
#include "ADC_Tools.h"



ADC_Tools::ADC_Tools(float max, float min, uint32_t res ):maxVal(max), minVal(min), bitResolution(res),
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
					   per(0), value(0){
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_ZN9ADC_ToolsC1Effm+0x58>)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	809a      	strh	r2, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
	maxLevels = 2 << (bitResolution - 1);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	889b      	ldrh	r3, [r3, #4]
 8001594:	3b01      	subs	r3, #1
 8001596:	2202      	movs	r2, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	611a      	str	r2, [r3, #16]
}
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	08004b64 	.word	0x08004b64

080015b4 <_ZN9ADC_Tools17updateMeasurmentsEm>:
	bitResolution = res;
	maxLevels = 2 << (bitResolution - 1);
}
*/

void ADC_Tools::updateMeasurments(uint32_t val){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	value = convertToValue(val);
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f810 	bl	80015e6 <_ZN9ADC_Tools14convertToValueEm>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	615a      	str	r2, [r3, #20]
	per = convertToPercentage(value);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f828 	bl	8001628 <_ZN9ADC_Tools19convertToPercentageEf>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_ZN9ADC_Tools14convertToValueEm>:

float ADC_Tools::convertToValue(uint32_t raw) {
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
	return ((float)raw * maxVal) / (float)maxLevels;
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f7fe fe6d 	bl	80002d0 <__aeabi_ui2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7fe febe 	bl	8000380 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	461c      	mov	r4, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fe5f 	bl	80002d0 <__aeabi_ui2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4619      	mov	r1, r3
 8001616:	4620      	mov	r0, r4
 8001618:	f7fe ff66 	bl	80004e8 <__aeabi_fdiv>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
	...

08001628 <_ZN9ADC_Tools19convertToPercentageEf>:

float ADC_Tools::convertToPercentage(float val) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
	return 100.f * ((float)val / maxVal);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4619      	mov	r1, r3
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f7fe ff55 	bl	80004e8 <__aeabi_fdiv>
 800163e:	4603      	mov	r3, r0
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <_ZN9ADC_Tools19convertToPercentageEf+0x2c>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fe9c 	bl	8000380 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	42c80000 	.word	0x42c80000

08001658 <_ZNK9ADC_Tools8getValueEv>:
	float getValue()const				   { return value; };
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <_ZNK9ADC_Tools13getPercentageEv>:
	float getPercentage()const			   { return per; };
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <_Z13AllTasks_initv>:

uint32_t receiveADC[2];
float per, volt, perAvrg, voltAvrg ;


void AllTasks_init(){
 8001684:	b5b0      	push	{r4, r5, r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <_Z13AllTasks_initv+0x30>)
 800168c:	1d3c      	adds	r4, r7, #4
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 fdf6 	bl	8003292 <osThreadCreate>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <_Z13AllTasks_initv+0x34>)
 80016aa:	601a      	str	r2, [r3, #0]


}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdb0      	pop	{r4, r5, r7, pc}
 80016b4:	08004ae0 	.word	0x08004ae0
 80016b8:	20000098 	.word	0x20000098

080016bc <_ZN8LipoCellD1Ev>:
#include "main.h"

#define MAX_CELL_VOLTAGE 3.5f
#define MIN_CELL_VOLTAGE 0.0f

class LipoCell:  public ADC_Tools
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <_ZN8LipoCellD1Ev+0x24>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	331c      	adds	r3, #28
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f85a 	bl	8001788 <_ZN7AverageIfLh10EED1Ev>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08004b04 	.word	0x08004b04

080016e4 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b096      	sub	sp, #88	; 0x58
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]


	uint32_t counter = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	657b      	str	r3, [r7, #84]	; 0x54
	LipoCell lipo;
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f851 	bl	800179c <_ZN8LipoCellC1Ev>
	HAL_ADC_Start(&hadc1);
 80016fa:	481d      	ldr	r0, [pc, #116]	; (8001770 <_Z23StartBatteryManagerTaskPKv+0x8c>)
 80016fc:	f000 fd1a 	bl	8002134 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, receiveADC, 2);
 8001700:	2202      	movs	r2, #2
 8001702:	491c      	ldr	r1, [pc, #112]	; (8001774 <_Z23StartBatteryManagerTaskPKv+0x90>)
 8001704:	481a      	ldr	r0, [pc, #104]	; (8001770 <_Z23StartBatteryManagerTaskPKv+0x8c>)
 8001706:	f000 fd77 	bl	80021f8 <HAL_ADC_Start_DMA>

	for(;;){

		lipo.update(receiveADC[0]);
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <_Z23StartBatteryManagerTaskPKv+0x90>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f85d 	bl	80017d4 <_ZN8LipoCell6updateEm>
		per = lipo.getPercentage();
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffa5 	bl	800166e <_ZNK9ADC_Tools13getPercentageEv>
 8001724:	4602      	mov	r2, r0
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_Z23StartBatteryManagerTaskPKv+0x94>)
 8001728:	601a      	str	r2, [r3, #0]
		volt= lipo.getValue();
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff92 	bl	8001658 <_ZNK9ADC_Tools8getValueEv>
 8001734:	4602      	mov	r2, r0
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <_Z23StartBatteryManagerTaskPKv+0x98>)
 8001738:	601a      	str	r2, [r3, #0]
		perAvrg = lipo.getPercentageAvrg();
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f871 	bl	8001826 <_ZN8LipoCell17getPercentageAvrgEv>
 8001744:	4602      	mov	r2, r0
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <_Z23StartBatteryManagerTaskPKv+0x9c>)
 8001748:	601a      	str	r2, [r3, #0]
		voltAvrg= lipo.getValueAvrg();
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f85a 	bl	8001808 <_ZN8LipoCell12getValueAvrgEv>
 8001754:	4602      	mov	r2, r0
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <_Z23StartBatteryManagerTaskPKv+0xa0>)
 8001758:	601a      	str	r2, [r3, #0]

		osDelay(100);
 800175a:	2064      	movs	r0, #100	; 0x64
 800175c:	f001 fdc1 	bl	80032e2 <osDelay>
		lipo.update(receiveADC[0]);
 8001760:	e7d3      	b.n	800170a <_Z23StartBatteryManagerTaskPKv+0x26>
	LipoCell lipo;
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffa8 	bl	80016bc <_ZN8LipoCellD1Ev>
 800176c:	f002 fc3b 	bl	8003fe6 <__cxa_end_cleanup>
 8001770:	20001064 	.word	0x20001064
 8001774:	2000009c 	.word	0x2000009c
 8001778:	200000a4 	.word	0x200000a4
 800177c:	200000a8 	.word	0x200000a8
 8001780:	200000ac 	.word	0x200000ac
 8001784:	200000b0 	.word	0x200000b0

08001788 <_ZN7AverageIfLh10EED1Ev>:

public:
	Average(){
		clear();
	}
	~Average(){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

	}
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_ZN8LipoCellC1Ev>:
#include "LipoCell.h"



LipoCell::LipoCell():ADC_Tools(MAX_CELL_VOLTAGE, MIN_CELL_VOLTAGE){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	230c      	movs	r3, #12
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <_ZN8LipoCellC1Ev+0x30>)
 80017ae:	f7ff fed3 	bl	8001558 <_ZN9ADC_ToolsC1Effm>
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <_ZN8LipoCellC1Ev+0x34>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	331c      	adds	r3, #28
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f847 	bl	8001850 <_ZN7AverageIfLh10EEC1Ev>
	//ADC_Tools::init(MAX_CELL_VOLTAGE, MIN_CELL_VOLTAGE);

}
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40600000 	.word	0x40600000
 80017d0:	08004b04 	.word	0x08004b04

080017d4 <_ZN8LipoCell6updateEm>:

void LipoCell::update(uint32_t val) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	updateMeasurments(val);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fee6 	bl	80015b4 <_ZN9ADC_Tools17updateMeasurmentsEm>
	avrg.insert(getValue());
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 041c 	add.w	r4, r3, #28
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff31 	bl	8001658 <_ZNK9ADC_Tools8getValueEv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 f834 	bl	8001868 <_ZN7AverageIfLh10EE6insertEf>
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <_ZN8LipoCell12getValueAvrgEv>:


float LipoCell::getValueAvrg() {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return avrg();
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	331c      	adds	r3, #28
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f83b 	bl	8001890 <_ZN7AverageIfLh10EEclEv>
 800181a:	4603      	mov	r3, r0
 800181c:	681b      	ldr	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZN8LipoCell17getPercentageAvrgEv>:

float LipoCell::getPercentageAvrg() {
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	float valAvrg = getValueAvrg();
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	4798      	blx	r3
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
	return convertToPercentage(valAvrg);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fef1 	bl	8001628 <_ZN9ADC_Tools19convertToPercentageEf>
 8001846:	4603      	mov	r3, r0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN7AverageIfLh10EEC1Ev>:
	Average(){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
		clear();
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f826 	bl	80018aa <_ZN7AverageIfLh10EE5clearEv>
	}
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN7AverageIfLh10EE6insertEf>:

	void insert(T val){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
		elem[currentIndex] = val;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001878:	4619      	mov	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		indexIterate();
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f831 	bl	80018ea <_ZN7AverageIfLh10EE12indexIterateEv>
	}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZN7AverageIfLh10EEclEv>:
		numberOfElem = 0;
		for (uint8_t i = 0; i < s; i++) elem[i] = T();
	}
	int size()const { return s; };
	//T& getAvrage()const{ return avrg;};
	T& operator()(){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
		this->calculate();
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f84e 	bl	800193a <_ZN7AverageIfLh10EE9calculateEv>
		return this->avrg;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	332c      	adds	r3, #44	; 0x2c
	}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZN7AverageIfLh10EE5clearEv>:
	void clear(){
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
		currentIndex = 0;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		numberOfElem = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		for (uint8_t i = 0; i < s; i++) elem[i] = T();
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	dc09      	bgt.n	80018e0 <_ZN7AverageIfLh10EE5clearEv+0x36>
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e7f2      	b.n	80018c6 <_ZN7AverageIfLh10EE5clearEv+0x1c>
	}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <_ZN7AverageIfLh10EE12indexIterateEv>:
	void indexIterate(){
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
		if (numberOfElem != s) numberOfElem++;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018f8:	2b0a      	cmp	r3, #10
 80018fa:	d007      	beq.n	800190c <_ZN7AverageIfLh10EE12indexIterateEv+0x22>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (currentIndex == (s - 1)) currentIndex = 0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001912:	2b09      	cmp	r3, #9
 8001914:	d104      	bne.n	8001920 <_ZN7AverageIfLh10EE12indexIterateEv+0x36>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 800191e:	e007      	b.n	8001930 <_ZN7AverageIfLh10EE12indexIterateEv+0x46>
			currentIndex++;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001926:	3301      	adds	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <_ZN7AverageIfLh10EE9calculateEv>:
	void calculate(){
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
		T a = 0;
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < numberOfElem; i++) a += elem[i];
 8001948:	2300      	movs	r3, #0
 800194a:	72fb      	strb	r3, [r7, #11]
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001954:	4293      	cmp	r3, r2
 8001956:	da0d      	bge.n	8001974 <_ZN7AverageIfLh10EE9calculateEv+0x3a>
 8001958:	7afa      	ldrb	r2, [r7, #11]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	4619      	mov	r1, r3
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7fe fc04 	bl	8000170 <__addsf3>
 8001968:	4603      	mov	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	3301      	adds	r3, #1
 8001970:	72fb      	strb	r3, [r7, #11]
 8001972:	e7eb      	b.n	800194c <_ZN7AverageIfLh10EE9calculateEv+0x12>
		avrg = a /(T)numberOfElem;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fca8 	bl	80002d0 <__aeabi_ui2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4619      	mov	r1, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7fe fdaf 	bl	80004e8 <__aeabi_fdiv>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800199c:	4819      	ldr	r0, [pc, #100]	; (8001a04 <MX_ADC1_Init+0x68>)
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_ADC1_Init+0x6c>)
{
 80019a0:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 80019a2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019aa:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019b0:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b2:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 80019b4:	2302      	movs	r3, #2
{
 80019b6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80019b8:	9401      	str	r4, [sp, #4]
 80019ba:	9402      	str	r4, [sp, #8]
 80019bc:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019be:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c0:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c2:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 80019c4:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c6:	f000 fcc7 	bl	8002358 <HAL_ADC_Init>
 80019ca:	b108      	cbz	r0, 80019d0 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 80019cc:	f000 f9ac 	bl	8001d28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80019d0:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d2:	a901      	add	r1, sp, #4
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_ADC1_Init+0x68>)
  sConfig.Channel = ADC_CHANNEL_0;
 80019d6:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d8:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80019da:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019dc:	f000 faee 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80019e0:	b108      	cbz	r0, 80019e6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 80019e2:	f000 f9a1 	bl	8001d28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80019ee:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f0:	a901      	add	r1, sp, #4
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_ADC1_Init+0x68>)
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80019f4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f6:	f000 fae1 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80019fa:	b108      	cbz	r0, 8001a00 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 80019fc:	f000 f994 	bl	8001d28 <Error_Handler>
  }

}
 8001a00:	b005      	add	sp, #20
 8001a02:	bd30      	pop	{r4, r5, pc}
 8001a04:	20001064 	.word	0x20001064
 8001a08:	40012400 	.word	0x40012400

08001a0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a0c:	b530      	push	{r4, r5, lr}
 8001a0e:	4605      	mov	r5, r0
 8001a10:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	2210      	movs	r2, #16
 8001a14:	2100      	movs	r1, #0
 8001a16:	a802      	add	r0, sp, #8
 8001a18:	f002 ffb1 	bl	800497e <memset>
  if(adcHandle->Instance==ADC1)
 8001a1c:	682a      	ldr	r2, [r5, #0]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_ADC_MspInit+0x84>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d133      	bne.n	8001a8c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a24:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001a28:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	481a      	ldr	r0, [pc, #104]	; (8001a94 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a36:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a40:	4c15      	ldr	r4, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	f042 0204 	orr.w	r2, r2, #4
 8001a46:	619a      	str	r2, [r3, #24]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a52:	2303      	movs	r3, #3
 8001a54:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f000 fe54 	bl	8002704 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a64:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a6c:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001a6e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a70:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a72:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a74:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a76:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a7a:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a7c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a7e:	f000 fd3f 	bl	8002500 <HAL_DMA_Init>
 8001a82:	b108      	cbz	r0, 8001a88 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001a84:	f000 f950 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a88:	622c      	str	r4, [r5, #32]
 8001a8a:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a8c:	b007      	add	sp, #28
 8001a8e:	bd30      	pop	{r4, r5, pc}
 8001a90:	40012400 	.word	0x40012400
 8001a94:	40010800 	.word	0x40010800
 8001a98:	20001094 	.word	0x20001094
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_DMA_Init+0x2c>)
{
 8001aa2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa4:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aa6:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ab0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ab8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001abc:	f000 fcde 	bl	800247c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ac0:	200b      	movs	r0, #11
 8001ac2:	f000 fd0f 	bl	80024e4 <HAL_NVIC_EnableIRQ>

}
 8001ac6:	b003      	add	sp, #12
 8001ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001acc:	40021000 	.word	0x40021000

08001ad0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <vApplicationGetIdleTaskMemory+0x28>)
 8001ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	200000b8 	.word	0x200000b8
 8001afc:	2000010c 	.word	0x2000010c

08001b00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_FREERTOS_Init+0x34>)
 8001b08:	1d3c      	adds	r4, r7, #4
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fbb8 	bl	8003292 <osThreadCreate>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <MX_FREERTOS_Init+0x38>)
 8001b26:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  AllTasks_init();
 8001b28:	f7ff fdac 	bl	8001684 <_Z13AllTasks_initv>
  /* USER CODE END RTOS_THREADS */

}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bdb0      	pop	{r4, r5, r7, pc}
 8001b34:	08004b30 	.word	0x08004b30
 8001b38:	200000b4 	.word	0x200000b4

08001b3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f001 fbcc 	bl	80032e2 <osDelay>
 8001b4a:	e7fb      	b.n	8001b44 <StartDefaultTask+0x8>

08001b4c <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	2210      	movs	r2, #16
{
 8001b4e:	b570      	push	{r4, r5, r6, lr}
 8001b50:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	eb0d 0002 	add.w	r0, sp, r2
 8001b56:	2100      	movs	r1, #0
 8001b58:	f002 ff11 	bl	800497e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b5e:	4d2a      	ldr	r5, [pc, #168]	; (8001c08 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b62:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	f042 0210 	orr.w	r2, r2, #16
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	f002 0210 	and.w	r2, r2, #16
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	f042 0220 	orr.w	r2, r2, #32
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	f002 0220 	and.w	r2, r2, #32
 8001b88:	9201      	str	r2, [sp, #4]
 8001b8a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	f042 0204 	orr.w	r2, r2, #4
 8001b92:	619a      	str	r2, [r3, #24]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	f002 0204 	and.w	r2, r2, #4
 8001b9a:	9202      	str	r2, [sp, #8]
 8001b9c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	f042 0208 	orr.w	r2, r2, #8
 8001ba4:	619a      	str	r2, [r3, #24]
 8001ba6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	9303      	str	r3, [sp, #12]
 8001bb0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bb2:	f000 fe89 	bl	80028c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	a904      	add	r1, sp, #16
 8001bc0:	4813      	ldr	r0, [pc, #76]	; (8001c10 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f000 fd9d 	bl	8002704 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bca:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	a904      	add	r1, sp, #16
 8001bce:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bd0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f000 fd95 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001be0:	a904      	add	r1, sp, #16
 8001be2:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f000 fd8b 	bl	8002704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bee:	4622      	mov	r2, r4
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2028      	movs	r0, #40	; 0x28
 8001bf4:	f000 fc42 	bl	800247c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bf8:	2028      	movs	r0, #40	; 0x28
 8001bfa:	f000 fc73 	bl	80024e4 <HAL_NVIC_EnableIRQ>

}
 8001bfe:	b008      	add	sp, #32
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	10110000 	.word	0x10110000
 8001c10:	40011000 	.word	0x40011000

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f000 f970 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f80d 	bl	8001c3a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff ff94 	bl	8001b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c24:	f7ff ff3c 	bl	8001aa0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c28:	f7ff feb8 	bl	800199c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001c2c:	f000 f90e 	bl	8001e4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001c30:	f7ff ff66 	bl	8001b00 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001c34:	f001 fb28 	bl	8003288 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <main+0x24>

08001c3a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b094      	sub	sp, #80	; 0x50
 8001c3e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c44:	2228      	movs	r2, #40	; 0x28
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 fe98 	bl	800497e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c72:	2310      	movs	r3, #16
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c76:	2302      	movs	r3, #2
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fe30 	bl	80028ec <HAL_RCC_OscConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c9c:	f000 f844 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 ffef 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cd2:	f000 f829 	bl	8001d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f001 f8b9 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cf6:	f000 f817 	bl	8001d28 <Error_Handler>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3750      	adds	r7, #80	; 0x50
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d16:	f000 f903 	bl	8001f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_MspInit+0x48>)
{
 8001d36:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d38:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	619a      	str	r2, [r3, #24]
 8001d42:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d44:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	f002 0201 	and.w	r2, r2, #1
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d56:	61da      	str	r2, [r3, #28]
 8001d58:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d5a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d64:	f000 fb8a 	bl	800247c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d68:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d6a:	6853      	ldr	r3, [r2, #4]
 8001d6c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d76:	b003      	add	sp, #12
 8001d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000

08001d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001d86:	4601      	mov	r1, r0
{
 8001d88:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2019      	movs	r0, #25
 8001d8e:	f000 fb75 	bl	800247c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001d92:	2019      	movs	r0, #25
 8001d94:	f000 fba6 	bl	80024e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d9a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9c:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d9e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da4:	619a      	str	r2, [r3, #24]
 8001da6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001da8:	4c11      	ldr	r4, [pc, #68]	; (8001df0 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db2:	f001 f833 	bl	8002e1c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001db6:	f001 f821 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_InitTick+0x70>)
 8001dbc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001dbe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001dc2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_InitTick+0x74>)
 8001dc6:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001dca:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dcc:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dce:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001dd0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001dd2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001dd6:	f001 f9c1 	bl	800315c <HAL_TIM_Base_Init>
 8001dda:	b920      	cbnz	r0, 8001de6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f001 f8b5 	bl	8002f4c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001de2:	b008      	add	sp, #32
 8001de4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001de6:	2001      	movs	r0, #1
 8001de8:	e7fb      	b.n	8001de2 <HAL_InitTick+0x5e>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	200010d8 	.word	0x200010d8
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	000f4240 	.word	0x000f4240

08001dfc <NMI_Handler>:
 8001dfc:	4770      	bx	lr

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	e7fe      	b.n	8001e00 <MemManage_Handler>

08001e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler>

08001e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e06:	4770      	bx	lr

08001e08 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e08:	4801      	ldr	r0, [pc, #4]	; (8001e10 <DMA1_Channel1_IRQHandler+0x8>)
 8001e0a:	f000 bbe7 	b.w	80025dc <HAL_DMA_IRQHandler>
 8001e0e:	bf00      	nop
 8001e10:	20001094 	.word	0x20001094

08001e14 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4801      	ldr	r0, [pc, #4]	; (8001e1c <TIM1_UP_IRQHandler+0x8>)
 8001e16:	f001 b8c7 	b.w	8002fa8 <HAL_TIM_IRQHandler>
 8001e1a:	bf00      	nop
 8001e1c:	200010d8 	.word	0x200010d8

08001e20 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e24:	f000 bd56 	b.w	80028d4 <HAL_GPIO_EXTI_IRQHandler>

08001e28 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e28:	2001      	movs	r0, #1
 8001e2a:	4770      	bx	lr

08001e2c <_kill>:

int _kill(int pid, int sig)
{
 8001e2c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e2e:	f002 fd69 	bl	8004904 <__errno>
 8001e32:	2316      	movs	r3, #22
 8001e34:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	bd08      	pop	{r3, pc}

08001e3c <_exit>:

void _exit (int status)
{
 8001e3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e3e:	f002 fd61 	bl	8004904 <__errno>
 8001e42:	2316      	movs	r3, #22
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	e7fe      	b.n	8001e46 <_exit+0xa>

08001e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	4770      	bx	lr
	...

08001e4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e4c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8001e4e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e56:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8001e58:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e5e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e60:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e62:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e64:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e6a:	f001 f9df 	bl	800322c <HAL_UART_Init>
 8001e6e:	b118      	cbz	r0, 8001e78 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001e70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e74:	f7ff bf58 	b.w	8001d28 <Error_Handler>
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20001120 	.word	0x20001120
 8001e80:	40004800 	.word	0x40004800

08001e84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
 8001e88:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	a802      	add	r0, sp, #8
 8001e90:	f002 fd75 	bl	800497e <memset>
  if(uartHandle->Instance==USART3)
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_UART_MspInit+0x70>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d128      	bne.n	8001eee <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e9c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001ea0:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ea4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ea8:	61da      	str	r2, [r3, #28]
 8001eaa:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	f042 0208 	orr.w	r2, r2, #8
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f000 fc15 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ede:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	a902      	add	r1, sp, #8
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f000 fc0b 	bl	8002704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eee:	b006      	add	sp, #24
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40004800 	.word	0x40004800
 8001ef8:	40010c00 	.word	0x40010c00

08001efc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x20>)
{
 8001efe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f02:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	f000 faa5 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff ff38 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff ff0e 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	bd08      	pop	{r3, pc}
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f20:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_IncTick+0x10>)
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_IncTick+0x14>)
 8001f24:	6811      	ldr	r1, [r2, #0]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	440b      	add	r3, r1
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20001160 	.word	0x20001160
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <HAL_GetTick+0x8>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20001160 	.word	0x20001160

08001f44 <HAL_ADC_ConvCpltCallback>:
 8001f44:	4770      	bx	lr

08001f46 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f46:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001f48:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001f50:	d11b      	bne.n	8001f8a <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001f62:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001f66:	d10c      	bne.n	8001f82 <ADC_DMAConvCplt+0x3c>
 8001f68:	7b1a      	ldrb	r2, [r3, #12]
 8001f6a:	b952      	cbnz	r2, 8001f82 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f76:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f78:	bf5e      	ittt	pl
 8001f7a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8001f7c:	f042 0201 	orrpl.w	r2, r2, #1
 8001f80:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_ADC_ConvCpltCallback>
 8001f88:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4718      	bx	r3

08001f94 <HAL_ADC_ConvHalfCpltCallback>:
 8001f94:	4770      	bx	lr

08001f96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f96:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f98:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f9a:	f7ff fffb 	bl	8001f94 <HAL_ADC_ConvHalfCpltCallback>
 8001f9e:	bd08      	pop	{r3, pc}

08001fa0 <HAL_ADC_ErrorCallback>:
{
 8001fa0:	4770      	bx	lr

08001fa2 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001fa4:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fac:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fb6:	f7ff fff3 	bl	8001fa0 <HAL_ADC_ErrorCallback>
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001fbc:	2300      	movs	r3, #0
{ 
 8001fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001fc0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001fc2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d074      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xf8>
 8001fca:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001fcc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001fce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001fd2:	2d06      	cmp	r5, #6
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001fda:	680c      	ldr	r4, [r1, #0]
 8001fdc:	d825      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fde:	442b      	add	r3, r5
 8001fe0:	251f      	movs	r5, #31
 8001fe2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001fe4:	3b05      	subs	r3, #5
 8001fe6:	409d      	lsls	r5, r3
 8001fe8:	ea26 0505 	bic.w	r5, r6, r5
 8001fec:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff0:	432b      	orrs	r3, r5
 8001ff2:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff4:	2c09      	cmp	r4, #9
 8001ff6:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001ffa:	688d      	ldr	r5, [r1, #8]
 8001ffc:	d92f      	bls.n	800205e <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ffe:	2607      	movs	r6, #7
 8002000:	4423      	add	r3, r4
 8002002:	68d1      	ldr	r1, [r2, #12]
 8002004:	3b1e      	subs	r3, #30
 8002006:	409e      	lsls	r6, r3
 8002008:	ea21 0106 	bic.w	r1, r1, r6
 800200c:	fa05 f303 	lsl.w	r3, r5, r3
 8002010:	430b      	orrs	r3, r1
 8002012:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002014:	f1a4 0310 	sub.w	r3, r4, #16
 8002018:	2b01      	cmp	r3, #1
 800201a:	d92b      	bls.n	8002074 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800201e:	2200      	movs	r2, #0
 8002020:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8002024:	4618      	mov	r0, r3
 8002026:	b002      	add	sp, #8
 8002028:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800202a:	2d0c      	cmp	r5, #12
 800202c:	d80b      	bhi.n	8002046 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800202e:	442b      	add	r3, r5
 8002030:	251f      	movs	r5, #31
 8002032:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002034:	3b23      	subs	r3, #35	; 0x23
 8002036:	409d      	lsls	r5, r3
 8002038:	ea26 0505 	bic.w	r5, r6, r5
 800203c:	fa04 f303 	lsl.w	r3, r4, r3
 8002040:	432b      	orrs	r3, r5
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	e7d6      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002046:	442b      	add	r3, r5
 8002048:	251f      	movs	r5, #31
 800204a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800204c:	3b41      	subs	r3, #65	; 0x41
 800204e:	409d      	lsls	r5, r3
 8002050:	ea26 0505 	bic.w	r5, r6, r5
 8002054:	fa04 f303 	lsl.w	r3, r4, r3
 8002058:	432b      	orrs	r3, r5
 800205a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800205c:	e7ca      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800205e:	2607      	movs	r6, #7
 8002060:	6911      	ldr	r1, [r2, #16]
 8002062:	4423      	add	r3, r4
 8002064:	409e      	lsls	r6, r3
 8002066:	ea21 0106 	bic.w	r1, r1, r6
 800206a:	fa05 f303 	lsl.w	r3, r5, r3
 800206e:	430b      	orrs	r3, r1
 8002070:	6113      	str	r3, [r2, #16]
 8002072:	e7cf      	b.n	8002014 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_ConfigChannel+0xfc>)
 8002076:	429a      	cmp	r2, r3
 8002078:	d116      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800207a:	6893      	ldr	r3, [r2, #8]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	d4cd      	bmi.n	800201c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002080:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002082:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002088:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800208a:	d1c7      	bne.n	800201c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_ADC_ConfigChannel+0x100>)
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_ADC_ConfigChannel+0x104>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	fbb3 f2f2 	udiv	r2, r3, r2
 8002096:	230a      	movs	r3, #10
 8002098:	4353      	muls	r3, r2
            wait_loop_index--;
 800209a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800209c:	9b01      	ldr	r3, [sp, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0bc      	beq.n	800201c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80020a2:	9b01      	ldr	r3, [sp, #4]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	e7f8      	b.n	800209a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e7b4      	b.n	800201e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80020b4:	2302      	movs	r3, #2
 80020b6:	e7b5      	b.n	8002024 <HAL_ADC_ConfigChannel+0x68>
 80020b8:	40012400 	.word	0x40012400
 80020bc:	20000000 	.word	0x20000000
 80020c0:	000f4240 	.word	0x000f4240

080020c4 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80020c4:	2300      	movs	r3, #0
{
 80020c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80020c8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ca:	6803      	ldr	r3, [r0, #0]
{
 80020cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	07d2      	lsls	r2, r2, #31
 80020d2:	d502      	bpl.n	80020da <ADC_Enable+0x16>
  return HAL_OK;
 80020d4:	2000      	movs	r0, #0
}
 80020d6:	b002      	add	sp, #8
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <ADC_Enable+0x68>)
 80020e4:	4a12      	ldr	r2, [pc, #72]	; (8002130 <ADC_Enable+0x6c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80020ec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	b9c3      	cbnz	r3, 8002124 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80020f2:	f7ff ff21 	bl	8001f38 <HAL_GetTick>
 80020f6:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	689d      	ldr	r5, [r3, #8]
 80020fc:	f015 0501 	ands.w	r5, r5, #1
 8002100:	d1e8      	bne.n	80020d4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002102:	f7ff ff19 	bl	8001f38 <HAL_GetTick>
 8002106:	1b80      	subs	r0, r0, r6
 8002108:	2802      	cmp	r0, #2
 800210a:	d9f5      	bls.n	80020f8 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800210e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800211a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002122:	e7d8      	b.n	80020d6 <ADC_Enable+0x12>
      wait_loop_index--;
 8002124:	9b01      	ldr	r3, [sp, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	e7e0      	b.n	80020ec <ADC_Enable+0x28>
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000
 8002130:	000f4240 	.word	0x000f4240

08002134 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002134:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002138:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800213a:	2b01      	cmp	r3, #1
{
 800213c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800213e:	d054      	beq.n	80021ea <HAL_ADC_Start+0xb6>
 8002140:	2301      	movs	r3, #1
 8002142:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002146:	f7ff ffbd 	bl	80020c4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800214a:	2800      	cmp	r0, #0
 800214c:	d149      	bne.n	80021e2 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002150:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	4293      	cmp	r3, r2
 8002164:	d104      	bne.n	8002170 <HAL_ADC_Start+0x3c>
 8002166:	4923      	ldr	r1, [pc, #140]	; (80021f4 <HAL_ADC_Start+0xc0>)
 8002168:	684a      	ldr	r2, [r1, #4]
 800216a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800216e:	d12e      	bne.n	80021ce <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002170:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002172:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002176:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002178:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800217a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800217c:	bf41      	itttt	mi
 800217e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8002180:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8002184:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8002188:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800218c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002190:	bf1c      	itt	ne
 8002192:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002194:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002198:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800219a:	2200      	movs	r2, #0
 800219c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021a0:	f06f 0202 	mvn.w	r2, #2
 80021a4:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80021ac:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80021b0:	d113      	bne.n	80021da <HAL_ADC_Start+0xa6>
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_ADC_Start+0xbc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021b8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80021bc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021be:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80021c2:	d10a      	bne.n	80021da <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021d4:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021d6:	684a      	ldr	r2, [r1, #4]
 80021d8:	e7cf      	b.n	800217a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021e0:	e7f3      	b.n	80021ca <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80021e2:	2300      	movs	r3, #0
 80021e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80021e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80021ea:	2002      	movs	r0, #2
}
 80021ec:	bd10      	pop	{r4, pc}
 80021ee:	bf00      	nop
 80021f0:	40012800 	.word	0x40012800
 80021f4:	40012400 	.word	0x40012400

080021f8 <HAL_ADC_Start_DMA>:
{
 80021f8:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80021fc:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021fe:	4b40      	ldr	r3, [pc, #256]	; (8002300 <HAL_ADC_Start_DMA+0x108>)
 8002200:	6802      	ldr	r2, [r0, #0]
{
 8002202:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002204:	429a      	cmp	r2, r3
{
 8002206:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002208:	d002      	beq.n	8002210 <HAL_ADC_Start_DMA+0x18>
 800220a:	493e      	ldr	r1, [pc, #248]	; (8002304 <HAL_ADC_Start_DMA+0x10c>)
 800220c:	428a      	cmp	r2, r1
 800220e:	d103      	bne.n	8002218 <HAL_ADC_Start_DMA+0x20>
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002216:	d16e      	bne.n	80022f6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002218:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800221c:	2b01      	cmp	r3, #1
 800221e:	d06c      	beq.n	80022fa <HAL_ADC_Start_DMA+0x102>
 8002220:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002222:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002224:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002228:	f7ff ff4c 	bl	80020c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800222c:	4606      	mov	r6, r0
 800222e:	2800      	cmp	r0, #0
 8002230:	d15d      	bne.n	80022ee <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8002232:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002234:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002236:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800223c:	f020 0001 	bic.w	r0, r0, #1
 8002240:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002244:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002246:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002248:	d104      	bne.n	8002254 <HAL_ADC_Start_DMA+0x5c>
 800224a:	4a2d      	ldr	r2, [pc, #180]	; (8002300 <HAL_ADC_Start_DMA+0x108>)
 800224c:	6853      	ldr	r3, [r2, #4]
 800224e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002252:	d13e      	bne.n	80022d2 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002256:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800225a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800225c:	684b      	ldr	r3, [r1, #4]
 800225e:	055a      	lsls	r2, r3, #21
 8002260:	d505      	bpl.n	800226e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002264:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002270:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002272:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002276:	bf18      	it	ne
 8002278:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800227a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800227c:	bf18      	it	ne
 800227e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002282:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002284:	2300      	movs	r3, #0
 8002286:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800228c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800228e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_ADC_Start_DMA+0x114>)
 8002292:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_ADC_Start_DMA+0x118>)
 8002296:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002298:	f06f 0302 	mvn.w	r3, #2
 800229c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022a0:	f851 3c44 	ldr.w	r3, [r1, #-68]
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ac:	4643      	mov	r3, r8
 80022ae:	f000 f957 	bl	8002560 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80022ba:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	bf0c      	ite	eq
 80022c2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022c6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	4630      	mov	r0, r6
 80022ce:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022da:	6853      	ldr	r3, [r2, #4]
 80022dc:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022de:	bf41      	itttt	mi
 80022e0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80022e2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80022e6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80022ea:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80022ec:	e7bf      	b.n	800226e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80022ee:	2300      	movs	r3, #0
 80022f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80022f4:	e7ea      	b.n	80022cc <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80022f6:	2601      	movs	r6, #1
 80022f8:	e7e8      	b.n	80022cc <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80022fa:	2602      	movs	r6, #2
 80022fc:	e7e6      	b.n	80022cc <HAL_ADC_Start_DMA+0xd4>
 80022fe:	bf00      	nop
 8002300:	40012400 	.word	0x40012400
 8002304:	40012800 	.word	0x40012800
 8002308:	08001f47 	.word	0x08001f47
 800230c:	08001f97 	.word	0x08001f97
 8002310:	08001fa3 	.word	0x08001fa3

08002314 <ADC_ConversionStop_Disable>:
{
 8002314:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002316:	6803      	ldr	r3, [r0, #0]
{
 8002318:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	07d2      	lsls	r2, r2, #31
 800231e:	d401      	bmi.n	8002324 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002320:	2000      	movs	r0, #0
 8002322:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800232c:	f7ff fe04 	bl	8001f38 <HAL_GetTick>
 8002330:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	07db      	lsls	r3, r3, #31
 8002338:	d5f2      	bpl.n	8002320 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800233a:	f7ff fdfd 	bl	8001f38 <HAL_GetTick>
 800233e:	1b40      	subs	r0, r0, r5
 8002340:	2802      	cmp	r0, #2
 8002342:	d9f6      	bls.n	8002332 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002356:	bd38      	pop	{r3, r4, r5, pc}

08002358 <HAL_ADC_Init>:
{
 8002358:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800235a:	4604      	mov	r4, r0
 800235c:	2800      	cmp	r0, #0
 800235e:	d071      	beq.n	8002444 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002360:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002362:	b923      	cbnz	r3, 800236e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002364:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002366:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800236a:	f7ff fb4f 	bl	8001a0c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff ffd0 	bl	8002314 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002376:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800237c:	d164      	bne.n	8002448 <HAL_ADC_Init+0xf0>
 800237e:	2800      	cmp	r0, #0
 8002380:	d162      	bne.n	8002448 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002382:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002388:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002392:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002394:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002396:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002398:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800239a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800239e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023a2:	d038      	beq.n	8002416 <HAL_ADC_Init+0xbe>
 80023a4:	2901      	cmp	r1, #1
 80023a6:	bf14      	ite	ne
 80023a8:	4606      	movne	r6, r0
 80023aa:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ae:	7d25      	ldrb	r5, [r4, #20]
 80023b0:	2d01      	cmp	r5, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d130      	bne.n	800241a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023b8:	69a3      	ldr	r3, [r4, #24]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80023c0:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80023c4:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80023ca:	685d      	ldr	r5, [r3, #4]
 80023cc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80023d0:	ea45 0506 	orr.w	r5, r5, r6
 80023d4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80023d6:	689e      	ldr	r6, [r3, #8]
 80023d8:	4d1d      	ldr	r5, [pc, #116]	; (8002450 <HAL_ADC_Init+0xf8>)
 80023da:	ea05 0506 	and.w	r5, r5, r6
 80023de:	ea45 0502 	orr.w	r5, r5, r2
 80023e2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e4:	d001      	beq.n	80023ea <HAL_ADC_Init+0x92>
 80023e6:	2901      	cmp	r1, #1
 80023e8:	d120      	bne.n	800242c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ea:	6921      	ldr	r1, [r4, #16]
 80023ec:	3901      	subs	r1, #1
 80023ee:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80023f0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80023f2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80023f6:	4329      	orrs	r1, r5
 80023f8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_ADC_Init+0xfc>)
 80023fe:	400b      	ands	r3, r1
 8002400:	429a      	cmp	r2, r3
 8002402:	d115      	bne.n	8002430 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8002404:	2300      	movs	r3, #0
 8002406:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800240a:	f023 0303 	bic.w	r3, r3, #3
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	62a3      	str	r3, [r4, #40]	; 0x28
 8002414:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002416:	460e      	mov	r6, r1
 8002418:	e7c9      	b.n	80023ae <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800242a:	e7cb      	b.n	80023c4 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 800242c:	2100      	movs	r1, #0
 800242e:	e7df      	b.n	80023f0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8002430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002432:	f023 0312 	bic.w	r3, r3, #18
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002444:	2001      	movs	r0, #1
}
 8002446:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	62a3      	str	r3, [r4, #40]	; 0x28
 800244e:	e7f9      	b.n	8002444 <HAL_ADC_Init+0xec>
 8002450:	ffe1f7fd 	.word	0xffe1f7fd
 8002454:	ff1f0efe 	.word	0xff1f0efe

08002458 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800245a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800245e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002472:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002474:	60d3      	str	r3, [r2, #12]
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b530      	push	{r4, r5, lr}
 8002480:	68dc      	ldr	r4, [r3, #12]
 8002482:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002486:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	2b04      	cmp	r3, #4
 800248e:	bf28      	it	cs
 8002490:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002498:	bf98      	it	ls
 800249a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	fa05 f303 	lsl.w	r3, r5, r3
 80024a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a4:	bf88      	it	hi
 80024a6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4019      	ands	r1, r3
 80024aa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	fa05 f404 	lsl.w	r4, r5, r4
 80024b0:	3c01      	subs	r4, #1
 80024b2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80024b4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b6:	ea42 0201 	orr.w	r2, r2, r1
 80024ba:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	bfa9      	itett	ge
 80024c0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	4b06      	ldrlt	r3, [pc, #24]	; (80024e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	b2d2      	uxtbge	r2, r2
 80024c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	bfbb      	ittet	lt
 80024ce:	f000 000f 	andlt.w	r0, r0, #15
 80024d2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	541a      	strblt	r2, [r3, r0]
 80024da:	bd30      	pop	{r4, r5, pc}
 80024dc:	e000ed00 	.word	0xe000ed00
 80024e0:	e000ed14 	.word	0xe000ed14

080024e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024e4:	2800      	cmp	r0, #0
 80024e6:	db08      	blt.n	80024fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e8:	2301      	movs	r3, #1
 80024ea:	0942      	lsrs	r2, r0, #5
 80024ec:	f000 001f 	and.w	r0, r0, #31
 80024f0:	fa03 f000 	lsl.w	r0, r3, r0
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <HAL_NVIC_EnableIRQ+0x18>)
 80024f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100

08002500 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002500:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002502:	b330      	cbz	r0, 8002552 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002504:	2214      	movs	r2, #20
 8002506:	6801      	ldr	r1, [r0, #0]
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800250a:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800250c:	440b      	add	r3, r1
 800250e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8002518:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800251a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 800251c:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800251e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8002522:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002526:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252a:	4323      	orrs	r3, r4
 800252c:	6904      	ldr	r4, [r0, #16]
 800252e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	6944      	ldr	r4, [r0, #20]
 8002532:	4323      	orrs	r3, r4
 8002534:	6984      	ldr	r4, [r0, #24]
 8002536:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002538:	69c4      	ldr	r4, [r0, #28]
 800253a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800253c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800253e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002540:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002544:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800254a:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800254e:	4618      	mov	r0, r3
 8002550:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
}
 8002554:	bd10      	pop	{r4, pc}
 8002556:	bf00      	nop
 8002558:	bffdfff8 	.word	0xbffdfff8
 800255c:	40020000 	.word	0x40020000

08002560 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002562:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002566:	2c01      	cmp	r4, #1
 8002568:	d035      	beq.n	80025d6 <HAL_DMA_Start_IT+0x76>
 800256a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8002570:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002574:	42a5      	cmp	r5, r4
 8002576:	f04f 0600 	mov.w	r6, #0
 800257a:	f04f 0402 	mov.w	r4, #2
 800257e:	d128      	bne.n	80025d2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002584:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002586:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002588:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800258a:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800258c:	f026 0601 	bic.w	r6, r6, #1
 8002590:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002592:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002594:	40bd      	lsls	r5, r7
 8002596:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002598:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259a:	6843      	ldr	r3, [r0, #4]
 800259c:	6805      	ldr	r5, [r0, #0]
 800259e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80025a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025a2:	bf0b      	itete	eq
 80025a4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80025a6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80025a8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80025aa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80025ac:	b14b      	cbz	r3, 80025c2 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025b4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80025b6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f043 030a 	orr.w	r3, r3, #10
 80025d0:	e7f0      	b.n	80025b4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80025d2:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025dc <HAL_DMA_IRQHandler>:
{
 80025dc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025de:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80025e6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025e8:	4095      	lsls	r5, r2
 80025ea:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80025ec:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025ee:	d032      	beq.n	8002656 <HAL_DMA_IRQHandler+0x7a>
 80025f0:	074d      	lsls	r5, r1, #29
 80025f2:	d530      	bpl.n	8002656 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f8:	bf5e      	ittt	pl
 80025fa:	681a      	ldrpl	r2, [r3, #0]
 80025fc:	f022 0204 	bicpl.w	r2, r2, #4
 8002600:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002602:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <HAL_DMA_IRQHandler+0x120>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d019      	beq.n	800263c <HAL_DMA_IRQHandler+0x60>
 8002608:	3214      	adds	r2, #20
 800260a:	4293      	cmp	r3, r2
 800260c:	d018      	beq.n	8002640 <HAL_DMA_IRQHandler+0x64>
 800260e:	3214      	adds	r2, #20
 8002610:	4293      	cmp	r3, r2
 8002612:	d017      	beq.n	8002644 <HAL_DMA_IRQHandler+0x68>
 8002614:	3214      	adds	r2, #20
 8002616:	4293      	cmp	r3, r2
 8002618:	d017      	beq.n	800264a <HAL_DMA_IRQHandler+0x6e>
 800261a:	3214      	adds	r2, #20
 800261c:	4293      	cmp	r3, r2
 800261e:	d017      	beq.n	8002650 <HAL_DMA_IRQHandler+0x74>
 8002620:	3214      	adds	r2, #20
 8002622:	4293      	cmp	r3, r2
 8002624:	bf0c      	ite	eq
 8002626:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800262a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <HAL_DMA_IRQHandler+0x124>)
 8002630:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002632:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05e      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x11a>
}
 8002638:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800263a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800263c:	2304      	movs	r3, #4
 800263e:	e7f6      	b.n	800262e <HAL_DMA_IRQHandler+0x52>
 8002640:	2340      	movs	r3, #64	; 0x40
 8002642:	e7f4      	b.n	800262e <HAL_DMA_IRQHandler+0x52>
 8002644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002648:	e7f1      	b.n	800262e <HAL_DMA_IRQHandler+0x52>
 800264a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264e:	e7ee      	b.n	800262e <HAL_DMA_IRQHandler+0x52>
 8002650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002654:	e7eb      	b.n	800262e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002656:	2502      	movs	r5, #2
 8002658:	4095      	lsls	r5, r2
 800265a:	4225      	tst	r5, r4
 800265c:	d035      	beq.n	80026ca <HAL_DMA_IRQHandler+0xee>
 800265e:	078d      	lsls	r5, r1, #30
 8002660:	d533      	bpl.n	80026ca <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	0694      	lsls	r4, r2, #26
 8002666:	d406      	bmi.n	8002676 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f022 020a 	bic.w	r2, r2, #10
 800266e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002670:	2201      	movs	r2, #1
 8002672:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_DMA_IRQHandler+0x120>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d019      	beq.n	80026b0 <HAL_DMA_IRQHandler+0xd4>
 800267c:	3214      	adds	r2, #20
 800267e:	4293      	cmp	r3, r2
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
 8002682:	3214      	adds	r2, #20
 8002684:	4293      	cmp	r3, r2
 8002686:	d017      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xdc>
 8002688:	3214      	adds	r2, #20
 800268a:	4293      	cmp	r3, r2
 800268c:	d017      	beq.n	80026be <HAL_DMA_IRQHandler+0xe2>
 800268e:	3214      	adds	r2, #20
 8002690:	4293      	cmp	r3, r2
 8002692:	d017      	beq.n	80026c4 <HAL_DMA_IRQHandler+0xe8>
 8002694:	3214      	adds	r2, #20
 8002696:	4293      	cmp	r3, r2
 8002698:	bf0c      	ite	eq
 800269a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800269e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_DMA_IRQHandler+0x124>)
 80026a4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80026a6:	2300      	movs	r3, #0
 80026a8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80026ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026ae:	e7c1      	b.n	8002634 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026b0:	2302      	movs	r3, #2
 80026b2:	e7f6      	b.n	80026a2 <HAL_DMA_IRQHandler+0xc6>
 80026b4:	2320      	movs	r3, #32
 80026b6:	e7f4      	b.n	80026a2 <HAL_DMA_IRQHandler+0xc6>
 80026b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026bc:	e7f1      	b.n	80026a2 <HAL_DMA_IRQHandler+0xc6>
 80026be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c2:	e7ee      	b.n	80026a2 <HAL_DMA_IRQHandler+0xc6>
 80026c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c8:	e7eb      	b.n	80026a2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ca:	2508      	movs	r5, #8
 80026cc:	4095      	lsls	r5, r2
 80026ce:	4225      	tst	r5, r4
 80026d0:	d011      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x11a>
 80026d2:	0709      	lsls	r1, r1, #28
 80026d4:	d50f      	bpl.n	80026f6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d6:	6819      	ldr	r1, [r3, #0]
 80026d8:	f021 010e 	bic.w	r1, r1, #14
 80026dc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026de:	2301      	movs	r3, #1
 80026e0:	fa03 f202 	lsl.w	r2, r3, r2
 80026e4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026e6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80026e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80026ec:	2300      	movs	r3, #0
 80026ee:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80026f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026f4:	e79e      	b.n	8002634 <HAL_DMA_IRQHandler+0x58>
}
 80026f6:	bc70      	pop	{r4, r5, r6}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40020008 	.word	0x40020008
 8002700:	40020000 	.word	0x40020000

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002708:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800270a:	4626      	mov	r6, r4
 800270c:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800270e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80028b8 <HAL_GPIO_Init+0x1b4>
 8002712:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80028bc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	680a      	ldr	r2, [r1, #0]
 8002718:	fa32 f506 	lsrs.w	r5, r2, r6
 800271c:	d102      	bne.n	8002724 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800271e:	b003      	add	sp, #12
 8002720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002724:	f04f 0801 	mov.w	r8, #1
 8002728:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002730:	4590      	cmp	r8, r2
 8002732:	d17f      	bne.n	8002834 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8002734:	684d      	ldr	r5, [r1, #4]
 8002736:	2d12      	cmp	r5, #18
 8002738:	f000 80aa 	beq.w	8002890 <HAL_GPIO_Init+0x18c>
 800273c:	f200 8083 	bhi.w	8002846 <HAL_GPIO_Init+0x142>
 8002740:	2d02      	cmp	r5, #2
 8002742:	f000 80a2 	beq.w	800288a <HAL_GPIO_Init+0x186>
 8002746:	d877      	bhi.n	8002838 <HAL_GPIO_Init+0x134>
 8002748:	2d00      	cmp	r5, #0
 800274a:	f000 8089 	beq.w	8002860 <HAL_GPIO_Init+0x15c>
 800274e:	2d01      	cmp	r5, #1
 8002750:	f000 8099 	beq.w	8002886 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002754:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002758:	2aff      	cmp	r2, #255	; 0xff
 800275a:	bf93      	iteet	ls
 800275c:	4682      	movls	sl, r0
 800275e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002762:	3d08      	subhi	r5, #8
 8002764:	f8d0 b000 	ldrls.w	fp, [r0]
 8002768:	bf92      	itee	ls
 800276a:	00b5      	lslls	r5, r6, #2
 800276c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002770:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002772:	fa09 f805 	lsl.w	r8, r9, r5
 8002776:	ea2b 0808 	bic.w	r8, fp, r8
 800277a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800277e:	bf88      	it	hi
 8002780:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002784:	ea48 0505 	orr.w	r5, r8, r5
 8002788:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800278c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002790:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002794:	d04e      	beq.n	8002834 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002796:	4d45      	ldr	r5, [pc, #276]	; (80028ac <HAL_GPIO_Init+0x1a8>)
 8002798:	4f44      	ldr	r7, [pc, #272]	; (80028ac <HAL_GPIO_Init+0x1a8>)
 800279a:	69ad      	ldr	r5, [r5, #24]
 800279c:	f026 0803 	bic.w	r8, r6, #3
 80027a0:	f045 0501 	orr.w	r5, r5, #1
 80027a4:	61bd      	str	r5, [r7, #24]
 80027a6:	69bd      	ldr	r5, [r7, #24]
 80027a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80027ac:	f005 0501 	and.w	r5, r5, #1
 80027b0:	9501      	str	r5, [sp, #4]
 80027b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027ba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80027c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027c4:	fa09 f90b 	lsl.w	r9, r9, fp
 80027c8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	4d38      	ldr	r5, [pc, #224]	; (80028b0 <HAL_GPIO_Init+0x1ac>)
 80027ce:	42a8      	cmp	r0, r5
 80027d0:	d063      	beq.n	800289a <HAL_GPIO_Init+0x196>
 80027d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027d6:	42a8      	cmp	r0, r5
 80027d8:	d061      	beq.n	800289e <HAL_GPIO_Init+0x19a>
 80027da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027de:	42a8      	cmp	r0, r5
 80027e0:	d05f      	beq.n	80028a2 <HAL_GPIO_Init+0x19e>
 80027e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027e6:	42a8      	cmp	r0, r5
 80027e8:	bf0c      	ite	eq
 80027ea:	2503      	moveq	r5, #3
 80027ec:	2504      	movne	r5, #4
 80027ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80027f2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80027f6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80027fa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002800:	bf14      	ite	ne
 8002802:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002804:	4395      	biceq	r5, r2
 8002806:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002808:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800280a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800280e:	bf14      	ite	ne
 8002810:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002812:	4395      	biceq	r5, r2
 8002814:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002816:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002818:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800281c:	bf14      	ite	ne
 800281e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002820:	4395      	biceq	r5, r2
 8002822:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002824:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002826:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800282a:	bf14      	ite	ne
 800282c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800282e:	ea25 0202 	biceq.w	r2, r5, r2
 8002832:	60da      	str	r2, [r3, #12]
	position++;
 8002834:	3601      	adds	r6, #1
 8002836:	e76e      	b.n	8002716 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002838:	2d03      	cmp	r5, #3
 800283a:	d022      	beq.n	8002882 <HAL_GPIO_Init+0x17e>
 800283c:	2d11      	cmp	r5, #17
 800283e:	d189      	bne.n	8002754 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002840:	68cc      	ldr	r4, [r1, #12]
 8002842:	3404      	adds	r4, #4
          break;
 8002844:	e786      	b.n	8002754 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002846:	4f1b      	ldr	r7, [pc, #108]	; (80028b4 <HAL_GPIO_Init+0x1b0>)
 8002848:	42bd      	cmp	r5, r7
 800284a:	d009      	beq.n	8002860 <HAL_GPIO_Init+0x15c>
 800284c:	d812      	bhi.n	8002874 <HAL_GPIO_Init+0x170>
 800284e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80028c0 <HAL_GPIO_Init+0x1bc>
 8002852:	454d      	cmp	r5, r9
 8002854:	d004      	beq.n	8002860 <HAL_GPIO_Init+0x15c>
 8002856:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800285a:	454d      	cmp	r5, r9
 800285c:	f47f af7a 	bne.w	8002754 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002860:	688c      	ldr	r4, [r1, #8]
 8002862:	b1c4      	cbz	r4, 8002896 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002864:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002866:	bf0c      	ite	eq
 8002868:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800286c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002870:	2408      	movs	r4, #8
 8002872:	e76f      	b.n	8002754 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002874:	4575      	cmp	r5, lr
 8002876:	d0f3      	beq.n	8002860 <HAL_GPIO_Init+0x15c>
 8002878:	4565      	cmp	r5, ip
 800287a:	d0f1      	beq.n	8002860 <HAL_GPIO_Init+0x15c>
 800287c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80028c4 <HAL_GPIO_Init+0x1c0>
 8002880:	e7eb      	b.n	800285a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002882:	2400      	movs	r4, #0
 8002884:	e766      	b.n	8002754 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002886:	68cc      	ldr	r4, [r1, #12]
          break;
 8002888:	e764      	b.n	8002754 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800288a:	68cc      	ldr	r4, [r1, #12]
 800288c:	3408      	adds	r4, #8
          break;
 800288e:	e761      	b.n	8002754 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002890:	68cc      	ldr	r4, [r1, #12]
 8002892:	340c      	adds	r4, #12
          break;
 8002894:	e75e      	b.n	8002754 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002896:	2404      	movs	r4, #4
 8002898:	e75c      	b.n	8002754 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800289a:	2500      	movs	r5, #0
 800289c:	e7a7      	b.n	80027ee <HAL_GPIO_Init+0xea>
 800289e:	2501      	movs	r5, #1
 80028a0:	e7a5      	b.n	80027ee <HAL_GPIO_Init+0xea>
 80028a2:	2502      	movs	r5, #2
 80028a4:	e7a3      	b.n	80027ee <HAL_GPIO_Init+0xea>
 80028a6:	bf00      	nop
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010800 	.word	0x40010800
 80028b4:	10210000 	.word	0x10210000
 80028b8:	10310000 	.word	0x10310000
 80028bc:	10320000 	.word	0x10320000
 80028c0:	10110000 	.word	0x10110000
 80028c4:	10220000 	.word	0x10220000

080028c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	b10a      	cbz	r2, 80028ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ca:	6101      	str	r1, [r0, #16]
 80028cc:	4770      	bx	lr
 80028ce:	0409      	lsls	r1, r1, #16
 80028d0:	e7fb      	b.n	80028ca <HAL_GPIO_WritePin+0x2>

080028d2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80028d4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	4201      	tst	r1, r0
 80028dc:	d002      	beq.n	80028e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e0:	f7ff fff7 	bl	80028d2 <HAL_GPIO_EXTI_Callback>
 80028e4:	bd08      	pop	{r3, pc}
 80028e6:	bf00      	nop
 80028e8:	40010400 	.word	0x40010400

080028ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f0:	4605      	mov	r5, r0
 80028f2:	b908      	cbnz	r0, 80028f8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
 80028f6:	e03c      	b.n	8002972 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f8:	6803      	ldr	r3, [r0, #0]
 80028fa:	07db      	lsls	r3, r3, #31
 80028fc:	d410      	bmi.n	8002920 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	682b      	ldr	r3, [r5, #0]
 8002900:	079f      	lsls	r7, r3, #30
 8002902:	d45d      	bmi.n	80029c0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	0719      	lsls	r1, r3, #28
 8002908:	f100 8094 	bmi.w	8002a34 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	075a      	lsls	r2, r3, #29
 8002910:	f100 80be 	bmi.w	8002a90 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	69e8      	ldr	r0, [r5, #28]
 8002916:	2800      	cmp	r0, #0
 8002918:	f040 812c 	bne.w	8002b74 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800291c:	2000      	movs	r0, #0
 800291e:	e028      	b.n	8002972 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002920:	4c8f      	ldr	r4, [pc, #572]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002922:	6863      	ldr	r3, [r4, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d007      	beq.n	800293c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800292c:	6863      	ldr	r3, [r4, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d109      	bne.n	800294a <HAL_RCC_OscConfig+0x5e>
 8002936:	6863      	ldr	r3, [r4, #4]
 8002938:	03de      	lsls	r6, r3, #15
 800293a:	d506      	bpl.n	800294a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	039c      	lsls	r4, r3, #14
 8002940:	d5dd      	bpl.n	80028fe <HAL_RCC_OscConfig+0x12>
 8002942:	686b      	ldr	r3, [r5, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1da      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
 8002948:	e7d4      	b.n	80028f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	686b      	ldr	r3, [r5, #4]
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x8c>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800295a:	f7ff faed 	bl	8001f38 <HAL_GetTick>
 800295e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	0398      	lsls	r0, r3, #14
 8002964:	d4cb      	bmi.n	80028fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002966:	f7ff fae7 	bl	8001f38 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	2864      	cmp	r0, #100	; 0x64
 800296e:	d9f7      	bls.n	8002960 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
}
 8002972:	b002      	add	sp, #8
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	b99b      	cbnz	r3, 80029a2 <HAL_RCC_OscConfig+0xb6>
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002988:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800298a:	f7ff fad5 	bl	8001f38 <HAL_GetTick>
 800298e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	0399      	lsls	r1, r3, #14
 8002994:	d5b3      	bpl.n	80028fe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002996:	f7ff facf 	bl	8001f38 <HAL_GetTick>
 800299a:	1b80      	subs	r0, r0, r6
 800299c:	2864      	cmp	r0, #100	; 0x64
 800299e:	d9f7      	bls.n	8002990 <HAL_RCC_OscConfig+0xa4>
 80029a0:	e7e6      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	d103      	bne.n	80029b2 <HAL_RCC_OscConfig+0xc6>
 80029aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ae:	6023      	str	r3, [r4, #0]
 80029b0:	e7cf      	b.n	8002952 <HAL_RCC_OscConfig+0x66>
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6023      	str	r3, [r4, #0]
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	e7cb      	b.n	8002958 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c0:	4c67      	ldr	r4, [pc, #412]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029c2:	6863      	ldr	r3, [r4, #4]
 80029c4:	f013 0f0c 	tst.w	r3, #12
 80029c8:	d007      	beq.n	80029da <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ca:	6863      	ldr	r3, [r4, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d110      	bne.n	80029f6 <HAL_RCC_OscConfig+0x10a>
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	03da      	lsls	r2, r3, #15
 80029d8:	d40d      	bmi.n	80029f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	079b      	lsls	r3, r3, #30
 80029de:	d502      	bpl.n	80029e6 <HAL_RCC_OscConfig+0xfa>
 80029e0:	692b      	ldr	r3, [r5, #16]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d186      	bne.n	80028f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	696a      	ldr	r2, [r5, #20]
 80029ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029f2:	6023      	str	r3, [r4, #0]
 80029f4:	e786      	b.n	8002904 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f6:	692a      	ldr	r2, [r5, #16]
 80029f8:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_OscConfig+0x278>)
 80029fa:	b16a      	cbz	r2, 8002a18 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a00:	f7ff fa9a 	bl	8001f38 <HAL_GetTick>
 8002a04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	079f      	lsls	r7, r3, #30
 8002a0a:	d4ec      	bmi.n	80029e6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7ff fa94 	bl	8001f38 <HAL_GetTick>
 8002a10:	1b80      	subs	r0, r0, r6
 8002a12:	2802      	cmp	r0, #2
 8002a14:	d9f7      	bls.n	8002a06 <HAL_RCC_OscConfig+0x11a>
 8002a16:	e7ab      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002a18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fa8d 	bl	8001f38 <HAL_GetTick>
 8002a1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	0798      	lsls	r0, r3, #30
 8002a24:	f57f af6e 	bpl.w	8002904 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff fa86 	bl	8001f38 <HAL_GetTick>
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	d9f6      	bls.n	8002a20 <HAL_RCC_OscConfig+0x134>
 8002a32:	e79d      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a34:	69aa      	ldr	r2, [r5, #24]
 8002a36:	4c4a      	ldr	r4, [pc, #296]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a38:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	b1da      	cbz	r2, 8002a74 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a40:	f7ff fa7a 	bl	8001f38 <HAL_GetTick>
 8002a44:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a48:	079b      	lsls	r3, r3, #30
 8002a4a:	d50d      	bpl.n	8002a68 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002a50:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a58:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002a5a:	bf00      	nop
  }
  while (Delay --);
 8002a5c:	9b01      	ldr	r3, [sp, #4]
 8002a5e:	1e5a      	subs	r2, r3, #1
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <HAL_RCC_OscConfig+0x16e>
 8002a66:	e751      	b.n	800290c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fa66 	bl	8001f38 <HAL_GetTick>
 8002a6c:	1b80      	subs	r0, r0, r6
 8002a6e:	2802      	cmp	r0, #2
 8002a70:	d9e9      	bls.n	8002a46 <HAL_RCC_OscConfig+0x15a>
 8002a72:	e77d      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002a76:	f7ff fa5f 	bl	8001f38 <HAL_GetTick>
 8002a7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a7e:	079f      	lsls	r7, r3, #30
 8002a80:	f57f af44 	bpl.w	800290c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a84:	f7ff fa58 	bl	8001f38 <HAL_GetTick>
 8002a88:	1b80      	subs	r0, r0, r6
 8002a8a:	2802      	cmp	r0, #2
 8002a8c:	d9f6      	bls.n	8002a7c <HAL_RCC_OscConfig+0x190>
 8002a8e:	e76f      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a90:	4c33      	ldr	r4, [pc, #204]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a92:	69e3      	ldr	r3, [r4, #28]
 8002a94:	00d8      	lsls	r0, r3, #3
 8002a96:	d424      	bmi.n	8002ae2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002a98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	69e3      	ldr	r3, [r4, #28]
 8002a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	61e3      	str	r3, [r4, #28]
 8002aa2:	69e3      	ldr	r3, [r4, #28]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4e30      	ldr	r6, [pc, #192]	; (8002b70 <HAL_RCC_OscConfig+0x284>)
 8002aae:	6833      	ldr	r3, [r6, #0]
 8002ab0:	05d9      	lsls	r1, r3, #23
 8002ab2:	d518      	bpl.n	8002ae6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	68eb      	ldr	r3, [r5, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d126      	bne.n	8002b08 <HAL_RCC_OscConfig+0x21c>
 8002aba:	6a23      	ldr	r3, [r4, #32]
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fa39 	bl	8001f38 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002aca:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	6a23      	ldr	r3, [r4, #32]
 8002ace:	079b      	lsls	r3, r3, #30
 8002ad0:	d53f      	bpl.n	8002b52 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002ad2:	2f00      	cmp	r7, #0
 8002ad4:	f43f af1e 	beq.w	8002914 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	69e3      	ldr	r3, [r4, #28]
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	61e3      	str	r3, [r4, #28]
 8002ae0:	e718      	b.n	8002914 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2700      	movs	r7, #0
 8002ae4:	e7e2      	b.n	8002aac <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	6833      	ldr	r3, [r6, #0]
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002aee:	f7ff fa23 	bl	8001f38 <HAL_GetTick>
 8002af2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	6833      	ldr	r3, [r6, #0]
 8002af6:	05da      	lsls	r2, r3, #23
 8002af8:	d4dc      	bmi.n	8002ab4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7ff fa1d 	bl	8001f38 <HAL_GetTick>
 8002afe:	eba0 0008 	sub.w	r0, r0, r8
 8002b02:	2864      	cmp	r0, #100	; 0x64
 8002b04:	d9f6      	bls.n	8002af4 <HAL_RCC_OscConfig+0x208>
 8002b06:	e733      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	b9ab      	cbnz	r3, 8002b36 <HAL_RCC_OscConfig+0x24a>
 8002b0a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6223      	str	r3, [r4, #32]
 8002b16:	6a23      	ldr	r3, [r4, #32]
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fa0b 	bl	8001f38 <HAL_GetTick>
 8002b22:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	6a23      	ldr	r3, [r4, #32]
 8002b26:	0798      	lsls	r0, r3, #30
 8002b28:	d5d3      	bpl.n	8002ad2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7ff fa05 	bl	8001f38 <HAL_GetTick>
 8002b2e:	1b80      	subs	r0, r0, r6
 8002b30:	4540      	cmp	r0, r8
 8002b32:	d9f7      	bls.n	8002b24 <HAL_RCC_OscConfig+0x238>
 8002b34:	e71c      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	6a23      	ldr	r3, [r4, #32]
 8002b3a:	d103      	bne.n	8002b44 <HAL_RCC_OscConfig+0x258>
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6223      	str	r3, [r4, #32]
 8002b42:	e7ba      	b.n	8002aba <HAL_RCC_OscConfig+0x1ce>
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6223      	str	r3, [r4, #32]
 8002b4a:	6a23      	ldr	r3, [r4, #32]
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	e7b6      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7ff f9f1 	bl	8001f38 <HAL_GetTick>
 8002b56:	eba0 0008 	sub.w	r0, r0, r8
 8002b5a:	42b0      	cmp	r0, r6
 8002b5c:	d9b6      	bls.n	8002acc <HAL_RCC_OscConfig+0x1e0>
 8002b5e:	e707      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
 8002b60:	40021000 	.word	0x40021000
 8002b64:	42420000 	.word	0x42420000
 8002b68:	42420480 	.word	0x42420480
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_OscConfig+0x334>)
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	461c      	mov	r4, r3
 8002b7a:	f002 020c 	and.w	r2, r2, #12
 8002b7e:	2a08      	cmp	r2, #8
 8002b80:	d03d      	beq.n	8002bfe <HAL_RCC_OscConfig+0x312>
 8002b82:	2300      	movs	r3, #0
 8002b84:	4e27      	ldr	r6, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002b88:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	d12b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f9d4 	bl	8001f38 <HAL_GetTick>
 8002b90:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	0199      	lsls	r1, r3, #6
 8002b96:	d41f      	bmi.n	8002bd8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b98:	6a2b      	ldr	r3, [r5, #32]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba0:	6862      	ldr	r2, [r4, #4]
 8002ba2:	68a9      	ldr	r1, [r5, #8]
 8002ba4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002bae:	6862      	ldr	r2, [r4, #4]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bba:	2301      	movs	r3, #1
 8002bbc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002bbe:	f7ff f9bb 	bl	8001f38 <HAL_GetTick>
 8002bc2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	019a      	lsls	r2, r3, #6
 8002bc8:	f53f aea8 	bmi.w	800291c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7ff f9b4 	bl	8001f38 <HAL_GetTick>
 8002bd0:	1b40      	subs	r0, r0, r5
 8002bd2:	2802      	cmp	r0, #2
 8002bd4:	d9f6      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x2d8>
 8002bd6:	e6cb      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f9ae 	bl	8001f38 <HAL_GetTick>
 8002bdc:	1bc0      	subs	r0, r0, r7
 8002bde:	2802      	cmp	r0, #2
 8002be0:	d9d7      	bls.n	8002b92 <HAL_RCC_OscConfig+0x2a6>
 8002be2:	e6c5      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002be4:	f7ff f9a8 	bl	8001f38 <HAL_GetTick>
 8002be8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	f57f ae95 	bpl.w	800291c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff f9a1 	bl	8001f38 <HAL_GetTick>
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d9f6      	bls.n	8002bea <HAL_RCC_OscConfig+0x2fe>
 8002bfc:	e6b8      	b.n	8002970 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfe:	2801      	cmp	r0, #1
 8002c00:	f43f aeb7 	beq.w	8002972 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002c04:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	6a2b      	ldr	r3, [r5, #32]
 8002c08:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f47f ae71 	bne.w	80028f4 <HAL_RCC_OscConfig+0x8>
 8002c12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c14:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002c18:	1ac0      	subs	r0, r0, r3
 8002c1a:	bf18      	it	ne
 8002c1c:	2001      	movne	r0, #1
 8002c1e:	e6a8      	b.n	8002972 <HAL_RCC_OscConfig+0x86>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	42420060 	.word	0x42420060

08002c28 <HAL_RCC_GetSysClockFreq>:
{
 8002c28:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002c2c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c2e:	ac02      	add	r4, sp, #8
 8002c30:	f103 0510 	add.w	r5, r3, #16
 8002c34:	4622      	mov	r2, r4
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	c203      	stmia	r2!, {r0, r1}
 8002c3e:	42ab      	cmp	r3, r5
 8002c40:	4614      	mov	r4, r2
 8002c42:	d1f7      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c44:	2301      	movs	r3, #1
 8002c46:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c4a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002c4c:	4911      	ldr	r1, [pc, #68]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c4e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002c52:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	f003 020c 	and.w	r2, r3, #12
 8002c58:	2a08      	cmp	r2, #8
 8002c5a:	d117      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002c60:	a806      	add	r0, sp, #24
 8002c62:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c64:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c66:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c6a:	d50c      	bpl.n	8002c86 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c6e:	480a      	ldr	r0, [pc, #40]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c70:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c74:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c76:	aa06      	add	r2, sp, #24
 8002c78:	4413      	add	r3, r2
 8002c7a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002c82:	b007      	add	sp, #28
 8002c84:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x74>)
 8002c88:	4350      	muls	r0, r2
 8002c8a:	e7fa      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002c8e:	e7f8      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x5a>
 8002c90:	08004b4c 	.word	0x08004b4c
 8002c94:	40021000 	.word	0x40021000
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCC_ClockConfig>:
{
 8002ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	b910      	cbnz	r0, 8002cb0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002caa:	2001      	movs	r0, #1
 8002cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4a45      	ldr	r2, [pc, #276]	; (8002dc8 <HAL_RCC_ClockConfig+0x128>)
 8002cb2:	6813      	ldr	r3, [r2, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d329      	bcc.n	8002d10 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	6821      	ldr	r1, [r4, #0]
 8002cbe:	078e      	lsls	r6, r1, #30
 8002cc0:	d431      	bmi.n	8002d26 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	07ca      	lsls	r2, r1, #31
 8002cc4:	d444      	bmi.n	8002d50 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc6:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <HAL_RCC_ClockConfig+0x128>)
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	429d      	cmp	r5, r3
 8002cd0:	d367      	bcc.n	8002da2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	4d3d      	ldr	r5, [pc, #244]	; (8002dcc <HAL_RCC_ClockConfig+0x12c>)
 8002cd6:	f012 0f04 	tst.w	r2, #4
 8002cda:	d16e      	bne.n	8002dba <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	0713      	lsls	r3, r2, #28
 8002cde:	d506      	bpl.n	8002cee <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce0:	686b      	ldr	r3, [r5, #4]
 8002ce2:	6922      	ldr	r2, [r4, #16]
 8002ce4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ce8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cec:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cee:	f7ff ff9b 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002cf2:	686b      	ldr	r3, [r5, #4]
 8002cf4:	4a36      	ldr	r2, [pc, #216]	; (8002dd0 <HAL_RCC_ClockConfig+0x130>)
 8002cf6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	40d8      	lsrs	r0, r3
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_RCC_ClockConfig+0x134>)
 8002d00:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_RCC_ClockConfig+0x138>)
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f7ff f83d 	bl	8001d84 <HAL_InitTick>
  return HAL_OK;
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d10:	6813      	ldr	r3, [r2, #0]
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	430b      	orrs	r3, r1
 8002d18:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4299      	cmp	r1, r3
 8002d22:	d1c2      	bne.n	8002caa <HAL_RCC_ClockConfig+0xa>
 8002d24:	e7ca      	b.n	8002cbc <HAL_RCC_ClockConfig+0x1c>
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	bf1e      	ittt	ne
 8002d2e:	685a      	ldrne	r2, [r3, #4]
 8002d30:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002d34:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	bf42      	ittt	mi
 8002d3a:	685a      	ldrmi	r2, [r3, #4]
 8002d3c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002d40:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	68a0      	ldr	r0, [r4, #8]
 8002d46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d4a:	4302      	orrs	r2, r0
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e7b8      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	6862      	ldr	r2, [r4, #4]
 8002d52:	4e1e      	ldr	r6, [pc, #120]	; (8002dcc <HAL_RCC_ClockConfig+0x12c>)
 8002d54:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	d11b      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	d0a4      	beq.n	8002caa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d60:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d6e:	f7ff f8e3 	bl	8001f38 <HAL_GetTick>
 8002d72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d74:	6873      	ldr	r3, [r6, #4]
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d80:	d0a1      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d82:	f7ff f8d9 	bl	8001f38 <HAL_GetTick>
 8002d86:	1bc0      	subs	r0, r0, r7
 8002d88:	4540      	cmp	r0, r8
 8002d8a:	d9f3      	bls.n	8002d74 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002d8c:	2003      	movs	r0, #3
}
 8002d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	2a02      	cmp	r2, #2
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d9a:	e7e0      	b.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	f013 0f02 	tst.w	r3, #2
 8002da0:	e7dd      	b.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	432b      	orrs	r3, r5
 8002daa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dac:	6813      	ldr	r3, [r2, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	429d      	cmp	r5, r3
 8002db4:	f47f af79 	bne.w	8002caa <HAL_RCC_ClockConfig+0xa>
 8002db8:	e78b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dba:	686b      	ldr	r3, [r5, #4]
 8002dbc:	68e1      	ldr	r1, [r4, #12]
 8002dbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	606b      	str	r3, [r5, #4]
 8002dc6:	e789      	b.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08004b7f 	.word	0x08004b7f
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000008 	.word	0x20000008

08002ddc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	4a03      	ldr	r2, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002dea:	6810      	ldr	r0, [r2, #0]
}
 8002dec:	40d8      	lsrs	r0, r3
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08004b8f 	.word	0x08004b8f
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e0a:	6810      	ldr	r0, [r2, #0]
}
 8002e0c:	40d8      	lsrs	r0, r3
 8002e0e:	4770      	bx	lr
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08004b8f 	.word	0x08004b8f
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_GetClockConfig+0x34>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	f002 0203 	and.w	r2, r2, #3
 8002e28:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002e30:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002e38:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e42:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_GetClockConfig+0x38>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40022000 	.word	0x40022000

08002e58 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e58:	6803      	ldr	r3, [r0, #0]
{
 8002e5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e5e:	07d9      	lsls	r1, r3, #31
{
 8002e60:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e62:	d520      	bpl.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e64:	4c35      	ldr	r4, [pc, #212]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002e66:	69e3      	ldr	r3, [r4, #28]
 8002e68:	00da      	lsls	r2, r3, #3
 8002e6a:	d432      	bmi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002e6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	69e3      	ldr	r3, [r4, #28]
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	61e3      	str	r3, [r4, #28]
 8002e76:	69e3      	ldr	r3, [r4, #28]
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	4e2f      	ldr	r6, [pc, #188]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e82:	6833      	ldr	r3, [r6, #0]
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	d526      	bpl.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e88:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e8a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002e8e:	d136      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	6a23      	ldr	r3, [r4, #32]
 8002e92:	686a      	ldr	r2, [r5, #4]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9c:	b11f      	cbz	r7, 8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	69e3      	ldr	r3, [r4, #28]
 8002ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea6:	6828      	ldr	r0, [r5, #0]
 8002ea8:	0783      	lsls	r3, r0, #30
 8002eaa:	d506      	bpl.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002eae:	68a9      	ldr	r1, [r5, #8]
 8002eb0:	6853      	ldr	r3, [r2, #4]
 8002eb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eba:	f010 0010 	ands.w	r0, r0, #16
 8002ebe:	d01b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002ec2:	68e9      	ldr	r1, [r5, #12]
 8002ec4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ec6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ec8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6053      	str	r3, [r2, #4]
 8002ed0:	e012      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2700      	movs	r7, #0
 8002ed4:	e7d4      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed6:	6833      	ldr	r3, [r6, #0]
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ede:	f7ff f82b 	bl	8001f38 <HAL_GetTick>
 8002ee2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	6833      	ldr	r3, [r6, #0]
 8002ee6:	05d8      	lsls	r0, r3, #23
 8002ee8:	d4ce      	bmi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7ff f825 	bl	8001f38 <HAL_GetTick>
 8002eee:	eba0 0008 	sub.w	r0, r0, r8
 8002ef2:	2864      	cmp	r0, #100	; 0x64
 8002ef4:	d9f6      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002ef6:	2003      	movs	r0, #3
}
 8002ef8:	b002      	add	sp, #8
 8002efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002efe:	686a      	ldr	r2, [r5, #4]
 8002f00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d0c3      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f08:	2001      	movs	r0, #1
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f0c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f0e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f10:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f16:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002f18:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f1a:	07d9      	lsls	r1, r3, #31
 8002f1c:	d5b8      	bpl.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002f1e:	f7ff f80b 	bl	8001f38 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	6a23      	ldr	r3, [r4, #32]
 8002f2a:	079a      	lsls	r2, r3, #30
 8002f2c:	d4b0      	bmi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7ff f803 	bl	8001f38 <HAL_GetTick>
 8002f32:	1b80      	subs	r0, r0, r6
 8002f34:	4540      	cmp	r0, r8
 8002f36:	d9f7      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002f38:	e7dd      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
 8002f44:	42420440 	.word	0x42420440

08002f48 <HAL_TIM_Base_MspInit>:
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d120      	bne.n	8002f96 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	2302      	movs	r3, #2
 8002f56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f64:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <HAL_TIM_Base_Start_IT+0x50>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00a      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x34>
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6e:	d007      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x34>
 8002f70:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x34>
 8002f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f86:	2a06      	cmp	r2, #6
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f92:	2000      	movs	r0, #0
}
 8002f94:	4770      	bx	lr
    return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_IC_CaptureCallback>:
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_TriggerCallback>:
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa8:	6803      	ldr	r3, [r0, #0]
{
 8002faa:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fac:	691a      	ldr	r2, [r3, #16]
{
 8002fae:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	0791      	lsls	r1, r2, #30
 8002fb2:	d50e      	bpl.n	8002fd2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	0792      	lsls	r2, r2, #30
 8002fb8:	d50b      	bpl.n	8002fd2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fba:	f06f 0202 	mvn.w	r2, #2
 8002fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc0:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc6:	079b      	lsls	r3, r3, #30
 8002fc8:	d077      	beq.n	80030ba <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	f7ff ffea 	bl	8002fa2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	0750      	lsls	r0, r2, #29
 8002fd8:	d510      	bpl.n	8002ffc <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	0751      	lsls	r1, r2, #29
 8002fde:	d50d      	bpl.n	8002ffc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe0:	f06f 0204 	mvn.w	r2, #4
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe6:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fec:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff2:	d068      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff4:	f7ff ffd5 	bl	8002fa2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	0712      	lsls	r2, r2, #28
 8003002:	d50f      	bpl.n	8003024 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	0710      	lsls	r0, r2, #28
 8003008:	d50c      	bpl.n	8003024 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800300a:	f06f 0208 	mvn.w	r2, #8
 800300e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003010:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003012:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003014:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003016:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003018:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301a:	d05a      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800301c:	f7ff ffc1 	bl	8002fa2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003020:	2300      	movs	r3, #0
 8003022:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	06d2      	lsls	r2, r2, #27
 800302a:	d510      	bpl.n	800304e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	06d0      	lsls	r0, r2, #27
 8003030:	d50d      	bpl.n	800304e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003032:	f06f 0210 	mvn.w	r2, #16
 8003036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003038:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800303e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003044:	d04b      	beq.n	80030de <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	f7ff ffac 	bl	8002fa2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	2300      	movs	r3, #0
 800304c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	07d1      	lsls	r1, r2, #31
 8003054:	d508      	bpl.n	8003068 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	07d2      	lsls	r2, r2, #31
 800305a:	d505      	bpl.n	8003068 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800305c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003060:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003062:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003064:	f7fe fe4e 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	0610      	lsls	r0, r2, #24
 800306e:	d508      	bpl.n	8003082 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	0611      	lsls	r1, r2, #24
 8003074:	d505      	bpl.n	8003082 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003076:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800307a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800307c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800307e:	f000 f89a 	bl	80031b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	0652      	lsls	r2, r2, #25
 8003088:	d508      	bpl.n	800309c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	0650      	lsls	r0, r2, #25
 800308e:	d505      	bpl.n	800309c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003090:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003094:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003096:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003098:	f7ff ff85 	bl	8002fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	0691      	lsls	r1, r2, #26
 80030a2:	d522      	bpl.n	80030ea <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	0692      	lsls	r2, r2, #26
 80030a8:	d51f      	bpl.n	80030ea <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030aa:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ae:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80030b6:	f000 b87d 	b.w	80031b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	f7ff ff71 	bl	8002fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff ff70 	bl	8002fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030c4:	e783      	b.n	8002fce <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	f7ff ff6b 	bl	8002fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff ff6a 	bl	8002fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030d0:	e792      	b.n	8002ff8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	f7ff ff65 	bl	8002fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7ff ff64 	bl	8002fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030dc:	e7a0      	b.n	8003020 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	f7ff ff5f 	bl	8002fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff5e 	bl	8002fa4 <HAL_TIM_PWM_PulseFinishedCallback>
 80030e8:	e7af      	b.n	800304a <HAL_TIM_IRQHandler+0xa2>
 80030ea:	bd10      	pop	{r4, pc}

080030ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80030ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	4290      	cmp	r0, r2
 80030f2:	d00a      	beq.n	800310a <TIM_Base_SetConfig+0x1e>
 80030f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x1e>
 80030fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80030fe:	4290      	cmp	r0, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x1e>
 8003102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003106:	4290      	cmp	r0, r2
 8003108:	d115      	bne.n	8003136 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800310a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003110:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <TIM_Base_SetConfig+0x6c>)
 8003114:	4290      	cmp	r0, r2
 8003116:	d00a      	beq.n	800312e <TIM_Base_SetConfig+0x42>
 8003118:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0x42>
 800311e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003122:	4290      	cmp	r0, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0x42>
 8003126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800312a:	4290      	cmp	r0, r2
 800312c:	d103      	bne.n	8003136 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003134:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003136:	694a      	ldr	r2, [r1, #20]
 8003138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800313e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003140:	688b      	ldr	r3, [r1, #8]
 8003142:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003144:	680b      	ldr	r3, [r1, #0]
 8003146:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <TIM_Base_SetConfig+0x6c>)
 800314a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800314c:	bf04      	itt	eq
 800314e:	690b      	ldreq	r3, [r1, #16]
 8003150:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003152:	2301      	movs	r3, #1
 8003154:	6143      	str	r3, [r0, #20]
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00

0800315c <HAL_TIM_Base_Init>:
{
 800315c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800315e:	4604      	mov	r4, r0
 8003160:	b330      	cbz	r0, 80031b0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003166:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800316a:	b91b      	cbnz	r3, 8003174 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800316c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003170:	f7ff feea 	bl	8002f48 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003176:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	1d21      	adds	r1, r4, #4
 800317e:	f7ff ffb5 	bl	80030ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	2301      	movs	r3, #1
  return HAL_OK;
 8003184:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003186:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800318e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003192:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003196:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800319e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80031a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80031aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80031ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031b0:	2001      	movs	r0, #1
}
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <HAL_TIMEx_CommutCallback>:
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	4770      	bx	lr

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	6803      	ldr	r3, [r0, #0]
 80031be:	68c1      	ldr	r1, [r0, #12]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ca:	6882      	ldr	r2, [r0, #8]
 80031cc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80031ce:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80031d4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80031d8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031dc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80031de:	430a      	orrs	r2, r1
 80031e0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	69a1      	ldr	r1, [r4, #24]
 80031e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031ea:	430a      	orrs	r2, r1
 80031ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <UART_SetConfig+0x70>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d115      	bne.n	8003220 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031f4:	f7ff fe02 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f8:	2319      	movs	r3, #25
 80031fa:	4358      	muls	r0, r3
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	2264      	movs	r2, #100	; 0x64
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fbb0 f0f3 	udiv	r0, r0, r3
 8003206:	fbb0 f1f2 	udiv	r1, r0, r2
 800320a:	fb02 0311 	mls	r3, r2, r1, r0
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	3332      	adds	r3, #50	; 0x32
 8003212:	fbb3 f3f2 	udiv	r3, r3, r2
 8003216:	6825      	ldr	r5, [r4, #0]
 8003218:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800321c:	60ab      	str	r3, [r5, #8]
 800321e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff fddc 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8003224:	e7e8      	b.n	80031f8 <UART_SetConfig+0x40>
 8003226:	bf00      	nop
 8003228:	40013800 	.word	0x40013800

0800322c <HAL_UART_Init>:
{
 800322c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800322e:	4604      	mov	r4, r0
 8003230:	b340      	cbz	r0, 8003284 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800323a:	b91b      	cbnz	r3, 8003244 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800323c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003240:	f7fe fe20 	bl	8001e84 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003244:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003246:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800324c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800324e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003254:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003256:	f7ff ffaf 	bl	80031b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800326c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003274:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003276:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800327a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003282:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003284:	2001      	movs	r0, #1
}
 8003286:	bd10      	pop	{r4, pc}

08003288 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003288:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800328a:	f000 fc5d 	bl	8003b48 <vTaskStartScheduler>
  
  return osOK;
}
 800328e:	2000      	movs	r0, #0
 8003290:	bd08      	pop	{r3, pc}

08003292 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003292:	b570      	push	{r4, r5, r6, lr}
 8003294:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003296:	6946      	ldr	r6, [r0, #20]
{
 8003298:	460b      	mov	r3, r1
 800329a:	b086      	sub	sp, #24
 800329c:	6840      	ldr	r0, [r0, #4]
 800329e:	6829      	ldr	r1, [r5, #0]
 80032a0:	692a      	ldr	r2, [r5, #16]
 80032a2:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80032a6:	b176      	cbz	r6, 80032c6 <osThreadCreate+0x34>
 80032a8:	69ad      	ldr	r5, [r5, #24]
 80032aa:	b165      	cbz	r5, 80032c6 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80032ac:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032ae:	bf0c      	ite	eq
 80032b0:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80032b2:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b4:	9502      	str	r5, [sp, #8]
 80032b6:	e88d 0050 	stmia.w	sp, {r4, r6}
 80032ba:	f000 fbe1 	bl	8003a80 <xTaskCreateStatic>
 80032be:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032c0:	9805      	ldr	r0, [sp, #20]
}
 80032c2:	b006      	add	sp, #24
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80032c6:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032c8:	bf0c      	ite	eq
 80032ca:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80032cc:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ce:	ad05      	add	r5, sp, #20
 80032d0:	b292      	uxth	r2, r2
 80032d2:	e88d 0030 	stmia.w	sp, {r4, r5}
 80032d6:	f000 fc0a 	bl	8003aee <xTaskCreate>
 80032da:	2801      	cmp	r0, #1
 80032dc:	d0f0      	beq.n	80032c0 <osThreadCreate+0x2e>
      return NULL;
 80032de:	2000      	movs	r0, #0
 80032e0:	e7ef      	b.n	80032c2 <osThreadCreate+0x30>

080032e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032e2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032e4:	2800      	cmp	r0, #0
 80032e6:	bf08      	it	eq
 80032e8:	2001      	moveq	r0, #1
 80032ea:	f000 fd75 	bl	8003dd8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd08      	pop	{r3, pc}

080032f2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f2:	f100 0308 	add.w	r3, r0, #8
 80032f6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003300:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003302:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003304:	6003      	str	r3, [r0, #0]
 8003306:	4770      	bx	lr

08003308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	6103      	str	r3, [r0, #16]
 800330c:	4770      	bx	lr

0800330e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800330e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003310:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003312:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003314:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800331a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800331c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800331e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003320:	3301      	adds	r3, #1
 8003322:	6003      	str	r3, [r0, #0]
 8003324:	4770      	bx	lr

08003326 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003326:	680a      	ldr	r2, [r1, #0]
{
 8003328:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800332a:	1c53      	adds	r3, r2, #1
 800332c:	d10a      	bne.n	8003344 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800332e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003334:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003336:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003338:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800333a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800333c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800333e:	3301      	adds	r3, #1
 8003340:	6003      	str	r3, [r0, #0]
 8003342:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003344:	f100 0308 	add.w	r3, r0, #8
 8003348:	685c      	ldr	r4, [r3, #4]
 800334a:	6825      	ldr	r5, [r4, #0]
 800334c:	42aa      	cmp	r2, r5
 800334e:	d3ef      	bcc.n	8003330 <vListInsert+0xa>
 8003350:	4623      	mov	r3, r4
 8003352:	e7f9      	b.n	8003348 <vListInsert+0x22>

08003354 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003354:	6841      	ldr	r1, [r0, #4]
 8003356:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003358:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800335a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800335c:	6882      	ldr	r2, [r0, #8]
 800335e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003364:	bf08      	it	eq
 8003366:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003368:	2200      	movs	r2, #0
 800336a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	3a01      	subs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003372:	6818      	ldr	r0, [r3, #0]
}
 8003374:	4770      	bx	lr
	...

08003378 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8003378:	2300      	movs	r3, #0
{
 800337a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800337c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <prvTaskExitError+0x3c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	d008      	beq.n	8003398 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	e7fe      	b.n	8003396 <prvTaskExitError+0x1e>
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033a8:	9b01      	ldr	r3, [sp, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0fc      	beq.n	80033a8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033ae:	b002      	add	sp, #8
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000000c 	.word	0x2000000c

080033b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80033b8:	4806      	ldr	r0, [pc, #24]	; (80033d4 <prvPortStartFirstTask+0x1c>)
 80033ba:	6800      	ldr	r0, [r0, #0]
 80033bc:	6800      	ldr	r0, [r0, #0]
 80033be:	f380 8808 	msr	MSP, r0
 80033c2:	b662      	cpsie	i
 80033c4:	b661      	cpsie	f
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	df00      	svc	0
 80033d0:	bf00      	nop
 80033d2:	0000      	.short	0x0000
 80033d4:	e000ed08 	.word	0xe000ed08

080033d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033e2:	f021 0101 	bic.w	r1, r1, #1
 80033e6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033ee:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80033f2:	3840      	subs	r0, #64	; 0x40
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	08003379 	.word	0x08003379
 80033fc:	00000000 	.word	0x00000000

08003400 <SVC_Handler>:
	__asm volatile (
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <pxCurrentTCBConst2>)
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	6808      	ldr	r0, [r1, #0]
 8003406:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800340a:	f380 8809 	msr	PSP, r0
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f380 8811 	msr	BASEPRI, r0
 800341a:	f04e 0e0d 	orr.w	lr, lr, #13
 800341e:	4770      	bx	lr

08003420 <pxCurrentTCBConst2>:
 8003420:	20000f2c 	.word	0x20000f2c

08003424 <vPortEnterCritical>:
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <vPortEnterCritical+0x3c>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800343a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800343c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800343e:	d10d      	bne.n	800345c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <vPortEnterCritical+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003448:	d008      	beq.n	800345c <vPortEnterCritical+0x38>
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	e7fe      	b.n	800345a <vPortEnterCritical+0x36>
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	2000000c 	.word	0x2000000c
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vPortExitCritical+0x24>)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	b943      	cbnz	r3, 8003480 <vPortExitCritical+0x18>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	e7fe      	b.n	800347e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003480:	3b01      	subs	r3, #1
 8003482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003484:	b90b      	cbnz	r3, 800348a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	4770      	bx	lr
 800348c:	2000000c 	.word	0x2000000c

08003490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003490:	f3ef 8009 	mrs	r0, PSP
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <pxCurrentTCBConst>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034a0:	6010      	str	r0, [r2, #0]
 80034a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80034a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034aa:	f380 8811 	msr	BASEPRI, r0
 80034ae:	f000 fcb7 	bl	8003e20 <vTaskSwitchContext>
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f380 8811 	msr	BASEPRI, r0
 80034ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	6808      	ldr	r0, [r1, #0]
 80034c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034c6:	f380 8809 	msr	PSP, r0
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	4770      	bx	lr

080034d0 <pxCurrentTCBConst>:
 80034d0:	20000f2c 	.word	0x20000f2c

080034d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034d4:	b508      	push	{r3, lr}
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034e6:	f000 fb6d 	bl	8003bc4 <xTaskIncrementTick>
 80034ea:	b118      	cbz	r0, 80034f4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <SysTick_Handler+0x28>)
 80034f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80034f4:	2300      	movs	r3, #0
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	bd08      	pop	{r3, pc}
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003500:	2300      	movs	r3, #0
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003504:	4908      	ldr	r1, [pc, #32]	; (8003528 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003508:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800350a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <vPortSetupTimerInterrupt+0x2c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fbb3 f3f1 	udiv	r3, r3, r1
 8003516:	4906      	ldr	r1, [pc, #24]	; (8003530 <vPortSetupTimerInterrupt+0x30>)
 8003518:	3b01      	subs	r3, #1
 800351a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800351c:	2307      	movs	r3, #7
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e010 	.word	0xe000e010
 8003528:	e000e018 	.word	0xe000e018
 800352c:	20000000 	.word	0x20000000
 8003530:	e000e014 	.word	0xe000e014

08003534 <xPortStartScheduler>:
{
 8003534:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003536:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003538:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003544:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800354e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003552:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003556:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003558:	2207      	movs	r2, #7
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <xPortStartScheduler+0xa8>)
 800355c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800355e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003562:	1e54      	subs	r4, r2, #1
 8003564:	0600      	lsls	r0, r0, #24
 8003566:	d40d      	bmi.n	8003584 <xPortStartScheduler+0x50>
 8003568:	b101      	cbz	r1, 800356c <xPortStartScheduler+0x38>
 800356a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	2a03      	cmp	r2, #3
 8003570:	d011      	beq.n	8003596 <xPortStartScheduler+0x62>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	e7fe      	b.n	8003582 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003584:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003588:	2101      	movs	r1, #1
 800358a:	0052      	lsls	r2, r2, #1
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003592:	4622      	mov	r2, r4
 8003594:	e7e3      	b.n	800355e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003596:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003598:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800359a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800359e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <xPortStartScheduler+0xa0>)
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <xPortStartScheduler+0xac>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80035b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80035b8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80035ba:	f7ff ffa1 	bl	8003500 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <xPortStartScheduler+0xb0>)
 80035c0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80035c2:	f7ff fef9 	bl	80033b8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80035c6:	f000 fc2b 	bl	8003e20 <vTaskSwitchContext>
	prvTaskExitError();
 80035ca:	f7ff fed5 	bl	8003378 <prvTaskExitError>
}
 80035ce:	4620      	mov	r0, r4
 80035d0:	b002      	add	sp, #8
 80035d2:	bd10      	pop	{r4, pc}
 80035d4:	e000e400 	.word	0xe000e400
 80035d8:	2000030c 	.word	0x2000030c
 80035dc:	20000310 	.word	0x20000310
 80035e0:	e000ed20 	.word	0xe000ed20
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035e8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <prvInsertBlockIntoFreeList+0x40>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4282      	cmp	r2, r0
 80035f0:	d318      	bcc.n	8003624 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035f2:	685c      	ldr	r4, [r3, #4]
 80035f4:	1919      	adds	r1, r3, r4
 80035f6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035f8:	bf01      	itttt	eq
 80035fa:	6841      	ldreq	r1, [r0, #4]
 80035fc:	4618      	moveq	r0, r3
 80035fe:	1909      	addeq	r1, r1, r4
 8003600:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003602:	6844      	ldr	r4, [r0, #4]
 8003604:	1901      	adds	r1, r0, r4
 8003606:	428a      	cmp	r2, r1
 8003608:	d107      	bne.n	800361a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <prvInsertBlockIntoFreeList+0x44>)
 800360c:	6809      	ldr	r1, [r1, #0]
 800360e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003610:	bf1f      	itttt	ne
 8003612:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003614:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003616:	1909      	addne	r1, r1, r4
 8003618:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800361a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800361c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800361e:	bf18      	it	ne
 8003620:	6018      	strne	r0, [r3, #0]
 8003622:	bd10      	pop	{r4, pc}
 8003624:	4613      	mov	r3, r2
 8003626:	e7e1      	b.n	80035ec <prvInsertBlockIntoFreeList+0x4>
 8003628:	20000f24 	.word	0x20000f24
 800362c:	20000314 	.word	0x20000314

08003630 <pvPortMalloc>:
{
 8003630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003636:	f000 fabd 	bl	8003bb4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800363a:	493e      	ldr	r1, [pc, #248]	; (8003734 <pvPortMalloc+0x104>)
 800363c:	4d3e      	ldr	r5, [pc, #248]	; (8003738 <pvPortMalloc+0x108>)
 800363e:	680b      	ldr	r3, [r1, #0]
 8003640:	bb0b      	cbnz	r3, 8003686 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003642:	4a3e      	ldr	r2, [pc, #248]	; (800373c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003644:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003646:	bf1d      	ittte	ne
 8003648:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800364a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800364e:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003652:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003656:	bf1c      	itt	ne
 8003658:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800365a:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800365c:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800365e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003660:	4e37      	ldr	r6, [pc, #220]	; (8003740 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8003662:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003664:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003668:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800366a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800366c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800366e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003670:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003672:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003674:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003678:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800367a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <pvPortMalloc+0x118>)
 800367e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003684:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003686:	682f      	ldr	r7, [r5, #0]
 8003688:	4227      	tst	r7, r4
 800368a:	d116      	bne.n	80036ba <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800368c:	2c00      	cmp	r4, #0
 800368e:	d040      	beq.n	8003712 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8003690:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003694:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003696:	bf1c      	itt	ne
 8003698:	f023 0307 	bicne.w	r3, r3, #7
 800369c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800369e:	b163      	cbz	r3, 80036ba <pvPortMalloc+0x8a>
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <pvPortMalloc+0x118>)
 80036a2:	6816      	ldr	r6, [r2, #0]
 80036a4:	4690      	mov	r8, r2
 80036a6:	42b3      	cmp	r3, r6
 80036a8:	d807      	bhi.n	80036ba <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <pvPortMalloc+0x110>)
 80036ac:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ae:	6868      	ldr	r0, [r5, #4]
 80036b0:	4283      	cmp	r3, r0
 80036b2:	d804      	bhi.n	80036be <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80036b4:	6809      	ldr	r1, [r1, #0]
 80036b6:	428d      	cmp	r5, r1
 80036b8:	d107      	bne.n	80036ca <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80036ba:	2400      	movs	r4, #0
 80036bc:	e029      	b.n	8003712 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036be:	682c      	ldr	r4, [r5, #0]
 80036c0:	2c00      	cmp	r4, #0
 80036c2:	d0f7      	beq.n	80036b4 <pvPortMalloc+0x84>
 80036c4:	462a      	mov	r2, r5
 80036c6:	4625      	mov	r5, r4
 80036c8:	e7f1      	b.n	80036ae <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036ca:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036cc:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036ce:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036d0:	1ac2      	subs	r2, r0, r3
 80036d2:	2a10      	cmp	r2, #16
 80036d4:	d90f      	bls.n	80036f6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036d6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036d8:	0741      	lsls	r1, r0, #29
 80036da:	d008      	beq.n	80036ee <pvPortMalloc+0xbe>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	e7fe      	b.n	80036ec <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036ee:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036f0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036f2:	f7ff ff79 	bl	80035e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036f6:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036f8:	4912      	ldr	r1, [pc, #72]	; (8003744 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036fa:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036fc:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80036fe:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003700:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003702:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003706:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003708:	bf38      	it	cc
 800370a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800370c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800370e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003710:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003712:	f000 fae9 	bl	8003ce8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003716:	0763      	lsls	r3, r4, #29
 8003718:	d008      	beq.n	800372c <pvPortMalloc+0xfc>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	e7fe      	b.n	800372a <pvPortMalloc+0xfa>
}
 800372c:	4620      	mov	r0, r4
 800372e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003732:	bf00      	nop
 8003734:	20000314 	.word	0x20000314
 8003738:	20000f18 	.word	0x20000f18
 800373c:	20000318 	.word	0x20000318
 8003740:	20000f24 	.word	0x20000f24
 8003744:	20000f20 	.word	0x20000f20
 8003748:	20000f1c 	.word	0x20000f1c

0800374c <vPortFree>:
{
 800374c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800374e:	4604      	mov	r4, r0
 8003750:	b370      	cbz	r0, 80037b0 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <vPortFree+0x68>)
 8003754:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4213      	tst	r3, r2
 800375c:	d108      	bne.n	8003770 <vPortFree+0x24>
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	e7fe      	b.n	800376e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003770:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003774:	b141      	cbz	r1, 8003788 <vPortFree+0x3c>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	e7fe      	b.n	8003786 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003788:	ea23 0302 	bic.w	r3, r3, r2
 800378c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003790:	f000 fa10 	bl	8003bb4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <vPortFree+0x6c>)
 8003796:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800379a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800379c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037a0:	440b      	add	r3, r1
 80037a2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037a4:	f7ff ff20 	bl	80035e8 <prvInsertBlockIntoFreeList>
}
 80037a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80037ac:	f000 ba9c 	b.w	8003ce8 <xTaskResumeAll>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	20000f18 	.word	0x20000f18
 80037b8:	20000f1c 	.word	0x20000f1c

080037bc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c2:	f7ff fe2f 	bl	8003424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c6:	4b2d      	ldr	r3, [pc, #180]	; (800387c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80037c8:	4c2d      	ldr	r4, [pc, #180]	; (8003880 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4f2d      	ldr	r7, [pc, #180]	; (8003884 <prvAddNewTaskToReadyList+0xc8>)
 80037ce:	3201      	adds	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80037d2:	6825      	ldr	r5, [r4, #0]
 80037d4:	2d00      	cmp	r5, #0
 80037d6:	d145      	bne.n	8003864 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037d8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d11c      	bne.n	800381a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e0:	1978      	adds	r0, r7, r5
 80037e2:	3514      	adds	r5, #20
 80037e4:	f7ff fd85 	bl	80032f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e8:	2d8c      	cmp	r5, #140	; 0x8c
 80037ea:	d1f9      	bne.n	80037e0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037ec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80038b0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80037f0:	4d25      	ldr	r5, [pc, #148]	; (8003888 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80037f2:	4640      	mov	r0, r8
 80037f4:	f7ff fd7d 	bl	80032f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037f8:	4628      	mov	r0, r5
 80037fa:	f7ff fd7a 	bl	80032f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037fe:	4823      	ldr	r0, [pc, #140]	; (800388c <prvAddNewTaskToReadyList+0xd0>)
 8003800:	f7ff fd77 	bl	80032f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003804:	4822      	ldr	r0, [pc, #136]	; (8003890 <prvAddNewTaskToReadyList+0xd4>)
 8003806:	f7ff fd74 	bl	80032f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800380a:	4822      	ldr	r0, [pc, #136]	; (8003894 <prvAddNewTaskToReadyList+0xd8>)
 800380c:	f7ff fd71 	bl	80032f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <prvAddNewTaskToReadyList+0xdc>)
 8003812:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <prvAddNewTaskToReadyList+0xe0>)
 8003818:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800381a:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800381c:	4921      	ldr	r1, [pc, #132]	; (80038a4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800381e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003820:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003822:	3301      	adds	r3, #1
 8003824:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003826:	2301      	movs	r3, #1
 8003828:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800382a:	4093      	lsls	r3, r2
 800382c:	4303      	orrs	r3, r0
 800382e:	2014      	movs	r0, #20
 8003830:	600b      	str	r3, [r1, #0]
 8003832:	fb00 7002 	mla	r0, r0, r2, r7
 8003836:	1d31      	adds	r1, r6, #4
 8003838:	f7ff fd69 	bl	800330e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800383c:	f7ff fe14 	bl	8003468 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <prvAddNewTaskToReadyList+0xec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b163      	cbz	r3, 8003860 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800384c:	429a      	cmp	r2, r3
 800384e:	d207      	bcs.n	8003860 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <prvAddNewTaskToReadyList+0xf0>)
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <prvAddNewTaskToReadyList+0xec>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1d6      	bne.n	800381a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003872:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003874:	bf98      	it	ls
 8003876:	6026      	strls	r6, [r4, #0]
 8003878:	e7cf      	b.n	800381a <prvAddNewTaskToReadyList+0x5e>
 800387a:	bf00      	nop
 800387c:	20000fc4 	.word	0x20000fc4
 8003880:	20000f2c 	.word	0x20000f2c
 8003884:	20000f38 	.word	0x20000f38
 8003888:	20000ff0 	.word	0x20000ff0
 800388c:	2000100c 	.word	0x2000100c
 8003890:	20001038 	.word	0x20001038
 8003894:	20001024 	.word	0x20001024
 8003898:	20000f30 	.word	0x20000f30
 800389c:	20000f34 	.word	0x20000f34
 80038a0:	20000fd4 	.word	0x20000fd4
 80038a4:	20000fd8 	.word	0x20000fd8
 80038a8:	20001020 	.word	0x20001020
 80038ac:	e000ed04 	.word	0xe000ed04
 80038b0:	20000fdc 	.word	0x20000fdc

080038b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b4:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <prvResetNextTaskUnblockTime+0x1c>)
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <prvResetNextTaskUnblockTime+0x20>)
 80038bc:	b919      	cbnz	r1, 80038c6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038be:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038ca:	68d2      	ldr	r2, [r2, #12]
 80038cc:	6852      	ldr	r2, [r2, #4]
 80038ce:	e7f8      	b.n	80038c2 <prvResetNextTaskUnblockTime+0xe>
 80038d0:	20000f30 	.word	0x20000f30
 80038d4:	20001004 	.word	0x20001004

080038d8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	4681      	mov	r9, r0
 80038de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80038e4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80038e6:	3a01      	subs	r2, #1
 80038e8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80038ec:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80038f0:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038f2:	f026 0607 	bic.w	r6, r6, #7
 80038f6:	1e4b      	subs	r3, r1, #1
 80038f8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80038fc:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038fe:	7858      	ldrb	r0, [r3, #1]
 8003900:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003904:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003908:	b108      	cbz	r0, 800390e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800390a:	428b      	cmp	r3, r1
 800390c:	d1f7      	bne.n	80038fe <prvInitialiseNewTask.isra.2+0x26>
 800390e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003910:	2700      	movs	r7, #0
 8003912:	2d06      	cmp	r5, #6
 8003914:	bf28      	it	cs
 8003916:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003918:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800391a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800391c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800391e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003922:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003924:	f7ff fcf0 	bl	8003308 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003928:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800392c:	f104 0018 	add.w	r0, r4, #24
 8003930:	f7ff fcea 	bl	8003308 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003934:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003936:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003938:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800393a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800393c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003940:	4652      	mov	r2, sl
 8003942:	4649      	mov	r1, r9
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff fd47 	bl	80033d8 <pxPortInitialiseStack>
 800394a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800394c:	f1b8 0f00 	cmp.w	r8, #0
 8003950:	d001      	beq.n	8003956 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003952:	f8c8 4000 	str.w	r4, [r8]
 8003956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800395a <prvDeleteTCB>:
	{
 800395a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800395c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003960:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003962:	b93b      	cbnz	r3, 8003974 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003964:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003966:	f7ff fef1 	bl	800374c <vPortFree>
				vPortFree( pxTCB );
 800396a:	4620      	mov	r0, r4
	}
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003970:	f7ff beec 	b.w	800374c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003974:	2b01      	cmp	r3, #1
 8003976:	d0f9      	beq.n	800396c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003978:	2b02      	cmp	r3, #2
 800397a:	d008      	beq.n	800398e <prvDeleteTCB+0x34>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	e7fe      	b.n	800398c <prvDeleteTCB+0x32>
 800398e:	bd10      	pop	{r4, pc}

08003990 <prvIdleTask>:
{
 8003990:	b580      	push	{r7, lr}
				taskYIELD();
 8003992:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80039f0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003996:	4f12      	ldr	r7, [pc, #72]	; (80039e0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003998:	4c12      	ldr	r4, [pc, #72]	; (80039e4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800399a:	4d13      	ldr	r5, [pc, #76]	; (80039e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	b963      	cbnz	r3, 80039ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <prvIdleTask+0x5c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d9f8      	bls.n	800399a <prvIdleTask+0xa>
				taskYIELD();
 80039a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039ac:	f8c8 3000 	str.w	r3, [r8]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	e7ee      	b.n	8003998 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80039ba:	f7ff fd33 	bl	8003424 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c2:	1d30      	adds	r0, r6, #4
 80039c4:	f7ff fcc6 	bl	8003354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80039d4:	f7ff fd48 	bl	8003468 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80039d8:	4630      	mov	r0, r6
 80039da:	f7ff ffbe 	bl	800395a <prvDeleteTCB>
 80039de:	e7dd      	b.n	800399c <prvIdleTask+0xc>
 80039e0:	20001038 	.word	0x20001038
 80039e4:	20000fc8 	.word	0x20000fc8
 80039e8:	20000fc4 	.word	0x20000fc4
 80039ec:	20000f38 	.word	0x20000f38
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039f8:	4e1b      	ldr	r6, [pc, #108]	; (8003a68 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80039fa:	681d      	ldr	r5, [r3, #0]
{
 80039fc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fe:	6830      	ldr	r0, [r6, #0]
{
 8003a00:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a02:	3004      	adds	r0, #4
 8003a04:	f7ff fca6 	bl	8003354 <uxListRemove>
 8003a08:	4633      	mov	r3, r6
 8003a0a:	b940      	cbnz	r0, 8003a1e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	6831      	ldr	r1, [r6, #0]
 8003a10:	4e16      	ldr	r6, [pc, #88]	; (8003a6c <prvAddCurrentTaskToDelayedList+0x78>)
 8003a12:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003a14:	6832      	ldr	r2, [r6, #0]
 8003a16:	4088      	lsls	r0, r1
 8003a18:	ea22 0200 	bic.w	r2, r2, r0
 8003a1c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a1e:	1c62      	adds	r2, r4, #1
 8003a20:	d107      	bne.n	8003a32 <prvAddCurrentTaskToDelayedList+0x3e>
 8003a22:	b137      	cbz	r7, 8003a32 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	4812      	ldr	r0, [pc, #72]	; (8003a70 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003a28:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2e:	f7ff bc6e 	b.w	800330e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a32:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a34:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003a36:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a38:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003a3a:	d907      	bls.n	8003a4c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <prvAddCurrentTaskToDelayedList+0x80>)
 8003a3e:	6810      	ldr	r0, [r2, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
}
 8003a42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a46:	3104      	adds	r1, #4
 8003a48:	f7ff bc6d 	b.w	8003326 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <prvAddCurrentTaskToDelayedList+0x84>)
 8003a4e:	6810      	ldr	r0, [r2, #0]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	3104      	adds	r1, #4
 8003a54:	f7ff fc67 	bl	8003326 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <prvAddCurrentTaskToDelayedList+0x88>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003a5e:	bf38      	it	cc
 8003a60:	601c      	strcc	r4, [r3, #0]
 8003a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a64:	2000104c 	.word	0x2000104c
 8003a68:	20000f2c 	.word	0x20000f2c
 8003a6c:	20000fd8 	.word	0x20000fd8
 8003a70:	20001024 	.word	0x20001024
 8003a74:	20000f34 	.word	0x20000f34
 8003a78:	20000f30 	.word	0x20000f30
 8003a7c:	20001004 	.word	0x20001004

08003a80 <xTaskCreateStatic>:
	{
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003a88:	b945      	cbnz	r5, 8003a9c <xTaskCreateStatic+0x1c>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	e7fe      	b.n	8003a9a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003a9c:	b944      	cbnz	r4, 8003ab0 <xTaskCreateStatic+0x30>
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	e7fe      	b.n	8003aae <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ab0:	2654      	movs	r6, #84	; 0x54
 8003ab2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ab4:	9e04      	ldr	r6, [sp, #16]
 8003ab6:	2e54      	cmp	r6, #84	; 0x54
 8003ab8:	d008      	beq.n	8003acc <xTaskCreateStatic+0x4c>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	e7fe      	b.n	8003aca <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003acc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ace:	2502      	movs	r5, #2
 8003ad0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ad4:	ad05      	add	r5, sp, #20
 8003ad6:	9501      	str	r5, [sp, #4]
 8003ad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003ada:	9402      	str	r4, [sp, #8]
 8003adc:	9500      	str	r5, [sp, #0]
 8003ade:	f7ff fefb 	bl	80038d8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff fe6a 	bl	80037bc <prvAddNewTaskToReadyList>
	}
 8003ae8:	9805      	ldr	r0, [sp, #20]
 8003aea:	b006      	add	sp, #24
 8003aec:	bd70      	pop	{r4, r5, r6, pc}

08003aee <xTaskCreate>:
	{
 8003aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003af2:	4607      	mov	r7, r0
 8003af4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af6:	0090      	lsls	r0, r2, #2
	{
 8003af8:	4688      	mov	r8, r1
 8003afa:	4616      	mov	r6, r2
 8003afc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afe:	f7ff fd97 	bl	8003630 <pvPortMalloc>
			if( pxStack != NULL )
 8003b02:	4605      	mov	r5, r0
 8003b04:	b1e8      	cbz	r0, 8003b42 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b06:	2054      	movs	r0, #84	; 0x54
 8003b08:	f7ff fd92 	bl	8003630 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	b1a8      	cbz	r0, 8003b3c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003b18:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b1e:	9002      	str	r0, [sp, #8]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	4632      	mov	r2, r6
 8003b24:	464b      	mov	r3, r9
 8003b26:	4641      	mov	r1, r8
 8003b28:	4638      	mov	r0, r7
 8003b2a:	f7ff fed5 	bl	80038d8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7ff fe44 	bl	80037bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b34:	2001      	movs	r0, #1
	}
 8003b36:	b005      	add	sp, #20
 8003b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7ff fe05 	bl	800374c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003b46:	e7f6      	b.n	8003b36 <xTaskCreate+0x48>

08003b48 <vTaskStartScheduler>:
{
 8003b48:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b4a:	2400      	movs	r4, #0
{
 8003b4c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b4e:	aa07      	add	r2, sp, #28
 8003b50:	a906      	add	r1, sp, #24
 8003b52:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b54:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b56:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b58:	f7fd ffba 	bl	8001ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b5c:	9b05      	ldr	r3, [sp, #20]
 8003b5e:	9400      	str	r4, [sp, #0]
 8003b60:	9302      	str	r3, [sp, #8]
 8003b62:	9b06      	ldr	r3, [sp, #24]
 8003b64:	9a07      	ldr	r2, [sp, #28]
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	490d      	ldr	r1, [pc, #52]	; (8003ba0 <vTaskStartScheduler+0x58>)
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <vTaskStartScheduler+0x5c>)
 8003b6e:	f7ff ff87 	bl	8003a80 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003b72:	b190      	cbz	r0, 8003b9a <vTaskStartScheduler+0x52>
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <vTaskStartScheduler+0x60>)
 8003b8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <vTaskStartScheduler+0x64>)
 8003b90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <vTaskStartScheduler+0x68>)
 8003b94:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003b96:	f7ff fccd 	bl	8003534 <xPortStartScheduler>
}
 8003b9a:	b008      	add	sp, #32
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	bf00      	nop
 8003ba0:	08004b97 	.word	0x08004b97
 8003ba4:	08003991 	.word	0x08003991
 8003ba8:	20001004 	.word	0x20001004
 8003bac:	20001020 	.word	0x20001020
 8003bb0:	2000104c 	.word	0x2000104c

08003bb4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003bb4:	4a02      	ldr	r2, [pc, #8]	; (8003bc0 <vTaskSuspendAll+0xc>)
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000fd0 	.word	0x20000fd0

08003bc4 <xTaskIncrementTick>:
{
 8003bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bc8:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <xTaskIncrementTick+0xf8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d153      	bne.n	8003c78 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <xTaskIncrementTick+0xfc>)
 8003bd2:	681c      	ldr	r4, [r3, #0]
 8003bd4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003bd6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bd8:	b9bc      	cbnz	r4, 8003c0a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <xTaskIncrementTick+0x100>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	b142      	cbz	r2, 8003bf4 <xTaskIncrementTick+0x30>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskIncrementTick+0x2e>
 8003bf4:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <xTaskIncrementTick+0x104>)
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	6810      	ldr	r0, [r2, #0]
 8003bfa:	6018      	str	r0, [r3, #0]
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	4a33      	ldr	r2, [pc, #204]	; (8003ccc <xTaskIncrementTick+0x108>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	f7ff fe55 	bl	80038b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c0a:	4d31      	ldr	r5, [pc, #196]	; (8003cd0 <xTaskIncrementTick+0x10c>)
 8003c0c:	f04f 0b00 	mov.w	fp, #0
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	4f30      	ldr	r7, [pc, #192]	; (8003cd4 <xTaskIncrementTick+0x110>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d33e      	bcc.n	8003c96 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c18:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003cc4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003c1c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003ce4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c20:	f8d8 2000 	ldr.w	r2, [r8]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	bb72      	cbnz	r2, 8003c86 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	602a      	str	r2, [r5, #0]
					break;
 8003c2e:	e032      	b.n	8003c96 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	f106 0a04 	add.w	sl, r6, #4
 8003c34:	4650      	mov	r0, sl
 8003c36:	f7ff fb8d 	bl	8003354 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c3a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003c3c:	b119      	cbz	r1, 8003c46 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c3e:	f106 0018 	add.w	r0, r6, #24
 8003c42:	f7ff fb87 	bl	8003354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c46:	2201      	movs	r2, #1
 8003c48:	f04f 0e14 	mov.w	lr, #20
 8003c4c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8003c52:	fa02 f100 	lsl.w	r1, r2, r0
 8003c56:	4319      	orrs	r1, r3
 8003c58:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <xTaskIncrementTick+0x114>)
 8003c5a:	f8c9 1000 	str.w	r1, [r9]
 8003c5e:	fb0e 3000 	mla	r0, lr, r0, r3
 8003c62:	4651      	mov	r1, sl
 8003c64:	f7ff fb53 	bl	800330e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003c6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003c6e:	4291      	cmp	r1, r2
 8003c70:	bf28      	it	cs
 8003c72:	f04f 0b01 	movcs.w	fp, #1
 8003c76:	e7d3      	b.n	8003c20 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003c7a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	e011      	b.n	8003caa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c86:	f8d8 2000 	ldr.w	r2, [r8]
 8003c8a:	68d2      	ldr	r2, [r2, #12]
 8003c8c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c8e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003c90:	428c      	cmp	r4, r1
 8003c92:	d2cd      	bcs.n	8003c30 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003c94:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <xTaskIncrementTick+0x114>)
 8003c9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c9c:	2214      	movs	r2, #20
 8003c9e:	434a      	muls	r2, r1
 8003ca0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003ca2:	2a02      	cmp	r2, #2
 8003ca4:	bf28      	it	cs
 8003ca6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <xTaskIncrementTick+0x11c>)
 8003cac:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	bf18      	it	ne
 8003cb2:	f04f 0b01 	movne.w	fp, #1
}
 8003cb6:	4658      	mov	r0, fp
 8003cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbc:	20000fd0 	.word	0x20000fd0
 8003cc0:	2000104c 	.word	0x2000104c
 8003cc4:	20000f30 	.word	0x20000f30
 8003cc8:	20000f34 	.word	0x20000f34
 8003ccc:	20001008 	.word	0x20001008
 8003cd0:	20001004 	.word	0x20001004
 8003cd4:	20000f2c 	.word	0x20000f2c
 8003cd8:	20000f38 	.word	0x20000f38
 8003cdc:	20000fcc 	.word	0x20000fcc
 8003ce0:	20001050 	.word	0x20001050
 8003ce4:	20000fd8 	.word	0x20000fd8

08003ce8 <xTaskResumeAll>:
{
 8003ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003cec:	4c31      	ldr	r4, [pc, #196]	; (8003db4 <xTaskResumeAll+0xcc>)
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	b943      	cbnz	r3, 8003d04 <xTaskResumeAll+0x1c>
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	e7fe      	b.n	8003d02 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003d04:	f7ff fb8e 	bl	8003424 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0e:	6824      	ldr	r4, [r4, #0]
 8003d10:	b12c      	cbz	r4, 8003d1e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003d12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003d14:	f7ff fba8 	bl	8003468 <vPortExitCritical>
}
 8003d18:	4620      	mov	r0, r4
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <xTaskResumeAll+0xd0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f5      	beq.n	8003d12 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d26:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003dd0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003d2a:	4f24      	ldr	r7, [pc, #144]	; (8003dbc <xTaskResumeAll+0xd4>)
 8003d2c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003dd4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d30:	f8d9 3000 	ldr.w	r3, [r9]
 8003d34:	b9e3      	cbnz	r3, 8003d70 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003d36:	b10c      	cbz	r4, 8003d3c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003d38:	f7ff fdbc 	bl	80038b4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d3c:	4d20      	ldr	r5, [pc, #128]	; (8003dc0 <xTaskResumeAll+0xd8>)
 8003d3e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d40:	b144      	cbz	r4, 8003d54 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003d42:	2701      	movs	r7, #1
 8003d44:	4e1f      	ldr	r6, [pc, #124]	; (8003dc4 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8003d46:	f7ff ff3d 	bl	8003bc4 <xTaskIncrementTick>
 8003d4a:	b100      	cbz	r0, 8003d4e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003d4c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d4e:	3c01      	subs	r4, #1
 8003d50:	d1f9      	bne.n	8003d46 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8003d52:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <xTaskResumeAll+0xdc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0da      	beq.n	8003d12 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <xTaskResumeAll+0xe0>)
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003d6c:	2401      	movs	r4, #1
 8003d6e:	e7d1      	b.n	8003d14 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d70:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003d74:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d76:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d78:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d7a:	f104 0018 	add.w	r0, r4, #24
 8003d7e:	f7ff fae9 	bl	8003354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d82:	4630      	mov	r0, r6
 8003d84:	f7ff fae6 	bl	8003354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d88:	2014      	movs	r0, #20
 8003d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	fa05 f302 	lsl.w	r3, r5, r2
 8003d92:	430b      	orrs	r3, r1
 8003d94:	fb00 8002 	mla	r0, r0, r2, r8
 8003d98:	4631      	mov	r1, r6
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	f7ff fab7 	bl	800330e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <xTaskResumeAll+0xe4>)
 8003da2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003daa:	bf24      	itt	cs
 8003dac:	4b05      	ldrcs	r3, [pc, #20]	; (8003dc4 <xTaskResumeAll+0xdc>)
 8003dae:	601d      	strcs	r5, [r3, #0]
 8003db0:	e7be      	b.n	8003d30 <xTaskResumeAll+0x48>
 8003db2:	bf00      	nop
 8003db4:	20000fd0 	.word	0x20000fd0
 8003db8:	20000fc4 	.word	0x20000fc4
 8003dbc:	20000fd8 	.word	0x20000fd8
 8003dc0:	20000fcc 	.word	0x20000fcc
 8003dc4:	20001050 	.word	0x20001050
 8003dc8:	e000ed04 	.word	0xe000ed04
 8003dcc:	20000f2c 	.word	0x20000f2c
 8003dd0:	2000100c 	.word	0x2000100c
 8003dd4:	20000f38 	.word	0x20000f38

08003dd8 <vTaskDelay>:
	{
 8003dd8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dda:	b940      	cbnz	r0, 8003dee <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <vTaskDelay+0x40>)
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <vTaskDelay+0x44>)
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	b141      	cbz	r1, 8003e06 <vTaskDelay+0x2e>
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	e7fe      	b.n	8003e04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e06:	f7ff fed5 	bl	8003bb4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e0a:	f7ff fdf3 	bl	80039f4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003e0e:	f7ff ff6b 	bl	8003ce8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0e2      	beq.n	8003ddc <vTaskDelay+0x4>
 8003e16:	bd08      	pop	{r3, pc}
 8003e18:	e000ed04 	.word	0xe000ed04
 8003e1c:	20000fd0 	.word	0x20000fd0

08003e20 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <vTaskSwitchContext+0x60>)
{
 8003e22:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <vTaskSwitchContext+0x64>)
 8003e28:	b112      	cbz	r2, 8003e30 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003e2a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003e30:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <vTaskSwitchContext+0x68>)
 8003e34:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	2214      	movs	r2, #20
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f1c3 031f 	rsb	r3, r3, #31
 8003e42:	435a      	muls	r2, r3
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <vTaskSwitchContext+0x6c>)
 8003e46:	588c      	ldr	r4, [r1, r2]
 8003e48:	1888      	adds	r0, r1, r2
 8003e4a:	b944      	cbnz	r4, 8003e5e <vTaskSwitchContext+0x3e>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	e7fe      	b.n	8003e5c <vTaskSwitchContext+0x3c>
 8003e5e:	6844      	ldr	r4, [r0, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	6864      	ldr	r4, [r4, #4]
 8003e64:	440a      	add	r2, r1
 8003e66:	4294      	cmp	r4, r2
 8003e68:	bf08      	it	eq
 8003e6a:	6862      	ldreq	r2, [r4, #4]
 8003e6c:	6044      	str	r4, [r0, #4]
 8003e6e:	bf08      	it	eq
 8003e70:	6042      	streq	r2, [r0, #4]
 8003e72:	2214      	movs	r2, #20
 8003e74:	fb02 1303 	mla	r3, r2, r3, r1
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <vTaskSwitchContext+0x70>)
 8003e7e:	e7d5      	b.n	8003e2c <vTaskSwitchContext+0xc>
 8003e80:	20000fd0 	.word	0x20000fd0
 8003e84:	20001050 	.word	0x20001050
 8003e88:	20000fd8 	.word	0x20000fd8
 8003e8c:	20000f38 	.word	0x20000f38
 8003e90:	20000f2c 	.word	0x20000f2c

08003e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e96:	e003      	b.n	8003ea0 <LoopCopyDataInit>

08003e98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e9e:	3104      	adds	r1, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003ea0:	480a      	ldr	r0, [pc, #40]	; (8003ecc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ea4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003ea6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ea8:	d3f6      	bcc.n	8003e98 <CopyDataInit>
  ldr r2, =_sbss
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003eac:	e002      	b.n	8003eb4 <LoopFillZerobss>

08003eae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003eb0:	f842 3b04 	str.w	r3, [r2], #4

08003eb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003eb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003eb8:	d3f9      	bcc.n	8003eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003eba:	f7fd ffc5 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ebe:	f000 fd27 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ec2:	f7fd fea7 	bl	8001c14 <main>
  bx lr
 8003ec6:	4770      	bx	lr
  ldr r3, =_sidata
 8003ec8:	08004ea8 	.word	0x08004ea8
  ldr r0, =_sdata
 8003ecc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003ed0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8003ed4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8003ed8:	20001168 	.word	0x20001168

08003edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003edc:	e7fe      	b.n	8003edc <ADC1_2_IRQHandler>
	...

08003ee0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003ee6:	6003      	str	r3, [r0, #0]
 8003ee8:	f000 fbe8 	bl	80046bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8003eec:	4620      	mov	r0, r4
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	08004bd8 	.word	0x08004bd8

08003ef4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	f7ff fff2 	bl	8003ee0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8003efc:	4620      	mov	r0, r4
 8003efe:	210c      	movs	r1, #12
 8003f00:	f000 fbba 	bl	8004678 <_ZdlPvj>
 8003f04:	4620      	mov	r0, r4
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8003f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0c:	9e06      	ldr	r6, [sp, #24]
 8003f0e:	4680      	mov	r8, r0
 8003f10:	4296      	cmp	r6, r2
 8003f12:	460f      	mov	r7, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	461d      	mov	r5, r3
 8003f18:	d103      	bne.n	8003f22 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f000 fc22 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 8003f20:	b958      	cbnz	r0, 8003f3a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8003f22:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003f26:	4622      	mov	r2, r4
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	9606      	str	r6, [sp, #24]
 8003f2c:	6a1e      	ldr	r6, [r3, #32]
 8003f2e:	4639      	mov	r1, r7
 8003f30:	462b      	mov	r3, r5
 8003f32:	46b4      	mov	ip, r6
 8003f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f38:	4760      	bx	ip
 8003f3a:	2006      	movs	r0, #6
 8003f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8003f40:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	460e      	mov	r6, r1
 8003f46:	4619      	mov	r1, r3
 8003f48:	4683      	mov	fp, r0
 8003f4a:	4617      	mov	r7, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f50:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003f54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003f58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003f5a:	f000 fc03 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 8003f5e:	b190      	cbz	r0, 8003f86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	602c      	str	r4, [r5, #0]
 8003f64:	712f      	strb	r7, [r5, #4]
 8003f66:	db09      	blt.n	8003f7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8003f68:	4434      	add	r4, r6
 8003f6a:	45a0      	cmp	r8, r4
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2406      	moveq	r4, #6
 8003f70:	2401      	movne	r4, #1
 8003f72:	71ac      	strb	r4, [r5, #6]
 8003f74:	2000      	movs	r0, #0
 8003f76:	b001      	add	sp, #4
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	3602      	adds	r6, #2
 8003f7e:	d1f9      	bne.n	8003f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8003f80:	2301      	movs	r3, #1
 8003f82:	71ab      	strb	r3, [r5, #6]
 8003f84:	e7f6      	b.n	8003f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8003f86:	4544      	cmp	r4, r8
 8003f88:	d104      	bne.n	8003f94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	f000 fbe9 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 8003f92:	b988      	cbnz	r0, 8003fb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8003f94:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003f98:	463a      	mov	r2, r7
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	950d      	str	r5, [sp, #52]	; 0x34
 8003f9e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003fa2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8003fa6:	940a      	str	r4, [sp, #40]	; 0x28
 8003fa8:	69dc      	ldr	r4, [r3, #28]
 8003faa:	4631      	mov	r1, r6
 8003fac:	464b      	mov	r3, r9
 8003fae:	46a4      	mov	ip, r4
 8003fb0:	b001      	add	sp, #4
 8003fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb6:	4760      	bx	ip
 8003fb8:	716f      	strb	r7, [r5, #5]
 8003fba:	e7db      	b.n	8003f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08003fbc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	f000 fb8c 	bl	80046e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003fcc:	b948      	cbnz	r0, 8003fe2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8003fce:	68a0      	ldr	r0, [r4, #8]
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	699c      	ldr	r4, [r3, #24]
 8003fd8:	463b      	mov	r3, r7
 8003fda:	46a4      	mov	ip, r4
 8003fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe0:	4760      	bx	ip
 8003fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fe6 <__cxa_end_cleanup>:
 8003fe6:	b41e      	push	{r1, r2, r3, r4}
 8003fe8:	f000 f89b 	bl	8004122 <__gnu_end_cleanup>
 8003fec:	bc1e      	pop	{r1, r2, r3, r4}
 8003fee:	f7fd f893 	bl	8001118 <_Unwind_Resume>

08003ff2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003ff2:	7803      	ldrb	r3, [r0, #0]
 8003ff4:	2b47      	cmp	r3, #71	; 0x47
 8003ff6:	d117      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003ff8:	7843      	ldrb	r3, [r0, #1]
 8003ffa:	2b4e      	cmp	r3, #78	; 0x4e
 8003ffc:	d114      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003ffe:	7883      	ldrb	r3, [r0, #2]
 8004000:	2b55      	cmp	r3, #85	; 0x55
 8004002:	d111      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004004:	78c3      	ldrb	r3, [r0, #3]
 8004006:	2b43      	cmp	r3, #67	; 0x43
 8004008:	d10e      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800400a:	7903      	ldrb	r3, [r0, #4]
 800400c:	2b43      	cmp	r3, #67	; 0x43
 800400e:	d10b      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004010:	7943      	ldrb	r3, [r0, #5]
 8004012:	2b2b      	cmp	r3, #43	; 0x2b
 8004014:	d108      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004016:	7983      	ldrb	r3, [r0, #6]
 8004018:	2b2b      	cmp	r3, #43	; 0x2b
 800401a:	d105      	bne.n	8004028 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800401c:	79c0      	ldrb	r0, [r0, #7]
 800401e:	2801      	cmp	r0, #1
 8004020:	bf8c      	ite	hi
 8004022:	2000      	movhi	r0, #0
 8004024:	2001      	movls	r0, #1
 8004026:	4770      	bx	lr
 8004028:	2000      	movs	r0, #0
 800402a:	4770      	bx	lr

0800402c <__cxa_type_match>:
 800402c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004030:	461e      	mov	r6, r3
 8004032:	7803      	ldrb	r3, [r0, #0]
 8004034:	460d      	mov	r5, r1
 8004036:	2b47      	cmp	r3, #71	; 0x47
 8004038:	4602      	mov	r2, r0
 800403a:	79c1      	ldrb	r1, [r0, #7]
 800403c:	d147      	bne.n	80040ce <__cxa_type_match+0xa2>
 800403e:	7843      	ldrb	r3, [r0, #1]
 8004040:	2b4e      	cmp	r3, #78	; 0x4e
 8004042:	d144      	bne.n	80040ce <__cxa_type_match+0xa2>
 8004044:	7883      	ldrb	r3, [r0, #2]
 8004046:	2b55      	cmp	r3, #85	; 0x55
 8004048:	d141      	bne.n	80040ce <__cxa_type_match+0xa2>
 800404a:	78c3      	ldrb	r3, [r0, #3]
 800404c:	2b43      	cmp	r3, #67	; 0x43
 800404e:	d13e      	bne.n	80040ce <__cxa_type_match+0xa2>
 8004050:	7903      	ldrb	r3, [r0, #4]
 8004052:	2b46      	cmp	r3, #70	; 0x46
 8004054:	d13b      	bne.n	80040ce <__cxa_type_match+0xa2>
 8004056:	7943      	ldrb	r3, [r0, #5]
 8004058:	2b4f      	cmp	r3, #79	; 0x4f
 800405a:	d138      	bne.n	80040ce <__cxa_type_match+0xa2>
 800405c:	7983      	ldrb	r3, [r0, #6]
 800405e:	2b52      	cmp	r3, #82	; 0x52
 8004060:	d135      	bne.n	80040ce <__cxa_type_match+0xa2>
 8004062:	2900      	cmp	r1, #0
 8004064:	d133      	bne.n	80040ce <__cxa_type_match+0xa2>
 8004066:	2301      	movs	r3, #1
 8004068:	4608      	mov	r0, r1
 800406a:	2400      	movs	r4, #0
 800406c:	9401      	str	r4, [sp, #4]
 800406e:	bb33      	cbnz	r3, 80040be <__cxa_type_match+0x92>
 8004070:	bb38      	cbnz	r0, 80040c2 <__cxa_type_match+0x96>
 8004072:	2901      	cmp	r1, #1
 8004074:	bf0a      	itet	eq
 8004076:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800407a:	f1a2 0320 	subne.w	r3, r2, #32
 800407e:	3b78      	subeq	r3, #120	; 0x78
 8004080:	2901      	cmp	r1, #1
 8004082:	bf0c      	ite	eq
 8004084:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004088:	3258      	addne	r2, #88	; 0x58
 800408a:	681c      	ldr	r4, [r3, #0]
 800408c:	9201      	str	r2, [sp, #4]
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	4620      	mov	r0, r4
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4798      	blx	r3
 8004096:	b1b0      	cbz	r0, 80040c6 <__cxa_type_match+0x9a>
 8004098:	2702      	movs	r7, #2
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	aa01      	add	r2, sp, #4
 80040a4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80040a8:	4621      	mov	r1, r4
 80040aa:	2301      	movs	r3, #1
 80040ac:	4628      	mov	r0, r5
 80040ae:	47c0      	blx	r8
 80040b0:	b158      	cbz	r0, 80040ca <__cxa_type_match+0x9e>
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	4638      	mov	r0, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040be:	4c08      	ldr	r4, [pc, #32]	; (80040e0 <__cxa_type_match+0xb4>)
 80040c0:	e7e5      	b.n	800408e <__cxa_type_match+0x62>
 80040c2:	4c08      	ldr	r4, [pc, #32]	; (80040e4 <__cxa_type_match+0xb8>)
 80040c4:	e7e3      	b.n	800408e <__cxa_type_match+0x62>
 80040c6:	2701      	movs	r7, #1
 80040c8:	e7ea      	b.n	80040a0 <__cxa_type_match+0x74>
 80040ca:	4607      	mov	r7, r0
 80040cc:	e7f3      	b.n	80040b6 <__cxa_type_match+0x8a>
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7ff ff8f 	bl	8003ff2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80040d4:	f080 0001 	eor.w	r0, r0, #1
 80040d8:	b2c0      	uxtb	r0, r0
 80040da:	2300      	movs	r3, #0
 80040dc:	e7c5      	b.n	800406a <__cxa_type_match+0x3e>
 80040de:	bf00      	nop
 80040e0:	08004c70 	.word	0x08004c70
 80040e4:	08004c78 	.word	0x08004c78

080040e8 <__cxa_begin_cleanup>:
 80040e8:	b510      	push	{r4, lr}
 80040ea:	4604      	mov	r4, r0
 80040ec:	f000 fbfe 	bl	80048ec <__cxa_get_globals>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4620      	mov	r0, r4
 80040f4:	f1a4 0120 	sub.w	r1, r4, #32
 80040f8:	f7ff ff7b 	bl	8003ff2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80040fc:	b160      	cbz	r0, 8004118 <__cxa_begin_cleanup+0x30>
 80040fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004102:	3301      	adds	r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	f844 3c04 	str.w	r3, [r4, #-4]
 800410a:	d103      	bne.n	8004114 <__cxa_begin_cleanup+0x2c>
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	f844 3c08 	str.w	r3, [r4, #-8]
 8004112:	6091      	str	r1, [r2, #8]
 8004114:	2001      	movs	r0, #1
 8004116:	bd10      	pop	{r4, pc}
 8004118:	6893      	ldr	r3, [r2, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f9      	beq.n	8004112 <__cxa_begin_cleanup+0x2a>
 800411e:	f000 fbcd 	bl	80048bc <_ZSt9terminatev>

08004122 <__gnu_end_cleanup>:
 8004122:	b510      	push	{r4, lr}
 8004124:	f000 fbe2 	bl	80048ec <__cxa_get_globals>
 8004128:	6882      	ldr	r2, [r0, #8]
 800412a:	4601      	mov	r1, r0
 800412c:	b90a      	cbnz	r2, 8004132 <__gnu_end_cleanup+0x10>
 800412e:	f000 fbc5 	bl	80048bc <_ZSt9terminatev>
 8004132:	f102 0420 	add.w	r4, r2, #32
 8004136:	4620      	mov	r0, r4
 8004138:	f7ff ff5b 	bl	8003ff2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800413c:	b140      	cbz	r0, 8004150 <__gnu_end_cleanup+0x2e>
 800413e:	69d3      	ldr	r3, [r2, #28]
 8004140:	3b01      	subs	r3, #1
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	b913      	cbnz	r3, 800414c <__gnu_end_cleanup+0x2a>
 8004146:	6990      	ldr	r0, [r2, #24]
 8004148:	6088      	str	r0, [r1, #8]
 800414a:	6193      	str	r3, [r2, #24]
 800414c:	4620      	mov	r0, r4
 800414e:	bd10      	pop	{r4, pc}
 8004150:	6088      	str	r0, [r1, #8]
 8004152:	e7fb      	b.n	800414c <__gnu_end_cleanup+0x2a>

08004154 <_ZL12read_uleb128PKhPm>:
 8004154:	2300      	movs	r3, #0
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800415c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8004160:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004164:	1994      	adds	r4, r2, r6
 8004166:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800416a:	40a2      	lsls	r2, r4
 800416c:	4313      	orrs	r3, r2
 800416e:	062a      	lsls	r2, r5, #24
 8004170:	d4f4      	bmi.n	800415c <_ZL12read_uleb128PKhPm+0x8>
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	bd70      	pop	{r4, r5, r6, pc}

08004176 <_ZL12read_sleb128PKhPl>:
 8004176:	2300      	movs	r3, #0
 8004178:	461a      	mov	r2, r3
 800417a:	b530      	push	{r4, r5, lr}
 800417c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004180:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8004184:	4095      	lsls	r5, r2
 8004186:	432b      	orrs	r3, r5
 8004188:	0625      	lsls	r5, r4, #24
 800418a:	f102 0207 	add.w	r2, r2, #7
 800418e:	d4f5      	bmi.n	800417c <_ZL12read_sleb128PKhPl+0x6>
 8004190:	2a1f      	cmp	r2, #31
 8004192:	d806      	bhi.n	80041a2 <_ZL12read_sleb128PKhPl+0x2c>
 8004194:	0664      	lsls	r4, r4, #25
 8004196:	bf42      	ittt	mi
 8004198:	f04f 34ff 	movmi.w	r4, #4294967295
 800419c:	fa04 f202 	lslmi.w	r2, r4, r2
 80041a0:	4313      	orrmi	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	bd30      	pop	{r4, r5, pc}

080041a6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80041a6:	2850      	cmp	r0, #80	; 0x50
 80041a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	460e      	mov	r6, r1
 80041ae:	4614      	mov	r4, r2
 80041b0:	461f      	mov	r7, r3
 80041b2:	d107      	bne.n	80041c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 80041b4:	1cd0      	adds	r0, r2, #3
 80041b6:	f020 0003 	bic.w	r0, r0, #3
 80041ba:	f850 3b04 	ldr.w	r3, [r0], #4
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	b003      	add	sp, #12
 80041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c4:	f000 030f 	and.w	r3, r0, #15
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d82e      	bhi.n	800422a <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 80041cc:	e8df f003 	tbb	[pc, r3]
 80041d0:	251d0725 	.word	0x251d0725
 80041d4:	2d2d2d29 	.word	0x2d2d2d29
 80041d8:	2521182d 	.word	0x2521182d
 80041dc:	29          	.byte	0x29
 80041dd:	00          	.byte	0x00
 80041de:	a901      	add	r1, sp, #4
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff ffb7 	bl	8004154 <_ZL12read_uleb128PKhPm>
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0e8      	beq.n	80041be <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80041ec:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80041f0:	2a10      	cmp	r2, #16
 80041f2:	bf08      	it	eq
 80041f4:	4626      	moveq	r6, r4
 80041f6:	062a      	lsls	r2, r5, #24
 80041f8:	4433      	add	r3, r6
 80041fa:	bf48      	it	mi
 80041fc:	681b      	ldrmi	r3, [r3, #0]
 80041fe:	e7de      	b.n	80041be <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8004200:	a901      	add	r1, sp, #4
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff ffb7 	bl	8004176 <_ZL12read_sleb128PKhPl>
 8004208:	e7ed      	b.n	80041e6 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800420a:	4620      	mov	r0, r4
 800420c:	f830 3b02 	ldrh.w	r3, [r0], #2
 8004210:	e7ea      	b.n	80041e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004212:	4620      	mov	r0, r4
 8004214:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8004218:	e7e6      	b.n	80041e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800421a:	4620      	mov	r0, r4
 800421c:	f850 3b04 	ldr.w	r3, [r0], #4
 8004220:	e7e2      	b.n	80041e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8004222:	4620      	mov	r0, r4
 8004224:	f850 3b08 	ldr.w	r3, [r0], #8
 8004228:	e7de      	b.n	80041e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800422a:	f000 fb63 	bl	80048f4 <abort>

0800422e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800422e:	b508      	push	{r3, lr}
 8004230:	4603      	mov	r3, r0
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	4608      	mov	r0, r1
 8004236:	d007      	beq.n	8004248 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800423c:	2b20      	cmp	r3, #32
 800423e:	d00d      	beq.n	800425c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8004240:	d804      	bhi.n	800424c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8004242:	b10b      	cbz	r3, 8004248 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004244:	2b10      	cmp	r3, #16
 8004246:	d107      	bne.n	8004258 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8004248:	2000      	movs	r0, #0
 800424a:	bd08      	pop	{r3, pc}
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d00d      	beq.n	800426c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8004250:	2b50      	cmp	r3, #80	; 0x50
 8004252:	d0f9      	beq.n	8004248 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d005      	beq.n	8004264 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8004258:	f000 fb4c 	bl	80048f4 <abort>
 800425c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004260:	f7fd b95c 	b.w	800151c <_Unwind_GetTextRelBase>
 8004264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004268:	f7fd b95c 	b.w	8001524 <_Unwind_GetDataRelBase>
 800426c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004270:	f7fd b944 	b.w	80014fc <_Unwind_GetRegionStart>

08004274 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	460c      	mov	r4, r1
 8004278:	4601      	mov	r1, r0
 800427a:	4620      	mov	r0, r4
 800427c:	4615      	mov	r5, r2
 800427e:	461e      	mov	r6, r3
 8004280:	f7ff ffd5 	bl	800422e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004284:	4633      	mov	r3, r6
 8004286:	462a      	mov	r2, r5
 8004288:	4601      	mov	r1, r0
 800428a:	4620      	mov	r0, r4
 800428c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004290:	f7ff bf89 	b.w	80041a6 <_ZL28read_encoded_value_with_basehjPKhPj>

08004294 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004296:	460e      	mov	r6, r1
 8004298:	4614      	mov	r4, r2
 800429a:	4605      	mov	r5, r0
 800429c:	b318      	cbz	r0, 80042e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800429e:	f7fd f92d 	bl	80014fc <_Unwind_GetRegionStart>
 80042a2:	6020      	str	r0, [r4, #0]
 80042a4:	7831      	ldrb	r1, [r6, #0]
 80042a6:	1c72      	adds	r2, r6, #1
 80042a8:	29ff      	cmp	r1, #255	; 0xff
 80042aa:	d01d      	beq.n	80042e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 80042ac:	1d23      	adds	r3, r4, #4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7ff ffe0 	bl	8004274 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80042b4:	4602      	mov	r2, r0
 80042b6:	7813      	ldrb	r3, [r2, #0]
 80042b8:	1c50      	adds	r0, r2, #1
 80042ba:	2bff      	cmp	r3, #255	; 0xff
 80042bc:	7523      	strb	r3, [r4, #20]
 80042be:	d015      	beq.n	80042ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80042c0:	2310      	movs	r3, #16
 80042c2:	a901      	add	r1, sp, #4
 80042c4:	7523      	strb	r3, [r4, #20]
 80042c6:	f7ff ff45 	bl	8004154 <_ZL12read_uleb128PKhPm>
 80042ca:	9b01      	ldr	r3, [sp, #4]
 80042cc:	4403      	add	r3, r0
 80042ce:	60e3      	str	r3, [r4, #12]
 80042d0:	7803      	ldrb	r3, [r0, #0]
 80042d2:	a901      	add	r1, sp, #4
 80042d4:	7563      	strb	r3, [r4, #21]
 80042d6:	3001      	adds	r0, #1
 80042d8:	f7ff ff3c 	bl	8004154 <_ZL12read_uleb128PKhPm>
 80042dc:	9b01      	ldr	r3, [sp, #4]
 80042de:	4403      	add	r3, r0
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	b002      	add	sp, #8
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	e7dc      	b.n	80042a2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80042e8:	6060      	str	r0, [r4, #4]
 80042ea:	e7e4      	b.n	80042b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80042ec:	2300      	movs	r3, #0
 80042ee:	e7ee      	b.n	80042ce <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080042f0 <_Unwind_GetGR>:
 80042f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042f2:	ab03      	add	r3, sp, #12
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	460a      	mov	r2, r1
 80042fa:	4619      	mov	r1, r3
 80042fc:	f7fc fb62 	bl	80009c4 <_Unwind_VRS_Get>
 8004300:	9803      	ldr	r0, [sp, #12]
 8004302:	b005      	add	sp, #20
 8004304:	f85d fb04 	ldr.w	pc, [sp], #4

08004308 <__gxx_personality_v0>:
 8004308:	2300      	movs	r3, #0
 800430a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430e:	b091      	sub	sp, #68	; 0x44
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	f000 0303 	and.w	r3, r0, #3
 8004316:	2b01      	cmp	r3, #1
 8004318:	4607      	mov	r7, r0
 800431a:	460c      	mov	r4, r1
 800431c:	4616      	mov	r6, r2
 800431e:	d011      	beq.n	8004344 <__gxx_personality_v0+0x3c>
 8004320:	d303      	bcc.n	800432a <__gxx_personality_v0+0x22>
 8004322:	2b02      	cmp	r3, #2
 8004324:	d003      	beq.n	800432e <__gxx_personality_v0+0x26>
 8004326:	f000 fae5 	bl	80048f4 <abort>
 800432a:	0702      	lsls	r2, r0, #28
 800432c:	d51a      	bpl.n	8004364 <__gxx_personality_v0+0x5c>
 800432e:	4631      	mov	r1, r6
 8004330:	4620      	mov	r0, r4
 8004332:	f7fd f8cd 	bl	80014d0 <__gnu_unwind_frame>
 8004336:	b118      	cbz	r0, 8004340 <__gxx_personality_v0+0x38>
 8004338:	2009      	movs	r0, #9
 800433a:	b011      	add	sp, #68	; 0x44
 800433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004340:	2008      	movs	r0, #8
 8004342:	e7fa      	b.n	800433a <__gxx_personality_v0+0x32>
 8004344:	f000 0508 	and.w	r5, r0, #8
 8004348:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800434c:	bb85      	cbnz	r5, 80043b0 <__gxx_personality_v0+0xa8>
 800434e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8004352:	4610      	mov	r0, r2
 8004354:	210d      	movs	r1, #13
 8004356:	f7ff ffcb 	bl	80042f0 <_Unwind_GetGR>
 800435a:	4581      	cmp	r9, r0
 800435c:	f040 8140 	bne.w	80045e0 <__gxx_personality_v0+0x2d8>
 8004360:	2506      	movs	r5, #6
 8004362:	e000      	b.n	8004366 <__gxx_personality_v0+0x5e>
 8004364:	2501      	movs	r5, #1
 8004366:	ab10      	add	r3, sp, #64	; 0x40
 8004368:	f843 4d2c 	str.w	r4, [r3, #-44]!
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2300      	movs	r3, #0
 8004370:	f007 0708 	and.w	r7, r7, #8
 8004374:	433d      	orrs	r5, r7
 8004376:	220c      	movs	r2, #12
 8004378:	4619      	mov	r1, r3
 800437a:	4630      	mov	r0, r6
 800437c:	f7fc fb48 	bl	8000a10 <_Unwind_VRS_Set>
 8004380:	2d06      	cmp	r5, #6
 8004382:	f040 8139 	bne.w	80045f8 <__gxx_personality_v0+0x2f0>
 8004386:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800438a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800438c:	f1b8 0f00 	cmp.w	r8, #0
 8004390:	bf0c      	ite	eq
 8004392:	f04f 0a01 	moveq.w	sl, #1
 8004396:	f04f 0a03 	movne.w	sl, #3
 800439a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800439c:	f015 0508 	ands.w	r5, r5, #8
 80043a0:	f000 80ce 	beq.w	8004540 <__gxx_personality_v0+0x238>
 80043a4:	f1ba 0f01 	cmp.w	sl, #1
 80043a8:	f040 80c6 	bne.w	8004538 <__gxx_personality_v0+0x230>
 80043ac:	f000 fa86 	bl	80048bc <_ZSt9terminatev>
 80043b0:	2502      	movs	r5, #2
 80043b2:	e7d8      	b.n	8004366 <__gxx_personality_v0+0x5e>
 80043b4:	9a07      	ldr	r2, [sp, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	429f      	cmp	r7, r3
 80043ba:	f080 8137 	bcs.w	800462c <__gxx_personality_v0+0x324>
 80043be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c2:	f1b8 0f00 	cmp.w	r8, #0
 80043c6:	d001      	beq.n	80043cc <__gxx_personality_v0+0xc4>
 80043c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ca:	4498      	add	r8, r3
 80043cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80043ce:	b117      	cbz	r7, 80043d6 <__gxx_personality_v0+0xce>
 80043d0:	1e78      	subs	r0, r7, #1
 80043d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80043d4:	4407      	add	r7, r0
 80043d6:	f1b8 0f00 	cmp.w	r8, #0
 80043da:	d0a8      	beq.n	800432e <__gxx_personality_v0+0x26>
 80043dc:	2f00      	cmp	r7, #0
 80043de:	f000 80a1 	beq.w	8004524 <__gxx_personality_v0+0x21c>
 80043e2:	f015 0308 	ands.w	r3, r5, #8
 80043e6:	9302      	str	r3, [sp, #8]
 80043e8:	d036      	beq.n	8004458 <__gxx_personality_v0+0x150>
 80043ea:	2347      	movs	r3, #71	; 0x47
 80043ec:	7023      	strb	r3, [r4, #0]
 80043ee:	234e      	movs	r3, #78	; 0x4e
 80043f0:	7063      	strb	r3, [r4, #1]
 80043f2:	2355      	movs	r3, #85	; 0x55
 80043f4:	70a3      	strb	r3, [r4, #2]
 80043f6:	2343      	movs	r3, #67	; 0x43
 80043f8:	70e3      	strb	r3, [r4, #3]
 80043fa:	2346      	movs	r3, #70	; 0x46
 80043fc:	7123      	strb	r3, [r4, #4]
 80043fe:	234f      	movs	r3, #79	; 0x4f
 8004400:	7163      	strb	r3, [r4, #5]
 8004402:	2352      	movs	r3, #82	; 0x52
 8004404:	71a3      	strb	r3, [r4, #6]
 8004406:	2300      	movs	r3, #0
 8004408:	71e3      	strb	r3, [r4, #7]
 800440a:	f04f 0a00 	mov.w	sl, #0
 800440e:	f06f 0b03 	mvn.w	fp, #3
 8004412:	a907      	add	r1, sp, #28
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff feae 	bl	8004176 <_ZL12read_sleb128PKhPl>
 800441a:	a908      	add	r1, sp, #32
 800441c:	9003      	str	r0, [sp, #12]
 800441e:	f7ff feaa 	bl	8004176 <_ZL12read_sleb128PKhPl>
 8004422:	9a07      	ldr	r2, [sp, #28]
 8004424:	2a00      	cmp	r2, #0
 8004426:	d076      	beq.n	8004516 <__gxx_personality_v0+0x20e>
 8004428:	dd3d      	ble.n	80044a6 <__gxx_personality_v0+0x19e>
 800442a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800442e:	28ff      	cmp	r0, #255	; 0xff
 8004430:	d035      	beq.n	800449e <__gxx_personality_v0+0x196>
 8004432:	f000 0307 	and.w	r3, r0, #7
 8004436:	2b04      	cmp	r3, #4
 8004438:	f63f af75 	bhi.w	8004326 <__gxx_personality_v0+0x1e>
 800443c:	a101      	add	r1, pc, #4	; (adr r1, 8004444 <__gxx_personality_v0+0x13c>)
 800443e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	080044a3 	.word	0x080044a3
 8004448:	08004327 	.word	0x08004327
 800444c:	0800446b 	.word	0x0800446b
 8004450:	080044a3 	.word	0x080044a3
 8004454:	0800449b 	.word	0x0800449b
 8004458:	79e3      	ldrb	r3, [r4, #7]
 800445a:	2b01      	cmp	r3, #1
 800445c:	bf0c      	ite	eq
 800445e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8004462:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	e7cf      	b.n	800440a <__gxx_personality_v0+0x102>
 800446a:	2702      	movs	r7, #2
 800446c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800446e:	ab09      	add	r3, sp, #36	; 0x24
 8004470:	fb07 1212 	mls	r2, r7, r2, r1
 8004474:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004476:	f7ff fe96 	bl	80041a6 <_ZL28read_encoded_value_with_basehjPKhPj>
 800447a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800447c:	b369      	cbz	r1, 80044da <__gxx_personality_v0+0x1d2>
 800447e:	b12c      	cbz	r4, 800448c <__gxx_personality_v0+0x184>
 8004480:	ab04      	add	r3, sp, #16
 8004482:	2200      	movs	r2, #0
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff fdd1 	bl	800402c <__cxa_type_match>
 800448a:	bb30      	cbnz	r0, 80044da <__gxx_personality_v0+0x1d2>
 800448c:	9f08      	ldr	r7, [sp, #32]
 800448e:	2f00      	cmp	r7, #0
 8004490:	d044      	beq.n	800451c <__gxx_personality_v0+0x214>
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	443b      	add	r3, r7
 8004496:	461f      	mov	r7, r3
 8004498:	e7bb      	b.n	8004412 <__gxx_personality_v0+0x10a>
 800449a:	2708      	movs	r7, #8
 800449c:	e7e6      	b.n	800446c <__gxx_personality_v0+0x164>
 800449e:	2700      	movs	r7, #0
 80044a0:	e7e4      	b.n	800446c <__gxx_personality_v0+0x164>
 80044a2:	2704      	movs	r7, #4
 80044a4:	e7e2      	b.n	800446c <__gxx_personality_v0+0x164>
 80044a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80044a8:	3201      	adds	r2, #1
 80044aa:	b36c      	cbz	r4, 8004508 <__gxx_personality_v0+0x200>
 80044ac:	9b02      	ldr	r3, [sp, #8]
 80044ae:	bb5b      	cbnz	r3, 8004508 <__gxx_personality_v0+0x200>
 80044b0:	fb0b 7202 	mla	r2, fp, r2, r7
 80044b4:	9b04      	ldr	r3, [sp, #16]
 80044b6:	1f17      	subs	r7, r2, #4
 80044b8:	9306      	str	r3, [sp, #24]
 80044ba:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80044be:	b141      	cbz	r1, 80044d2 <__gxx_personality_v0+0x1ca>
 80044c0:	ab06      	add	r3, sp, #24
 80044c2:	2200      	movs	r2, #0
 80044c4:	4439      	add	r1, r7
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff fdb0 	bl	800402c <__cxa_type_match>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d0f4      	beq.n	80044ba <__gxx_personality_v0+0x1b2>
 80044d0:	2101      	movs	r1, #1
 80044d2:	f081 0101 	eor.w	r1, r1, #1
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d0d8      	beq.n	800448c <__gxx_personality_v0+0x184>
 80044da:	f04f 0a03 	mov.w	sl, #3
 80044de:	9f07      	ldr	r7, [sp, #28]
 80044e0:	07eb      	lsls	r3, r5, #31
 80044e2:	d527      	bpl.n	8004534 <__gxx_personality_v0+0x22c>
 80044e4:	f1ba 0f02 	cmp.w	sl, #2
 80044e8:	f43f af21 	beq.w	800432e <__gxx_personality_v0+0x26>
 80044ec:	210d      	movs	r1, #13
 80044ee:	4630      	mov	r0, r6
 80044f0:	9d04      	ldr	r5, [sp, #16]
 80044f2:	f7ff fefd 	bl	80042f0 <_Unwind_GetGR>
 80044f6:	6265      	str	r5, [r4, #36]	; 0x24
 80044f8:	6220      	str	r0, [r4, #32]
 80044fa:	62a7      	str	r7, [r4, #40]	; 0x28
 80044fc:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8004500:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8004504:	2006      	movs	r0, #6
 8004506:	e718      	b.n	800433a <__gxx_personality_v0+0x32>
 8004508:	fb0b f202 	mul.w	r2, fp, r2
 800450c:	58b9      	ldr	r1, [r7, r2]
 800450e:	fab1 f181 	clz	r1, r1
 8004512:	0949      	lsrs	r1, r1, #5
 8004514:	e7df      	b.n	80044d6 <__gxx_personality_v0+0x1ce>
 8004516:	f04f 0a01 	mov.w	sl, #1
 800451a:	e7b7      	b.n	800448c <__gxx_personality_v0+0x184>
 800451c:	f1ba 0f00 	cmp.w	sl, #0
 8004520:	f43f af05 	beq.w	800432e <__gxx_personality_v0+0x26>
 8004524:	f04f 0a02 	mov.w	sl, #2
 8004528:	e7da      	b.n	80044e0 <__gxx_personality_v0+0x1d8>
 800452a:	2700      	movs	r7, #0
 800452c:	f04f 0a01 	mov.w	sl, #1
 8004530:	46b8      	mov	r8, r7
 8004532:	e7d5      	b.n	80044e0 <__gxx_personality_v0+0x1d8>
 8004534:	4649      	mov	r1, r9
 8004536:	e731      	b.n	800439c <__gxx_personality_v0+0x94>
 8004538:	2f00      	cmp	r7, #0
 800453a:	da23      	bge.n	8004584 <__gxx_personality_v0+0x27c>
 800453c:	f000 f9d0 	bl	80048e0 <_ZSt10unexpectedv>
 8004540:	f1ba 0f01 	cmp.w	sl, #1
 8004544:	d102      	bne.n	800454c <__gxx_personality_v0+0x244>
 8004546:	4620      	mov	r0, r4
 8004548:	f000 f941 	bl	80047ce <__cxa_call_terminate>
 800454c:	2f00      	cmp	r7, #0
 800454e:	da19      	bge.n	8004584 <__gxx_personality_v0+0x27c>
 8004550:	aa0a      	add	r2, sp, #40	; 0x28
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff fe9e 	bl	8004294 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004558:	4631      	mov	r1, r6
 800455a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800455e:	f7ff fe66 	bl	800422e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004562:	f06f 0303 	mvn.w	r3, #3
 8004566:	fb07 3203 	mla	r2, r7, r3, r3
 800456a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800456c:	900c      	str	r0, [sp, #48]	; 0x30
 800456e:	4413      	add	r3, r2
 8004570:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004574:	b10a      	cbz	r2, 800457a <__gxx_personality_v0+0x272>
 8004576:	3501      	adds	r5, #1
 8004578:	e7fa      	b.n	8004570 <__gxx_personality_v0+0x268>
 800457a:	2204      	movs	r2, #4
 800457c:	62a5      	str	r5, [r4, #40]	; 0x28
 800457e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004580:	6322      	str	r2, [r4, #48]	; 0x30
 8004582:	6363      	str	r3, [r4, #52]	; 0x34
 8004584:	ab10      	add	r3, sp, #64	; 0x40
 8004586:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2300      	movs	r3, #0
 800458e:	4630      	mov	r0, r6
 8004590:	461a      	mov	r2, r3
 8004592:	4619      	mov	r1, r3
 8004594:	f7fc fa3c 	bl	8000a10 <_Unwind_VRS_Set>
 8004598:	ab10      	add	r3, sp, #64	; 0x40
 800459a:	f843 7d20 	str.w	r7, [r3, #-32]!
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	2201      	movs	r2, #1
 80045a4:	4619      	mov	r1, r3
 80045a6:	4630      	mov	r0, r6
 80045a8:	f7fc fa32 	bl	8000a10 <_Unwind_VRS_Set>
 80045ac:	210f      	movs	r1, #15
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff fe9e 	bl	80042f0 <_Unwind_GetGR>
 80045b4:	f000 0001 	and.w	r0, r0, #1
 80045b8:	ab10      	add	r3, sp, #64	; 0x40
 80045ba:	ea40 0008 	orr.w	r0, r0, r8
 80045be:	f843 0d24 	str.w	r0, [r3, #-36]!
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	220f      	movs	r2, #15
 80045c8:	4619      	mov	r1, r3
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7fc fa20 	bl	8000a10 <_Unwind_VRS_Set>
 80045d0:	f1ba 0f02 	cmp.w	sl, #2
 80045d4:	d102      	bne.n	80045dc <__gxx_personality_v0+0x2d4>
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff fd86 	bl	80040e8 <__cxa_begin_cleanup>
 80045dc:	2007      	movs	r0, #7
 80045de:	e6ac      	b.n	800433a <__gxx_personality_v0+0x32>
 80045e0:	aa10      	add	r2, sp, #64	; 0x40
 80045e2:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	4643      	mov	r3, r8
 80045ea:	220c      	movs	r2, #12
 80045ec:	4641      	mov	r1, r8
 80045ee:	4630      	mov	r0, r6
 80045f0:	f045 0502 	orr.w	r5, r5, #2
 80045f4:	f7fc fa0c 	bl	8000a10 <_Unwind_VRS_Set>
 80045f8:	4630      	mov	r0, r6
 80045fa:	f7fc ff85 	bl	8001508 <_Unwind_GetLanguageSpecificData>
 80045fe:	4681      	mov	r9, r0
 8004600:	2800      	cmp	r0, #0
 8004602:	f43f ae94 	beq.w	800432e <__gxx_personality_v0+0x26>
 8004606:	aa0a      	add	r2, sp, #40	; 0x28
 8004608:	4601      	mov	r1, r0
 800460a:	4630      	mov	r0, r6
 800460c:	f7ff fe42 	bl	8004294 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004610:	4631      	mov	r1, r6
 8004612:	4680      	mov	r8, r0
 8004614:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8004618:	f7ff fe09 	bl	800422e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800461c:	210f      	movs	r1, #15
 800461e:	900c      	str	r0, [sp, #48]	; 0x30
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff fe65 	bl	80042f0 <_Unwind_GetGR>
 8004626:	f020 0001 	bic.w	r0, r0, #1
 800462a:	1e47      	subs	r7, r0, #1
 800462c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800462e:	4598      	cmp	r8, r3
 8004630:	f4bf af7b 	bcs.w	800452a <__gxx_personality_v0+0x222>
 8004634:	4642      	mov	r2, r8
 8004636:	ab06      	add	r3, sp, #24
 8004638:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800463c:	2000      	movs	r0, #0
 800463e:	f7ff fe19 	bl	8004274 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004642:	ab07      	add	r3, sp, #28
 8004644:	4602      	mov	r2, r0
 8004646:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800464a:	2000      	movs	r0, #0
 800464c:	f7ff fe12 	bl	8004274 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004650:	ab08      	add	r3, sp, #32
 8004652:	4602      	mov	r2, r0
 8004654:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004658:	2000      	movs	r0, #0
 800465a:	f7ff fe0b 	bl	8004274 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800465e:	a909      	add	r1, sp, #36	; 0x24
 8004660:	f7ff fd78 	bl	8004154 <_ZL12read_uleb128PKhPm>
 8004664:	9a06      	ldr	r2, [sp, #24]
 8004666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004668:	4680      	mov	r8, r0
 800466a:	4413      	add	r3, r2
 800466c:	429f      	cmp	r7, r3
 800466e:	f4bf aea1 	bcs.w	80043b4 <__gxx_personality_v0+0xac>
 8004672:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004676:	e7d9      	b.n	800462c <__gxx_personality_v0+0x324>

08004678 <_ZdlPvj>:
 8004678:	f000 b88a 	b.w	8004790 <_ZdlPv>

0800467c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800467c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800467e:	2310      	movs	r3, #16
 8004680:	2400      	movs	r4, #0
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	6803      	ldr	r3, [r0, #0]
 8004686:	4615      	mov	r5, r2
 8004688:	699e      	ldr	r6, [r3, #24]
 800468a:	9400      	str	r4, [sp, #0]
 800468c:	466b      	mov	r3, sp
 800468e:	f88d 4004 	strb.w	r4, [sp, #4]
 8004692:	9403      	str	r4, [sp, #12]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	47b0      	blx	r6
 8004698:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800469c:	f003 0306 	and.w	r3, r3, #6
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	bf09      	itett	eq
 80046a4:	2001      	moveq	r0, #1
 80046a6:	4620      	movne	r0, r4
 80046a8:	9b00      	ldreq	r3, [sp, #0]
 80046aa:	602b      	streq	r3, [r5, #0]
 80046ac:	b004      	add	sp, #16
 80046ae:	bd70      	pop	{r4, r5, r6, pc}

080046b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80046b0:	9800      	ldr	r0, [sp, #0]
 80046b2:	4290      	cmp	r0, r2
 80046b4:	bf0c      	ite	eq
 80046b6:	2006      	moveq	r0, #6
 80046b8:	2001      	movne	r0, #1
 80046ba:	4770      	bx	lr

080046bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80046c2:	6003      	str	r3, [r0, #0]
 80046c4:	f000 f84b 	bl	800475e <_ZNSt9type_infoD1Ev>
 80046c8:	4620      	mov	r0, r4
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	08004c34 	.word	0x08004c34

080046d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	f7ff fff2 	bl	80046bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80046d8:	4620      	mov	r0, r4
 80046da:	2108      	movs	r1, #8
 80046dc:	f7ff ffcc 	bl	8004678 <_ZdlPvj>
 80046e0:	4620      	mov	r0, r4
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4615      	mov	r5, r2
 80046e8:	461c      	mov	r4, r3
 80046ea:	f000 f83b 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 80046ee:	b120      	cbz	r0, 80046fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80046f0:	2308      	movs	r3, #8
 80046f2:	60e3      	str	r3, [r4, #12]
 80046f4:	2306      	movs	r3, #6
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	7123      	strb	r3, [r4, #4]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}

080046fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80046fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4605      	mov	r5, r0
 8004702:	460c      	mov	r4, r1
 8004704:	4616      	mov	r6, r2
 8004706:	461f      	mov	r7, r3
 8004708:	f000 f82c 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 800470c:	b948      	cbnz	r0, 8004722 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800470e:	2f03      	cmp	r7, #3
 8004710:	d807      	bhi.n	8004722 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4632      	mov	r2, r6
 8004716:	4629      	mov	r1, r5
 8004718:	4620      	mov	r0, r4
 800471a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	4718      	bx	r3
 8004722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004726 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472a:	9e06      	ldr	r6, [sp, #24]
 800472c:	4698      	mov	r8, r3
 800472e:	9b08      	ldr	r3, [sp, #32]
 8004730:	4607      	mov	r7, r0
 8004732:	429e      	cmp	r6, r3
 8004734:	4615      	mov	r5, r2
 8004736:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004738:	d103      	bne.n	8004742 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800473a:	9907      	ldr	r1, [sp, #28]
 800473c:	f000 f812 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 8004740:	b958      	cbnz	r0, 800475a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8004742:	4641      	mov	r1, r8
 8004744:	4638      	mov	r0, r7
 8004746:	f000 f80d 	bl	8004764 <_ZNKSt9type_infoeqERKS_>
 800474a:	b118      	cbz	r0, 8004754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 800474c:	2301      	movs	r3, #1
 800474e:	6026      	str	r6, [r4, #0]
 8004750:	7125      	strb	r5, [r4, #4]
 8004752:	71a3      	strb	r3, [r4, #6]
 8004754:	2000      	movs	r0, #0
 8004756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475a:	7165      	strb	r5, [r4, #5]
 800475c:	e7fa      	b.n	8004754 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800475e <_ZNSt9type_infoD1Ev>:
 800475e:	4770      	bx	lr

08004760 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004760:	2000      	movs	r0, #0
 8004762:	4770      	bx	lr

08004764 <_ZNKSt9type_infoeqERKS_>:
 8004764:	4281      	cmp	r1, r0
 8004766:	b508      	push	{r3, lr}
 8004768:	d00e      	beq.n	8004788 <_ZNKSt9type_infoeqERKS_+0x24>
 800476a:	6840      	ldr	r0, [r0, #4]
 800476c:	7803      	ldrb	r3, [r0, #0]
 800476e:	2b2a      	cmp	r3, #42	; 0x2a
 8004770:	d00c      	beq.n	800478c <_ZNKSt9type_infoeqERKS_+0x28>
 8004772:	6849      	ldr	r1, [r1, #4]
 8004774:	780b      	ldrb	r3, [r1, #0]
 8004776:	2b2a      	cmp	r3, #42	; 0x2a
 8004778:	bf08      	it	eq
 800477a:	3101      	addeq	r1, #1
 800477c:	f7fb fce8 	bl	8000150 <strcmp>
 8004780:	fab0 f080 	clz	r0, r0
 8004784:	0940      	lsrs	r0, r0, #5
 8004786:	bd08      	pop	{r3, pc}
 8004788:	2001      	movs	r0, #1
 800478a:	bd08      	pop	{r3, pc}
 800478c:	2000      	movs	r0, #0
 800478e:	bd08      	pop	{r3, pc}

08004790 <_ZdlPv>:
 8004790:	f000 b8e2 	b.w	8004958 <free>

08004794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004794:	7803      	ldrb	r3, [r0, #0]
 8004796:	2b47      	cmp	r3, #71	; 0x47
 8004798:	d117      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800479a:	7843      	ldrb	r3, [r0, #1]
 800479c:	2b4e      	cmp	r3, #78	; 0x4e
 800479e:	d114      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047a0:	7883      	ldrb	r3, [r0, #2]
 80047a2:	2b55      	cmp	r3, #85	; 0x55
 80047a4:	d111      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047a6:	78c3      	ldrb	r3, [r0, #3]
 80047a8:	2b43      	cmp	r3, #67	; 0x43
 80047aa:	d10e      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047ac:	7903      	ldrb	r3, [r0, #4]
 80047ae:	2b43      	cmp	r3, #67	; 0x43
 80047b0:	d10b      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047b2:	7943      	ldrb	r3, [r0, #5]
 80047b4:	2b2b      	cmp	r3, #43	; 0x2b
 80047b6:	d108      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047b8:	7983      	ldrb	r3, [r0, #6]
 80047ba:	2b2b      	cmp	r3, #43	; 0x2b
 80047bc:	d105      	bne.n	80047ca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80047be:	79c0      	ldrb	r0, [r0, #7]
 80047c0:	2801      	cmp	r0, #1
 80047c2:	bf8c      	ite	hi
 80047c4:	2000      	movhi	r0, #0
 80047c6:	2001      	movls	r0, #1
 80047c8:	4770      	bx	lr
 80047ca:	2000      	movs	r0, #0
 80047cc:	4770      	bx	lr

080047ce <__cxa_call_terminate>:
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	b148      	cbz	r0, 80047e8 <__cxa_call_terminate+0x1a>
 80047d4:	f000 f83b 	bl	800484e <__cxa_begin_catch>
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff ffdb 	bl	8004794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80047de:	b118      	cbz	r0, 80047e8 <__cxa_call_terminate+0x1a>
 80047e0:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80047e4:	f000 f85d 	bl	80048a2 <_ZN10__cxxabiv111__terminateEPFvvE>
 80047e8:	f000 f868 	bl	80048bc <_ZSt9terminatev>

080047ec <__cxa_call_unexpected>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4602      	mov	r2, r0
 80047f0:	f7ff ffd0 	bl	8004794 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80047f4:	b140      	cbz	r0, 8004808 <__cxa_call_unexpected+0x1c>
 80047f6:	2500      	movs	r5, #0
 80047f8:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80047fc:	4610      	mov	r0, r2
 80047fe:	f000 f826 	bl	800484e <__cxa_begin_catch>
 8004802:	b125      	cbz	r5, 800480e <__cxa_call_unexpected+0x22>
 8004804:	f000 f86c 	bl	80048e0 <_ZSt10unexpectedv>
 8004808:	4604      	mov	r4, r0
 800480a:	2501      	movs	r5, #1
 800480c:	e7f6      	b.n	80047fc <__cxa_call_unexpected+0x10>
 800480e:	4620      	mov	r0, r4
 8004810:	f000 f859 	bl	80048c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004814 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004814:	7803      	ldrb	r3, [r0, #0]
 8004816:	2b47      	cmp	r3, #71	; 0x47
 8004818:	d117      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800481a:	7843      	ldrb	r3, [r0, #1]
 800481c:	2b4e      	cmp	r3, #78	; 0x4e
 800481e:	d114      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004820:	7883      	ldrb	r3, [r0, #2]
 8004822:	2b55      	cmp	r3, #85	; 0x55
 8004824:	d111      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004826:	78c3      	ldrb	r3, [r0, #3]
 8004828:	2b43      	cmp	r3, #67	; 0x43
 800482a:	d10e      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800482c:	7903      	ldrb	r3, [r0, #4]
 800482e:	2b43      	cmp	r3, #67	; 0x43
 8004830:	d10b      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004832:	7943      	ldrb	r3, [r0, #5]
 8004834:	2b2b      	cmp	r3, #43	; 0x2b
 8004836:	d108      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004838:	7983      	ldrb	r3, [r0, #6]
 800483a:	2b2b      	cmp	r3, #43	; 0x2b
 800483c:	d105      	bne.n	800484a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800483e:	79c0      	ldrb	r0, [r0, #7]
 8004840:	2801      	cmp	r0, #1
 8004842:	bf8c      	ite	hi
 8004844:	2000      	movhi	r0, #0
 8004846:	2001      	movls	r0, #1
 8004848:	4770      	bx	lr
 800484a:	2000      	movs	r0, #0
 800484c:	4770      	bx	lr

0800484e <__cxa_begin_catch>:
 800484e:	b538      	push	{r3, r4, r5, lr}
 8004850:	4605      	mov	r5, r0
 8004852:	f000 f84b 	bl	80048ec <__cxa_get_globals>
 8004856:	4601      	mov	r1, r0
 8004858:	6802      	ldr	r2, [r0, #0]
 800485a:	4628      	mov	r0, r5
 800485c:	f1a5 0420 	sub.w	r4, r5, #32
 8004860:	f7ff ffd8 	bl	8004814 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004864:	b930      	cbnz	r0, 8004874 <__cxa_begin_catch+0x26>
 8004866:	b10a      	cbz	r2, 800486c <__cxa_begin_catch+0x1e>
 8004868:	f000 f828 	bl	80048bc <_ZSt9terminatev>
 800486c:	600c      	str	r4, [r1, #0]
 800486e:	4614      	mov	r4, r2
 8004870:	4620      	mov	r0, r4
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8004878:	4628      	mov	r0, r5
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfb4      	ite	lt
 800487e:	f1c3 0301 	rsblt	r3, r3, #1
 8004882:	3301      	addge	r3, #1
 8004884:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004888:	684b      	ldr	r3, [r1, #4]
 800488a:	42a2      	cmp	r2, r4
 800488c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004890:	604b      	str	r3, [r1, #4]
 8004892:	bf1c      	itt	ne
 8004894:	f845 2c10 	strne.w	r2, [r5, #-16]
 8004898:	600c      	strne	r4, [r1, #0]
 800489a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800489c:	f7fc f88a 	bl	80009b4 <_Unwind_Complete>
 80048a0:	e7e6      	b.n	8004870 <__cxa_begin_catch+0x22>

080048a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80048a2:	b508      	push	{r3, lr}
 80048a4:	4780      	blx	r0
 80048a6:	f000 f825 	bl	80048f4 <abort>
	...

080048ac <_ZSt13get_terminatev>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <_ZSt13get_terminatev+0xc>)
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	f3bf 8f5b 	dmb	ish
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000010 	.word	0x20000010

080048bc <_ZSt9terminatev>:
 80048bc:	b508      	push	{r3, lr}
 80048be:	f7ff fff5 	bl	80048ac <_ZSt13get_terminatev>
 80048c2:	f7ff ffee 	bl	80048a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080048c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80048c6:	b508      	push	{r3, lr}
 80048c8:	4780      	blx	r0
 80048ca:	f7ff fff7 	bl	80048bc <_ZSt9terminatev>
	...

080048d0 <_ZSt14get_unexpectedv>:
 80048d0:	4b02      	ldr	r3, [pc, #8]	; (80048dc <_ZSt14get_unexpectedv+0xc>)
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	f3bf 8f5b 	dmb	ish
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000014 	.word	0x20000014

080048e0 <_ZSt10unexpectedv>:
 80048e0:	b508      	push	{r3, lr}
 80048e2:	f7ff fff5 	bl	80048d0 <_ZSt14get_unexpectedv>
 80048e6:	f7ff ffee 	bl	80048c6 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

080048ec <__cxa_get_globals>:
 80048ec:	4800      	ldr	r0, [pc, #0]	; (80048f0 <__cxa_get_globals+0x4>)
 80048ee:	4770      	bx	lr
 80048f0:	20001054 	.word	0x20001054

080048f4 <abort>:
 80048f4:	b508      	push	{r3, lr}
 80048f6:	2006      	movs	r0, #6
 80048f8:	f000 f8be 	bl	8004a78 <raise>
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7fd fa9d 	bl	8001e3c <_exit>
	...

08004904 <__errno>:
 8004904:	4b01      	ldr	r3, [pc, #4]	; (800490c <__errno+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000018 	.word	0x20000018

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	2500      	movs	r5, #0
 8004914:	4e0c      	ldr	r6, [pc, #48]	; (8004948 <__libc_init_array+0x38>)
 8004916:	4c0d      	ldr	r4, [pc, #52]	; (800494c <__libc_init_array+0x3c>)
 8004918:	1ba4      	subs	r4, r4, r6
 800491a:	10a4      	asrs	r4, r4, #2
 800491c:	42a5      	cmp	r5, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	f000 f8c8 	bl	8004ab4 <_init>
 8004924:	2500      	movs	r5, #0
 8004926:	4e0a      	ldr	r6, [pc, #40]	; (8004950 <__libc_init_array+0x40>)
 8004928:	4c0a      	ldr	r4, [pc, #40]	; (8004954 <__libc_init_array+0x44>)
 800492a:	1ba4      	subs	r4, r4, r6
 800492c:	10a4      	asrs	r4, r4, #2
 800492e:	42a5      	cmp	r5, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004938:	4798      	blx	r3
 800493a:	3501      	adds	r5, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004942:	4798      	blx	r3
 8004944:	3501      	adds	r5, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08004ea0 	.word	0x08004ea0
 800494c:	08004ea0 	.word	0x08004ea0
 8004950:	08004ea0 	.word	0x08004ea0
 8004954:	08004ea4 	.word	0x08004ea4

08004958 <free>:
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <free+0xc>)
 800495a:	4601      	mov	r1, r0
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	f000 b817 	b.w	8004990 <_free_r>
 8004962:	bf00      	nop
 8004964:	20000018 	.word	0x20000018

08004968 <memcpy>:
 8004968:	b510      	push	{r4, lr}
 800496a:	1e43      	subs	r3, r0, #1
 800496c:	440a      	add	r2, r1
 800496e:	4291      	cmp	r1, r2
 8004970:	d100      	bne.n	8004974 <memcpy+0xc>
 8004972:	bd10      	pop	{r4, pc}
 8004974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497c:	e7f7      	b.n	800496e <memcpy+0x6>

0800497e <memset>:
 800497e:	4603      	mov	r3, r0
 8004980:	4402      	add	r2, r0
 8004982:	4293      	cmp	r3, r2
 8004984:	d100      	bne.n	8004988 <memset+0xa>
 8004986:	4770      	bx	lr
 8004988:	f803 1b01 	strb.w	r1, [r3], #1
 800498c:	e7f9      	b.n	8004982 <memset+0x4>
	...

08004990 <_free_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	2900      	cmp	r1, #0
 8004996:	d043      	beq.n	8004a20 <_free_r+0x90>
 8004998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499c:	1f0c      	subs	r4, r1, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	18e4      	addlt	r4, r4, r3
 80049a4:	f000 f884 	bl	8004ab0 <__malloc_lock>
 80049a8:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <_free_r+0x94>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	4610      	mov	r0, r2
 80049ae:	b933      	cbnz	r3, 80049be <_free_r+0x2e>
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6014      	str	r4, [r2, #0]
 80049b4:	4628      	mov	r0, r5
 80049b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ba:	f000 b87a 	b.w	8004ab2 <__malloc_unlock>
 80049be:	42a3      	cmp	r3, r4
 80049c0:	d90b      	bls.n	80049da <_free_r+0x4a>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	1862      	adds	r2, r4, r1
 80049c6:	4293      	cmp	r3, r2
 80049c8:	bf01      	itttt	eq
 80049ca:	681a      	ldreq	r2, [r3, #0]
 80049cc:	685b      	ldreq	r3, [r3, #4]
 80049ce:	1852      	addeq	r2, r2, r1
 80049d0:	6022      	streq	r2, [r4, #0]
 80049d2:	6063      	str	r3, [r4, #4]
 80049d4:	6004      	str	r4, [r0, #0]
 80049d6:	e7ed      	b.n	80049b4 <_free_r+0x24>
 80049d8:	4613      	mov	r3, r2
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	b10a      	cbz	r2, 80049e2 <_free_r+0x52>
 80049de:	42a2      	cmp	r2, r4
 80049e0:	d9fa      	bls.n	80049d8 <_free_r+0x48>
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	1858      	adds	r0, r3, r1
 80049e6:	42a0      	cmp	r0, r4
 80049e8:	d10b      	bne.n	8004a02 <_free_r+0x72>
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	4401      	add	r1, r0
 80049ee:	1858      	adds	r0, r3, r1
 80049f0:	4282      	cmp	r2, r0
 80049f2:	6019      	str	r1, [r3, #0]
 80049f4:	d1de      	bne.n	80049b4 <_free_r+0x24>
 80049f6:	6810      	ldr	r0, [r2, #0]
 80049f8:	6852      	ldr	r2, [r2, #4]
 80049fa:	4401      	add	r1, r0
 80049fc:	6019      	str	r1, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	e7d8      	b.n	80049b4 <_free_r+0x24>
 8004a02:	d902      	bls.n	8004a0a <_free_r+0x7a>
 8004a04:	230c      	movs	r3, #12
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	e7d4      	b.n	80049b4 <_free_r+0x24>
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	1821      	adds	r1, r4, r0
 8004a0e:	428a      	cmp	r2, r1
 8004a10:	bf01      	itttt	eq
 8004a12:	6811      	ldreq	r1, [r2, #0]
 8004a14:	6852      	ldreq	r2, [r2, #4]
 8004a16:	1809      	addeq	r1, r1, r0
 8004a18:	6021      	streq	r1, [r4, #0]
 8004a1a:	6062      	str	r2, [r4, #4]
 8004a1c:	605c      	str	r4, [r3, #4]
 8004a1e:	e7c9      	b.n	80049b4 <_free_r+0x24>
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
 8004a22:	bf00      	nop
 8004a24:	20001060 	.word	0x20001060

08004a28 <_raise_r>:
 8004a28:	291f      	cmp	r1, #31
 8004a2a:	b538      	push	{r3, r4, r5, lr}
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	460d      	mov	r5, r1
 8004a30:	d904      	bls.n	8004a3c <_raise_r+0x14>
 8004a32:	2316      	movs	r3, #22
 8004a34:	6003      	str	r3, [r0, #0]
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a3e:	b112      	cbz	r2, 8004a46 <_raise_r+0x1e>
 8004a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a44:	b94b      	cbnz	r3, 8004a5a <_raise_r+0x32>
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 f830 	bl	8004aac <_getpid_r>
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4601      	mov	r1, r0
 8004a50:	4620      	mov	r0, r4
 8004a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a56:	f000 b817 	b.w	8004a88 <_kill_r>
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d00a      	beq.n	8004a74 <_raise_r+0x4c>
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	d103      	bne.n	8004a6a <_raise_r+0x42>
 8004a62:	2316      	movs	r3, #22
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	2001      	movs	r0, #1
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a72:	4798      	blx	r3
 8004a74:	2000      	movs	r0, #0
 8004a76:	bd38      	pop	{r3, r4, r5, pc}

08004a78 <raise>:
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <raise+0xc>)
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f7ff bfd3 	b.w	8004a28 <_raise_r>
 8004a82:	bf00      	nop
 8004a84:	20000018 	.word	0x20000018

08004a88 <_kill_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4c06      	ldr	r4, [pc, #24]	; (8004aa8 <_kill_r+0x20>)
 8004a8e:	4605      	mov	r5, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	f7fd f9c9 	bl	8001e2c <_kill>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	d102      	bne.n	8004aa4 <_kill_r+0x1c>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	b103      	cbz	r3, 8004aa4 <_kill_r+0x1c>
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20001164 	.word	0x20001164

08004aac <_getpid_r>:
 8004aac:	f7fd b9bc 	b.w	8001e28 <_getpid>

08004ab0 <__malloc_lock>:
 8004ab0:	4770      	bx	lr

08004ab2 <__malloc_unlock>:
 8004ab2:	4770      	bx	lr

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
