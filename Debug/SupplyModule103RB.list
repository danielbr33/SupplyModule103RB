
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a0  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000138  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000010dc  2000007c  08005ad8  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001158  08005ad8  00021158  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019600  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000436d  00000000  00000000  000396a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010b8  00000000  00000000  0003da18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013d8  00000000  00000000  0003ead0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000999d  00000000  00000000  0003fea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000063ee  00000000  00000000  00049845  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004fc33  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004094  00000000  00000000  0004fcb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000aace  00000000  00000000  00053d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005628 	.word	0x08005628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005628 	.word	0x08005628

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	; 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000590:	f1a2 0201 	sub.w	r2, r2, #1
 8000594:	d1ed      	bne.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__aeabi_fmul>:
 80006f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006f8:	bf1e      	ittt	ne
 80006fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006fe:	ea92 0f0c 	teqne	r2, ip
 8000702:	ea93 0f0c 	teqne	r3, ip
 8000706:	d06f      	beq.n	80007e8 <__aeabi_fmul+0xf8>
 8000708:	441a      	add	r2, r3
 800070a:	ea80 0c01 	eor.w	ip, r0, r1
 800070e:	0240      	lsls	r0, r0, #9
 8000710:	bf18      	it	ne
 8000712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000716:	d01e      	beq.n	8000756 <__aeabi_fmul+0x66>
 8000718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800071c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000724:	fba0 3101 	umull	r3, r1, r0, r1
 8000728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800072c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000730:	bf3e      	ittt	cc
 8000732:	0049      	lslcc	r1, r1, #1
 8000734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000738:	005b      	lslcc	r3, r3, #1
 800073a:	ea40 0001 	orr.w	r0, r0, r1
 800073e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000742:	2afd      	cmp	r2, #253	; 0xfd
 8000744:	d81d      	bhi.n	8000782 <__aeabi_fmul+0x92>
 8000746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800074e:	bf08      	it	eq
 8000750:	f020 0001 	biceq.w	r0, r0, #1
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800075e:	bf08      	it	eq
 8000760:	0249      	lsleq	r1, r1, #9
 8000762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076a:	3a7f      	subs	r2, #127	; 0x7f
 800076c:	bfc2      	ittt	gt
 800076e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000776:	4770      	bxgt	lr
 8000778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	3a01      	subs	r2, #1
 8000782:	dc5d      	bgt.n	8000840 <__aeabi_fmul+0x150>
 8000784:	f112 0f19 	cmn.w	r2, #25
 8000788:	bfdc      	itt	le
 800078a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800078e:	4770      	bxle	lr
 8000790:	f1c2 0200 	rsb	r2, r2, #0
 8000794:	0041      	lsls	r1, r0, #1
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	f1c2 0220 	rsb	r2, r2, #32
 800079e:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007a6:	f140 0000 	adc.w	r0, r0, #0
 80007aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ae:	bf08      	it	eq
 80007b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b4:	4770      	bx	lr
 80007b6:	f092 0f00 	teq	r2, #0
 80007ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007be:	bf02      	ittt	eq
 80007c0:	0040      	lsleq	r0, r0, #1
 80007c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007c6:	3a01      	subeq	r2, #1
 80007c8:	d0f9      	beq.n	80007be <__aeabi_fmul+0xce>
 80007ca:	ea40 000c 	orr.w	r0, r0, ip
 80007ce:	f093 0f00 	teq	r3, #0
 80007d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d6:	bf02      	ittt	eq
 80007d8:	0049      	lsleq	r1, r1, #1
 80007da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007de:	3b01      	subeq	r3, #1
 80007e0:	d0f9      	beq.n	80007d6 <__aeabi_fmul+0xe6>
 80007e2:	ea41 010c 	orr.w	r1, r1, ip
 80007e6:	e78f      	b.n	8000708 <__aeabi_fmul+0x18>
 80007e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007ec:	ea92 0f0c 	teq	r2, ip
 80007f0:	bf18      	it	ne
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d00a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007fc:	bf18      	it	ne
 80007fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000802:	d1d8      	bne.n	80007b6 <__aeabi_fmul+0xc6>
 8000804:	ea80 0001 	eor.w	r0, r0, r1
 8000808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800080c:	4770      	bx	lr
 800080e:	f090 0f00 	teq	r0, #0
 8000812:	bf17      	itett	ne
 8000814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000818:	4608      	moveq	r0, r1
 800081a:	f091 0f00 	teqne	r1, #0
 800081e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000822:	d014      	beq.n	800084e <__aeabi_fmul+0x15e>
 8000824:	ea92 0f0c 	teq	r2, ip
 8000828:	d101      	bne.n	800082e <__aeabi_fmul+0x13e>
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	d10f      	bne.n	800084e <__aeabi_fmul+0x15e>
 800082e:	ea93 0f0c 	teq	r3, ip
 8000832:	d103      	bne.n	800083c <__aeabi_fmul+0x14c>
 8000834:	024b      	lsls	r3, r1, #9
 8000836:	bf18      	it	ne
 8000838:	4608      	movne	r0, r1
 800083a:	d108      	bne.n	800084e <__aeabi_fmul+0x15e>
 800083c:	ea80 0001 	eor.w	r0, r0, r1
 8000840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800084c:	4770      	bx	lr
 800084e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000856:	4770      	bx	lr

08000858 <__aeabi_fdiv>:
 8000858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d069      	beq.n	8000944 <__aeabi_fdiv+0xec>
 8000870:	eba2 0203 	sub.w	r2, r2, r3
 8000874:	ea80 0c01 	eor.w	ip, r0, r1
 8000878:	0249      	lsls	r1, r1, #9
 800087a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800087e:	d037      	beq.n	80008f0 <__aeabi_fdiv+0x98>
 8000880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000890:	428b      	cmp	r3, r1
 8000892:	bf38      	it	cc
 8000894:	005b      	lslcc	r3, r3, #1
 8000896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800089a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800089e:	428b      	cmp	r3, r1
 80008a0:	bf24      	itt	cs
 80008a2:	1a5b      	subcs	r3, r3, r1
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ac:	bf24      	itt	cs
 80008ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ba:	bf24      	itt	cs
 80008bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008c8:	bf24      	itt	cs
 80008ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	bf18      	it	ne
 80008d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008da:	d1e0      	bne.n	800089e <__aeabi_fdiv+0x46>
 80008dc:	2afd      	cmp	r2, #253	; 0xfd
 80008de:	f63f af50 	bhi.w	8000782 <__aeabi_fmul+0x92>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f8:	327f      	adds	r2, #127	; 0x7f
 80008fa:	bfc2      	ittt	gt
 80008fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000904:	4770      	bxgt	lr
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	3a01      	subs	r2, #1
 8000910:	e737      	b.n	8000782 <__aeabi_fmul+0x92>
 8000912:	f092 0f00 	teq	r2, #0
 8000916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0040      	lsleq	r0, r0, #1
 800091e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000922:	3a01      	subeq	r2, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fdiv+0xc2>
 8000926:	ea40 000c 	orr.w	r0, r0, ip
 800092a:	f093 0f00 	teq	r3, #0
 800092e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0049      	lsleq	r1, r1, #1
 8000936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800093a:	3b01      	subeq	r3, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fdiv+0xda>
 800093e:	ea41 010c 	orr.w	r1, r1, ip
 8000942:	e795      	b.n	8000870 <__aeabi_fdiv+0x18>
 8000944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d108      	bne.n	8000960 <__aeabi_fdiv+0x108>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	f47f af7d 	bne.w	800084e <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	f47f af70 	bne.w	800083c <__aeabi_fmul+0x14c>
 800095c:	4608      	mov	r0, r1
 800095e:	e776      	b.n	800084e <__aeabi_fmul+0x15e>
 8000960:	ea93 0f0c 	teq	r3, ip
 8000964:	d104      	bne.n	8000970 <__aeabi_fdiv+0x118>
 8000966:	024b      	lsls	r3, r1, #9
 8000968:	f43f af4c 	beq.w	8000804 <__aeabi_fmul+0x114>
 800096c:	4608      	mov	r0, r1
 800096e:	e76e      	b.n	800084e <__aeabi_fmul+0x15e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800097a:	d1ca      	bne.n	8000912 <__aeabi_fdiv+0xba>
 800097c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000980:	f47f af5c 	bne.w	800083c <__aeabi_fmul+0x14c>
 8000984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000988:	f47f af3c 	bne.w	8000804 <__aeabi_fmul+0x114>
 800098c:	e75f      	b.n	800084e <__aeabi_fmul+0x15e>
 800098e:	bf00      	nop

08000990 <selfrel_offset31>:
 8000990:	6803      	ldr	r3, [r0, #0]
 8000992:	005a      	lsls	r2, r3, #1
 8000994:	bf4c      	ite	mi
 8000996:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800099a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800099e:	4418      	add	r0, r3
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <search_EIT_table>:
 80009a4:	b361      	cbz	r1, 8000a00 <search_EIT_table+0x5c>
 80009a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009aa:	f101 3aff 	add.w	sl, r1, #4294967295
 80009ae:	4690      	mov	r8, r2
 80009b0:	4606      	mov	r6, r0
 80009b2:	46d1      	mov	r9, sl
 80009b4:	2700      	movs	r7, #0
 80009b6:	eb07 0409 	add.w	r4, r7, r9
 80009ba:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80009be:	1064      	asrs	r4, r4, #1
 80009c0:	00e5      	lsls	r5, r4, #3
 80009c2:	1971      	adds	r1, r6, r5
 80009c4:	4608      	mov	r0, r1
 80009c6:	f7ff ffe3 	bl	8000990 <selfrel_offset31>
 80009ca:	45a2      	cmp	sl, r4
 80009cc:	4683      	mov	fp, r0
 80009ce:	f105 0008 	add.w	r0, r5, #8
 80009d2:	4430      	add	r0, r6
 80009d4:	d009      	beq.n	80009ea <search_EIT_table+0x46>
 80009d6:	f7ff ffdb 	bl	8000990 <selfrel_offset31>
 80009da:	45c3      	cmp	fp, r8
 80009dc:	f100 30ff 	add.w	r0, r0, #4294967295
 80009e0:	d805      	bhi.n	80009ee <search_EIT_table+0x4a>
 80009e2:	4540      	cmp	r0, r8
 80009e4:	d209      	bcs.n	80009fa <search_EIT_table+0x56>
 80009e6:	1c67      	adds	r7, r4, #1
 80009e8:	e7e5      	b.n	80009b6 <search_EIT_table+0x12>
 80009ea:	45c3      	cmp	fp, r8
 80009ec:	d905      	bls.n	80009fa <search_EIT_table+0x56>
 80009ee:	42a7      	cmp	r7, r4
 80009f0:	d002      	beq.n	80009f8 <search_EIT_table+0x54>
 80009f2:	f104 39ff 	add.w	r9, r4, #4294967295
 80009f6:	e7de      	b.n	80009b6 <search_EIT_table+0x12>
 80009f8:	2100      	movs	r1, #0
 80009fa:	4608      	mov	r0, r1
 80009fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a00:	4608      	mov	r0, r1
 8000a02:	4770      	bx	lr

08000a04 <__gnu_unwind_get_pr_addr>:
 8000a04:	2801      	cmp	r0, #1
 8000a06:	d007      	beq.n	8000a18 <__gnu_unwind_get_pr_addr+0x14>
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d007      	beq.n	8000a1c <__gnu_unwind_get_pr_addr+0x18>
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__gnu_unwind_get_pr_addr+0x1c>)
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	4618      	moveq	r0, r3
 8000a14:	2000      	movne	r0, #0
 8000a16:	4770      	bx	lr
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <__gnu_unwind_get_pr_addr+0x20>)
 8000a1a:	4770      	bx	lr
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <__gnu_unwind_get_pr_addr+0x24>)
 8000a1e:	4770      	bx	lr
 8000a20:	08001115 	.word	0x08001115
 8000a24:	08001119 	.word	0x08001119
 8000a28:	0800111d 	.word	0x0800111d

08000a2c <get_eit_entry>:
 8000a2c:	b530      	push	{r4, r5, lr}
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <get_eit_entry+0x98>)
 8000a30:	b083      	sub	sp, #12
 8000a32:	4604      	mov	r4, r0
 8000a34:	1e8d      	subs	r5, r1, #2
 8000a36:	b373      	cbz	r3, 8000a96 <get_eit_entry+0x6a>
 8000a38:	a901      	add	r1, sp, #4
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f3af 8000 	nop.w
 8000a40:	b318      	cbz	r0, 8000a8a <get_eit_entry+0x5e>
 8000a42:	9901      	ldr	r1, [sp, #4]
 8000a44:	462a      	mov	r2, r5
 8000a46:	f7ff ffad 	bl	80009a4 <search_EIT_table>
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	b1e8      	cbz	r0, 8000a8a <get_eit_entry+0x5e>
 8000a4e:	f7ff ff9f 	bl	8000990 <selfrel_offset31>
 8000a52:	684b      	ldr	r3, [r1, #4]
 8000a54:	64a0      	str	r0, [r4, #72]	; 0x48
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d011      	beq.n	8000a7e <get_eit_entry+0x52>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db22      	blt.n	8000aa4 <get_eit_entry+0x78>
 8000a5e:	1d08      	adds	r0, r1, #4
 8000a60:	f7ff ff96 	bl	8000990 <selfrel_offset31>
 8000a64:	2300      	movs	r3, #0
 8000a66:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000a68:	6523      	str	r3, [r4, #80]	; 0x50
 8000a6a:	6803      	ldr	r3, [r0, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db1e      	blt.n	8000aae <get_eit_entry+0x82>
 8000a70:	f7ff ff8e 	bl	8000990 <selfrel_offset31>
 8000a74:	2300      	movs	r3, #0
 8000a76:	6120      	str	r0, [r4, #16]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	b003      	add	sp, #12
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	2305      	movs	r3, #5
 8000a80:	2200      	movs	r2, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	6122      	str	r2, [r4, #16]
 8000a86:	b003      	add	sp, #12
 8000a88:	bd30      	pop	{r4, r5, pc}
 8000a8a:	2309      	movs	r3, #9
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	6122      	str	r2, [r4, #16]
 8000a92:	b003      	add	sp, #12
 8000a94:	bd30      	pop	{r4, r5, pc}
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <get_eit_entry+0x9c>)
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <get_eit_entry+0xa0>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	1ac9      	subs	r1, r1, r3
 8000a9e:	10c9      	asrs	r1, r1, #3
 8000aa0:	9101      	str	r1, [sp, #4]
 8000aa2:	e7cf      	b.n	8000a44 <get_eit_entry+0x18>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	1d08      	adds	r0, r1, #4
 8000aa8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000aaa:	6523      	str	r3, [r4, #80]	; 0x50
 8000aac:	e7dd      	b.n	8000a6a <get_eit_entry+0x3e>
 8000aae:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000ab2:	f7ff ffa7 	bl	8000a04 <__gnu_unwind_get_pr_addr>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	6120      	str	r0, [r4, #16]
 8000aba:	bf14      	ite	ne
 8000abc:	2300      	movne	r3, #0
 8000abe:	2309      	moveq	r3, #9
 8000ac0:	e7da      	b.n	8000a78 <get_eit_entry+0x4c>
 8000ac2:	bf00      	nop
 8000ac4:	00000000 	.word	0x00000000
 8000ac8:	0800591c 	.word	0x0800591c
 8000acc:	08005a54 	.word	0x08005a54

08000ad0 <restore_non_core_regs>:
 8000ad0:	6803      	ldr	r3, [r0, #0]
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	07da      	lsls	r2, r3, #31
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	d406      	bmi.n	8000ae8 <restore_non_core_regs+0x18>
 8000ada:	079b      	lsls	r3, r3, #30
 8000adc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000ae0:	d509      	bpl.n	8000af6 <restore_non_core_regs+0x26>
 8000ae2:	f000 fc57 	bl	8001394 <__gnu_Unwind_Restore_VFP_D>
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	0759      	lsls	r1, r3, #29
 8000aea:	d509      	bpl.n	8000b00 <restore_non_core_regs+0x30>
 8000aec:	071a      	lsls	r2, r3, #28
 8000aee:	d50e      	bpl.n	8000b0e <restore_non_core_regs+0x3e>
 8000af0:	06db      	lsls	r3, r3, #27
 8000af2:	d513      	bpl.n	8000b1c <restore_non_core_regs+0x4c>
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	f000 fc45 	bl	8001384 <__gnu_Unwind_Restore_VFP>
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	0759      	lsls	r1, r3, #29
 8000afe:	d4f5      	bmi.n	8000aec <restore_non_core_regs+0x1c>
 8000b00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b04:	f000 fc4e 	bl	80013a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	071a      	lsls	r2, r3, #28
 8000b0c:	d4f0      	bmi.n	8000af0 <restore_non_core_regs+0x20>
 8000b0e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000b12:	f000 fc4f 	bl	80013b4 <__gnu_Unwind_Restore_WMMXD>
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	06db      	lsls	r3, r3, #27
 8000b1a:	d4eb      	bmi.n	8000af4 <restore_non_core_regs+0x24>
 8000b1c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b24:	f000 bc8a 	b.w	800143c <__gnu_Unwind_Restore_WMMXC>

08000b28 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000b28:	6803      	ldr	r3, [r0, #0]
 8000b2a:	b103      	cbz	r3, 8000b2e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000b2c:	4403      	add	r3, r0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__gnu_unwind_24bit.isra.1>:
 8000b34:	2009      	movs	r0, #9
 8000b36:	4770      	bx	lr

08000b38 <_Unwind_DebugHook>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <unwind_phase2>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4604      	mov	r4, r0
 8000b40:	460d      	mov	r5, r1
 8000b42:	e008      	b.n	8000b56 <unwind_phase2+0x1a>
 8000b44:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000b46:	6923      	ldr	r3, [r4, #16]
 8000b48:	6162      	str	r2, [r4, #20]
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	462a      	mov	r2, r5
 8000b4e:	2001      	movs	r0, #1
 8000b50:	4798      	blx	r3
 8000b52:	2808      	cmp	r0, #8
 8000b54:	d108      	bne.n	8000b68 <unwind_phase2+0x2c>
 8000b56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff ff67 	bl	8000a2c <get_eit_entry>
 8000b5e:	4606      	mov	r6, r0
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d0ef      	beq.n	8000b44 <unwind_phase2+0x8>
 8000b64:	f004 f8ae 	bl	8004cc4 <abort>
 8000b68:	2807      	cmp	r0, #7
 8000b6a:	d1fb      	bne.n	8000b64 <unwind_phase2+0x28>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b70:	f7ff ffe2 	bl	8000b38 <_Unwind_DebugHook>
 8000b74:	1d28      	adds	r0, r5, #4
 8000b76:	f000 fbf9 	bl	800136c <__restore_core_regs>
 8000b7a:	bf00      	nop

08000b7c <unwind_phase2_forced>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	4605      	mov	r5, r0
 8000b82:	2700      	movs	r7, #0
 8000b84:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000b88:	ac03      	add	r4, sp, #12
 8000b8a:	1d0e      	adds	r6, r1, #4
 8000b8c:	4692      	mov	sl, r2
 8000b8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b9e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000ba2:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000baa:	ac02      	add	r4, sp, #8
 8000bac:	4628      	mov	r0, r5
 8000bae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000bb0:	6027      	str	r7, [r4, #0]
 8000bb2:	f7ff ff3b 	bl	8000a2c <get_eit_entry>
 8000bb6:	f1ba 0f00 	cmp.w	sl, #0
 8000bba:	4607      	mov	r7, r0
 8000bbc:	bf14      	ite	ne
 8000bbe:	260a      	movne	r6, #10
 8000bc0:	2609      	moveq	r6, #9
 8000bc2:	b17f      	cbz	r7, 8000be4 <unwind_phase2_forced+0x68>
 8000bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bc6:	f046 0110 	orr.w	r1, r6, #16
 8000bca:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000bce:	462a      	mov	r2, r5
 8000bd0:	6463      	str	r3, [r4, #68]	; 0x44
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	462b      	mov	r3, r5
 8000bd6:	47c0      	blx	r8
 8000bd8:	bb78      	cbnz	r0, 8000c3a <unwind_phase2_forced+0xbe>
 8000bda:	4638      	mov	r0, r7
 8000bdc:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000be6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bea:	616b      	str	r3, [r5, #20]
 8000bec:	4621      	mov	r1, r4
 8000bee:	a87a      	add	r0, sp, #488	; 0x1e8
 8000bf0:	f004 f8a2 	bl	8004d38 <memcpy>
 8000bf4:	692b      	ldr	r3, [r5, #16]
 8000bf6:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000bf8:	4629      	mov	r1, r5
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	4798      	blx	r3
 8000bfe:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000c00:	4682      	mov	sl, r0
 8000c02:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000c06:	4631      	mov	r1, r6
 8000c08:	6463      	str	r3, [r4, #68]	; 0x44
 8000c0a:	462a      	mov	r2, r5
 8000c0c:	462b      	mov	r3, r5
 8000c0e:	2001      	movs	r0, #1
 8000c10:	47c0      	blx	r8
 8000c12:	b990      	cbnz	r0, 8000c3a <unwind_phase2_forced+0xbe>
 8000c14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c18:	a97a      	add	r1, sp, #488	; 0x1e8
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f004 f88c 	bl	8004d38 <memcpy>
 8000c20:	f1ba 0f08 	cmp.w	sl, #8
 8000c24:	d106      	bne.n	8000c34 <unwind_phase2_forced+0xb8>
 8000c26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f7ff feff 	bl	8000a2c <get_eit_entry>
 8000c2e:	2609      	movs	r6, #9
 8000c30:	4607      	mov	r7, r0
 8000c32:	e7c6      	b.n	8000bc2 <unwind_phase2_forced+0x46>
 8000c34:	f1ba 0f07 	cmp.w	sl, #7
 8000c38:	d005      	beq.n	8000c46 <unwind_phase2_forced+0xca>
 8000c3a:	2709      	movs	r7, #9
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	4638      	mov	r0, r7
 8000c48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000c4a:	f7ff ff75 	bl	8000b38 <_Unwind_DebugHook>
 8000c4e:	a803      	add	r0, sp, #12
 8000c50:	f000 fb8c 	bl	800136c <__restore_core_regs>

08000c54 <_Unwind_GetCFA>:
 8000c54:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000c56:	4770      	bx	lr

08000c58 <__gnu_Unwind_RaiseException>:
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	f04f 3eff 	mov.w	lr, #4294967295
 8000c5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000c60:	b0f9      	sub	sp, #484	; 0x1e4
 8000c62:	640b      	str	r3, [r1, #64]	; 0x40
 8000c64:	1d0e      	adds	r6, r1, #4
 8000c66:	ad01      	add	r5, sp, #4
 8000c68:	460f      	mov	r7, r1
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c80:	f8cd e000 	str.w	lr, [sp]
 8000c84:	e006      	b.n	8000c94 <__gnu_Unwind_RaiseException+0x3c>
 8000c86:	6923      	ldr	r3, [r4, #16]
 8000c88:	466a      	mov	r2, sp
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	4798      	blx	r3
 8000c8e:	2808      	cmp	r0, #8
 8000c90:	4605      	mov	r5, r0
 8000c92:	d108      	bne.n	8000ca6 <__gnu_Unwind_RaiseException+0x4e>
 8000c94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff fec8 	bl	8000a2c <get_eit_entry>
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d0f2      	beq.n	8000c86 <__gnu_Unwind_RaiseException+0x2e>
 8000ca0:	2009      	movs	r0, #9
 8000ca2:	b079      	add	sp, #484	; 0x1e4
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca6:	4668      	mov	r0, sp
 8000ca8:	f7ff ff12 	bl	8000ad0 <restore_non_core_regs>
 8000cac:	2d06      	cmp	r5, #6
 8000cae:	d1f7      	bne.n	8000ca0 <__gnu_Unwind_RaiseException+0x48>
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff ff42 	bl	8000b3c <unwind_phase2>

08000cb8 <__gnu_Unwind_ForcedUnwind>:
 8000cb8:	b430      	push	{r4, r5}
 8000cba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000cbc:	60c1      	str	r1, [r0, #12]
 8000cbe:	6182      	str	r2, [r0, #24]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	641d      	str	r5, [r3, #64]	; 0x40
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	bc30      	pop	{r4, r5}
 8000cc8:	e758      	b.n	8000b7c <unwind_phase2_forced>
 8000cca:	bf00      	nop

08000ccc <__gnu_Unwind_Resume>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	6943      	ldr	r3, [r0, #20]
 8000cd0:	68c6      	ldr	r6, [r0, #12]
 8000cd2:	640b      	str	r3, [r1, #64]	; 0x40
 8000cd4:	b126      	cbz	r6, 8000ce0 <__gnu_Unwind_Resume+0x14>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f7ff ff50 	bl	8000b7c <unwind_phase2_forced>
 8000cdc:	f003 fff2 	bl	8004cc4 <abort>
 8000ce0:	6903      	ldr	r3, [r0, #16]
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4601      	mov	r1, r0
 8000cea:	2002      	movs	r0, #2
 8000cec:	4798      	blx	r3
 8000cee:	2807      	cmp	r0, #7
 8000cf0:	d007      	beq.n	8000d02 <__gnu_Unwind_Resume+0x36>
 8000cf2:	2808      	cmp	r0, #8
 8000cf4:	d103      	bne.n	8000cfe <__gnu_Unwind_Resume+0x32>
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff ff1f 	bl	8000b3c <unwind_phase2>
 8000cfe:	f003 ffe1 	bl	8004cc4 <abort>
 8000d02:	4630      	mov	r0, r6
 8000d04:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000d06:	f7ff ff17 	bl	8000b38 <_Unwind_DebugHook>
 8000d0a:	1d28      	adds	r0, r5, #4
 8000d0c:	f000 fb2e 	bl	800136c <__restore_core_regs>

08000d10 <__gnu_Unwind_Resume_or_Rethrow>:
 8000d10:	68c2      	ldr	r2, [r0, #12]
 8000d12:	b12a      	cbz	r2, 8000d20 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000d14:	b410      	push	{r4}
 8000d16:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8000d18:	2200      	movs	r2, #0
 8000d1a:	640c      	str	r4, [r1, #64]	; 0x40
 8000d1c:	bc10      	pop	{r4}
 8000d1e:	e72d      	b.n	8000b7c <unwind_phase2_forced>
 8000d20:	e79a      	b.n	8000c58 <__gnu_Unwind_RaiseException>
 8000d22:	bf00      	nop

08000d24 <_Unwind_Complete>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <_Unwind_DeleteException>:
 8000d28:	6883      	ldr	r3, [r0, #8]
 8000d2a:	b113      	cbz	r3, 8000d32 <_Unwind_DeleteException+0xa>
 8000d2c:	4601      	mov	r1, r0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4718      	bx	r3
 8000d32:	4770      	bx	lr

08000d34 <_Unwind_VRS_Get>:
 8000d34:	b500      	push	{lr}
 8000d36:	2904      	cmp	r1, #4
 8000d38:	d807      	bhi.n	8000d4a <_Unwind_VRS_Get+0x16>
 8000d3a:	e8df f001 	tbb	[pc, r1]
 8000d3e:	0903      	.short	0x0903
 8000d40:	0906      	.short	0x0906
 8000d42:	09          	.byte	0x09
 8000d43:	00          	.byte	0x00
 8000d44:	b90b      	cbnz	r3, 8000d4a <_Unwind_VRS_Get+0x16>
 8000d46:	2a0f      	cmp	r2, #15
 8000d48:	d905      	bls.n	8000d56 <_Unwind_VRS_Get+0x22>
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d50:	2001      	movs	r0, #1
 8000d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d56:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d5a:	6852      	ldr	r2, [r2, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	9b01      	ldr	r3, [sp, #4]
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d66:	bf00      	nop

08000d68 <_Unwind_GetGR>:
 8000d68:	2300      	movs	r3, #0
 8000d6a:	b510      	push	{r4, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	ac03      	add	r4, sp, #12
 8000d70:	460a      	mov	r2, r1
 8000d72:	9400      	str	r4, [sp, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff ffdd 	bl	8000d34 <_Unwind_VRS_Get>
 8000d7a:	9803      	ldr	r0, [sp, #12]
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <_Unwind_VRS_Set>:
 8000d80:	b500      	push	{lr}
 8000d82:	2904      	cmp	r1, #4
 8000d84:	d807      	bhi.n	8000d96 <_Unwind_VRS_Set+0x16>
 8000d86:	e8df f001 	tbb	[pc, r1]
 8000d8a:	0903      	.short	0x0903
 8000d8c:	0906      	.short	0x0906
 8000d8e:	09          	.byte	0x09
 8000d8f:	00          	.byte	0x00
 8000d90:	b90b      	cbnz	r3, 8000d96 <_Unwind_VRS_Set+0x16>
 8000d92:	2a0f      	cmp	r2, #15
 8000d94:	d905      	bls.n	8000da2 <_Unwind_VRS_Set+0x22>
 8000d96:	2002      	movs	r0, #2
 8000d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000da2:	9901      	ldr	r1, [sp, #4]
 8000da4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000da8:	6809      	ldr	r1, [r1, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	6051      	str	r1, [r2, #4]
 8000dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000db2:	bf00      	nop

08000db4 <_Unwind_SetGR>:
 8000db4:	2300      	movs	r3, #0
 8000db6:	b510      	push	{r4, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	ac04      	add	r4, sp, #16
 8000dbc:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000dc0:	9400      	str	r4, [sp, #0]
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff ffdb 	bl	8000d80 <_Unwind_VRS_Set>
 8000dca:	b004      	add	sp, #16
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	bf00      	nop

08000dd0 <__gnu_Unwind_Backtrace>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	f04f 3eff 	mov.w	lr, #4294967295
 8000dd6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000dd8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	1d15      	adds	r5, r2, #4
 8000de0:	ac17      	add	r4, sp, #92	; 0x5c
 8000de2:	4607      	mov	r7, r0
 8000de4:	460e      	mov	r6, r1
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfa:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000dfe:	e012      	b.n	8000e26 <__gnu_Unwind_Backtrace+0x56>
 8000e00:	210c      	movs	r1, #12
 8000e02:	a816      	add	r0, sp, #88	; 0x58
 8000e04:	466a      	mov	r2, sp
 8000e06:	f7ff ffd5 	bl	8000db4 <_Unwind_SetGR>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	a816      	add	r0, sp, #88	; 0x58
 8000e0e:	47b8      	blx	r7
 8000e10:	b978      	cbnz	r0, 8000e32 <__gnu_Unwind_Backtrace+0x62>
 8000e12:	9b04      	ldr	r3, [sp, #16]
 8000e14:	aa16      	add	r2, sp, #88	; 0x58
 8000e16:	4669      	mov	r1, sp
 8000e18:	2008      	movs	r0, #8
 8000e1a:	4798      	blx	r3
 8000e1c:	2805      	cmp	r0, #5
 8000e1e:	4604      	mov	r4, r0
 8000e20:	d008      	beq.n	8000e34 <__gnu_Unwind_Backtrace+0x64>
 8000e22:	2809      	cmp	r0, #9
 8000e24:	d005      	beq.n	8000e32 <__gnu_Unwind_Backtrace+0x62>
 8000e26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000e28:	4668      	mov	r0, sp
 8000e2a:	f7ff fdff 	bl	8000a2c <get_eit_entry>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d0e6      	beq.n	8000e00 <__gnu_Unwind_Backtrace+0x30>
 8000e32:	2409      	movs	r4, #9
 8000e34:	a816      	add	r0, sp, #88	; 0x58
 8000e36:	f7ff fe4b 	bl	8000ad0 <restore_non_core_regs>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	bf00      	nop

08000e44 <__gnu_unwind_pr_common>:
 8000e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e48:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	3404      	adds	r4, #4
 8000e52:	460d      	mov	r5, r1
 8000e54:	9207      	str	r2, [sp, #28]
 8000e56:	9408      	str	r4, [sp, #32]
 8000e58:	f000 0b03 	and.w	fp, r0, #3
 8000e5c:	461e      	mov	r6, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d160      	bne.n	8000f24 <__gnu_unwind_pr_common+0xe0>
 8000e62:	2303      	movs	r3, #3
 8000e64:	0212      	lsls	r2, r2, #8
 8000e66:	9207      	str	r2, [sp, #28]
 8000e68:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000e6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000e70:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000e72:	f1bb 0f02 	cmp.w	fp, #2
 8000e76:	bf08      	it	eq
 8000e78:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000e7a:	f013 0301 	ands.w	r3, r3, #1
 8000e7e:	d140      	bne.n	8000f02 <__gnu_unwind_pr_common+0xbe>
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	f000 0308 	and.w	r3, r0, #8
 8000e86:	9303      	str	r3, [sp, #12]
 8000e88:	f8d4 8000 	ldr.w	r8, [r4]
 8000e8c:	f1b8 0f00 	cmp.w	r8, #0
 8000e90:	d039      	beq.n	8000f06 <__gnu_unwind_pr_common+0xc2>
 8000e92:	2e02      	cmp	r6, #2
 8000e94:	d043      	beq.n	8000f1e <__gnu_unwind_pr_common+0xda>
 8000e96:	f8b4 8000 	ldrh.w	r8, [r4]
 8000e9a:	8867      	ldrh	r7, [r4, #2]
 8000e9c:	3404      	adds	r4, #4
 8000e9e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000ea0:	f027 0a01 	bic.w	sl, r7, #1
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	4648      	mov	r0, r9
 8000ea8:	449a      	add	sl, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <_Unwind_GetGR>
 8000eae:	4582      	cmp	sl, r0
 8000eb0:	d833      	bhi.n	8000f1a <__gnu_unwind_pr_common+0xd6>
 8000eb2:	f028 0301 	bic.w	r3, r8, #1
 8000eb6:	449a      	add	sl, r3
 8000eb8:	4550      	cmp	r0, sl
 8000eba:	bf2c      	ite	cs
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	2001      	movcc	r0, #1
 8000ec0:	007f      	lsls	r7, r7, #1
 8000ec2:	f007 0702 	and.w	r7, r7, #2
 8000ec6:	f008 0801 	and.w	r8, r8, #1
 8000eca:	ea47 0708 	orr.w	r7, r7, r8
 8000ece:	2f01      	cmp	r7, #1
 8000ed0:	d03e      	beq.n	8000f50 <__gnu_unwind_pr_common+0x10c>
 8000ed2:	d335      	bcc.n	8000f40 <__gnu_unwind_pr_common+0xfc>
 8000ed4:	2f02      	cmp	r7, #2
 8000ed6:	d11c      	bne.n	8000f12 <__gnu_unwind_pr_common+0xce>
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ede:	9202      	str	r2, [sp, #8]
 8000ee0:	f1bb 0f00 	cmp.w	fp, #0
 8000ee4:	d176      	bne.n	8000fd4 <__gnu_unwind_pr_common+0x190>
 8000ee6:	b128      	cbz	r0, 8000ef4 <__gnu_unwind_pr_common+0xb0>
 8000ee8:	9903      	ldr	r1, [sp, #12]
 8000eea:	2900      	cmp	r1, #0
 8000eec:	d07e      	beq.n	8000fec <__gnu_unwind_pr_common+0x1a8>
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	f000 80a6 	beq.w	8001040 <__gnu_unwind_pr_common+0x1fc>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db77      	blt.n	8000fe8 <__gnu_unwind_pr_common+0x1a4>
 8000ef8:	9b02      	ldr	r3, [sp, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000f00:	e7c2      	b.n	8000e88 <__gnu_unwind_pr_common+0x44>
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	2e02      	cmp	r6, #2
 8000f08:	dd3e      	ble.n	8000f88 <__gnu_unwind_pr_common+0x144>
 8000f0a:	f7ff fe13 	bl	8000b34 <__gnu_unwind_24bit.isra.1>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d040      	beq.n	8000f94 <__gnu_unwind_pr_common+0x150>
 8000f12:	2009      	movs	r0, #9
 8000f14:	b00b      	add	sp, #44	; 0x2c
 8000f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	e7d0      	b.n	8000ec0 <__gnu_unwind_pr_common+0x7c>
 8000f1e:	6867      	ldr	r7, [r4, #4]
 8000f20:	3408      	adds	r4, #8
 8000f22:	e7bc      	b.n	8000e9e <__gnu_unwind_pr_common+0x5a>
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	dca3      	bgt.n	8000e70 <__gnu_unwind_pr_common+0x2c>
 8000f28:	2102      	movs	r1, #2
 8000f2a:	0c13      	lsrs	r3, r2, #16
 8000f2c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000f30:	0412      	lsls	r2, r2, #16
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000f38:	9207      	str	r2, [sp, #28]
 8000f3a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000f3e:	e797      	b.n	8000e70 <__gnu_unwind_pr_common+0x2c>
 8000f40:	f1bb 0f00 	cmp.w	fp, #0
 8000f44:	d002      	beq.n	8000f4c <__gnu_unwind_pr_common+0x108>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	f040 80bd 	bne.w	80010c6 <__gnu_unwind_pr_common+0x282>
 8000f4c:	3404      	adds	r4, #4
 8000f4e:	e79b      	b.n	8000e88 <__gnu_unwind_pr_common+0x44>
 8000f50:	f1bb 0f00 	cmp.w	fp, #0
 8000f54:	d125      	bne.n	8000fa2 <__gnu_unwind_pr_common+0x15e>
 8000f56:	b1a8      	cbz	r0, 8000f84 <__gnu_unwind_pr_common+0x140>
 8000f58:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000f5c:	1c99      	adds	r1, r3, #2
 8000f5e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000f62:	d0d6      	beq.n	8000f12 <__gnu_unwind_pr_common+0xce>
 8000f64:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000f68:	3301      	adds	r3, #1
 8000f6a:	9106      	str	r1, [sp, #24]
 8000f6c:	f000 80a3 	beq.w	80010b6 <__gnu_unwind_pr_common+0x272>
 8000f70:	1d20      	adds	r0, r4, #4
 8000f72:	f7ff fdd9 	bl	8000b28 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000f76:	ab06      	add	r3, sp, #24
 8000f78:	4601      	mov	r1, r0
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	f003 fa3e 	bl	80043fc <__cxa_type_match>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d177      	bne.n	8001074 <__gnu_unwind_pr_common+0x230>
 8000f84:	3408      	adds	r4, #8
 8000f86:	e77f      	b.n	8000e88 <__gnu_unwind_pr_common+0x44>
 8000f88:	a907      	add	r1, sp, #28
 8000f8a:	4648      	mov	r0, r9
 8000f8c:	f000 faf0 	bl	8001570 <__gnu_unwind_execute>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d1be      	bne.n	8000f12 <__gnu_unwind_pr_common+0xce>
 8000f94:	9b01      	ldr	r3, [sp, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d15c      	bne.n	8001054 <__gnu_unwind_pr_common+0x210>
 8000f9a:	2008      	movs	r0, #8
 8000f9c:	b00b      	add	sp, #44	; 0x2c
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa2:	210d      	movs	r1, #13
 8000fa4:	4648      	mov	r0, r9
 8000fa6:	6a2f      	ldr	r7, [r5, #32]
 8000fa8:	f7ff fede 	bl	8000d68 <_Unwind_GetGR>
 8000fac:	4287      	cmp	r7, r0
 8000fae:	d1e9      	bne.n	8000f84 <__gnu_unwind_pr_common+0x140>
 8000fb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	d1e6      	bne.n	8000f84 <__gnu_unwind_pr_common+0x140>
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff fcea 	bl	8000990 <selfrel_offset31>
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	4648      	mov	r0, r9
 8000fc2:	f7ff fef7 	bl	8000db4 <_Unwind_SetGR>
 8000fc6:	4648      	mov	r0, r9
 8000fc8:	462a      	mov	r2, r5
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f7ff fef2 	bl	8000db4 <_Unwind_SetGR>
 8000fd0:	2007      	movs	r0, #7
 8000fd2:	e79f      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 8000fd4:	210d      	movs	r1, #13
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	6a2f      	ldr	r7, [r5, #32]
 8000fda:	f7ff fec5 	bl	8000d68 <_Unwind_GetGR>
 8000fde:	4287      	cmp	r7, r0
 8000fe0:	d058      	beq.n	8001094 <__gnu_unwind_pr_common+0x250>
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da87      	bge.n	8000ef8 <__gnu_unwind_pr_common+0xb4>
 8000fe8:	3404      	adds	r4, #4
 8000fea:	e785      	b.n	8000ef8 <__gnu_unwind_pr_common+0xb4>
 8000fec:	9b02      	ldr	r3, [sp, #8]
 8000fee:	b33b      	cbz	r3, 8001040 <__gnu_unwind_pr_common+0x1fc>
 8000ff0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000ff4:	1d27      	adds	r7, r4, #4
 8000ff6:	f8cd b010 	str.w	fp, [sp, #16]
 8000ffa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000ffe:	46a3      	mov	fp, r4
 8001000:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001004:	461c      	mov	r4, r3
 8001006:	9605      	str	r6, [sp, #20]
 8001008:	e002      	b.n	8001010 <__gnu_unwind_pr_common+0x1cc>
 800100a:	45b2      	cmp	sl, r6
 800100c:	46b0      	mov	r8, r6
 800100e:	d016      	beq.n	800103e <__gnu_unwind_pr_common+0x1fa>
 8001010:	4638      	mov	r0, r7
 8001012:	9406      	str	r4, [sp, #24]
 8001014:	f7ff fd88 	bl	8000b28 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001018:	ab06      	add	r3, sp, #24
 800101a:	4601      	mov	r1, r0
 800101c:	2200      	movs	r2, #0
 800101e:	4628      	mov	r0, r5
 8001020:	f003 f9ec 	bl	80043fc <__cxa_type_match>
 8001024:	f108 0601 	add.w	r6, r8, #1
 8001028:	3704      	adds	r7, #4
 800102a:	2800      	cmp	r0, #0
 800102c:	d0ed      	beq.n	800100a <__gnu_unwind_pr_common+0x1c6>
 800102e:	9b02      	ldr	r3, [sp, #8]
 8001030:	465c      	mov	r4, fp
 8001032:	4543      	cmp	r3, r8
 8001034:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001038:	9e05      	ldr	r6, [sp, #20]
 800103a:	d1d2      	bne.n	8000fe2 <__gnu_unwind_pr_common+0x19e>
 800103c:	e000      	b.n	8001040 <__gnu_unwind_pr_common+0x1fc>
 800103e:	465c      	mov	r4, fp
 8001040:	4648      	mov	r0, r9
 8001042:	210d      	movs	r1, #13
 8001044:	f7ff fe90 	bl	8000d68 <_Unwind_GetGR>
 8001048:	9b06      	ldr	r3, [sp, #24]
 800104a:	6228      	str	r0, [r5, #32]
 800104c:	62ac      	str	r4, [r5, #40]	; 0x28
 800104e:	626b      	str	r3, [r5, #36]	; 0x24
 8001050:	2006      	movs	r0, #6
 8001052:	e75f      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 8001054:	210f      	movs	r1, #15
 8001056:	4648      	mov	r0, r9
 8001058:	f7ff fe86 	bl	8000d68 <_Unwind_GetGR>
 800105c:	210e      	movs	r1, #14
 800105e:	4602      	mov	r2, r0
 8001060:	4648      	mov	r0, r9
 8001062:	f7ff fea7 	bl	8000db4 <_Unwind_SetGR>
 8001066:	4648      	mov	r0, r9
 8001068:	4a29      	ldr	r2, [pc, #164]	; (8001110 <__gnu_unwind_pr_common+0x2cc>)
 800106a:	210f      	movs	r1, #15
 800106c:	f7ff fea2 	bl	8000db4 <_Unwind_SetGR>
 8001070:	2007      	movs	r0, #7
 8001072:	e74f      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 8001074:	4607      	mov	r7, r0
 8001076:	210d      	movs	r1, #13
 8001078:	4648      	mov	r0, r9
 800107a:	f7ff fe75 	bl	8000d68 <_Unwind_GetGR>
 800107e:	2f02      	cmp	r7, #2
 8001080:	6228      	str	r0, [r5, #32]
 8001082:	d11d      	bne.n	80010c0 <__gnu_unwind_pr_common+0x27c>
 8001084:	462b      	mov	r3, r5
 8001086:	9a06      	ldr	r2, [sp, #24]
 8001088:	f843 2f2c 	str.w	r2, [r3, #44]!
 800108c:	626b      	str	r3, [r5, #36]	; 0x24
 800108e:	62ac      	str	r4, [r5, #40]	; 0x28
 8001090:	2006      	movs	r0, #6
 8001092:	e73f      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 8001094:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001096:	429c      	cmp	r4, r3
 8001098:	d1a3      	bne.n	8000fe2 <__gnu_unwind_pr_common+0x19e>
 800109a:	2204      	movs	r2, #4
 800109c:	2700      	movs	r7, #0
 800109e:	9902      	ldr	r1, [sp, #8]
 80010a0:	18a3      	adds	r3, r4, r2
 80010a2:	62a9      	str	r1, [r5, #40]	; 0x28
 80010a4:	62ef      	str	r7, [r5, #44]	; 0x2c
 80010a6:	632a      	str	r2, [r5, #48]	; 0x30
 80010a8:	636b      	str	r3, [r5, #52]	; 0x34
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	42bb      	cmp	r3, r7
 80010ae:	db1d      	blt.n	80010ec <__gnu_unwind_pr_common+0x2a8>
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	e720      	b.n	8000ef8 <__gnu_unwind_pr_common+0xb4>
 80010b6:	4648      	mov	r0, r9
 80010b8:	210d      	movs	r1, #13
 80010ba:	f7ff fe55 	bl	8000d68 <_Unwind_GetGR>
 80010be:	6228      	str	r0, [r5, #32]
 80010c0:	9b06      	ldr	r3, [sp, #24]
 80010c2:	626b      	str	r3, [r5, #36]	; 0x24
 80010c4:	e7e3      	b.n	800108e <__gnu_unwind_pr_common+0x24a>
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff fc62 	bl	8000990 <selfrel_offset31>
 80010cc:	3404      	adds	r4, #4
 80010ce:	4606      	mov	r6, r0
 80010d0:	63ac      	str	r4, [r5, #56]	; 0x38
 80010d2:	4628      	mov	r0, r5
 80010d4:	f003 f9f0 	bl	80044b8 <__cxa_begin_cleanup>
 80010d8:	2800      	cmp	r0, #0
 80010da:	f43f af1a 	beq.w	8000f12 <__gnu_unwind_pr_common+0xce>
 80010de:	4648      	mov	r0, r9
 80010e0:	4632      	mov	r2, r6
 80010e2:	210f      	movs	r1, #15
 80010e4:	f7ff fe66 	bl	8000db4 <_Unwind_SetGR>
 80010e8:	2007      	movs	r0, #7
 80010ea:	e713      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 80010ec:	4608      	mov	r0, r1
 80010ee:	3001      	adds	r0, #1
 80010f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80010f4:	f7ff fc4c 	bl	8000990 <selfrel_offset31>
 80010f8:	210f      	movs	r1, #15
 80010fa:	4602      	mov	r2, r0
 80010fc:	4648      	mov	r0, r9
 80010fe:	f7ff fe59 	bl	8000db4 <_Unwind_SetGR>
 8001102:	4648      	mov	r0, r9
 8001104:	462a      	mov	r2, r5
 8001106:	4639      	mov	r1, r7
 8001108:	f7ff fe54 	bl	8000db4 <_Unwind_SetGR>
 800110c:	2007      	movs	r0, #7
 800110e:	e701      	b.n	8000f14 <__gnu_unwind_pr_common+0xd0>
 8001110:	08004bbd 	.word	0x08004bbd

08001114 <__aeabi_unwind_cpp_pr0>:
 8001114:	2300      	movs	r3, #0
 8001116:	e695      	b.n	8000e44 <__gnu_unwind_pr_common>

08001118 <__aeabi_unwind_cpp_pr1>:
 8001118:	2301      	movs	r3, #1
 800111a:	e693      	b.n	8000e44 <__gnu_unwind_pr_common>

0800111c <__aeabi_unwind_cpp_pr2>:
 800111c:	2302      	movs	r3, #2
 800111e:	e691      	b.n	8000e44 <__gnu_unwind_pr_common>

08001120 <_Unwind_VRS_Pop>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	4604      	mov	r4, r0
 8001124:	b0c5      	sub	sp, #276	; 0x114
 8001126:	2904      	cmp	r1, #4
 8001128:	d80d      	bhi.n	8001146 <_Unwind_VRS_Pop+0x26>
 800112a:	e8df f001 	tbb	[pc, r1]
 800112e:	0355      	.short	0x0355
 8001130:	310c      	.short	0x310c
 8001132:	0f          	.byte	0x0f
 8001133:	00          	.byte	0x00
 8001134:	2b01      	cmp	r3, #1
 8001136:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800113a:	b295      	uxth	r5, r2
 800113c:	d164      	bne.n	8001208 <_Unwind_VRS_Pop+0xe8>
 800113e:	1972      	adds	r2, r6, r5
 8001140:	2a10      	cmp	r2, #16
 8001142:	f240 809d 	bls.w	8001280 <_Unwind_VRS_Pop+0x160>
 8001146:	2002      	movs	r0, #2
 8001148:	b045      	add	sp, #276	; 0x114
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1fa      	bne.n	8001146 <_Unwind_VRS_Pop+0x26>
 8001150:	2a10      	cmp	r2, #16
 8001152:	d8f8      	bhi.n	8001146 <_Unwind_VRS_Pop+0x26>
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	06d8      	lsls	r0, r3, #27
 8001158:	f100 80c8 	bmi.w	80012ec <_Unwind_VRS_Pop+0x1cc>
 800115c:	ae22      	add	r6, sp, #136	; 0x88
 800115e:	4630      	mov	r0, r6
 8001160:	9201      	str	r2, [sp, #4]
 8001162:	2501      	movs	r5, #1
 8001164:	f000 f974 	bl	8001450 <__gnu_Unwind_Save_WMMXC>
 8001168:	2300      	movs	r3, #0
 800116a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800116c:	9a01      	ldr	r2, [sp, #4]
 800116e:	fa05 f103 	lsl.w	r1, r5, r3
 8001172:	4211      	tst	r1, r2
 8001174:	d003      	beq.n	800117e <_Unwind_VRS_Pop+0x5e>
 8001176:	6801      	ldr	r1, [r0, #0]
 8001178:	3004      	adds	r0, #4
 800117a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800117e:	3301      	adds	r3, #1
 8001180:	2b04      	cmp	r3, #4
 8001182:	d1f4      	bne.n	800116e <_Unwind_VRS_Pop+0x4e>
 8001184:	63a0      	str	r0, [r4, #56]	; 0x38
 8001186:	4630      	mov	r0, r6
 8001188:	f000 f958 	bl	800143c <__gnu_Unwind_Restore_WMMXC>
 800118c:	2000      	movs	r0, #0
 800118e:	e7db      	b.n	8001148 <_Unwind_VRS_Pop+0x28>
 8001190:	2b03      	cmp	r3, #3
 8001192:	d1d8      	bne.n	8001146 <_Unwind_VRS_Pop+0x26>
 8001194:	0c15      	lsrs	r5, r2, #16
 8001196:	b297      	uxth	r7, r2
 8001198:	19eb      	adds	r3, r5, r7
 800119a:	2b10      	cmp	r3, #16
 800119c:	d8d3      	bhi.n	8001146 <_Unwind_VRS_Pop+0x26>
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	071e      	lsls	r6, r3, #28
 80011a2:	f100 80b7 	bmi.w	8001314 <_Unwind_VRS_Pop+0x1f4>
 80011a6:	ae22      	add	r6, sp, #136	; 0x88
 80011a8:	4630      	mov	r0, r6
 80011aa:	f000 f925 	bl	80013f8 <__gnu_Unwind_Save_WMMXD>
 80011ae:	00ed      	lsls	r5, r5, #3
 80011b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011b2:	b15f      	cbz	r7, 80011cc <_Unwind_VRS_Pop+0xac>
 80011b4:	3d04      	subs	r5, #4
 80011b6:	4603      	mov	r3, r0
 80011b8:	1971      	adds	r1, r6, r5
 80011ba:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80011be:	f853 2b04 	ldr.w	r2, [r3], #4
 80011c2:	4283      	cmp	r3, r0
 80011c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80011c8:	d1f9      	bne.n	80011be <_Unwind_VRS_Pop+0x9e>
 80011ca:	4618      	mov	r0, r3
 80011cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80011ce:	4630      	mov	r0, r6
 80011d0:	f000 f8f0 	bl	80013b4 <__gnu_Unwind_Restore_WMMXD>
 80011d4:	2000      	movs	r0, #0
 80011d6:	e7b7      	b.n	8001148 <_Unwind_VRS_Pop+0x28>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1b4      	bne.n	8001146 <_Unwind_VRS_Pop+0x26>
 80011dc:	2701      	movs	r7, #1
 80011de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80011e0:	b296      	uxth	r6, r2
 80011e2:	1d20      	adds	r0, r4, #4
 80011e4:	fa07 f103 	lsl.w	r1, r7, r3
 80011e8:	4231      	tst	r1, r6
 80011ea:	f103 0301 	add.w	r3, r3, #1
 80011ee:	d002      	beq.n	80011f6 <_Unwind_VRS_Pop+0xd6>
 80011f0:	6829      	ldr	r1, [r5, #0]
 80011f2:	3504      	adds	r5, #4
 80011f4:	6001      	str	r1, [r0, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	f100 0004 	add.w	r0, r0, #4
 80011fc:	d1f2      	bne.n	80011e4 <_Unwind_VRS_Pop+0xc4>
 80011fe:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001202:	d13b      	bne.n	800127c <_Unwind_VRS_Pop+0x15c>
 8001204:	63a5      	str	r5, [r4, #56]	; 0x38
 8001206:	e79f      	b.n	8001148 <_Unwind_VRS_Pop+0x28>
 8001208:	2b05      	cmp	r3, #5
 800120a:	d19c      	bne.n	8001146 <_Unwind_VRS_Pop+0x26>
 800120c:	1977      	adds	r7, r6, r5
 800120e:	2f20      	cmp	r7, #32
 8001210:	d899      	bhi.n	8001146 <_Unwind_VRS_Pop+0x26>
 8001212:	2e0f      	cmp	r6, #15
 8001214:	d966      	bls.n	80012e4 <_Unwind_VRS_Pop+0x1c4>
 8001216:	462f      	mov	r7, r5
 8001218:	2d00      	cmp	r5, #0
 800121a:	d13a      	bne.n	8001292 <_Unwind_VRS_Pop+0x172>
 800121c:	462a      	mov	r2, r5
 800121e:	2700      	movs	r7, #0
 8001220:	2a00      	cmp	r2, #0
 8001222:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001224:	dd72      	ble.n	800130c <_Unwind_VRS_Pop+0x1ec>
 8001226:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800122a:	4601      	mov	r1, r0
 800122c:	a844      	add	r0, sp, #272	; 0x110
 800122e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001232:	388c      	subs	r0, #140	; 0x8c
 8001234:	f851 5b04 	ldr.w	r5, [r1], #4
 8001238:	4291      	cmp	r1, r2
 800123a:	f840 5f04 	str.w	r5, [r0, #4]!
 800123e:	d1f9      	bne.n	8001234 <_Unwind_VRS_Pop+0x114>
 8001240:	4608      	mov	r0, r1
 8001242:	b197      	cbz	r7, 800126a <_Unwind_VRS_Pop+0x14a>
 8001244:	2e10      	cmp	r6, #16
 8001246:	4632      	mov	r2, r6
 8001248:	bf38      	it	cc
 800124a:	2210      	movcc	r2, #16
 800124c:	a944      	add	r1, sp, #272	; 0x110
 800124e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001252:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001256:	0079      	lsls	r1, r7, #1
 8001258:	3a04      	subs	r2, #4
 800125a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800125e:	f850 5b04 	ldr.w	r5, [r0], #4
 8001262:	4288      	cmp	r0, r1
 8001264:	f842 5f04 	str.w	r5, [r2, #4]!
 8001268:	d1f9      	bne.n	800125e <_Unwind_VRS_Pop+0x13e>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d048      	beq.n	8001300 <_Unwind_VRS_Pop+0x1e0>
 800126e:	2e0f      	cmp	r6, #15
 8001270:	63a1      	str	r1, [r4, #56]	; 0x38
 8001272:	d933      	bls.n	80012dc <_Unwind_VRS_Pop+0x1bc>
 8001274:	b117      	cbz	r7, 800127c <_Unwind_VRS_Pop+0x15c>
 8001276:	a802      	add	r0, sp, #8
 8001278:	f000 f894 	bl	80013a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800127c:	2000      	movs	r0, #0
 800127e:	e763      	b.n	8001148 <_Unwind_VRS_Pop+0x28>
 8001280:	2e0f      	cmp	r6, #15
 8001282:	f63f af60 	bhi.w	8001146 <_Unwind_VRS_Pop+0x26>
 8001286:	2700      	movs	r7, #0
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	07d1      	lsls	r1, r2, #31
 800128c:	d417      	bmi.n	80012be <_Unwind_VRS_Pop+0x19e>
 800128e:	2f00      	cmp	r7, #0
 8001290:	d060      	beq.n	8001354 <_Unwind_VRS_Pop+0x234>
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	0751      	lsls	r1, r2, #29
 8001296:	d445      	bmi.n	8001324 <_Unwind_VRS_Pop+0x204>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d04d      	beq.n	8001338 <_Unwind_VRS_Pop+0x218>
 800129c:	2e0f      	cmp	r6, #15
 800129e:	d806      	bhi.n	80012ae <_Unwind_VRS_Pop+0x18e>
 80012a0:	a822      	add	r0, sp, #136	; 0x88
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f000 f87a 	bl	800139c <__gnu_Unwind_Save_VFP_D>
 80012a8:	9b01      	ldr	r3, [sp, #4]
 80012aa:	2f00      	cmp	r7, #0
 80012ac:	d0b6      	beq.n	800121c <_Unwind_VRS_Pop+0xfc>
 80012ae:	a802      	add	r0, sp, #8
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	f000 f87b 	bl	80013ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	f1c6 0210 	rsb	r2, r6, #16
 80012bc:	e7b0      	b.n	8001220 <_Unwind_VRS_Pop+0x100>
 80012be:	f022 0101 	bic.w	r1, r2, #1
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	6021      	str	r1, [r4, #0]
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	4620      	mov	r0, r4
 80012ca:	d03b      	beq.n	8001344 <_Unwind_VRS_Pop+0x224>
 80012cc:	f022 0203 	bic.w	r2, r2, #3
 80012d0:	f840 2b48 	str.w	r2, [r0], #72
 80012d4:	f000 f85a 	bl	800138c <__gnu_Unwind_Save_VFP>
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	e7d8      	b.n	800128e <_Unwind_VRS_Pop+0x16e>
 80012dc:	a822      	add	r0, sp, #136	; 0x88
 80012de:	f000 f859 	bl	8001394 <__gnu_Unwind_Restore_VFP_D>
 80012e2:	e7c7      	b.n	8001274 <_Unwind_VRS_Pop+0x154>
 80012e4:	2f10      	cmp	r7, #16
 80012e6:	d9ce      	bls.n	8001286 <_Unwind_VRS_Pop+0x166>
 80012e8:	3f10      	subs	r7, #16
 80012ea:	e7cd      	b.n	8001288 <_Unwind_VRS_Pop+0x168>
 80012ec:	f023 0310 	bic.w	r3, r3, #16
 80012f0:	6023      	str	r3, [r4, #0]
 80012f2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	f000 f8aa 	bl	8001450 <__gnu_Unwind_Save_WMMXC>
 80012fc:	9a01      	ldr	r2, [sp, #4]
 80012fe:	e72d      	b.n	800115c <_Unwind_VRS_Pop+0x3c>
 8001300:	3104      	adds	r1, #4
 8001302:	63a1      	str	r1, [r4, #56]	; 0x38
 8001304:	a822      	add	r0, sp, #136	; 0x88
 8001306:	f000 f83d 	bl	8001384 <__gnu_Unwind_Restore_VFP>
 800130a:	e7b7      	b.n	800127c <_Unwind_VRS_Pop+0x15c>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d199      	bne.n	8001244 <_Unwind_VRS_Pop+0x124>
 8001310:	4601      	mov	r1, r0
 8001312:	e7aa      	b.n	800126a <_Unwind_VRS_Pop+0x14a>
 8001314:	f023 0308 	bic.w	r3, r3, #8
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800131e:	f000 f86b 	bl	80013f8 <__gnu_Unwind_Save_WMMXD>
 8001322:	e740      	b.n	80011a6 <_Unwind_VRS_Pop+0x86>
 8001324:	4620      	mov	r0, r4
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	f840 2bd0 	str.w	r2, [r0], #208
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	f000 f83c 	bl	80013ac <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	e7af      	b.n	8001298 <_Unwind_VRS_Pop+0x178>
 8001338:	a822      	add	r0, sp, #136	; 0x88
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f000 f826 	bl	800138c <__gnu_Unwind_Save_VFP>
 8001340:	9b01      	ldr	r3, [sp, #4]
 8001342:	e7b9      	b.n	80012b8 <_Unwind_VRS_Pop+0x198>
 8001344:	f041 0102 	orr.w	r1, r1, #2
 8001348:	f840 1b48 	str.w	r1, [r0], #72
 800134c:	f000 f826 	bl	800139c <__gnu_Unwind_Save_VFP_D>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	e79c      	b.n	800128e <_Unwind_VRS_Pop+0x16e>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d003      	beq.n	8001360 <_Unwind_VRS_Pop+0x240>
 8001358:	2e0f      	cmp	r6, #15
 800135a:	f63f af5f 	bhi.w	800121c <_Unwind_VRS_Pop+0xfc>
 800135e:	e79f      	b.n	80012a0 <_Unwind_VRS_Pop+0x180>
 8001360:	a822      	add	r0, sp, #136	; 0x88
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f000 f812 	bl	800138c <__gnu_Unwind_Save_VFP>
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	e757      	b.n	800121c <_Unwind_VRS_Pop+0xfc>

0800136c <__restore_core_regs>:
 800136c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001370:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001374:	469c      	mov	ip, r3
 8001376:	46a6      	mov	lr, r4
 8001378:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800137c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001380:	46e5      	mov	sp, ip
 8001382:	bd00      	pop	{pc}

08001384 <__gnu_Unwind_Restore_VFP>:
 8001384:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <__gnu_Unwind_Save_VFP>:
 800138c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <__gnu_Unwind_Restore_VFP_D>:
 8001394:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <__gnu_Unwind_Save_VFP_D>:
 800139c:	ec80 0b20 	vstmia	r0, {d0-d15}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80013a4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80013ac:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <__gnu_Unwind_Restore_WMMXD>:
 80013b4:	ecf0 0102 	ldfe	f0, [r0], #8
 80013b8:	ecf0 1102 	ldfe	f1, [r0], #8
 80013bc:	ecf0 2102 	ldfe	f2, [r0], #8
 80013c0:	ecf0 3102 	ldfe	f3, [r0], #8
 80013c4:	ecf0 4102 	ldfe	f4, [r0], #8
 80013c8:	ecf0 5102 	ldfe	f5, [r0], #8
 80013cc:	ecf0 6102 	ldfe	f6, [r0], #8
 80013d0:	ecf0 7102 	ldfe	f7, [r0], #8
 80013d4:	ecf0 8102 	ldfp	f0, [r0], #8
 80013d8:	ecf0 9102 	ldfp	f1, [r0], #8
 80013dc:	ecf0 a102 	ldfp	f2, [r0], #8
 80013e0:	ecf0 b102 	ldfp	f3, [r0], #8
 80013e4:	ecf0 c102 	ldfp	f4, [r0], #8
 80013e8:	ecf0 d102 	ldfp	f5, [r0], #8
 80013ec:	ecf0 e102 	ldfp	f6, [r0], #8
 80013f0:	ecf0 f102 	ldfp	f7, [r0], #8
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <__gnu_Unwind_Save_WMMXD>:
 80013f8:	ece0 0102 	stfe	f0, [r0], #8
 80013fc:	ece0 1102 	stfe	f1, [r0], #8
 8001400:	ece0 2102 	stfe	f2, [r0], #8
 8001404:	ece0 3102 	stfe	f3, [r0], #8
 8001408:	ece0 4102 	stfe	f4, [r0], #8
 800140c:	ece0 5102 	stfe	f5, [r0], #8
 8001410:	ece0 6102 	stfe	f6, [r0], #8
 8001414:	ece0 7102 	stfe	f7, [r0], #8
 8001418:	ece0 8102 	stfp	f0, [r0], #8
 800141c:	ece0 9102 	stfp	f1, [r0], #8
 8001420:	ece0 a102 	stfp	f2, [r0], #8
 8001424:	ece0 b102 	stfp	f3, [r0], #8
 8001428:	ece0 c102 	stfp	f4, [r0], #8
 800142c:	ece0 d102 	stfp	f5, [r0], #8
 8001430:	ece0 e102 	stfp	f6, [r0], #8
 8001434:	ece0 f102 	stfp	f7, [r0], #8
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <__gnu_Unwind_Restore_WMMXC>:
 800143c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001440:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001444:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001448:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <__gnu_Unwind_Save_WMMXC>:
 8001450:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001454:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001458:	fca0 a101 	stc2	1, cr10, [r0], #4
 800145c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <_Unwind_RaiseException>:
 8001464:	46ec      	mov	ip, sp
 8001466:	b500      	push	{lr}
 8001468:	e92d 5000 	stmdb	sp!, {ip, lr}
 800146c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001478:	a901      	add	r1, sp, #4
 800147a:	f7ff fbed 	bl	8000c58 <__gnu_Unwind_RaiseException>
 800147e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001482:	b012      	add	sp, #72	; 0x48
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <_Unwind_Resume>:
 8001488:	46ec      	mov	ip, sp
 800148a:	b500      	push	{lr}
 800148c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001490:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e92d 000c 	stmdb	sp!, {r2, r3}
 800149c:	a901      	add	r1, sp, #4
 800149e:	f7ff fc15 	bl	8000ccc <__gnu_Unwind_Resume>
 80014a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014a6:	b012      	add	sp, #72	; 0x48
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <_Unwind_Resume_or_Rethrow>:
 80014ac:	46ec      	mov	ip, sp
 80014ae:	b500      	push	{lr}
 80014b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014c0:	a901      	add	r1, sp, #4
 80014c2:	f7ff fc25 	bl	8000d10 <__gnu_Unwind_Resume_or_Rethrow>
 80014c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014ca:	b012      	add	sp, #72	; 0x48
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <_Unwind_ForcedUnwind>:
 80014d0:	46ec      	mov	ip, sp
 80014d2:	b500      	push	{lr}
 80014d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014e4:	ab01      	add	r3, sp, #4
 80014e6:	f7ff fbe7 	bl	8000cb8 <__gnu_Unwind_ForcedUnwind>
 80014ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014ee:	b012      	add	sp, #72	; 0x48
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <_Unwind_Backtrace>:
 80014f4:	46ec      	mov	ip, sp
 80014f6:	b500      	push	{lr}
 80014f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001508:	aa01      	add	r2, sp, #4
 800150a:	f7ff fc61 	bl	8000dd0 <__gnu_Unwind_Backtrace>
 800150e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001512:	b012      	add	sp, #72	; 0x48
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <next_unwind_byte>:
 8001518:	7a02      	ldrb	r2, [r0, #8]
 800151a:	b91a      	cbnz	r2, 8001524 <next_unwind_byte+0xc>
 800151c:	7a43      	ldrb	r3, [r0, #9]
 800151e:	b943      	cbnz	r3, 8001532 <next_unwind_byte+0x1a>
 8001520:	20b0      	movs	r0, #176	; 0xb0
 8001522:	4770      	bx	lr
 8001524:	6803      	ldr	r3, [r0, #0]
 8001526:	3a01      	subs	r2, #1
 8001528:	7202      	strb	r2, [r0, #8]
 800152a:	021a      	lsls	r2, r3, #8
 800152c:	6002      	str	r2, [r0, #0]
 800152e:	0e18      	lsrs	r0, r3, #24
 8001530:	4770      	bx	lr
 8001532:	2103      	movs	r1, #3
 8001534:	6842      	ldr	r2, [r0, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	b410      	push	{r4}
 800153a:	7243      	strb	r3, [r0, #9]
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	1d14      	adds	r4, r2, #4
 8001540:	7201      	strb	r1, [r0, #8]
 8001542:	021a      	lsls	r2, r3, #8
 8001544:	6044      	str	r4, [r0, #4]
 8001546:	6002      	str	r2, [r0, #0]
 8001548:	bc10      	pop	{r4}
 800154a:	0e18      	lsrs	r0, r3, #24
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <_Unwind_GetGR.constprop.0>:
 8001550:	2300      	movs	r3, #0
 8001552:	b500      	push	{lr}
 8001554:	b085      	sub	sp, #20
 8001556:	aa03      	add	r2, sp, #12
 8001558:	9200      	str	r2, [sp, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	220c      	movs	r2, #12
 800155e:	f7ff fbe9 	bl	8000d34 <_Unwind_VRS_Get>
 8001562:	9803      	ldr	r0, [sp, #12]
 8001564:	b005      	add	sp, #20
 8001566:	f85d fb04 	ldr.w	pc, [sp], #4
 800156a:	bf00      	nop

0800156c <unwind_UCB_from_context>:
 800156c:	e7f0      	b.n	8001550 <_Unwind_GetGR.constprop.0>
 800156e:	bf00      	nop

08001570 <__gnu_unwind_execute>:
 8001570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001574:	4606      	mov	r6, r0
 8001576:	460f      	mov	r7, r1
 8001578:	f04f 0800 	mov.w	r8, #0
 800157c:	b085      	sub	sp, #20
 800157e:	4638      	mov	r0, r7
 8001580:	f7ff ffca 	bl	8001518 <next_unwind_byte>
 8001584:	28b0      	cmp	r0, #176	; 0xb0
 8001586:	4604      	mov	r4, r0
 8001588:	d023      	beq.n	80015d2 <__gnu_unwind_execute+0x62>
 800158a:	0605      	lsls	r5, r0, #24
 800158c:	d427      	bmi.n	80015de <__gnu_unwind_execute+0x6e>
 800158e:	2300      	movs	r3, #0
 8001590:	f10d 090c 	add.w	r9, sp, #12
 8001594:	4619      	mov	r1, r3
 8001596:	0085      	lsls	r5, r0, #2
 8001598:	220d      	movs	r2, #13
 800159a:	f8cd 9000 	str.w	r9, [sp]
 800159e:	4630      	mov	r0, r6
 80015a0:	f7ff fbc8 	bl	8000d34 <_Unwind_VRS_Get>
 80015a4:	b2ed      	uxtb	r5, r5
 80015a6:	9b03      	ldr	r3, [sp, #12]
 80015a8:	0660      	lsls	r0, r4, #25
 80015aa:	f105 0504 	add.w	r5, r5, #4
 80015ae:	bf4c      	ite	mi
 80015b0:	1b5d      	submi	r5, r3, r5
 80015b2:	18ed      	addpl	r5, r5, r3
 80015b4:	2300      	movs	r3, #0
 80015b6:	220d      	movs	r2, #13
 80015b8:	4619      	mov	r1, r3
 80015ba:	f8cd 9000 	str.w	r9, [sp]
 80015be:	4630      	mov	r0, r6
 80015c0:	9503      	str	r5, [sp, #12]
 80015c2:	f7ff fbdd 	bl	8000d80 <_Unwind_VRS_Set>
 80015c6:	4638      	mov	r0, r7
 80015c8:	f7ff ffa6 	bl	8001518 <next_unwind_byte>
 80015cc:	28b0      	cmp	r0, #176	; 0xb0
 80015ce:	4604      	mov	r4, r0
 80015d0:	d1db      	bne.n	800158a <__gnu_unwind_execute+0x1a>
 80015d2:	f1b8 0f00 	cmp.w	r8, #0
 80015d6:	f000 8094 	beq.w	8001702 <__gnu_unwind_execute+0x192>
 80015da:	2000      	movs	r0, #0
 80015dc:	e01c      	b.n	8001618 <__gnu_unwind_execute+0xa8>
 80015de:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80015e2:	2b80      	cmp	r3, #128	; 0x80
 80015e4:	d05c      	beq.n	80016a0 <__gnu_unwind_execute+0x130>
 80015e6:	2b90      	cmp	r3, #144	; 0x90
 80015e8:	d019      	beq.n	800161e <__gnu_unwind_execute+0xae>
 80015ea:	2ba0      	cmp	r3, #160	; 0xa0
 80015ec:	d02c      	beq.n	8001648 <__gnu_unwind_execute+0xd8>
 80015ee:	2bb0      	cmp	r3, #176	; 0xb0
 80015f0:	d03e      	beq.n	8001670 <__gnu_unwind_execute+0x100>
 80015f2:	2bc0      	cmp	r3, #192	; 0xc0
 80015f4:	d06b      	beq.n	80016ce <__gnu_unwind_execute+0x15e>
 80015f6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80015fa:	2bd0      	cmp	r3, #208	; 0xd0
 80015fc:	d10b      	bne.n	8001616 <__gnu_unwind_execute+0xa6>
 80015fe:	f000 0207 	and.w	r2, r0, #7
 8001602:	3201      	adds	r2, #1
 8001604:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001608:	2305      	movs	r3, #5
 800160a:	2101      	movs	r1, #1
 800160c:	4630      	mov	r0, r6
 800160e:	f7ff fd87 	bl	8001120 <_Unwind_VRS_Pop>
 8001612:	2800      	cmp	r0, #0
 8001614:	d0b3      	beq.n	800157e <__gnu_unwind_execute+0xe>
 8001616:	2009      	movs	r0, #9
 8001618:	b005      	add	sp, #20
 800161a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800161e:	f000 030d 	and.w	r3, r0, #13
 8001622:	2b0d      	cmp	r3, #13
 8001624:	d0f7      	beq.n	8001616 <__gnu_unwind_execute+0xa6>
 8001626:	2300      	movs	r3, #0
 8001628:	ad03      	add	r5, sp, #12
 800162a:	f000 020f 	and.w	r2, r0, #15
 800162e:	4619      	mov	r1, r3
 8001630:	9500      	str	r5, [sp, #0]
 8001632:	4630      	mov	r0, r6
 8001634:	f7ff fb7e 	bl	8000d34 <_Unwind_VRS_Get>
 8001638:	2300      	movs	r3, #0
 800163a:	9500      	str	r5, [sp, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	220d      	movs	r2, #13
 8001640:	4630      	mov	r0, r6
 8001642:	f7ff fb9d 	bl	8000d80 <_Unwind_VRS_Set>
 8001646:	e79a      	b.n	800157e <__gnu_unwind_execute+0xe>
 8001648:	43c3      	mvns	r3, r0
 800164a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	411a      	asrs	r2, r3
 8001654:	2300      	movs	r3, #0
 8001656:	0701      	lsls	r1, r0, #28
 8001658:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800165c:	bf48      	it	mi
 800165e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001662:	4619      	mov	r1, r3
 8001664:	4630      	mov	r0, r6
 8001666:	f7ff fd5b 	bl	8001120 <_Unwind_VRS_Pop>
 800166a:	2800      	cmp	r0, #0
 800166c:	d1d3      	bne.n	8001616 <__gnu_unwind_execute+0xa6>
 800166e:	e786      	b.n	800157e <__gnu_unwind_execute+0xe>
 8001670:	28b1      	cmp	r0, #177	; 0xb1
 8001672:	d057      	beq.n	8001724 <__gnu_unwind_execute+0x1b4>
 8001674:	28b2      	cmp	r0, #178	; 0xb2
 8001676:	d068      	beq.n	800174a <__gnu_unwind_execute+0x1da>
 8001678:	28b3      	cmp	r0, #179	; 0xb3
 800167a:	f000 8095 	beq.w	80017a8 <__gnu_unwind_execute+0x238>
 800167e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001682:	2bb4      	cmp	r3, #180	; 0xb4
 8001684:	d0c7      	beq.n	8001616 <__gnu_unwind_execute+0xa6>
 8001686:	2301      	movs	r3, #1
 8001688:	f000 0207 	and.w	r2, r0, #7
 800168c:	441a      	add	r2, r3
 800168e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001692:	4619      	mov	r1, r3
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff fd43 	bl	8001120 <_Unwind_VRS_Pop>
 800169a:	2800      	cmp	r0, #0
 800169c:	d1bb      	bne.n	8001616 <__gnu_unwind_execute+0xa6>
 800169e:	e76e      	b.n	800157e <__gnu_unwind_execute+0xe>
 80016a0:	4638      	mov	r0, r7
 80016a2:	f7ff ff39 	bl	8001518 <next_unwind_byte>
 80016a6:	0224      	lsls	r4, r4, #8
 80016a8:	4304      	orrs	r4, r0
 80016aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80016ae:	d0b2      	beq.n	8001616 <__gnu_unwind_execute+0xa6>
 80016b0:	2300      	movs	r3, #0
 80016b2:	0124      	lsls	r4, r4, #4
 80016b4:	b2a2      	uxth	r2, r4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff fd31 	bl	8001120 <_Unwind_VRS_Pop>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d1a9      	bne.n	8001616 <__gnu_unwind_execute+0xa6>
 80016c2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80016c6:	bf18      	it	ne
 80016c8:	f04f 0801 	movne.w	r8, #1
 80016cc:	e757      	b.n	800157e <__gnu_unwind_execute+0xe>
 80016ce:	28c6      	cmp	r0, #198	; 0xc6
 80016d0:	d07d      	beq.n	80017ce <__gnu_unwind_execute+0x25e>
 80016d2:	28c7      	cmp	r0, #199	; 0xc7
 80016d4:	f000 8086 	beq.w	80017e4 <__gnu_unwind_execute+0x274>
 80016d8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80016dc:	2bc0      	cmp	r3, #192	; 0xc0
 80016de:	f000 8094 	beq.w	800180a <__gnu_unwind_execute+0x29a>
 80016e2:	28c8      	cmp	r0, #200	; 0xc8
 80016e4:	f000 809f 	beq.w	8001826 <__gnu_unwind_execute+0x2b6>
 80016e8:	28c9      	cmp	r0, #201	; 0xc9
 80016ea:	d194      	bne.n	8001616 <__gnu_unwind_execute+0xa6>
 80016ec:	4638      	mov	r0, r7
 80016ee:	f7ff ff13 	bl	8001518 <next_unwind_byte>
 80016f2:	0302      	lsls	r2, r0, #12
 80016f4:	f000 000f 	and.w	r0, r0, #15
 80016f8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80016fc:	3001      	adds	r0, #1
 80016fe:	4302      	orrs	r2, r0
 8001700:	e782      	b.n	8001608 <__gnu_unwind_execute+0x98>
 8001702:	ac03      	add	r4, sp, #12
 8001704:	4643      	mov	r3, r8
 8001706:	220e      	movs	r2, #14
 8001708:	4641      	mov	r1, r8
 800170a:	9400      	str	r4, [sp, #0]
 800170c:	4630      	mov	r0, r6
 800170e:	f7ff fb11 	bl	8000d34 <_Unwind_VRS_Get>
 8001712:	9400      	str	r4, [sp, #0]
 8001714:	4630      	mov	r0, r6
 8001716:	4643      	mov	r3, r8
 8001718:	220f      	movs	r2, #15
 800171a:	4641      	mov	r1, r8
 800171c:	f7ff fb30 	bl	8000d80 <_Unwind_VRS_Set>
 8001720:	4640      	mov	r0, r8
 8001722:	e779      	b.n	8001618 <__gnu_unwind_execute+0xa8>
 8001724:	4638      	mov	r0, r7
 8001726:	f7ff fef7 	bl	8001518 <next_unwind_byte>
 800172a:	2800      	cmp	r0, #0
 800172c:	f43f af73 	beq.w	8001616 <__gnu_unwind_execute+0xa6>
 8001730:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001734:	f47f af6f 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 8001738:	4602      	mov	r2, r0
 800173a:	4619      	mov	r1, r3
 800173c:	4630      	mov	r0, r6
 800173e:	f7ff fcef 	bl	8001120 <_Unwind_VRS_Pop>
 8001742:	2800      	cmp	r0, #0
 8001744:	f47f af67 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 8001748:	e719      	b.n	800157e <__gnu_unwind_execute+0xe>
 800174a:	2300      	movs	r3, #0
 800174c:	f10d 090c 	add.w	r9, sp, #12
 8001750:	220d      	movs	r2, #13
 8001752:	4619      	mov	r1, r3
 8001754:	f8cd 9000 	str.w	r9, [sp]
 8001758:	4630      	mov	r0, r6
 800175a:	f7ff faeb 	bl	8000d34 <_Unwind_VRS_Get>
 800175e:	4638      	mov	r0, r7
 8001760:	f7ff feda 	bl	8001518 <next_unwind_byte>
 8001764:	0602      	lsls	r2, r0, #24
 8001766:	f04f 0402 	mov.w	r4, #2
 800176a:	d50c      	bpl.n	8001786 <__gnu_unwind_execute+0x216>
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001772:	40a0      	lsls	r0, r4
 8001774:	4403      	add	r3, r0
 8001776:	4638      	mov	r0, r7
 8001778:	9303      	str	r3, [sp, #12]
 800177a:	f7ff fecd 	bl	8001518 <next_unwind_byte>
 800177e:	0603      	lsls	r3, r0, #24
 8001780:	f104 0407 	add.w	r4, r4, #7
 8001784:	d4f2      	bmi.n	800176c <__gnu_unwind_execute+0x1fc>
 8001786:	2300      	movs	r3, #0
 8001788:	9903      	ldr	r1, [sp, #12]
 800178a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800178e:	40a2      	lsls	r2, r4
 8001790:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001794:	188c      	adds	r4, r1, r2
 8001796:	f8cd 9000 	str.w	r9, [sp]
 800179a:	4619      	mov	r1, r3
 800179c:	220d      	movs	r2, #13
 800179e:	4630      	mov	r0, r6
 80017a0:	9403      	str	r4, [sp, #12]
 80017a2:	f7ff faed 	bl	8000d80 <_Unwind_VRS_Set>
 80017a6:	e6ea      	b.n	800157e <__gnu_unwind_execute+0xe>
 80017a8:	4638      	mov	r0, r7
 80017aa:	f7ff feb5 	bl	8001518 <next_unwind_byte>
 80017ae:	2301      	movs	r3, #1
 80017b0:	0301      	lsls	r1, r0, #12
 80017b2:	f000 000f 	and.w	r0, r0, #15
 80017b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80017ba:	18c2      	adds	r2, r0, r3
 80017bc:	430a      	orrs	r2, r1
 80017be:	4630      	mov	r0, r6
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fcad 	bl	8001120 <_Unwind_VRS_Pop>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	f47f af25 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 80017cc:	e6d7      	b.n	800157e <__gnu_unwind_execute+0xe>
 80017ce:	4638      	mov	r0, r7
 80017d0:	f7ff fea2 	bl	8001518 <next_unwind_byte>
 80017d4:	0301      	lsls	r1, r0, #12
 80017d6:	f000 000f 	and.w	r0, r0, #15
 80017da:	2303      	movs	r3, #3
 80017dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80017e0:	1c42      	adds	r2, r0, #1
 80017e2:	e7eb      	b.n	80017bc <__gnu_unwind_execute+0x24c>
 80017e4:	4638      	mov	r0, r7
 80017e6:	f7ff fe97 	bl	8001518 <next_unwind_byte>
 80017ea:	2800      	cmp	r0, #0
 80017ec:	f43f af13 	beq.w	8001616 <__gnu_unwind_execute+0xa6>
 80017f0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80017f4:	f47f af0f 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 80017f8:	4602      	mov	r2, r0
 80017fa:	2104      	movs	r1, #4
 80017fc:	4630      	mov	r0, r6
 80017fe:	f7ff fc8f 	bl	8001120 <_Unwind_VRS_Pop>
 8001802:	2800      	cmp	r0, #0
 8001804:	f47f af07 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 8001808:	e6b9      	b.n	800157e <__gnu_unwind_execute+0xe>
 800180a:	2303      	movs	r3, #3
 800180c:	f000 020f 	and.w	r2, r0, #15
 8001810:	3201      	adds	r2, #1
 8001812:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001816:	4619      	mov	r1, r3
 8001818:	4630      	mov	r0, r6
 800181a:	f7ff fc81 	bl	8001120 <_Unwind_VRS_Pop>
 800181e:	2800      	cmp	r0, #0
 8001820:	f47f aef9 	bne.w	8001616 <__gnu_unwind_execute+0xa6>
 8001824:	e6ab      	b.n	800157e <__gnu_unwind_execute+0xe>
 8001826:	4638      	mov	r0, r7
 8001828:	f7ff fe76 	bl	8001518 <next_unwind_byte>
 800182c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001830:	f000 030f 	and.w	r3, r0, #15
 8001834:	3210      	adds	r2, #16
 8001836:	3301      	adds	r3, #1
 8001838:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800183c:	e6e4      	b.n	8001608 <__gnu_unwind_execute+0x98>
 800183e:	bf00      	nop

08001840 <__gnu_unwind_frame>:
 8001840:	b530      	push	{r4, r5, lr}
 8001842:	2403      	movs	r4, #3
 8001844:	460d      	mov	r5, r1
 8001846:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001848:	b085      	sub	sp, #20
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001850:	79dc      	ldrb	r4, [r3, #7]
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	3308      	adds	r3, #8
 8001856:	a901      	add	r1, sp, #4
 8001858:	4628      	mov	r0, r5
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	f7ff fe85 	bl	8001570 <__gnu_unwind_execute>
 8001866:	b005      	add	sp, #20
 8001868:	bd30      	pop	{r4, r5, pc}
 800186a:	bf00      	nop

0800186c <_Unwind_GetRegionStart>:
 800186c:	b508      	push	{r3, lr}
 800186e:	f7ff fe7d 	bl	800156c <unwind_UCB_from_context>
 8001872:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001874:	bd08      	pop	{r3, pc}
 8001876:	bf00      	nop

08001878 <_Unwind_GetLanguageSpecificData>:
 8001878:	b508      	push	{r3, lr}
 800187a:	f7ff fe77 	bl	800156c <unwind_UCB_from_context>
 800187e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001880:	79c3      	ldrb	r3, [r0, #7]
 8001882:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001886:	3008      	adds	r0, #8
 8001888:	bd08      	pop	{r3, pc}
 800188a:	bf00      	nop

0800188c <_Unwind_GetTextRelBase>:
 800188c:	b508      	push	{r3, lr}
 800188e:	f003 fa19 	bl	8004cc4 <abort>
 8001892:	bf00      	nop

08001894 <_Unwind_GetDataRelBase>:
 8001894:	b508      	push	{r3, lr}
 8001896:	f7ff fff9 	bl	800188c <_Unwind_GetTextRelBase>
 800189a:	bf00      	nop

0800189c <_ZN9ADC_Tools12getValueAvrgEv>:

class ADC_Tools
{
public:
	float getValue()const				   { return value; };
	virtual float getValueAvrg()      { return value; };
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_ZN9ADC_Tools17getPercentageAvrgEv>:
	float getPercentage()const			   { return per; };
	virtual float getPercentageAvrg() { return per; };
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <_ZN9ADC_ToolsC1Effm>:
#include "ADC_Tools.h"



ADC_Tools::ADC_Tools(float max, float min, uint32_t res ):maxVal(max), minVal(min), bitResolution(res),
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
					   per(0), value(0){
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_ZN9ADC_ToolsC1Effm+0x58>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	809a      	strh	r2, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
	maxLevels = 2 << (bitResolution - 1);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	3b01      	subs	r3, #1
 8001906:	2202      	movs	r2, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	080056e8 	.word	0x080056e8

08001924 <_ZN9ADC_Tools17updateMeasurmentsEm>:
	bitResolution = res;
	maxLevels = 2 << (bitResolution - 1);
}
*/

void ADC_Tools::updateMeasurments(uint32_t val){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	value = convertToValue(val);
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f810 	bl	8001956 <_ZN9ADC_Tools14convertToValueEm>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	615a      	str	r2, [r3, #20]
	per = convertToPercentage(value);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f828 	bl	8001998 <_ZN9ADC_Tools19convertToPercentageEf>
 8001948:	4602      	mov	r2, r0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_ZN9ADC_Tools14convertToValueEm>:

float ADC_Tools::convertToValue(uint32_t raw) {
 8001956:	b590      	push	{r4, r7, lr}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
	return ((float)raw * maxVal) / (float)maxLevels;
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f7fe fe6d 	bl	8000640 <__aeabi_ui2f>
 8001966:	4602      	mov	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f7fe febe 	bl	80006f0 <__aeabi_fmul>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fe5f 	bl	8000640 <__aeabi_ui2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4620      	mov	r0, r4
 8001988:	f7fe ff66 	bl	8000858 <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
	...

08001998 <_ZN9ADC_Tools19convertToPercentageEf>:

float ADC_Tools::convertToPercentage(float val) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	return 100.f * ((float)val / maxVal);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4619      	mov	r1, r3
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f7fe ff55 	bl	8000858 <__aeabi_fdiv>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4904      	ldr	r1, [pc, #16]	; (80019c4 <_ZN9ADC_Tools19convertToPercentageEf+0x2c>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fe9c 	bl	80006f0 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	42c80000 	.word	0x42c80000

080019c8 <_ZNK9ADC_Tools13getPercentageEv>:
	float getPercentage()const			   { return per; };
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <_Z13AllTasks_initv>:

osThreadId BatteryManagerHandle;

void StartBatteryManagerTask(void const * argument);

void AllTasks_init(){
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <_Z13AllTasks_initv+0x30>)
 80019e8:	1d3c      	adds	r4, r7, #4
 80019ea:	461d      	mov	r5, r3
 80019ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fe30 	bl	8003662 <osThreadCreate>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <_Z13AllTasks_initv+0x34>)
 8001a06:	601a      	str	r2, [r3, #0]


}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a10:	08005654 	.word	0x08005654
 8001a14:	20000098 	.word	0x20000098

08001a18 <_ZN8LipoCellD1Ev>:
#include "main.h"

#define MAX_CELL_VOLTAGE 4.5f
#define MIN_CELL_VOLTAGE 0.5f

class LipoCell:  public ADC_Tools
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <_ZN8LipoCellD1Ev+0x24>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	331c      	adds	r3, #28
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f850 	bl	8001ad0 <_ZN7AverageIfLh10EED1Ev>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	08005688 	.word	0x08005688

08001a40 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b09f      	sub	sp, #124	; 0x7c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

	uint32_t receiveADC[2];
	uint32_t counter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	677b      	str	r3, [r7, #116]	; 0x74
	LipoCell lipo;
 8001a4c:	f107 0318 	add.w	r3, r7, #24
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f853 	bl	8001afc <_ZN8LipoCellC1Ev>

	HAL_ADC_Start_DMA(&hadc1, receiveADC,2);
 8001a56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <_Z23StartBatteryManagerTaskPKv+0x84>)
 8001a60:	f000 fd30 	bl	80024c4 <HAL_ADC_Start_DMA>

	for(;;){

		lipo.update(receiveADC[0]);
 8001a64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f861 	bl	8001b34 <_ZN8LipoCell6updateEm>
		float res = lipo.getPercentage();
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffa6 	bl	80019c8 <_ZNK9ADC_Tools13getPercentageEv>
 8001a7c:	6738      	str	r0, [r7, #112]	; 0x70
		char buf[15];
		uint16_t size = sprintf( buf, "Percent: %.2f\n", (float)res);
 8001a7e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001a80:	f7fe fcd4 	bl	800042c <__aeabi_f2d>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	f107 0008 	add.w	r0, r7, #8
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <_Z23StartBatteryManagerTaskPKv+0x88>)
 8001a92:	f003 fa63 	bl	8004f5c <siprintf>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,size, 10);
 8001a9c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001aa0:	f107 0108 	add.w	r1, r7, #8
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <_Z23StartBatteryManagerTaskPKv+0x8c>)
 8001aa8:	f001 fd7c 	bl	80035a4 <HAL_UART_Transmit>
		osDelay(100);
 8001aac:	2064      	movs	r0, #100	; 0x64
 8001aae:	f001 fe00 	bl	80036b2 <osDelay>


	}
 8001ab2:	e7d7      	b.n	8001a64 <_Z23StartBatteryManagerTaskPKv+0x24>
	LipoCell lipo;
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ffad 	bl	8001a18 <_ZN8LipoCellD1Ev>
 8001abe:	f002 fc7a 	bl	80043b6 <__cxa_end_cleanup>
 8001ac2:	bf00      	nop
 8001ac4:	20001054 	.word	0x20001054
 8001ac8:	08005670 	.word	0x08005670
 8001acc:	20001110 	.word	0x20001110

08001ad0 <_ZN7AverageIfLh10EED1Ev>:

public:
	Average(){
		clear();
	}
	~Average(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

	}
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_ZNK9ADC_Tools8getValueEv>:
	float getValue()const				   { return value; };
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <_ZN8LipoCellC1Ev>:
#include "LipoCell.h"



LipoCell::LipoCell():ADC_Tools(MAX_CELL_VOLTAGE, MIN_CELL_VOLTAGE){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	230c      	movs	r3, #12
 8001b08:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <_ZN8LipoCellC1Ev+0x30>)
 8001b0e:	f7ff fedb 	bl	80018c8 <_ZN9ADC_ToolsC1Effm>
 8001b12:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <_ZN8LipoCellC1Ev+0x34>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	331c      	adds	r3, #28
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f847 	bl	8001bb0 <_ZN7AverageIfLh10EEC1Ev>
	//ADC_Tools::init(MAX_CELL_VOLTAGE, MIN_CELL_VOLTAGE);

}
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40900000 	.word	0x40900000
 8001b30:	08005688 	.word	0x08005688

08001b34 <_ZN8LipoCell6updateEm>:

void LipoCell::update(uint32_t val) {
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	updateMeasurments(val);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff feee 	bl	8001924 <_ZN9ADC_Tools17updateMeasurmentsEm>
	avrg.insert(getValue());
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f103 041c 	add.w	r4, r3, #28
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ffc7 	bl	8001ae4 <_ZNK9ADC_Tools8getValueEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f000 f834 	bl	8001bc8 <_ZN7AverageIfLh10EE6insertEf>
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <_ZN8LipoCell12getValueAvrgEv>:


float LipoCell::getValueAvrg() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	return avrg();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	331c      	adds	r3, #28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f83b 	bl	8001bf0 <_ZN7AverageIfLh10EEclEv>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	681b      	ldr	r3, [r3, #0]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZN8LipoCell17getPercentageAvrgEv>:

float LipoCell::getPercentageAvrg() {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	float valAvrg = getValueAvrg();
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]
	return convertToPercentage(valAvrg);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fef9 	bl	8001998 <_ZN9ADC_Tools19convertToPercentageEf>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN7AverageIfLh10EEC1Ev>:
	Average(){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
		clear();
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f826 	bl	8001c0a <_ZN7AverageIfLh10EE5clearEv>
	}
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZN7AverageIfLh10EE6insertEf>:

	void insert(T val){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
		elem[currentIndex] = val;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		indexIterate();
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f831 	bl	8001c4a <_ZN7AverageIfLh10EE12indexIterateEv>
	}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN7AverageIfLh10EEclEv>:
		numberOfElem = 0;
		for (uint8_t i = 0; i < s; i++) elem[i] = T();
	}
	int size()const { return s; };
	//T& getAvrage()const{ return avrg;};
	T& operator()(){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
		this->calculate();
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f84e 	bl	8001c9a <_ZN7AverageIfLh10EE9calculateEv>
		return this->avrg;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	332c      	adds	r3, #44	; 0x2c
	}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_ZN7AverageIfLh10EE5clearEv>:
	void clear(){
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
		currentIndex = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		numberOfElem = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		for (uint8_t i = 0; i < s; i++) elem[i] = T();
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	dc09      	bgt.n	8001c40 <_ZN7AverageIfLh10EE5clearEv+0x36>
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e7f2      	b.n	8001c26 <_ZN7AverageIfLh10EE5clearEv+0x1c>
	}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <_ZN7AverageIfLh10EE12indexIterateEv>:
	void indexIterate(){
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
		if (numberOfElem != s) numberOfElem++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d007      	beq.n	8001c6c <_ZN7AverageIfLh10EE12indexIterateEv+0x22>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c62:	3301      	adds	r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (currentIndex == (s - 1)) currentIndex = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d104      	bne.n	8001c80 <_ZN7AverageIfLh10EE12indexIterateEv+0x36>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 8001c7e:	e007      	b.n	8001c90 <_ZN7AverageIfLh10EE12indexIterateEv+0x46>
			currentIndex++;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <_ZN7AverageIfLh10EE9calculateEv>:
	void calculate(){
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
		T a = 0;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < numberOfElem; i++) a += elem[i];
 8001ca8:	2300      	movs	r3, #0
 8001caa:	72fb      	strb	r3, [r7, #11]
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	da0d      	bge.n	8001cd4 <_ZN7AverageIfLh10EE9calculateEv+0x3a>
 8001cb8:	7afa      	ldrb	r2, [r7, #11]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7fe fc0c 	bl	80004e0 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	72fb      	strb	r3, [r7, #11]
 8001cd2:	e7eb      	b.n	8001cac <_ZN7AverageIfLh10EE9calculateEv+0x12>
		avrg = a /(T)numberOfElem;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fcb0 	bl	8000640 <__aeabi_ui2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7fe fdb7 	bl	8000858 <__aeabi_fdiv>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <MX_ADC1_Init+0x64>)
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_ADC1_Init+0x68>)
{
 8001d00:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001d02:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d08:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d0a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d10:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d12:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 8001d14:	2302      	movs	r3, #2
{
 8001d16:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d18:	9401      	str	r4, [sp, #4]
 8001d1a:	9402      	str	r4, [sp, #8]
 8001d1c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d1e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d20:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d22:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001d24:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d26:	f000 fc7d 	bl	8002624 <HAL_ADC_Init>
 8001d2a:	b108      	cbz	r0, 8001d30 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8001d2c:	f000 f9aa 	bl	8002084 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d30:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d32:	a901      	add	r1, sp, #4
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <MX_ADC1_Init+0x64>)
  sConfig.Channel = ADC_CHANNEL_0;
 8001d36:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d38:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d3a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3c:	f000 fb06 	bl	800234c <HAL_ADC_ConfigChannel>
 8001d40:	b108      	cbz	r0, 8001d46 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001d42:	f000 f99f 	bl	8002084 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d4a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4c:	a901      	add	r1, sp, #4
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_ADC1_Init+0x64>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d50:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d52:	f000 fafb 	bl	800234c <HAL_ADC_ConfigChannel>
 8001d56:	b108      	cbz	r0, 8001d5c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001d58:	f000 f994 	bl	8002084 <Error_Handler>
  }

}
 8001d5c:	b005      	add	sp, #20
 8001d5e:	bd30      	pop	{r4, r5, pc}
 8001d60:	20001054 	.word	0x20001054
 8001d64:	40012400 	.word	0x40012400

08001d68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d68:	b530      	push	{r4, r5, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	2210      	movs	r2, #16
 8001d70:	2100      	movs	r1, #0
 8001d72:	a802      	add	r0, sp, #8
 8001d74:	f002 ffeb 	bl	8004d4e <memset>
  if(adcHandle->Instance==ADC1)
 8001d78:	682a      	ldr	r2, [r5, #0]
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_ADC_MspInit+0x84>)
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d133      	bne.n	8001de8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d80:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001d84:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	481a      	ldr	r0, [pc, #104]	; (8001df0 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d92:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d9c:	4c15      	ldr	r4, [pc, #84]	; (8001df4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	f042 0204 	orr.w	r2, r2, #4
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dae:	2303      	movs	r3, #3
 8001db0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f000 fe0c 	bl	80029d0 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc0:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dc8:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001dca:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dcc:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dd0:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd2:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dd6:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dda:	f000 fcf7 	bl	80027cc <HAL_DMA_Init>
 8001dde:	b108      	cbz	r0, 8001de4 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001de0:	f000 f950 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001de4:	622c      	str	r4, [r5, #32]
 8001de6:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001de8:	b007      	add	sp, #28
 8001dea:	bd30      	pop	{r4, r5, pc}
 8001dec:	40012400 	.word	0x40012400
 8001df0:	40010800 	.word	0x40010800
 8001df4:	20001084 	.word	0x20001084
 8001df8:	40020008 	.word	0x40020008

08001dfc <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_DMA_Init+0x2c>)
{
 8001dfe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e00:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e02:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e0c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e14:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e18:	f000 fc96 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e1c:	200b      	movs	r0, #11
 8001e1e:	f000 fcc7 	bl	80027b0 <HAL_NVIC_EnableIRQ>

}
 8001e22:	b003      	add	sp, #12
 8001e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e28:	40021000 	.word	0x40021000

08001e2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <vApplicationGetIdleTaskMemory+0x28>)
 8001e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	200000a0 	.word	0x200000a0
 8001e58:	200000f4 	.word	0x200000f4

08001e5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_FREERTOS_Init+0x34>)
 8001e64:	1d3c      	adds	r4, r7, #4
 8001e66:	461d      	mov	r5, r3
 8001e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fbf2 	bl	8003662 <osThreadCreate>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <MX_FREERTOS_Init+0x38>)
 8001e82:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  AllTasks_init();
 8001e84:	f7ff fdac 	bl	80019e0 <_Z13AllTasks_initv>
  /* USER CODE END RTOS_THREADS */

}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	080056b4 	.word	0x080056b4
 8001e94:	2000009c 	.word	0x2000009c

08001e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f001 fc06 	bl	80036b2 <osDelay>
 8001ea6:	e7fb      	b.n	8001ea0 <StartDefaultTask+0x8>

08001ea8 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	2210      	movs	r2, #16
{
 8001eaa:	b570      	push	{r4, r5, r6, lr}
 8001eac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	eb0d 0002 	add.w	r0, sp, r2
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f002 ff4b 	bl	8004d4e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eba:	4d2a      	ldr	r5, [pc, #168]	; (8001f64 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ebe:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	f042 0210 	orr.w	r2, r2, #16
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	f002 0210 	and.w	r2, r2, #16
 8001ece:	9200      	str	r2, [sp, #0]
 8001ed0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee0:	f002 0220 	and.w	r2, r2, #32
 8001ee4:	9201      	str	r2, [sp, #4]
 8001ee6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	f042 0204 	orr.w	r2, r2, #4
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	f002 0204 	and.w	r2, r2, #4
 8001ef6:	9202      	str	r2, [sp, #8]
 8001ef8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	f042 0208 	orr.w	r2, r2, #8
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	9303      	str	r3, [sp, #12]
 8001f0c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f0e:	f000 fe41 	bl	8002b94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f16:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	a904      	add	r1, sp, #16
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f000 fd55 	bl	80029d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f26:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	a904      	add	r1, sp, #16
 8001f2a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f000 fd4d 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f36:	2320      	movs	r3, #32
 8001f38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	a904      	add	r1, sp, #16
 8001f3e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f000 fd43 	bl	80029d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	2105      	movs	r1, #5
 8001f4e:	2028      	movs	r0, #40	; 0x28
 8001f50:	f000 fbfa 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f54:	2028      	movs	r0, #40	; 0x28
 8001f56:	f000 fc2b 	bl	80027b0 <HAL_NVIC_EnableIRQ>

}
 8001f5a:	b008      	add	sp, #32
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	10110000 	.word	0x10110000
 8001f6c:	40011000 	.word	0x40011000

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f000 f98a 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 f80d 	bl	8001f96 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f7ff ff94 	bl	8001ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f80:	f7ff ff3c 	bl	8001dfc <MX_DMA_Init>
  MX_ADC1_Init();
 8001f84:	f7ff feba 	bl	8001cfc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001f88:	f000 f928 	bl	80021dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f8c:	f7ff ff66 	bl	8001e5c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f90:	f001 fb62 	bl	8003658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <main+0x24>

08001f96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b094      	sub	sp, #80	; 0x50
 8001f9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa0:	2228      	movs	r2, #40	; 0x28
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fed2 	bl	8004d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fde8 	bl	8002bb8 <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ff8:	f000 f844 	bl	8002084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f000 ffa7 	bl	8002f6c <HAL_RCC_ClockConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800202e:	f000 f829 	bl	8002084 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002032:	2302      	movs	r3, #2
 8002034:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f871 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002052:	f000 f817 	bl	8002084 <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3750      	adds	r7, #80	; 0x50
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002072:	f000 f91d 	bl	80022b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40012c00 	.word	0x40012c00

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_MspInit+0x48>)
{
 8002092:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002094:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002096:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020a0:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80020a4:	f002 0201 	and.w	r2, r2, #1
 80020a8:	9200      	str	r2, [sp, #0]
 80020aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020b2:	61da      	str	r2, [r3, #28]
 80020b4:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020b6:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020c0:	f000 fb42 	bl	8002748 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020c4:	4a05      	ldr	r2, [pc, #20]	; (80020dc <HAL_MspInit+0x4c>)
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d2:	b003      	add	sp, #12
 80020d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000

080020e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80020e2:	4601      	mov	r1, r0
{
 80020e4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80020e6:	2200      	movs	r2, #0
 80020e8:	2019      	movs	r0, #25
 80020ea:	f000 fb2d 	bl	8002748 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80020ee:	2019      	movs	r0, #25
 80020f0:	f000 fb5e 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f6:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020f8:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020fa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002104:	4c11      	ldr	r4, [pc, #68]	; (800214c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800210e:	f000 ffeb 	bl	80030e8 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002112:	f000 ffd9 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_InitTick+0x70>)
 8002118:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800211a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800211e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_InitTick+0x74>)
 8002122:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002126:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002128:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800212a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800212c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800212e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002132:	f001 f979 	bl	8003428 <HAL_TIM_Base_Init>
 8002136:	b920      	cbnz	r0, 8002142 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002138:	4620      	mov	r0, r4
 800213a:	f001 f86d 	bl	8003218 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800213e:	b008      	add	sp, #32
 8002140:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	e7fb      	b.n	800213e <HAL_InitTick+0x5e>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	200010c8 	.word	0x200010c8
 8002150:	40012c00 	.word	0x40012c00
 8002154:	000f4240 	.word	0x000f4240

08002158 <NMI_Handler>:
 8002158:	4770      	bx	lr

0800215a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215a:	e7fe      	b.n	800215a <HardFault_Handler>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	e7fe      	b.n	800215c <MemManage_Handler>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	e7fe      	b.n	800215e <BusFault_Handler>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler>

08002162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002162:	4770      	bx	lr

08002164 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <DMA1_Channel1_IRQHandler+0x8>)
 8002166:	f000 bb9f 	b.w	80028a8 <HAL_DMA_IRQHandler>
 800216a:	bf00      	nop
 800216c:	20001084 	.word	0x20001084

08002170 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <TIM1_UP_IRQHandler+0x8>)
 8002172:	f001 b87f 	b.w	8003274 <HAL_TIM_IRQHandler>
 8002176:	bf00      	nop
 8002178:	200010c8 	.word	0x200010c8

0800217c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800217c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002180:	f000 bd0e 	b.w	8002ba0 <HAL_GPIO_EXTI_IRQHandler>

08002184 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002184:	2001      	movs	r0, #1
 8002186:	4770      	bx	lr

08002188 <_kill>:

int _kill(int pid, int sig)
{
 8002188:	b508      	push	{r3, lr}
	errno = EINVAL;
 800218a:	f002 fda3 	bl	8004cd4 <__errno>
 800218e:	2316      	movs	r3, #22
 8002190:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002192:	f04f 30ff 	mov.w	r0, #4294967295
 8002196:	bd08      	pop	{r3, pc}

08002198 <_exit>:

void _exit (int status)
{
 8002198:	b508      	push	{r3, lr}
	errno = EINVAL;
 800219a:	f002 fd9b 	bl	8004cd4 <__errno>
 800219e:	2316      	movs	r3, #22
 80021a0:	6003      	str	r3, [r0, #0]
 80021a2:	e7fe      	b.n	80021a2 <_exit+0xa>

080021a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80021a4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <_sbrk+0x2c>)
{
 80021a8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	b909      	cbnz	r1, 80021b2 <_sbrk+0xe>
		heap_end = &end;
 80021ae:	4909      	ldr	r1, [pc, #36]	; (80021d4 <_sbrk+0x30>)
 80021b0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80021b2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80021b4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80021b6:	4402      	add	r2, r0
 80021b8:	428a      	cmp	r2, r1
 80021ba:	d906      	bls.n	80021ca <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80021bc:	f002 fd8a 	bl	8004cd4 <__errno>
 80021c0:	230c      	movs	r3, #12
 80021c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80021ca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80021cc:	bd08      	pop	{r3, pc}
 80021ce:	bf00      	nop
 80021d0:	200002f4 	.word	0x200002f4
 80021d4:	20001158 	.word	0x20001158

080021d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d8:	4770      	bx	lr
	...

080021dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021dc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 80021de:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 80021e2:	480a      	ldr	r0, [pc, #40]	; (800220c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021e6:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80021e8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ec:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021ee:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021f0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021fa:	f001 f9a5 	bl	8003548 <HAL_UART_Init>
 80021fe:	b118      	cbz	r0, 8002208 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002204:	f7ff bf3e 	b.w	8002084 <Error_Handler>
 8002208:	bd08      	pop	{r3, pc}
 800220a:	bf00      	nop
 800220c:	20001110 	.word	0x20001110
 8002210:	40004800 	.word	0x40004800

08002214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002214:	b510      	push	{r4, lr}
 8002216:	4604      	mov	r4, r0
 8002218:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	2210      	movs	r2, #16
 800221c:	2100      	movs	r1, #0
 800221e:	a802      	add	r0, sp, #8
 8002220:	f002 fd95 	bl	8004d4e <memset>
  if(uartHandle->Instance==USART3)
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x70>)
 8002228:	429a      	cmp	r2, r3
 800222a:	d128      	bne.n	800227e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800222c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002230:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8002234:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002238:	61da      	str	r2, [r3, #28]
 800223a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	4812      	ldr	r0, [pc, #72]	; (8002288 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800223e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002242:	9200      	str	r2, [sp, #0]
 8002244:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	f042 0208 	orr.w	r2, r2, #8
 800224c:	619a      	str	r2, [r3, #24]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f000 fbb3 	bl	80029d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800226a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800226e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	a902      	add	r1, sp, #8
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002276:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f000 fba9 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800227e:	b006      	add	sp, #24
 8002280:	bd10      	pop	{r4, pc}
 8002282:	bf00      	nop
 8002284:	40004800 	.word	0x40004800
 8002288:	40010c00 	.word	0x40010c00

0800228c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x20>)
{
 800228e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002292:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229a:	f000 fa43 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff ff1e 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a4:	f7ff fef4 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80022a8:	2000      	movs	r0, #0
 80022aa:	bd08      	pop	{r3, pc}
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_IncTick+0x10>)
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_IncTick+0x14>)
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	440b      	add	r3, r1
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20001150 	.word	0x20001150
 80022c4:	20000004 	.word	0x20000004

080022c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022c8:	4b01      	ldr	r3, [pc, #4]	; (80022d0 <HAL_GetTick+0x8>)
 80022ca:	6818      	ldr	r0, [r3, #0]
}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20001150 	.word	0x20001150

080022d4 <HAL_ADC_ConvCpltCallback>:
 80022d4:	4770      	bx	lr

080022d6 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80022d8:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	f012 0f50 	tst.w	r2, #80	; 0x50
 80022e0:	d11b      	bne.n	800231a <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6892      	ldr	r2, [r2, #8]
 80022ee:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80022f2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80022f6:	d10c      	bne.n	8002312 <ADC_DMAConvCplt+0x3c>
 80022f8:	7b1a      	ldrb	r2, [r3, #12]
 80022fa:	b952      	cbnz	r2, 8002312 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002306:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002308:	bf5e      	ittt	pl
 800230a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800230c:	f042 0201 	orrpl.w	r2, r2, #1
 8002310:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffde 	bl	80022d4 <HAL_ADC_ConvCpltCallback>
 8002318:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800231a:	6a1b      	ldr	r3, [r3, #32]
  }
}
 800231c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4718      	bx	r3

08002324 <HAL_ADC_ConvHalfCpltCallback>:
 8002324:	4770      	bx	lr

08002326 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002326:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002328:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800232a:	f7ff fffb 	bl	8002324 <HAL_ADC_ConvHalfCpltCallback>
 800232e:	bd08      	pop	{r3, pc}

08002330 <HAL_ADC_ErrorCallback>:
{
 8002330:	4770      	bx	lr

08002332 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002332:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002334:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002336:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800233e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002346:	f7ff fff3 	bl	8002330 <HAL_ADC_ErrorCallback>
 800234a:	bd08      	pop	{r3, pc}

0800234c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800234c:	2300      	movs	r3, #0
{ 
 800234e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002350:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002352:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002356:	2b01      	cmp	r3, #1
 8002358:	d074      	beq.n	8002444 <HAL_ADC_ConfigChannel+0xf8>
 800235a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800235c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800235e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002362:	2d06      	cmp	r5, #6
 8002364:	6802      	ldr	r2, [r0, #0]
 8002366:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800236a:	680c      	ldr	r4, [r1, #0]
 800236c:	d825      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800236e:	442b      	add	r3, r5
 8002370:	251f      	movs	r5, #31
 8002372:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002374:	3b05      	subs	r3, #5
 8002376:	409d      	lsls	r5, r3
 8002378:	ea26 0505 	bic.w	r5, r6, r5
 800237c:	fa04 f303 	lsl.w	r3, r4, r3
 8002380:	432b      	orrs	r3, r5
 8002382:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002384:	2c09      	cmp	r4, #9
 8002386:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800238a:	688d      	ldr	r5, [r1, #8]
 800238c:	d92f      	bls.n	80023ee <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800238e:	2607      	movs	r6, #7
 8002390:	4423      	add	r3, r4
 8002392:	68d1      	ldr	r1, [r2, #12]
 8002394:	3b1e      	subs	r3, #30
 8002396:	409e      	lsls	r6, r3
 8002398:	ea21 0106 	bic.w	r1, r1, r6
 800239c:	fa05 f303 	lsl.w	r3, r5, r3
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023a4:	f1a4 0310 	sub.w	r3, r4, #16
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d92b      	bls.n	8002404 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80023ae:	2200      	movs	r2, #0
 80023b0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	b002      	add	sp, #8
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80023ba:	2d0c      	cmp	r5, #12
 80023bc:	d80b      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023be:	442b      	add	r3, r5
 80023c0:	251f      	movs	r5, #31
 80023c2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80023c4:	3b23      	subs	r3, #35	; 0x23
 80023c6:	409d      	lsls	r5, r3
 80023c8:	ea26 0505 	bic.w	r5, r6, r5
 80023cc:	fa04 f303 	lsl.w	r3, r4, r3
 80023d0:	432b      	orrs	r3, r5
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	e7d6      	b.n	8002384 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023d6:	442b      	add	r3, r5
 80023d8:	251f      	movs	r5, #31
 80023da:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80023dc:	3b41      	subs	r3, #65	; 0x41
 80023de:	409d      	lsls	r5, r3
 80023e0:	ea26 0505 	bic.w	r5, r6, r5
 80023e4:	fa04 f303 	lsl.w	r3, r4, r3
 80023e8:	432b      	orrs	r3, r5
 80023ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023ec:	e7ca      	b.n	8002384 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ee:	2607      	movs	r6, #7
 80023f0:	6911      	ldr	r1, [r2, #16]
 80023f2:	4423      	add	r3, r4
 80023f4:	409e      	lsls	r6, r3
 80023f6:	ea21 0106 	bic.w	r1, r1, r6
 80023fa:	fa05 f303 	lsl.w	r3, r5, r3
 80023fe:	430b      	orrs	r3, r1
 8002400:	6113      	str	r3, [r2, #16]
 8002402:	e7cf      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_ADC_ConfigChannel+0xfc>)
 8002406:	429a      	cmp	r2, r3
 8002408:	d116      	bne.n	8002438 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800240a:	6893      	ldr	r3, [r2, #8]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	d4cd      	bmi.n	80023ac <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002410:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002412:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002418:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800241a:	d1c7      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_ADC_ConfigChannel+0x100>)
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <HAL_ADC_ConfigChannel+0x104>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fbb3 f2f2 	udiv	r2, r3, r2
 8002426:	230a      	movs	r3, #10
 8002428:	4353      	muls	r3, r2
            wait_loop_index--;
 800242a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800242c:	9b01      	ldr	r3, [sp, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0bc      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8002432:	9b01      	ldr	r3, [sp, #4]
 8002434:	3b01      	subs	r3, #1
 8002436:	e7f8      	b.n	800242a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e7b4      	b.n	80023ae <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8002444:	2302      	movs	r3, #2
 8002446:	e7b5      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x68>
 8002448:	40012400 	.word	0x40012400
 800244c:	20000000 	.word	0x20000000
 8002450:	000f4240 	.word	0x000f4240

08002454 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002454:	2300      	movs	r3, #0
{
 8002456:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002458:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800245a:	6803      	ldr	r3, [r0, #0]
{
 800245c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	07d2      	lsls	r2, r2, #31
 8002462:	d502      	bpl.n	800246a <ADC_Enable+0x16>
  return HAL_OK;
 8002464:	2000      	movs	r0, #0
}
 8002466:	b002      	add	sp, #8
 8002468:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <ADC_Enable+0x68>)
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <ADC_Enable+0x6c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800247c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800247e:	9b01      	ldr	r3, [sp, #4]
 8002480:	b9c3      	cbnz	r3, 80024b4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8002482:	f7ff ff21 	bl	80022c8 <HAL_GetTick>
 8002486:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	689d      	ldr	r5, [r3, #8]
 800248c:	f015 0501 	ands.w	r5, r5, #1
 8002490:	d1e8      	bne.n	8002464 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002492:	f7ff ff19 	bl	80022c8 <HAL_GetTick>
 8002496:	1b80      	subs	r0, r0, r6
 8002498:	2802      	cmp	r0, #2
 800249a:	d9f5      	bls.n	8002488 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800249e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80024aa:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024b2:	e7d8      	b.n	8002466 <ADC_Enable+0x12>
      wait_loop_index--;
 80024b4:	9b01      	ldr	r3, [sp, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	e7e0      	b.n	800247c <ADC_Enable+0x28>
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000
 80024c0:	000f4240 	.word	0x000f4240

080024c4 <HAL_ADC_Start_DMA>:
{
 80024c4:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80024c8:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_ADC_Start_DMA+0x108>)
 80024cc:	6802      	ldr	r2, [r0, #0]
{
 80024ce:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024d0:	429a      	cmp	r2, r3
{
 80024d2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024d4:	d002      	beq.n	80024dc <HAL_ADC_Start_DMA+0x18>
 80024d6:	493e      	ldr	r1, [pc, #248]	; (80025d0 <HAL_ADC_Start_DMA+0x10c>)
 80024d8:	428a      	cmp	r2, r1
 80024da:	d103      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x20>
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80024e2:	d16e      	bne.n	80025c2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80024e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d06c      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x102>
 80024ec:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80024ee:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80024f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80024f4:	f7ff ffae 	bl	8002454 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80024f8:	4606      	mov	r6, r0
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d15d      	bne.n	80025ba <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80024fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002500:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002502:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002506:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002508:	f020 0001 	bic.w	r0, r0, #1
 800250c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002510:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002512:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002514:	d104      	bne.n	8002520 <HAL_ADC_Start_DMA+0x5c>
 8002516:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <HAL_ADC_Start_DMA+0x108>)
 8002518:	6853      	ldr	r3, [r2, #4]
 800251a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800251e:	d13e      	bne.n	800259e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002526:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	055a      	lsls	r2, r3, #21
 800252c:	d505      	bpl.n	800253a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800252e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002538:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800253c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002542:	bf18      	it	ne
 8002544:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002546:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002548:	bf18      	it	ne
 800254a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800254e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002550:	2300      	movs	r3, #0
 8002552:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002558:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <HAL_ADC_Start_DMA+0x114>)
 800255e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_ADC_Start_DMA+0x118>)
 8002562:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002564:	f06f 0302 	mvn.w	r3, #2
 8002568:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800256c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002578:	4643      	mov	r3, r8
 800257a:	f000 f957 	bl	800282c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002586:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	bf0c      	ite	eq
 800258e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002592:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	4630      	mov	r0, r6
 800259a:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025a6:	6853      	ldr	r3, [r2, #4]
 80025a8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025aa:	bf41      	itttt	mi
 80025ac:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80025ae:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80025b2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80025b6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80025b8:	e7bf      	b.n	800253a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80025ba:	2300      	movs	r3, #0
 80025bc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80025c0:	e7ea      	b.n	8002598 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80025c2:	2601      	movs	r6, #1
 80025c4:	e7e8      	b.n	8002598 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80025c6:	2602      	movs	r6, #2
 80025c8:	e7e6      	b.n	8002598 <HAL_ADC_Start_DMA+0xd4>
 80025ca:	bf00      	nop
 80025cc:	40012400 	.word	0x40012400
 80025d0:	40012800 	.word	0x40012800
 80025d4:	080022d7 	.word	0x080022d7
 80025d8:	08002327 	.word	0x08002327
 80025dc:	08002333 	.word	0x08002333

080025e0 <ADC_ConversionStop_Disable>:
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e2:	6803      	ldr	r3, [r0, #0]
{
 80025e4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	07d2      	lsls	r2, r2, #31
 80025ea:	d401      	bmi.n	80025f0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80025ec:	2000      	movs	r0, #0
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025f8:	f7ff fe66 	bl	80022c8 <HAL_GetTick>
 80025fc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	07db      	lsls	r3, r3, #31
 8002604:	d5f2      	bpl.n	80025ec <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002606:	f7ff fe5f 	bl	80022c8 <HAL_GetTick>
 800260a:	1b40      	subs	r0, r0, r5
 800260c:	2802      	cmp	r0, #2
 800260e:	d9f6      	bls.n	80025fe <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002614:	f043 0310 	orr.w	r3, r3, #16
 8002618:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002622:	bd38      	pop	{r3, r4, r5, pc}

08002624 <HAL_ADC_Init>:
{
 8002624:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8002626:	4604      	mov	r4, r0
 8002628:	2800      	cmp	r0, #0
 800262a:	d071      	beq.n	8002710 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800262c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800262e:	b923      	cbnz	r3, 800263a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002630:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002632:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002636:	f7ff fb97 	bl	8001d68 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff ffd0 	bl	80025e0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002640:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002642:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002648:	d164      	bne.n	8002714 <HAL_ADC_Init+0xf0>
 800264a:	2800      	cmp	r0, #0
 800264c:	d162      	bne.n	8002714 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800264e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002654:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002656:	f023 0302 	bic.w	r3, r3, #2
 800265a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800265e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002660:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002662:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002664:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002666:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800266a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800266e:	d038      	beq.n	80026e2 <HAL_ADC_Init+0xbe>
 8002670:	2901      	cmp	r1, #1
 8002672:	bf14      	ite	ne
 8002674:	4606      	movne	r6, r0
 8002676:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800267a:	7d25      	ldrb	r5, [r4, #20]
 800267c:	2d01      	cmp	r5, #1
 800267e:	d107      	bne.n	8002690 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002680:	2b00      	cmp	r3, #0
 8002682:	d130      	bne.n	80026e6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	3b01      	subs	r3, #1
 8002688:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800268c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002690:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002692:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002696:	685d      	ldr	r5, [r3, #4]
 8002698:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800269c:	ea45 0506 	orr.w	r5, r5, r6
 80026a0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80026a2:	689e      	ldr	r6, [r3, #8]
 80026a4:	4d1d      	ldr	r5, [pc, #116]	; (800271c <HAL_ADC_Init+0xf8>)
 80026a6:	ea05 0506 	and.w	r5, r5, r6
 80026aa:	ea45 0502 	orr.w	r5, r5, r2
 80026ae:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026b0:	d001      	beq.n	80026b6 <HAL_ADC_Init+0x92>
 80026b2:	2901      	cmp	r1, #1
 80026b4:	d120      	bne.n	80026f8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026b6:	6921      	ldr	r1, [r4, #16]
 80026b8:	3901      	subs	r1, #1
 80026ba:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80026bc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80026be:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80026c2:	4329      	orrs	r1, r5
 80026c4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_ADC_Init+0xfc>)
 80026ca:	400b      	ands	r3, r1
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d115      	bne.n	80026fc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	2300      	movs	r3, #0
 80026d2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80026d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	62a3      	str	r3, [r4, #40]	; 0x28
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026e2:	460e      	mov	r6, r1
 80026e4:	e7c9      	b.n	800267a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026f6:	e7cb      	b.n	8002690 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80026f8:	2100      	movs	r1, #0
 80026fa:	e7df      	b.n	80026bc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80026fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026fe:	f023 0312 	bic.w	r3, r3, #18
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002710:	2001      	movs	r0, #1
}
 8002712:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	62a3      	str	r3, [r4, #40]	; 0x28
 800271a:	e7f9      	b.n	8002710 <HAL_ADC_Init+0xec>
 800271c:	ffe1f7fd 	.word	0xffe1f7fd
 8002720:	ff1f0efe 	.word	0xff1f0efe

08002724 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4a07      	ldr	r2, [pc, #28]	; (8002744 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002726:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800272a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800273e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002740:	60d3      	str	r3, [r2, #12]
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b530      	push	{r4, r5, lr}
 800274c:	68dc      	ldr	r4, [r3, #12]
 800274e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002752:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	2b04      	cmp	r3, #4
 800275a:	bf28      	it	cs
 800275c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002764:	bf98      	it	ls
 8002766:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	fa05 f303 	lsl.w	r3, r5, r3
 800276c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002770:	bf88      	it	hi
 8002772:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	4019      	ands	r1, r3
 8002776:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	fa05 f404 	lsl.w	r4, r5, r4
 800277c:	3c01      	subs	r4, #1
 800277e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002780:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002782:	ea42 0201 	orr.w	r2, r2, r1
 8002786:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	bfa9      	itett	ge
 800278c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	4b06      	ldrlt	r3, [pc, #24]	; (80027ac <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	b2d2      	uxtbge	r2, r2
 8002794:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	bfbb      	ittet	lt
 800279a:	f000 000f 	andlt.w	r0, r0, #15
 800279e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	541a      	strblt	r2, [r3, r0]
 80027a6:	bd30      	pop	{r4, r5, pc}
 80027a8:	e000ed00 	.word	0xe000ed00
 80027ac:	e000ed14 	.word	0xe000ed14

080027b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027b0:	2800      	cmp	r0, #0
 80027b2:	db08      	blt.n	80027c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b4:	2301      	movs	r3, #1
 80027b6:	0942      	lsrs	r2, r0, #5
 80027b8:	f000 001f 	and.w	r0, r0, #31
 80027bc:	fa03 f000 	lsl.w	r0, r3, r0
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <HAL_NVIC_EnableIRQ+0x18>)
 80027c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100

080027cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027cc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ce:	b330      	cbz	r0, 800281e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d0:	2214      	movs	r2, #20
 80027d2:	6801      	ldr	r1, [r0, #0]
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d8:	440b      	add	r3, r1
 80027da:	fbb3 f3f2 	udiv	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80027e4:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80027e6:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80027e8:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ea:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80027ee:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	4323      	orrs	r3, r4
 80027f8:	6904      	ldr	r4, [r0, #16]
 80027fa:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	6944      	ldr	r4, [r0, #20]
 80027fe:	4323      	orrs	r3, r4
 8002800:	6984      	ldr	r4, [r0, #24]
 8002802:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	69c4      	ldr	r4, [r0, #28]
 8002806:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002808:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800280a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800280c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002810:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002816:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800281a:	4618      	mov	r0, r3
 800281c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
}
 8002820:	bd10      	pop	{r4, pc}
 8002822:	bf00      	nop
 8002824:	bffdfff8 	.word	0xbffdfff8
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800282e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002832:	2c01      	cmp	r4, #1
 8002834:	d035      	beq.n	80028a2 <HAL_DMA_Start_IT+0x76>
 8002836:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002838:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800283c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002840:	42a5      	cmp	r5, r4
 8002842:	f04f 0600 	mov.w	r6, #0
 8002846:	f04f 0402 	mov.w	r4, #2
 800284a:	d128      	bne.n	800289e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002850:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002852:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002854:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002856:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002858:	f026 0601 	bic.w	r6, r6, #1
 800285c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002860:	40bd      	lsls	r5, r7
 8002862:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002864:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002866:	6843      	ldr	r3, [r0, #4]
 8002868:	6805      	ldr	r5, [r0, #0]
 800286a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800286c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800286e:	bf0b      	itete	eq
 8002870:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002872:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002874:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002876:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002878:	b14b      	cbz	r3, 800288e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002880:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002882:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	f043 030a 	orr.w	r3, r3, #10
 800289c:	e7f0      	b.n	8002880 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800289e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80028a2:	2002      	movs	r0, #2
}
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028a8 <HAL_DMA_IRQHandler>:
{
 80028a8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028aa:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028ac:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028b0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80028b2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028b4:	4095      	lsls	r5, r2
 80028b6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80028b8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028ba:	d032      	beq.n	8002922 <HAL_DMA_IRQHandler+0x7a>
 80028bc:	074d      	lsls	r5, r1, #29
 80028be:	d530      	bpl.n	8002922 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c4:	bf5e      	ittt	pl
 80028c6:	681a      	ldrpl	r2, [r3, #0]
 80028c8:	f022 0204 	bicpl.w	r2, r2, #4
 80028cc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028ce:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <HAL_DMA_IRQHandler+0x120>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_DMA_IRQHandler+0x60>
 80028d4:	3214      	adds	r2, #20
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_IRQHandler+0x64>
 80028da:	3214      	adds	r2, #20
 80028dc:	4293      	cmp	r3, r2
 80028de:	d017      	beq.n	8002910 <HAL_DMA_IRQHandler+0x68>
 80028e0:	3214      	adds	r2, #20
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d017      	beq.n	8002916 <HAL_DMA_IRQHandler+0x6e>
 80028e6:	3214      	adds	r2, #20
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d017      	beq.n	800291c <HAL_DMA_IRQHandler+0x74>
 80028ec:	3214      	adds	r2, #20
 80028ee:	4293      	cmp	r3, r2
 80028f0:	bf0c      	ite	eq
 80028f2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80028f6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80028fa:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_DMA_IRQHandler+0x124>)
 80028fc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80028fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002900:	2b00      	cmp	r3, #0
 8002902:	d05e      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x11a>
}
 8002904:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002906:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002908:	2304      	movs	r3, #4
 800290a:	e7f6      	b.n	80028fa <HAL_DMA_IRQHandler+0x52>
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	e7f4      	b.n	80028fa <HAL_DMA_IRQHandler+0x52>
 8002910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002914:	e7f1      	b.n	80028fa <HAL_DMA_IRQHandler+0x52>
 8002916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800291a:	e7ee      	b.n	80028fa <HAL_DMA_IRQHandler+0x52>
 800291c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002920:	e7eb      	b.n	80028fa <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002922:	2502      	movs	r5, #2
 8002924:	4095      	lsls	r5, r2
 8002926:	4225      	tst	r5, r4
 8002928:	d035      	beq.n	8002996 <HAL_DMA_IRQHandler+0xee>
 800292a:	078d      	lsls	r5, r1, #30
 800292c:	d533      	bpl.n	8002996 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	0694      	lsls	r4, r2, #26
 8002932:	d406      	bmi.n	8002942 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f022 020a 	bic.w	r2, r2, #10
 800293a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800293c:	2201      	movs	r2, #1
 800293e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_DMA_IRQHandler+0x120>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d019      	beq.n	800297c <HAL_DMA_IRQHandler+0xd4>
 8002948:	3214      	adds	r2, #20
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
 800294e:	3214      	adds	r2, #20
 8002950:	4293      	cmp	r3, r2
 8002952:	d017      	beq.n	8002984 <HAL_DMA_IRQHandler+0xdc>
 8002954:	3214      	adds	r2, #20
 8002956:	4293      	cmp	r3, r2
 8002958:	d017      	beq.n	800298a <HAL_DMA_IRQHandler+0xe2>
 800295a:	3214      	adds	r2, #20
 800295c:	4293      	cmp	r3, r2
 800295e:	d017      	beq.n	8002990 <HAL_DMA_IRQHandler+0xe8>
 8002960:	3214      	adds	r2, #20
 8002962:	4293      	cmp	r3, r2
 8002964:	bf0c      	ite	eq
 8002966:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800296a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_DMA_IRQHandler+0x124>)
 8002970:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002972:	2300      	movs	r3, #0
 8002974:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002978:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800297a:	e7c1      	b.n	8002900 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800297c:	2302      	movs	r3, #2
 800297e:	e7f6      	b.n	800296e <HAL_DMA_IRQHandler+0xc6>
 8002980:	2320      	movs	r3, #32
 8002982:	e7f4      	b.n	800296e <HAL_DMA_IRQHandler+0xc6>
 8002984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002988:	e7f1      	b.n	800296e <HAL_DMA_IRQHandler+0xc6>
 800298a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800298e:	e7ee      	b.n	800296e <HAL_DMA_IRQHandler+0xc6>
 8002990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002994:	e7eb      	b.n	800296e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002996:	2508      	movs	r5, #8
 8002998:	4095      	lsls	r5, r2
 800299a:	4225      	tst	r5, r4
 800299c:	d011      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x11a>
 800299e:	0709      	lsls	r1, r1, #28
 80029a0:	d50f      	bpl.n	80029c2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	f021 010e 	bic.w	r1, r1, #14
 80029a8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029aa:	2301      	movs	r3, #1
 80029ac:	fa03 f202 	lsl.w	r2, r3, r2
 80029b0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029b2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80029b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80029b8:	2300      	movs	r3, #0
 80029ba:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80029be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029c0:	e79e      	b.n	8002900 <HAL_DMA_IRQHandler+0x58>
}
 80029c2:	bc70      	pop	{r4, r5, r6}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40020008 	.word	0x40020008
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029d4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80029d6:	4626      	mov	r6, r4
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029da:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002b84 <HAL_GPIO_Init+0x1b4>
 80029de:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8002b88 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e2:	680a      	ldr	r2, [r1, #0]
 80029e4:	fa32 f506 	lsrs.w	r5, r2, r6
 80029e8:	d102      	bne.n	80029f0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80029ea:	b003      	add	sp, #12
 80029ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80029f0:	f04f 0801 	mov.w	r8, #1
 80029f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80029fc:	4590      	cmp	r8, r2
 80029fe:	d17f      	bne.n	8002b00 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8002a00:	684d      	ldr	r5, [r1, #4]
 8002a02:	2d12      	cmp	r5, #18
 8002a04:	f000 80aa 	beq.w	8002b5c <HAL_GPIO_Init+0x18c>
 8002a08:	f200 8083 	bhi.w	8002b12 <HAL_GPIO_Init+0x142>
 8002a0c:	2d02      	cmp	r5, #2
 8002a0e:	f000 80a2 	beq.w	8002b56 <HAL_GPIO_Init+0x186>
 8002a12:	d877      	bhi.n	8002b04 <HAL_GPIO_Init+0x134>
 8002a14:	2d00      	cmp	r5, #0
 8002a16:	f000 8089 	beq.w	8002b2c <HAL_GPIO_Init+0x15c>
 8002a1a:	2d01      	cmp	r5, #1
 8002a1c:	f000 8099 	beq.w	8002b52 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a20:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a24:	2aff      	cmp	r2, #255	; 0xff
 8002a26:	bf93      	iteet	ls
 8002a28:	4682      	movls	sl, r0
 8002a2a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002a2e:	3d08      	subhi	r5, #8
 8002a30:	f8d0 b000 	ldrls.w	fp, [r0]
 8002a34:	bf92      	itee	ls
 8002a36:	00b5      	lslls	r5, r6, #2
 8002a38:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002a3c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a3e:	fa09 f805 	lsl.w	r8, r9, r5
 8002a42:	ea2b 0808 	bic.w	r8, fp, r8
 8002a46:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a4a:	bf88      	it	hi
 8002a4c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a50:	ea48 0505 	orr.w	r5, r8, r5
 8002a54:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a58:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002a5c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002a60:	d04e      	beq.n	8002b00 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a62:	4d45      	ldr	r5, [pc, #276]	; (8002b78 <HAL_GPIO_Init+0x1a8>)
 8002a64:	4f44      	ldr	r7, [pc, #272]	; (8002b78 <HAL_GPIO_Init+0x1a8>)
 8002a66:	69ad      	ldr	r5, [r5, #24]
 8002a68:	f026 0803 	bic.w	r8, r6, #3
 8002a6c:	f045 0501 	orr.w	r5, r5, #1
 8002a70:	61bd      	str	r5, [r7, #24]
 8002a72:	69bd      	ldr	r5, [r7, #24]
 8002a74:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002a78:	f005 0501 	and.w	r5, r5, #1
 8002a7c:	9501      	str	r5, [sp, #4]
 8002a7e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a82:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a86:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a88:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002a8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a90:	fa09 f90b 	lsl.w	r9, r9, fp
 8002a94:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a98:	4d38      	ldr	r5, [pc, #224]	; (8002b7c <HAL_GPIO_Init+0x1ac>)
 8002a9a:	42a8      	cmp	r0, r5
 8002a9c:	d063      	beq.n	8002b66 <HAL_GPIO_Init+0x196>
 8002a9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aa2:	42a8      	cmp	r0, r5
 8002aa4:	d061      	beq.n	8002b6a <HAL_GPIO_Init+0x19a>
 8002aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aaa:	42a8      	cmp	r0, r5
 8002aac:	d05f      	beq.n	8002b6e <HAL_GPIO_Init+0x19e>
 8002aae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ab2:	42a8      	cmp	r0, r5
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2503      	moveq	r5, #3
 8002ab8:	2504      	movne	r5, #4
 8002aba:	fa05 f50b 	lsl.w	r5, r5, fp
 8002abe:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002ac2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002ac6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002acc:	bf14      	ite	ne
 8002ace:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad0:	4395      	biceq	r5, r2
 8002ad2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002ad4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002ada:	bf14      	ite	ne
 8002adc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ade:	4395      	biceq	r5, r2
 8002ae0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ae2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ae8:	bf14      	ite	ne
 8002aea:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aec:	4395      	biceq	r5, r2
 8002aee:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af6:	bf14      	ite	ne
 8002af8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002afa:	ea25 0202 	biceq.w	r2, r5, r2
 8002afe:	60da      	str	r2, [r3, #12]
	position++;
 8002b00:	3601      	adds	r6, #1
 8002b02:	e76e      	b.n	80029e2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002b04:	2d03      	cmp	r5, #3
 8002b06:	d022      	beq.n	8002b4e <HAL_GPIO_Init+0x17e>
 8002b08:	2d11      	cmp	r5, #17
 8002b0a:	d189      	bne.n	8002a20 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0c:	68cc      	ldr	r4, [r1, #12]
 8002b0e:	3404      	adds	r4, #4
          break;
 8002b10:	e786      	b.n	8002a20 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002b12:	4f1b      	ldr	r7, [pc, #108]	; (8002b80 <HAL_GPIO_Init+0x1b0>)
 8002b14:	42bd      	cmp	r5, r7
 8002b16:	d009      	beq.n	8002b2c <HAL_GPIO_Init+0x15c>
 8002b18:	d812      	bhi.n	8002b40 <HAL_GPIO_Init+0x170>
 8002b1a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002b8c <HAL_GPIO_Init+0x1bc>
 8002b1e:	454d      	cmp	r5, r9
 8002b20:	d004      	beq.n	8002b2c <HAL_GPIO_Init+0x15c>
 8002b22:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002b26:	454d      	cmp	r5, r9
 8002b28:	f47f af7a 	bne.w	8002a20 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2c:	688c      	ldr	r4, [r1, #8]
 8002b2e:	b1c4      	cbz	r4, 8002b62 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b30:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002b32:	bf0c      	ite	eq
 8002b34:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002b38:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b3c:	2408      	movs	r4, #8
 8002b3e:	e76f      	b.n	8002a20 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002b40:	4575      	cmp	r5, lr
 8002b42:	d0f3      	beq.n	8002b2c <HAL_GPIO_Init+0x15c>
 8002b44:	4565      	cmp	r5, ip
 8002b46:	d0f1      	beq.n	8002b2c <HAL_GPIO_Init+0x15c>
 8002b48:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002b90 <HAL_GPIO_Init+0x1c0>
 8002b4c:	e7eb      	b.n	8002b26 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b4e:	2400      	movs	r4, #0
 8002b50:	e766      	b.n	8002a20 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b52:	68cc      	ldr	r4, [r1, #12]
          break;
 8002b54:	e764      	b.n	8002a20 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b56:	68cc      	ldr	r4, [r1, #12]
 8002b58:	3408      	adds	r4, #8
          break;
 8002b5a:	e761      	b.n	8002a20 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b5c:	68cc      	ldr	r4, [r1, #12]
 8002b5e:	340c      	adds	r4, #12
          break;
 8002b60:	e75e      	b.n	8002a20 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b62:	2404      	movs	r4, #4
 8002b64:	e75c      	b.n	8002a20 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b66:	2500      	movs	r5, #0
 8002b68:	e7a7      	b.n	8002aba <HAL_GPIO_Init+0xea>
 8002b6a:	2501      	movs	r5, #1
 8002b6c:	e7a5      	b.n	8002aba <HAL_GPIO_Init+0xea>
 8002b6e:	2502      	movs	r5, #2
 8002b70:	e7a3      	b.n	8002aba <HAL_GPIO_Init+0xea>
 8002b72:	bf00      	nop
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40010800 	.word	0x40010800
 8002b80:	10210000 	.word	0x10210000
 8002b84:	10310000 	.word	0x10310000
 8002b88:	10320000 	.word	0x10320000
 8002b8c:	10110000 	.word	0x10110000
 8002b90:	10220000 	.word	0x10220000

08002b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b94:	b10a      	cbz	r2, 8002b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b96:	6101      	str	r1, [r0, #16]
 8002b98:	4770      	bx	lr
 8002b9a:	0409      	lsls	r1, r1, #16
 8002b9c:	e7fb      	b.n	8002b96 <HAL_GPIO_WritePin+0x2>

08002b9e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002ba0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002ba4:	6959      	ldr	r1, [r3, #20]
 8002ba6:	4201      	tst	r1, r0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bac:	f7ff fff7 	bl	8002b9e <HAL_GPIO_EXTI_Callback>
 8002bb0:	bd08      	pop	{r3, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	b908      	cbnz	r0, 8002bc4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e03c      	b.n	8002c3e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc4:	6803      	ldr	r3, [r0, #0]
 8002bc6:	07db      	lsls	r3, r3, #31
 8002bc8:	d410      	bmi.n	8002bec <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	079f      	lsls	r7, r3, #30
 8002bce:	d45d      	bmi.n	8002c8c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	0719      	lsls	r1, r3, #28
 8002bd4:	f100 8094 	bmi.w	8002d00 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	075a      	lsls	r2, r3, #29
 8002bdc:	f100 80be 	bmi.w	8002d5c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be0:	69e8      	ldr	r0, [r5, #28]
 8002be2:	2800      	cmp	r0, #0
 8002be4:	f040 812c 	bne.w	8002e40 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002be8:	2000      	movs	r0, #0
 8002bea:	e028      	b.n	8002c3e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bec:	4c8f      	ldr	r4, [pc, #572]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_OscConfig+0x5e>
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	03de      	lsls	r6, r3, #15
 8002c06:	d506      	bpl.n	8002c16 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	039c      	lsls	r4, r3, #14
 8002c0c:	d5dd      	bpl.n	8002bca <HAL_RCC_OscConfig+0x12>
 8002c0e:	686b      	ldr	r3, [r5, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1da      	bne.n	8002bca <HAL_RCC_OscConfig+0x12>
 8002c14:	e7d4      	b.n	8002bc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	686b      	ldr	r3, [r5, #4]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x8c>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c26:	f7ff fb4f 	bl	80022c8 <HAL_GetTick>
 8002c2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	0398      	lsls	r0, r3, #14
 8002c30:	d4cb      	bmi.n	8002bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c32:	f7ff fb49 	bl	80022c8 <HAL_GetTick>
 8002c36:	1b80      	subs	r0, r0, r6
 8002c38:	2864      	cmp	r0, #100	; 0x64
 8002c3a:	d9f7      	bls.n	8002c2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002c3c:	2003      	movs	r0, #3
}
 8002c3e:	b002      	add	sp, #8
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	b99b      	cbnz	r3, 8002c6e <HAL_RCC_OscConfig+0xb6>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c56:	f7ff fb37 	bl	80022c8 <HAL_GetTick>
 8002c5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	0399      	lsls	r1, r3, #14
 8002c60:	d5b3      	bpl.n	8002bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c62:	f7ff fb31 	bl	80022c8 <HAL_GetTick>
 8002c66:	1b80      	subs	r0, r0, r6
 8002c68:	2864      	cmp	r0, #100	; 0x64
 8002c6a:	d9f7      	bls.n	8002c5c <HAL_RCC_OscConfig+0xa4>
 8002c6c:	e7e6      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	d103      	bne.n	8002c7e <HAL_RCC_OscConfig+0xc6>
 8002c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	e7cf      	b.n	8002c1e <HAL_RCC_OscConfig+0x66>
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	e7cb      	b.n	8002c24 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8c:	4c67      	ldr	r4, [pc, #412]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002c8e:	6863      	ldr	r3, [r4, #4]
 8002c90:	f013 0f0c 	tst.w	r3, #12
 8002c94:	d007      	beq.n	8002ca6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c96:	6863      	ldr	r3, [r4, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d110      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x10a>
 8002ca0:	6863      	ldr	r3, [r4, #4]
 8002ca2:	03da      	lsls	r2, r3, #15
 8002ca4:	d40d      	bmi.n	8002cc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	079b      	lsls	r3, r3, #30
 8002caa:	d502      	bpl.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
 8002cac:	692b      	ldr	r3, [r5, #16]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d186      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	696a      	ldr	r2, [r5, #20]
 8002cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	e786      	b.n	8002bd0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc2:	692a      	ldr	r2, [r5, #16]
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x278>)
 8002cc6:	b16a      	cbz	r2, 8002ce4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fafc 	bl	80022c8 <HAL_GetTick>
 8002cd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	079f      	lsls	r7, r3, #30
 8002cd6:	d4ec      	bmi.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7ff faf6 	bl	80022c8 <HAL_GetTick>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	2802      	cmp	r0, #2
 8002ce0:	d9f7      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x11a>
 8002ce2:	e7ab      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ce6:	f7ff faef 	bl	80022c8 <HAL_GetTick>
 8002cea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	0798      	lsls	r0, r3, #30
 8002cf0:	f57f af6e 	bpl.w	8002bd0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7ff fae8 	bl	80022c8 <HAL_GetTick>
 8002cf8:	1b80      	subs	r0, r0, r6
 8002cfa:	2802      	cmp	r0, #2
 8002cfc:	d9f6      	bls.n	8002cec <HAL_RCC_OscConfig+0x134>
 8002cfe:	e79d      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d00:	69aa      	ldr	r2, [r5, #24]
 8002d02:	4c4a      	ldr	r4, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d04:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	b1da      	cbz	r2, 8002d40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d0c:	f7ff fadc 	bl	80022c8 <HAL_GetTick>
 8002d10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d14:	079b      	lsls	r3, r3, #30
 8002d16:	d50d      	bpl.n	8002d34 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d24:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002d26:	bf00      	nop
  }
  while (Delay --);
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	9201      	str	r2, [sp, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f9      	bne.n	8002d26 <HAL_RCC_OscConfig+0x16e>
 8002d32:	e751      	b.n	8002bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff fac8 	bl	80022c8 <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	2802      	cmp	r0, #2
 8002d3c:	d9e9      	bls.n	8002d12 <HAL_RCC_OscConfig+0x15a>
 8002d3e:	e77d      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002d40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d42:	f7ff fac1 	bl	80022c8 <HAL_GetTick>
 8002d46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d4a:	079f      	lsls	r7, r3, #30
 8002d4c:	f57f af44 	bpl.w	8002bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d50:	f7ff faba 	bl	80022c8 <HAL_GetTick>
 8002d54:	1b80      	subs	r0, r0, r6
 8002d56:	2802      	cmp	r0, #2
 8002d58:	d9f6      	bls.n	8002d48 <HAL_RCC_OscConfig+0x190>
 8002d5a:	e76f      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4c33      	ldr	r4, [pc, #204]	; (8002e2c <HAL_RCC_OscConfig+0x274>)
 8002d5e:	69e3      	ldr	r3, [r4, #28]
 8002d60:	00d8      	lsls	r0, r3, #3
 8002d62:	d424      	bmi.n	8002dae <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002d64:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	69e3      	ldr	r3, [r4, #28]
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61e3      	str	r3, [r4, #28]
 8002d6e:	69e3      	ldr	r3, [r4, #28]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4e30      	ldr	r6, [pc, #192]	; (8002e3c <HAL_RCC_OscConfig+0x284>)
 8002d7a:	6833      	ldr	r3, [r6, #0]
 8002d7c:	05d9      	lsls	r1, r3, #23
 8002d7e:	d518      	bpl.n	8002db2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	68eb      	ldr	r3, [r5, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d126      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x21c>
 8002d86:	6a23      	ldr	r3, [r4, #32]
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fa9b 	bl	80022c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d96:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	6a23      	ldr	r3, [r4, #32]
 8002d9a:	079b      	lsls	r3, r3, #30
 8002d9c:	d53f      	bpl.n	8002e1e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002d9e:	2f00      	cmp	r7, #0
 8002da0:	f43f af1e 	beq.w	8002be0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	69e3      	ldr	r3, [r4, #28]
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002daa:	61e3      	str	r3, [r4, #28]
 8002dac:	e718      	b.n	8002be0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2700      	movs	r7, #0
 8002db0:	e7e2      	b.n	8002d78 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	6833      	ldr	r3, [r6, #0]
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002dba:	f7ff fa85 	bl	80022c8 <HAL_GetTick>
 8002dbe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	6833      	ldr	r3, [r6, #0]
 8002dc2:	05da      	lsls	r2, r3, #23
 8002dc4:	d4dc      	bmi.n	8002d80 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7ff fa7f 	bl	80022c8 <HAL_GetTick>
 8002dca:	eba0 0008 	sub.w	r0, r0, r8
 8002dce:	2864      	cmp	r0, #100	; 0x64
 8002dd0:	d9f6      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x208>
 8002dd2:	e733      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd4:	b9ab      	cbnz	r3, 8002e02 <HAL_RCC_OscConfig+0x24a>
 8002dd6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6223      	str	r3, [r4, #32]
 8002de2:	6a23      	ldr	r3, [r4, #32]
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002dea:	f7ff fa6d 	bl	80022c8 <HAL_GetTick>
 8002dee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	6a23      	ldr	r3, [r4, #32]
 8002df2:	0798      	lsls	r0, r3, #30
 8002df4:	d5d3      	bpl.n	8002d9e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7ff fa67 	bl	80022c8 <HAL_GetTick>
 8002dfa:	1b80      	subs	r0, r0, r6
 8002dfc:	4540      	cmp	r0, r8
 8002dfe:	d9f7      	bls.n	8002df0 <HAL_RCC_OscConfig+0x238>
 8002e00:	e71c      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	6a23      	ldr	r3, [r4, #32]
 8002e06:	d103      	bne.n	8002e10 <HAL_RCC_OscConfig+0x258>
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6223      	str	r3, [r4, #32]
 8002e0e:	e7ba      	b.n	8002d86 <HAL_RCC_OscConfig+0x1ce>
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6223      	str	r3, [r4, #32]
 8002e16:	6a23      	ldr	r3, [r4, #32]
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	e7b6      	b.n	8002d8c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7ff fa53 	bl	80022c8 <HAL_GetTick>
 8002e22:	eba0 0008 	sub.w	r0, r0, r8
 8002e26:	42b0      	cmp	r0, r6
 8002e28:	d9b6      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1e0>
 8002e2a:	e707      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	42420000 	.word	0x42420000
 8002e34:	42420480 	.word	0x42420480
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x334>)
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	461c      	mov	r4, r3
 8002e46:	f002 020c 	and.w	r2, r2, #12
 8002e4a:	2a08      	cmp	r2, #8
 8002e4c:	d03d      	beq.n	8002eca <HAL_RCC_OscConfig+0x312>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4e27      	ldr	r6, [pc, #156]	; (8002ef0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002e54:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e56:	d12b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002e58:	f7ff fa36 	bl	80022c8 <HAL_GetTick>
 8002e5c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	0199      	lsls	r1, r3, #6
 8002e62:	d41f      	bmi.n	8002ea4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e64:	6a2b      	ldr	r3, [r5, #32]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e6c:	6862      	ldr	r2, [r4, #4]
 8002e6e:	68a9      	ldr	r1, [r5, #8]
 8002e70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002e74:	430a      	orrs	r2, r1
 8002e76:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002e7a:	6862      	ldr	r2, [r4, #4]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002e82:	4313      	orrs	r3, r2
 8002e84:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e86:	2301      	movs	r3, #1
 8002e88:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e8a:	f7ff fa1d 	bl	80022c8 <HAL_GetTick>
 8002e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	f53f aea8 	bmi.w	8002be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7ff fa16 	bl	80022c8 <HAL_GetTick>
 8002e9c:	1b40      	subs	r0, r0, r5
 8002e9e:	2802      	cmp	r0, #2
 8002ea0:	d9f6      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2d8>
 8002ea2:	e6cb      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7ff fa10 	bl	80022c8 <HAL_GetTick>
 8002ea8:	1bc0      	subs	r0, r0, r7
 8002eaa:	2802      	cmp	r0, #2
 8002eac:	d9d7      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2a6>
 8002eae:	e6c5      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fa0a 	bl	80022c8 <HAL_GetTick>
 8002eb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	019b      	lsls	r3, r3, #6
 8002eba:	f57f ae95 	bpl.w	8002be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7ff fa03 	bl	80022c8 <HAL_GetTick>
 8002ec2:	1b40      	subs	r0, r0, r5
 8002ec4:	2802      	cmp	r0, #2
 8002ec6:	d9f6      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x2fe>
 8002ec8:	e6b8      	b.n	8002c3c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eca:	2801      	cmp	r0, #1
 8002ecc:	f43f aeb7 	beq.w	8002c3e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002ed0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	6a2b      	ldr	r3, [r5, #32]
 8002ed4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f47f ae71 	bne.w	8002bc0 <HAL_RCC_OscConfig+0x8>
 8002ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002ee4:	1ac0      	subs	r0, r0, r3
 8002ee6:	bf18      	it	ne
 8002ee8:	2001      	movne	r0, #1
 8002eea:	e6a8      	b.n	8002c3e <HAL_RCC_OscConfig+0x86>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420060 	.word	0x42420060

08002ef4 <HAL_RCC_GetSysClockFreq>:
{
 8002ef4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002ef8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002efa:	ac02      	add	r4, sp, #8
 8002efc:	f103 0510 	add.w	r5, r3, #16
 8002f00:	4622      	mov	r2, r4
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	3308      	adds	r3, #8
 8002f08:	c203      	stmia	r2!, {r0, r1}
 8002f0a:	42ab      	cmp	r3, r5
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	d1f7      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f10:	2301      	movs	r3, #1
 8002f12:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f16:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f1a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002f1e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002f20:	f003 020c 	and.w	r2, r3, #12
 8002f24:	2a08      	cmp	r2, #8
 8002f26:	d117      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f28:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002f2c:	a806      	add	r0, sp, #24
 8002f2e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f30:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f32:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f36:	d50c      	bpl.n	8002f52 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f38:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f3a:	480a      	ldr	r0, [pc, #40]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f40:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f42:	aa06      	add	r2, sp, #24
 8002f44:	4413      	add	r3, r2
 8002f46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002f4e:	b007      	add	sp, #28
 8002f50:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x74>)
 8002f54:	4350      	muls	r0, r2
 8002f56:	e7fa      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002f5a:	e7f8      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x5a>
 8002f5c:	080056d0 	.word	0x080056d0
 8002f60:	40021000 	.word	0x40021000
 8002f64:	007a1200 	.word	0x007a1200
 8002f68:	003d0900 	.word	0x003d0900

08002f6c <HAL_RCC_ClockConfig>:
{
 8002f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f70:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002f72:	4604      	mov	r4, r0
 8002f74:	b910      	cbnz	r0, 8002f7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002f76:	2001      	movs	r0, #1
 8002f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_RCC_ClockConfig+0x128>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	428b      	cmp	r3, r1
 8002f86:	d329      	bcc.n	8002fdc <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	6821      	ldr	r1, [r4, #0]
 8002f8a:	078e      	lsls	r6, r1, #30
 8002f8c:	d431      	bmi.n	8002ff2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8e:	07ca      	lsls	r2, r1, #31
 8002f90:	d444      	bmi.n	800301c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f92:	4a40      	ldr	r2, [pc, #256]	; (8003094 <HAL_RCC_ClockConfig+0x128>)
 8002f94:	6813      	ldr	r3, [r2, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	429d      	cmp	r5, r3
 8002f9c:	d367      	bcc.n	800306e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	4d3d      	ldr	r5, [pc, #244]	; (8003098 <HAL_RCC_ClockConfig+0x12c>)
 8002fa2:	f012 0f04 	tst.w	r2, #4
 8002fa6:	d16e      	bne.n	8003086 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	0713      	lsls	r3, r2, #28
 8002faa:	d506      	bpl.n	8002fba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fac:	686b      	ldr	r3, [r5, #4]
 8002fae:	6922      	ldr	r2, [r4, #16]
 8002fb0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fb4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fb8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fba:	f7ff ff9b 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002fbe:	686b      	ldr	r3, [r5, #4]
 8002fc0:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x130>)
 8002fc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	40d8      	lsrs	r0, r3
 8002fca:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_RCC_ClockConfig+0x134>)
 8002fcc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002fce:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_RCC_ClockConfig+0x138>)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	f7ff f885 	bl	80020e0 <HAL_InitTick>
  return HAL_OK;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4299      	cmp	r1, r3
 8002fee:	d1c2      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xa>
 8002ff0:	e7ca      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1c>
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	bf1e      	ittt	ne
 8002ffa:	685a      	ldrne	r2, [r3, #4]
 8002ffc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003000:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	bf42      	ittt	mi
 8003006:	685a      	ldrmi	r2, [r3, #4]
 8003008:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800300c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68a0      	ldr	r0, [r4, #8]
 8003012:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003016:	4302      	orrs	r2, r0
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	e7b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301c:	6862      	ldr	r2, [r4, #4]
 800301e:	4e1e      	ldr	r6, [pc, #120]	; (8003098 <HAL_RCC_ClockConfig+0x12c>)
 8003020:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003024:	d11b      	bne.n	800305e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	d0a4      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	4313      	orrs	r3, r2
 8003038:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800303a:	f7ff f945 	bl	80022c8 <HAL_GetTick>
 800303e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003040:	6873      	ldr	r3, [r6, #4]
 8003042:	6862      	ldr	r2, [r4, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800304c:	d0a1      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7ff f93b 	bl	80022c8 <HAL_GetTick>
 8003052:	1bc0      	subs	r0, r0, r7
 8003054:	4540      	cmp	r0, r8
 8003056:	d9f3      	bls.n	8003040 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8003058:	2003      	movs	r0, #3
}
 800305a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	2a02      	cmp	r2, #2
 8003060:	d102      	bne.n	8003068 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003066:	e7e0      	b.n	800302a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	f013 0f02 	tst.w	r3, #2
 800306c:	e7dd      	b.n	800302a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	f023 0307 	bic.w	r3, r3, #7
 8003074:	432b      	orrs	r3, r5
 8003076:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	429d      	cmp	r5, r3
 8003080:	f47f af79 	bne.w	8002f76 <HAL_RCC_ClockConfig+0xa>
 8003084:	e78b      	b.n	8002f9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003086:	686b      	ldr	r3, [r5, #4]
 8003088:	68e1      	ldr	r1, [r4, #12]
 800308a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800308e:	430b      	orrs	r3, r1
 8003090:	606b      	str	r3, [r5, #4]
 8003092:	e789      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x3c>
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	08005703 	.word	0x08005703
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000008 	.word	0x20000008

080030a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	4a03      	ldr	r2, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030b6:	6810      	ldr	r0, [r2, #0]
}
 80030b8:	40d8      	lsrs	r0, r3
 80030ba:	4770      	bx	lr
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08005713 	.word	0x08005713
 80030c4:	20000000 	.word	0x20000000

080030c8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80030d6:	6810      	ldr	r0, [r2, #0]
}
 80030d8:	40d8      	lsrs	r0, r3
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08005713 	.word	0x08005713
 80030e4:	20000000 	.word	0x20000000

080030e8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e8:	230f      	movs	r3, #15
 80030ea:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_GetClockConfig+0x34>)
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	f002 0203 	and.w	r2, r2, #3
 80030f4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80030fc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003104:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800310e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_GetClockConfig+0x38>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	600b      	str	r3, [r1, #0]
 800311a:	4770      	bx	lr
 800311c:	40021000 	.word	0x40021000
 8003120:	40022000 	.word	0x40022000

08003124 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003124:	6803      	ldr	r3, [r0, #0]
{
 8003126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312a:	07d9      	lsls	r1, r3, #31
{
 800312c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312e:	d520      	bpl.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003130:	4c35      	ldr	r4, [pc, #212]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003132:	69e3      	ldr	r3, [r4, #28]
 8003134:	00da      	lsls	r2, r3, #3
 8003136:	d432      	bmi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003138:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	69e3      	ldr	r3, [r4, #28]
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	61e3      	str	r3, [r4, #28]
 8003142:	69e3      	ldr	r3, [r4, #28]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4e2f      	ldr	r6, [pc, #188]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800314e:	6833      	ldr	r3, [r6, #0]
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	d526      	bpl.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003154:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003156:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800315a:	d136      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315c:	6a23      	ldr	r3, [r4, #32]
 800315e:	686a      	ldr	r2, [r5, #4]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	4313      	orrs	r3, r2
 8003166:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003168:	b11f      	cbz	r7, 8003172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	69e3      	ldr	r3, [r4, #28]
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003170:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003172:	6828      	ldr	r0, [r5, #0]
 8003174:	0783      	lsls	r3, r0, #30
 8003176:	d506      	bpl.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4a23      	ldr	r2, [pc, #140]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800317a:	68a9      	ldr	r1, [r5, #8]
 800317c:	6853      	ldr	r3, [r2, #4]
 800317e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003182:	430b      	orrs	r3, r1
 8003184:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003186:	f010 0010 	ands.w	r0, r0, #16
 800318a:	d01b      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800318e:	68e9      	ldr	r1, [r5, #12]
 8003190:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003192:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003194:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003198:	430b      	orrs	r3, r1
 800319a:	6053      	str	r3, [r2, #4]
 800319c:	e012      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2700      	movs	r7, #0
 80031a0:	e7d4      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	6833      	ldr	r3, [r6, #0]
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80031aa:	f7ff f88d 	bl	80022c8 <HAL_GetTick>
 80031ae:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	6833      	ldr	r3, [r6, #0]
 80031b2:	05d8      	lsls	r0, r3, #23
 80031b4:	d4ce      	bmi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7ff f887 	bl	80022c8 <HAL_GetTick>
 80031ba:	eba0 0008 	sub.w	r0, r0, r8
 80031be:	2864      	cmp	r0, #100	; 0x64
 80031c0:	d9f6      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80031c2:	2003      	movs	r0, #3
}
 80031c4:	b002      	add	sp, #8
 80031c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ca:	686a      	ldr	r2, [r5, #4]
 80031cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d0c3      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d4:	2001      	movs	r0, #1
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031d8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80031da:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031dc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031e2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80031e4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031e6:	07d9      	lsls	r1, r3, #31
 80031e8:	d5b8      	bpl.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80031ea:	f7ff f86d 	bl	80022c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80031f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	079a      	lsls	r2, r3, #30
 80031f8:	d4b0      	bmi.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7ff f865 	bl	80022c8 <HAL_GetTick>
 80031fe:	1b80      	subs	r0, r0, r6
 8003200:	4540      	cmp	r0, r8
 8003202:	d9f7      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003204:	e7dd      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	42420440 	.word	0x42420440

08003214 <HAL_TIM_Base_MspInit>:
 8003214:	4770      	bx	lr
	...

08003218 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800321c:	2b01      	cmp	r3, #1
 800321e:	d120      	bne.n	8003262 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	2302      	movs	r3, #2
 8003222:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_TIM_Base_Start_IT+0x50>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00a      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x34>
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d007      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x34>
 800323c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x34>
 8003244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003248:	4293      	cmp	r3, r2
 800324a:	d104      	bne.n	8003256 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	2a06      	cmp	r2, #6
 8003254:	d003      	beq.n	800325e <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2000      	movs	r0, #0
}
 8003260:	4770      	bx	lr
    return HAL_ERROR;
 8003262:	2001      	movs	r0, #1
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00

0800326c <HAL_TIM_OC_DelayElapsedCallback>:
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_IC_CaptureCallback>:
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_TriggerCallback>:
 8003272:	4770      	bx	lr

08003274 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003274:	6803      	ldr	r3, [r0, #0]
{
 8003276:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003278:	691a      	ldr	r2, [r3, #16]
{
 800327a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800327c:	0791      	lsls	r1, r2, #30
 800327e:	d50e      	bpl.n	800329e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	0792      	lsls	r2, r2, #30
 8003284:	d50b      	bpl.n	800329e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003286:	f06f 0202 	mvn.w	r2, #2
 800328a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003290:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003292:	079b      	lsls	r3, r3, #30
 8003294:	d077      	beq.n	8003386 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003296:	f7ff ffea 	bl	800326e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	2300      	movs	r3, #0
 800329c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	0750      	lsls	r0, r2, #29
 80032a4:	d510      	bpl.n	80032c8 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	0751      	lsls	r1, r2, #29
 80032aa:	d50d      	bpl.n	80032c8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ac:	f06f 0204 	mvn.w	r2, #4
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b2:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032be:	d068      	beq.n	8003392 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80032c0:	f7ff ffd5 	bl	800326e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	2300      	movs	r3, #0
 80032c6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	0712      	lsls	r2, r2, #28
 80032ce:	d50f      	bpl.n	80032f0 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	0710      	lsls	r0, r2, #28
 80032d4:	d50c      	bpl.n	80032f0 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d6:	f06f 0208 	mvn.w	r2, #8
 80032da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032dc:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e2:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e6:	d05a      	beq.n	800339e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	f7ff ffc1 	bl	800326e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ec:	2300      	movs	r3, #0
 80032ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	06d2      	lsls	r2, r2, #27
 80032f6:	d510      	bpl.n	800331a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	06d0      	lsls	r0, r2, #27
 80032fc:	d50d      	bpl.n	800331a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032fe:	f06f 0210 	mvn.w	r2, #16
 8003302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003304:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003306:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003308:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003310:	d04b      	beq.n	80033aa <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	f7ff ffac 	bl	800326e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	2300      	movs	r3, #0
 8003318:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	07d1      	lsls	r1, r2, #31
 8003320:	d508      	bpl.n	8003334 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	d505      	bpl.n	8003334 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003328:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800332e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003330:	f7fe fe96 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	0610      	lsls	r0, r2, #24
 800333a:	d508      	bpl.n	800334e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	0611      	lsls	r1, r2, #24
 8003340:	d505      	bpl.n	800334e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003342:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003348:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800334a:	f000 f89a 	bl	8003482 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	0652      	lsls	r2, r2, #25
 8003354:	d508      	bpl.n	8003368 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	0650      	lsls	r0, r2, #25
 800335a:	d505      	bpl.n	8003368 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800335c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003360:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003362:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003364:	f7ff ff85 	bl	8003272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	0691      	lsls	r1, r2, #26
 800336e:	d522      	bpl.n	80033b6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	0692      	lsls	r2, r2, #26
 8003374:	d51f      	bpl.n	80033b6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003376:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800337a:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003380:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003382:	f000 b87d 	b.w	8003480 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	f7ff ff71 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff70 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 8003390:	e783      	b.n	800329a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	f7ff ff6b 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff6a 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 800339c:	e792      	b.n	80032c4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	f7ff ff65 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff ff64 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 80033a8:	e7a0      	b.n	80032ec <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	f7ff ff5f 	bl	800326c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff ff5e 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 80033b4:	e7af      	b.n	8003316 <HAL_TIM_IRQHandler+0xa2>
 80033b6:	bd10      	pop	{r4, pc}

080033b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b8:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80033ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033bc:	4290      	cmp	r0, r2
 80033be:	d00a      	beq.n	80033d6 <TIM_Base_SetConfig+0x1e>
 80033c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0x1e>
 80033c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0x1e>
 80033ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d2:	4290      	cmp	r0, r2
 80033d4:	d115      	bne.n	8003402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80033d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	4a11      	ldr	r2, [pc, #68]	; (8003424 <TIM_Base_SetConfig+0x6c>)
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d00a      	beq.n	80033fa <TIM_Base_SetConfig+0x42>
 80033e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0x42>
 80033ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033ee:	4290      	cmp	r0, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0x42>
 80033f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f6:	4290      	cmp	r0, r2
 80033f8:	d103      	bne.n	8003402 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003400:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003402:	694a      	ldr	r2, [r1, #20]
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800340a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	688b      	ldr	r3, [r1, #8]
 800340e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	680b      	ldr	r3, [r1, #0]
 8003412:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <TIM_Base_SetConfig+0x6c>)
 8003416:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003418:	bf04      	itt	eq
 800341a:	690b      	ldreq	r3, [r1, #16]
 800341c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341e:	2301      	movs	r3, #1
 8003420:	6143      	str	r3, [r0, #20]
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00

08003428 <HAL_TIM_Base_Init>:
{
 8003428:	b510      	push	{r4, lr}
  if (htim == NULL)
 800342a:	4604      	mov	r4, r0
 800342c:	b330      	cbz	r0, 800347c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003432:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003436:	b91b      	cbnz	r3, 8003440 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003438:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800343c:	f7ff feea 	bl	8003214 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	1d21      	adds	r1, r4, #4
 800344a:	f7ff ffb5 	bl	80033b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344e:	2301      	movs	r3, #1
  return HAL_OK;
 8003450:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003452:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800345a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800345e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003462:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800346a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800346e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800347a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	bd10      	pop	{r4, pc}

08003480 <HAL_TIMEx_CommutCallback>:
 8003480:	4770      	bx	lr

08003482 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003482:	4770      	bx	lr

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003488:	6803      	ldr	r3, [r0, #0]
 800348a:	68c1      	ldr	r1, [r0, #12]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003496:	6882      	ldr	r2, [r0, #8]
 8003498:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800349a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800349c:	4302      	orrs	r2, r0
 800349e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80034a0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80034a4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80034aa:	430a      	orrs	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	69a1      	ldr	r1, [r4, #24]
 80034b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034b6:	430a      	orrs	r2, r1
 80034b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <UART_SetConfig+0x70>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d115      	bne.n	80034ec <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034c0:	f7ff fe02 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c4:	2319      	movs	r3, #25
 80034c6:	4358      	muls	r0, r3
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	2264      	movs	r2, #100	; 0x64
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80034d2:	fbb0 f1f2 	udiv	r1, r0, r2
 80034d6:	fb02 0311 	mls	r3, r2, r1, r0
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e2:	6825      	ldr	r5, [r4, #0]
 80034e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80034e8:	60ab      	str	r3, [r5, #8]
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7ff fddc 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 80034f0:	e7e8      	b.n	80034c4 <UART_SetConfig+0x40>
 80034f2:	bf00      	nop
 80034f4:	40013800 	.word	0x40013800

080034f8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	460e      	mov	r6, r1
 80034fe:	4617      	mov	r7, r2
 8003500:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003502:	6821      	ldr	r1, [r4, #0]
 8003504:	680b      	ldr	r3, [r1, #0]
 8003506:	ea36 0303 	bics.w	r3, r6, r3
 800350a:	d101      	bne.n	8003510 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800350c:	2000      	movs	r0, #0
}
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003510:	1c6b      	adds	r3, r5, #1
 8003512:	d0f7      	beq.n	8003504 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003514:	b995      	cbnz	r5, 800353c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003516:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003518:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003520:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800352a:	2320      	movs	r3, #32
 800352c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003530:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003534:	2300      	movs	r3, #0
 8003536:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800353c:	f7fe fec4 	bl	80022c8 <HAL_GetTick>
 8003540:	1bc0      	subs	r0, r0, r7
 8003542:	4285      	cmp	r5, r0
 8003544:	d2dd      	bcs.n	8003502 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003546:	e7e6      	b.n	8003516 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003548 <HAL_UART_Init>:
{
 8003548:	b510      	push	{r4, lr}
  if (huart == NULL)
 800354a:	4604      	mov	r4, r0
 800354c:	b340      	cbz	r0, 80035a0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003552:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003556:	b91b      	cbnz	r3, 8003560 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003558:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800355c:	f7fe fe5a 	bl	8002214 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003562:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003564:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003568:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800356a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800356c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003570:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003572:	f7ff ff87 	bl	8003484 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003576:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003588:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003590:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003592:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003596:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800359a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800359e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
}
 80035a2:	bd10      	pop	{r4, pc}

080035a4 <HAL_UART_Transmit>:
{
 80035a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80035aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80035ae:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80035b0:	2b20      	cmp	r3, #32
{
 80035b2:	460e      	mov	r6, r1
 80035b4:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	d14c      	bne.n	8003652 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d047      	beq.n	800364c <HAL_UART_Transmit+0xa8>
 80035bc:	2a00      	cmp	r2, #0
 80035be:	d045      	beq.n	800364c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80035c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d044      	beq.n	8003652 <HAL_UART_Transmit+0xae>
 80035c8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80035cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80035d8:	f7fe fe76 	bl	80022c8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80035de:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80035e4:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80035e8:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	d103      	bne.n	80035f6 <HAL_UART_Transmit+0x52>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	b90b      	cbnz	r3, 80035f6 <HAL_UART_Transmit+0x52>
 80035f2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80035f4:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80035f6:	2300      	movs	r3, #0
 80035f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80035fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b95b      	cbnz	r3, 800361a <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	4643      	mov	r3, r8
 8003604:	463a      	mov	r2, r7
 8003606:	2140      	movs	r1, #64	; 0x40
 8003608:	4620      	mov	r0, r4
 800360a:	f7ff ff75 	bl	80034f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800360e:	b958      	cbnz	r0, 8003628 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8003610:	2320      	movs	r3, #32
 8003612:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800361a:	4643      	mov	r3, r8
 800361c:	463a      	mov	r2, r7
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	4620      	mov	r0, r4
 8003622:	f7ff ff69 	bl	80034f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003626:	b110      	cbz	r0, 800362e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8003628:	2003      	movs	r0, #3
 800362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003630:	b94e      	cbnz	r6, 8003646 <HAL_UART_Transmit+0xa2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003632:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003636:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800363a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800363c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800363e:	3b01      	subs	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003644:	e7da      	b.n	80035fc <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003646:	f816 3b01 	ldrb.w	r3, [r6], #1
 800364a:	e7f6      	b.n	800363a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 800364c:	2001      	movs	r0, #1
 800364e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8003652:	2002      	movs	r0, #2
}
 8003654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003658 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003658:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800365a:	f000 fc5d 	bl	8003f18 <vTaskStartScheduler>
  
  return osOK;
}
 800365e:	2000      	movs	r0, #0
 8003660:	bd08      	pop	{r3, pc}

08003662 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003662:	b570      	push	{r4, r5, r6, lr}
 8003664:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003666:	6946      	ldr	r6, [r0, #20]
{
 8003668:	460b      	mov	r3, r1
 800366a:	b086      	sub	sp, #24
 800366c:	6840      	ldr	r0, [r0, #4]
 800366e:	6829      	ldr	r1, [r5, #0]
 8003670:	692a      	ldr	r2, [r5, #16]
 8003672:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003676:	b176      	cbz	r6, 8003696 <osThreadCreate+0x34>
 8003678:	69ad      	ldr	r5, [r5, #24]
 800367a:	b165      	cbz	r5, 8003696 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800367c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800367e:	bf0c      	ite	eq
 8003680:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8003682:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003684:	9502      	str	r5, [sp, #8]
 8003686:	e88d 0050 	stmia.w	sp, {r4, r6}
 800368a:	f000 fbe1 	bl	8003e50 <xTaskCreateStatic>
 800368e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003690:	9805      	ldr	r0, [sp, #20]
}
 8003692:	b006      	add	sp, #24
 8003694:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003696:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003698:	bf0c      	ite	eq
 800369a:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800369c:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800369e:	ad05      	add	r5, sp, #20
 80036a0:	b292      	uxth	r2, r2
 80036a2:	e88d 0030 	stmia.w	sp, {r4, r5}
 80036a6:	f000 fc0a 	bl	8003ebe <xTaskCreate>
 80036aa:	2801      	cmp	r0, #1
 80036ac:	d0f0      	beq.n	8003690 <osThreadCreate+0x2e>
      return NULL;
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7ef      	b.n	8003692 <osThreadCreate+0x30>

080036b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036b2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036b4:	2800      	cmp	r0, #0
 80036b6:	bf08      	it	eq
 80036b8:	2001      	moveq	r0, #1
 80036ba:	f000 fd75 	bl	80041a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036be:	2000      	movs	r0, #0
 80036c0:	bd08      	pop	{r3, pc}

080036c2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c2:	f100 0308 	add.w	r3, r0, #8
 80036c6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036d0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036d2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036d4:	6003      	str	r3, [r0, #0]
 80036d6:	4770      	bx	lr

080036d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	6103      	str	r3, [r0, #16]
 80036dc:	4770      	bx	lr

080036de <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80036de:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036e0:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80036e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036e4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80036ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80036f0:	3301      	adds	r3, #1
 80036f2:	6003      	str	r3, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036f6:	680a      	ldr	r2, [r1, #0]
{
 80036f8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036fa:	1c53      	adds	r3, r2, #1
 80036fc:	d10a      	bne.n	8003714 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036fe:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003704:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003706:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003708:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800370a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800370c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800370e:	3301      	adds	r3, #1
 8003710:	6003      	str	r3, [r0, #0]
 8003712:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003714:	f100 0308 	add.w	r3, r0, #8
 8003718:	685c      	ldr	r4, [r3, #4]
 800371a:	6825      	ldr	r5, [r4, #0]
 800371c:	42aa      	cmp	r2, r5
 800371e:	d3ef      	bcc.n	8003700 <vListInsert+0xa>
 8003720:	4623      	mov	r3, r4
 8003722:	e7f9      	b.n	8003718 <vListInsert+0x22>

08003724 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003724:	6841      	ldr	r1, [r0, #4]
 8003726:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003728:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800372a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800372c:	6882      	ldr	r2, [r0, #8]
 800372e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003734:	bf08      	it	eq
 8003736:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003738:	2200      	movs	r2, #0
 800373a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	3a01      	subs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003742:	6818      	ldr	r0, [r3, #0]
}
 8003744:	4770      	bx	lr
	...

08003748 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8003748:	2300      	movs	r3, #0
{
 800374a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800374c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <prvTaskExitError+0x3c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	d008      	beq.n	8003768 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	e7fe      	b.n	8003766 <prvTaskExitError+0x1e>
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0fc      	beq.n	8003778 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800377e:	b002      	add	sp, #8
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c

08003788 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003788:	4806      	ldr	r0, [pc, #24]	; (80037a4 <prvPortStartFirstTask+0x1c>)
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	6800      	ldr	r0, [r0, #0]
 800378e:	f380 8808 	msr	MSP, r0
 8003792:	b662      	cpsie	i
 8003794:	b661      	cpsie	f
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	df00      	svc	0
 80037a0:	bf00      	nop
 80037a2:	0000      	.short	0x0000
 80037a4:	e000ed08 	.word	0xe000ed08

080037a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037b2:	f021 0101 	bic.w	r1, r1, #1
 80037b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037be:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80037c2:	3840      	subs	r0, #64	; 0x40
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	08003749 	.word	0x08003749
 80037cc:	00000000 	.word	0x00000000

080037d0 <SVC_Handler>:
	__asm volatile (
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <pxCurrentTCBConst2>)
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	6808      	ldr	r0, [r1, #0]
 80037d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037da:	f380 8809 	msr	PSP, r0
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f380 8811 	msr	BASEPRI, r0
 80037ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80037ee:	4770      	bx	lr

080037f0 <pxCurrentTCBConst2>:
 80037f0:	20000f18 	.word	0x20000f18

080037f4 <vPortEnterCritical>:
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <vPortEnterCritical+0x3c>)
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800380a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800380c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800380e:	d10d      	bne.n	800382c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <vPortEnterCritical+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003818:	d008      	beq.n	800382c <vPortEnterCritical+0x38>
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	e7fe      	b.n	800382a <vPortEnterCritical+0x36>
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <vPortExitCritical+0x24>)
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	b943      	cbnz	r3, 8003850 <vPortExitCritical+0x18>
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	e7fe      	b.n	800384e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003850:	3b01      	subs	r3, #1
 8003852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003854:	b90b      	cbnz	r3, 800385a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	4770      	bx	lr
 800385c:	2000000c 	.word	0x2000000c

08003860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003860:	f3ef 8009 	mrs	r0, PSP
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <pxCurrentTCBConst>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003870:	6010      	str	r0, [r2, #0]
 8003872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800387a:	f380 8811 	msr	BASEPRI, r0
 800387e:	f000 fcb7 	bl	80041f0 <vTaskSwitchContext>
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	6808      	ldr	r0, [r1, #0]
 8003892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003896:	f380 8809 	msr	PSP, r0
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	4770      	bx	lr

080038a0 <pxCurrentTCBConst>:
 80038a0:	20000f18 	.word	0x20000f18

080038a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038a4:	b508      	push	{r3, lr}
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038b6:	f000 fb6d 	bl	8003f94 <xTaskIncrementTick>
 80038ba:	b118      	cbz	r0, 80038c4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <SysTick_Handler+0x28>)
 80038c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80038c4:	2300      	movs	r3, #0
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	bd08      	pop	{r3, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038d4:	4908      	ldr	r1, [pc, #32]	; (80038f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038d8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <vPortSetupTimerInterrupt+0x2c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e6:	4906      	ldr	r1, [pc, #24]	; (8003900 <vPortSetupTimerInterrupt+0x30>)
 80038e8:	3b01      	subs	r3, #1
 80038ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ec:	2307      	movs	r3, #7
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010
 80038f8:	e000e018 	.word	0xe000e018
 80038fc:	20000000 	.word	0x20000000
 8003900:	e000e014 	.word	0xe000e014

08003904 <xPortStartScheduler>:
{
 8003904:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003908:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003914:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003916:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800391e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003922:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003926:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003928:	2207      	movs	r2, #7
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <xPortStartScheduler+0xa8>)
 800392c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800392e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003932:	1e54      	subs	r4, r2, #1
 8003934:	0600      	lsls	r0, r0, #24
 8003936:	d40d      	bmi.n	8003954 <xPortStartScheduler+0x50>
 8003938:	b101      	cbz	r1, 800393c <xPortStartScheduler+0x38>
 800393a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2a03      	cmp	r2, #3
 8003940:	d011      	beq.n	8003966 <xPortStartScheduler+0x62>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	e7fe      	b.n	8003952 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003954:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003958:	2101      	movs	r1, #1
 800395a:	0052      	lsls	r2, r2, #1
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003962:	4622      	mov	r2, r4
 8003964:	e7e3      	b.n	800392e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003966:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003968:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800396a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800396e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003970:	9b01      	ldr	r3, [sp, #4]
 8003972:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <xPortStartScheduler+0xa0>)
 8003974:	b2db      	uxtb	r3, r3
 8003976:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <xPortStartScheduler+0xac>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003988:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800398a:	f7ff ffa1 	bl	80038d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <xPortStartScheduler+0xb0>)
 8003990:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003992:	f7ff fef9 	bl	8003788 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003996:	f000 fc2b 	bl	80041f0 <vTaskSwitchContext>
	prvTaskExitError();
 800399a:	f7ff fed5 	bl	8003748 <prvTaskExitError>
}
 800399e:	4620      	mov	r0, r4
 80039a0:	b002      	add	sp, #8
 80039a2:	bd10      	pop	{r4, pc}
 80039a4:	e000e400 	.word	0xe000e400
 80039a8:	200002f8 	.word	0x200002f8
 80039ac:	200002fc 	.word	0x200002fc
 80039b0:	e000ed20 	.word	0xe000ed20
 80039b4:	2000000c 	.word	0x2000000c

080039b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039b8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <prvInsertBlockIntoFreeList+0x40>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4282      	cmp	r2, r0
 80039c0:	d318      	bcc.n	80039f4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039c2:	685c      	ldr	r4, [r3, #4]
 80039c4:	1919      	adds	r1, r3, r4
 80039c6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039c8:	bf01      	itttt	eq
 80039ca:	6841      	ldreq	r1, [r0, #4]
 80039cc:	4618      	moveq	r0, r3
 80039ce:	1909      	addeq	r1, r1, r4
 80039d0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039d2:	6844      	ldr	r4, [r0, #4]
 80039d4:	1901      	adds	r1, r0, r4
 80039d6:	428a      	cmp	r2, r1
 80039d8:	d107      	bne.n	80039ea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <prvInsertBlockIntoFreeList+0x44>)
 80039dc:	6809      	ldr	r1, [r1, #0]
 80039de:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039e0:	bf1f      	itttt	ne
 80039e2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039e4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039e6:	1909      	addne	r1, r1, r4
 80039e8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039ea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039ec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039ee:	bf18      	it	ne
 80039f0:	6018      	strne	r0, [r3, #0]
 80039f2:	bd10      	pop	{r4, pc}
 80039f4:	4613      	mov	r3, r2
 80039f6:	e7e1      	b.n	80039bc <prvInsertBlockIntoFreeList+0x4>
 80039f8:	20000f10 	.word	0x20000f10
 80039fc:	20000300 	.word	0x20000300

08003a00 <pvPortMalloc>:
{
 8003a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003a06:	f000 fabd 	bl	8003f84 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003a0a:	493e      	ldr	r1, [pc, #248]	; (8003b04 <pvPortMalloc+0x104>)
 8003a0c:	4d3e      	ldr	r5, [pc, #248]	; (8003b08 <pvPortMalloc+0x108>)
 8003a0e:	680b      	ldr	r3, [r1, #0]
 8003a10:	bb0b      	cbnz	r3, 8003a56 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003a12:	4a3e      	ldr	r2, [pc, #248]	; (8003b0c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a14:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a16:	bf1d      	ittte	ne
 8003a18:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a1a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a1e:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a22:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a26:	bf1c      	itt	ne
 8003a28:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a2a:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8003a2c:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a2e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a30:	4e37      	ldr	r6, [pc, #220]	; (8003b10 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8003a32:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a34:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003a38:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a3a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003a3c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a3e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003a40:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a42:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a44:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a48:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a4a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a4c:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <pvPortMalloc+0x118>)
 8003a4e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a54:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a56:	682f      	ldr	r7, [r5, #0]
 8003a58:	4227      	tst	r7, r4
 8003a5a:	d116      	bne.n	8003a8a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8003a5c:	2c00      	cmp	r4, #0
 8003a5e:	d040      	beq.n	8003ae2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8003a60:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a64:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a66:	bf1c      	itt	ne
 8003a68:	f023 0307 	bicne.w	r3, r3, #7
 8003a6c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a6e:	b163      	cbz	r3, 8003a8a <pvPortMalloc+0x8a>
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <pvPortMalloc+0x118>)
 8003a72:	6816      	ldr	r6, [r2, #0]
 8003a74:	4690      	mov	r8, r2
 8003a76:	42b3      	cmp	r3, r6
 8003a78:	d807      	bhi.n	8003a8a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8003a7a:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <pvPortMalloc+0x110>)
 8003a7c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a7e:	6868      	ldr	r0, [r5, #4]
 8003a80:	4283      	cmp	r3, r0
 8003a82:	d804      	bhi.n	8003a8e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003a84:	6809      	ldr	r1, [r1, #0]
 8003a86:	428d      	cmp	r5, r1
 8003a88:	d107      	bne.n	8003a9a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8003a8a:	2400      	movs	r4, #0
 8003a8c:	e029      	b.n	8003ae2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a8e:	682c      	ldr	r4, [r5, #0]
 8003a90:	2c00      	cmp	r4, #0
 8003a92:	d0f7      	beq.n	8003a84 <pvPortMalloc+0x84>
 8003a94:	462a      	mov	r2, r5
 8003a96:	4625      	mov	r5, r4
 8003a98:	e7f1      	b.n	8003a7e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a9a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a9c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a9e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003aa0:	1ac2      	subs	r2, r0, r3
 8003aa2:	2a10      	cmp	r2, #16
 8003aa4:	d90f      	bls.n	8003ac6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003aa6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aa8:	0741      	lsls	r1, r0, #29
 8003aaa:	d008      	beq.n	8003abe <pvPortMalloc+0xbe>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	e7fe      	b.n	8003abc <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003abe:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ac0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ac2:	f7ff ff79 	bl	80039b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ac6:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ac8:	4912      	ldr	r1, [pc, #72]	; (8003b14 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003aca:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003acc:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8003ace:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ad0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ad2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ad6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ad8:	bf38      	it	cc
 8003ada:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003adc:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ade:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ae0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003ae2:	f000 fae9 	bl	80040b8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ae6:	0763      	lsls	r3, r4, #29
 8003ae8:	d008      	beq.n	8003afc <pvPortMalloc+0xfc>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	e7fe      	b.n	8003afa <pvPortMalloc+0xfa>
}
 8003afc:	4620      	mov	r0, r4
 8003afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b02:	bf00      	nop
 8003b04:	20000300 	.word	0x20000300
 8003b08:	20000f04 	.word	0x20000f04
 8003b0c:	20000304 	.word	0x20000304
 8003b10:	20000f10 	.word	0x20000f10
 8003b14:	20000f0c 	.word	0x20000f0c
 8003b18:	20000f08 	.word	0x20000f08

08003b1c <vPortFree>:
{
 8003b1c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003b1e:	4604      	mov	r4, r0
 8003b20:	b370      	cbz	r0, 8003b80 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <vPortFree+0x68>)
 8003b24:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	4213      	tst	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <vPortFree+0x24>
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	e7fe      	b.n	8003b3e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b40:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003b44:	b141      	cbz	r1, 8003b58 <vPortFree+0x3c>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	e7fe      	b.n	8003b56 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b58:	ea23 0302 	bic.w	r3, r3, r2
 8003b5c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003b60:	f000 fa10 	bl	8003f84 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <vPortFree+0x6c>)
 8003b66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003b6a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b6c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b70:	440b      	add	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b74:	f7ff ff20 	bl	80039b8 <prvInsertBlockIntoFreeList>
}
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003b7c:	f000 ba9c 	b.w	80040b8 <xTaskResumeAll>
 8003b80:	bd10      	pop	{r4, pc}
 8003b82:	bf00      	nop
 8003b84:	20000f04 	.word	0x20000f04
 8003b88:	20000f08 	.word	0x20000f08

08003b8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b92:	f7ff fe2f 	bl	80037f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003b98:	4c2d      	ldr	r4, [pc, #180]	; (8003c50 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4f2d      	ldr	r7, [pc, #180]	; (8003c54 <prvAddNewTaskToReadyList+0xc8>)
 8003b9e:	3201      	adds	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	2d00      	cmp	r5, #0
 8003ba6:	d145      	bne.n	8003c34 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ba8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d11c      	bne.n	8003bea <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb0:	1978      	adds	r0, r7, r5
 8003bb2:	3514      	adds	r5, #20
 8003bb4:	f7ff fd85 	bl	80036c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bb8:	2d8c      	cmp	r5, #140	; 0x8c
 8003bba:	d1f9      	bne.n	8003bb0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bbc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003c80 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003bc0:	4d25      	ldr	r5, [pc, #148]	; (8003c58 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f7ff fd7d 	bl	80036c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7ff fd7a 	bl	80036c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bce:	4823      	ldr	r0, [pc, #140]	; (8003c5c <prvAddNewTaskToReadyList+0xd0>)
 8003bd0:	f7ff fd77 	bl	80036c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bd4:	4822      	ldr	r0, [pc, #136]	; (8003c60 <prvAddNewTaskToReadyList+0xd4>)
 8003bd6:	f7ff fd74 	bl	80036c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bda:	4822      	ldr	r0, [pc, #136]	; (8003c64 <prvAddNewTaskToReadyList+0xd8>)
 8003bdc:	f7ff fd71 	bl	80036c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <prvAddNewTaskToReadyList+0xdc>)
 8003be2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <prvAddNewTaskToReadyList+0xe0>)
 8003be8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003bec:	4921      	ldr	r1, [pc, #132]	; (8003c74 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003bee:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003bf0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003bfa:	4093      	lsls	r3, r2
 8003bfc:	4303      	orrs	r3, r0
 8003bfe:	2014      	movs	r0, #20
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	fb00 7002 	mla	r0, r0, r2, r7
 8003c06:	1d31      	adds	r1, r6, #4
 8003c08:	f7ff fd69 	bl	80036de <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003c0c:	f7ff fe14 	bl	8003838 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <prvAddNewTaskToReadyList+0xec>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b163      	cbz	r3, 8003c30 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <prvAddNewTaskToReadyList+0xf0>)
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvAddNewTaskToReadyList+0xec>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1d6      	bne.n	8003bea <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003c42:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003c44:	bf98      	it	ls
 8003c46:	6026      	strls	r6, [r4, #0]
 8003c48:	e7cf      	b.n	8003bea <prvAddNewTaskToReadyList+0x5e>
 8003c4a:	bf00      	nop
 8003c4c:	20000fb0 	.word	0x20000fb0
 8003c50:	20000f18 	.word	0x20000f18
 8003c54:	20000f24 	.word	0x20000f24
 8003c58:	20000fdc 	.word	0x20000fdc
 8003c5c:	20000ff8 	.word	0x20000ff8
 8003c60:	20001024 	.word	0x20001024
 8003c64:	20001010 	.word	0x20001010
 8003c68:	20000f1c 	.word	0x20000f1c
 8003c6c:	20000f20 	.word	0x20000f20
 8003c70:	20000fc0 	.word	0x20000fc0
 8003c74:	20000fc4 	.word	0x20000fc4
 8003c78:	2000100c 	.word	0x2000100c
 8003c7c:	e000ed04 	.word	0xe000ed04
 8003c80:	20000fc8 	.word	0x20000fc8

08003c84 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <prvResetNextTaskUnblockTime+0x1c>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <prvResetNextTaskUnblockTime+0x20>)
 8003c8c:	b919      	cbnz	r1, 8003c96 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c9a:	68d2      	ldr	r2, [r2, #12]
 8003c9c:	6852      	ldr	r2, [r2, #4]
 8003c9e:	e7f8      	b.n	8003c92 <prvResetNextTaskUnblockTime+0xe>
 8003ca0:	20000f1c 	.word	0x20000f1c
 8003ca4:	20000ff0 	.word	0x20000ff0

08003ca8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	4681      	mov	r9, r0
 8003cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003cb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003cb4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003cb6:	3a01      	subs	r2, #1
 8003cb8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003cbc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003cc0:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003cc2:	f026 0607 	bic.w	r6, r6, #7
 8003cc6:	1e4b      	subs	r3, r1, #1
 8003cc8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003ccc:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cce:	7858      	ldrb	r0, [r3, #1]
 8003cd0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003cd4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003cd8:	b108      	cbz	r0, 8003cde <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cda:	428b      	cmp	r3, r1
 8003cdc:	d1f7      	bne.n	8003cce <prvInitialiseNewTask.isra.2+0x26>
 8003cde:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ce0:	2700      	movs	r7, #0
 8003ce2:	2d06      	cmp	r5, #6
 8003ce4:	bf28      	it	cs
 8003ce6:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ce8:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003cea:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003cec:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cee:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003cf2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf4:	f7ff fcf0 	bl	80036d8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cfc:	f104 0018 	add.w	r0, r4, #24
 8003d00:	f7ff fcea 	bl	80036d8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003d04:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d0a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d0c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d10:	4652      	mov	r2, sl
 8003d12:	4649      	mov	r1, r9
 8003d14:	4630      	mov	r0, r6
 8003d16:	f7ff fd47 	bl	80037a8 <pxPortInitialiseStack>
 8003d1a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003d1c:	f1b8 0f00 	cmp.w	r8, #0
 8003d20:	d001      	beq.n	8003d26 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d22:	f8c8 4000 	str.w	r4, [r8]
 8003d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d2a <prvDeleteTCB>:
	{
 8003d2a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d2c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003d30:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d32:	b93b      	cbnz	r3, 8003d44 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003d34:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003d36:	f7ff fef1 	bl	8003b1c <vPortFree>
				vPortFree( pxTCB );
 8003d3a:	4620      	mov	r0, r4
	}
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003d40:	f7ff beec 	b.w	8003b1c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d0f9      	beq.n	8003d3c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d008      	beq.n	8003d5e <prvDeleteTCB+0x34>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	e7fe      	b.n	8003d5c <prvDeleteTCB+0x32>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <prvIdleTask>:
{
 8003d60:	b580      	push	{r7, lr}
				taskYIELD();
 8003d62:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003dc0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d66:	4f12      	ldr	r7, [pc, #72]	; (8003db0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d68:	4c12      	ldr	r4, [pc, #72]	; (8003db4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003d6a:	4d13      	ldr	r5, [pc, #76]	; (8003db8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	b963      	cbnz	r3, 8003d8a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <prvIdleTask+0x5c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d9f8      	bls.n	8003d6a <prvIdleTask+0xa>
				taskYIELD();
 8003d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d7c:	f8c8 3000 	str.w	r3, [r8]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	e7ee      	b.n	8003d68 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003d8a:	f7ff fd33 	bl	80037f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d92:	1d30      	adds	r0, r6, #4
 8003d94:	f7ff fcc6 	bl	8003724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003da4:	f7ff fd48 	bl	8003838 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7ff ffbe 	bl	8003d2a <prvDeleteTCB>
 8003dae:	e7dd      	b.n	8003d6c <prvIdleTask+0xc>
 8003db0:	20001024 	.word	0x20001024
 8003db4:	20000fb4 	.word	0x20000fb4
 8003db8:	20000fb0 	.word	0x20000fb0
 8003dbc:	20000f24 	.word	0x20000f24
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc8:	4e1b      	ldr	r6, [pc, #108]	; (8003e38 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003dca:	681d      	ldr	r5, [r3, #0]
{
 8003dcc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dce:	6830      	ldr	r0, [r6, #0]
{
 8003dd0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd2:	3004      	adds	r0, #4
 8003dd4:	f7ff fca6 	bl	8003724 <uxListRemove>
 8003dd8:	4633      	mov	r3, r6
 8003dda:	b940      	cbnz	r0, 8003dee <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003ddc:	2001      	movs	r0, #1
 8003dde:	6831      	ldr	r1, [r6, #0]
 8003de0:	4e16      	ldr	r6, [pc, #88]	; (8003e3c <prvAddCurrentTaskToDelayedList+0x78>)
 8003de2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003de4:	6832      	ldr	r2, [r6, #0]
 8003de6:	4088      	lsls	r0, r1
 8003de8:	ea22 0200 	bic.w	r2, r2, r0
 8003dec:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dee:	1c62      	adds	r2, r4, #1
 8003df0:	d107      	bne.n	8003e02 <prvAddCurrentTaskToDelayedList+0x3e>
 8003df2:	b137      	cbz	r7, 8003e02 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	4812      	ldr	r0, [pc, #72]	; (8003e40 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003df8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfe:	f7ff bc6e 	b.w	80036de <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e02:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e04:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003e06:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e08:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003e0a:	d907      	bls.n	8003e1c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <prvAddCurrentTaskToDelayedList+0x80>)
 8003e0e:	6810      	ldr	r0, [r2, #0]
 8003e10:	6819      	ldr	r1, [r3, #0]
}
 8003e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e16:	3104      	adds	r1, #4
 8003e18:	f7ff bc6d 	b.w	80036f6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <prvAddCurrentTaskToDelayedList+0x84>)
 8003e1e:	6810      	ldr	r0, [r2, #0]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	3104      	adds	r1, #4
 8003e24:	f7ff fc67 	bl	80036f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <prvAddCurrentTaskToDelayedList+0x88>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003e2e:	bf38      	it	cc
 8003e30:	601c      	strcc	r4, [r3, #0]
 8003e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e34:	20001038 	.word	0x20001038
 8003e38:	20000f18 	.word	0x20000f18
 8003e3c:	20000fc4 	.word	0x20000fc4
 8003e40:	20001010 	.word	0x20001010
 8003e44:	20000f20 	.word	0x20000f20
 8003e48:	20000f1c 	.word	0x20000f1c
 8003e4c:	20000ff0 	.word	0x20000ff0

08003e50 <xTaskCreateStatic>:
	{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003e56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003e58:	b945      	cbnz	r5, 8003e6c <xTaskCreateStatic+0x1c>
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	e7fe      	b.n	8003e6a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003e6c:	b944      	cbnz	r4, 8003e80 <xTaskCreateStatic+0x30>
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	e7fe      	b.n	8003e7e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e80:	2654      	movs	r6, #84	; 0x54
 8003e82:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e84:	9e04      	ldr	r6, [sp, #16]
 8003e86:	2e54      	cmp	r6, #84	; 0x54
 8003e88:	d008      	beq.n	8003e9c <xTaskCreateStatic+0x4c>
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	e7fe      	b.n	8003e9a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e9c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e9e:	2502      	movs	r5, #2
 8003ea0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ea4:	ad05      	add	r5, sp, #20
 8003ea6:	9501      	str	r5, [sp, #4]
 8003ea8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003eaa:	9402      	str	r4, [sp, #8]
 8003eac:	9500      	str	r5, [sp, #0]
 8003eae:	f7ff fefb 	bl	8003ca8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7ff fe6a 	bl	8003b8c <prvAddNewTaskToReadyList>
	}
 8003eb8:	9805      	ldr	r0, [sp, #20]
 8003eba:	b006      	add	sp, #24
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}

08003ebe <xTaskCreate>:
	{
 8003ebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ec2:	4607      	mov	r7, r0
 8003ec4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec6:	0090      	lsls	r0, r2, #2
	{
 8003ec8:	4688      	mov	r8, r1
 8003eca:	4616      	mov	r6, r2
 8003ecc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ece:	f7ff fd97 	bl	8003a00 <pvPortMalloc>
			if( pxStack != NULL )
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	b1e8      	cbz	r0, 8003f12 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ed6:	2054      	movs	r0, #84	; 0x54
 8003ed8:	f7ff fd92 	bl	8003a00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003edc:	4604      	mov	r4, r0
 8003ede:	b1a8      	cbz	r0, 8003f0c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8003ee8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eee:	9002      	str	r0, [sp, #8]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4632      	mov	r2, r6
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7ff fed5 	bl	8003ca8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff fe44 	bl	8003b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f04:	2001      	movs	r0, #1
	}
 8003f06:	b005      	add	sp, #20
 8003f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f7ff fe05 	bl	8003b1c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f12:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003f16:	e7f6      	b.n	8003f06 <xTaskCreate+0x48>

08003f18 <vTaskStartScheduler>:
{
 8003f18:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f1a:	2400      	movs	r4, #0
{
 8003f1c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f1e:	aa07      	add	r2, sp, #28
 8003f20:	a906      	add	r1, sp, #24
 8003f22:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f24:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f26:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f28:	f7fd ff80 	bl	8001e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f2c:	9b05      	ldr	r3, [sp, #20]
 8003f2e:	9400      	str	r4, [sp, #0]
 8003f30:	9302      	str	r3, [sp, #8]
 8003f32:	9b06      	ldr	r3, [sp, #24]
 8003f34:	9a07      	ldr	r2, [sp, #28]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	490d      	ldr	r1, [pc, #52]	; (8003f70 <vTaskStartScheduler+0x58>)
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	480d      	ldr	r0, [pc, #52]	; (8003f74 <vTaskStartScheduler+0x5c>)
 8003f3e:	f7ff ff87 	bl	8003e50 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003f42:	b190      	cbz	r0, 8003f6a <vTaskStartScheduler+0x52>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <vTaskStartScheduler+0x60>)
 8003f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <vTaskStartScheduler+0x64>)
 8003f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <vTaskStartScheduler+0x68>)
 8003f64:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003f66:	f7ff fccd 	bl	8003904 <xPortStartScheduler>
}
 8003f6a:	b008      	add	sp, #32
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	bf00      	nop
 8003f70:	0800571b 	.word	0x0800571b
 8003f74:	08003d61 	.word	0x08003d61
 8003f78:	20000ff0 	.word	0x20000ff0
 8003f7c:	2000100c 	.word	0x2000100c
 8003f80:	20001038 	.word	0x20001038

08003f84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003f84:	4a02      	ldr	r2, [pc, #8]	; (8003f90 <vTaskSuspendAll+0xc>)
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000fbc 	.word	0x20000fbc

08003f94 <xTaskIncrementTick>:
{
 8003f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f98:	4b3c      	ldr	r3, [pc, #240]	; (800408c <xTaskIncrementTick+0xf8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d153      	bne.n	8004048 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <xTaskIncrementTick+0xfc>)
 8003fa2:	681c      	ldr	r4, [r3, #0]
 8003fa4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003fa6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fa8:	b9bc      	cbnz	r4, 8003fda <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003faa:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <xTaskIncrementTick+0x100>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	b142      	cbz	r2, 8003fc4 <xTaskIncrementTick+0x30>
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	e7fe      	b.n	8003fc2 <xTaskIncrementTick+0x2e>
 8003fc4:	4a34      	ldr	r2, [pc, #208]	; (8004098 <xTaskIncrementTick+0x104>)
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	6810      	ldr	r0, [r2, #0]
 8003fca:	6018      	str	r0, [r3, #0]
 8003fcc:	6011      	str	r1, [r2, #0]
 8003fce:	4a33      	ldr	r2, [pc, #204]	; (800409c <xTaskIncrementTick+0x108>)
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	f7ff fe55 	bl	8003c84 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fda:	4d31      	ldr	r5, [pc, #196]	; (80040a0 <xTaskIncrementTick+0x10c>)
 8003fdc:	f04f 0b00 	mov.w	fp, #0
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	4f30      	ldr	r7, [pc, #192]	; (80040a4 <xTaskIncrementTick+0x110>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d33e      	bcc.n	8004066 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004094 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003fec:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80040b4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	bb72      	cbnz	r2, 8004056 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	602a      	str	r2, [r5, #0]
					break;
 8003ffe:	e032      	b.n	8004066 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	f106 0a04 	add.w	sl, r6, #4
 8004004:	4650      	mov	r0, sl
 8004006:	f7ff fb8d 	bl	8003724 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800400a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800400c:	b119      	cbz	r1, 8004016 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400e:	f106 0018 	add.w	r0, r6, #24
 8004012:	f7ff fb87 	bl	8003724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004016:	2201      	movs	r2, #1
 8004018:	f04f 0e14 	mov.w	lr, #20
 800401c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800401e:	f8d9 3000 	ldr.w	r3, [r9]
 8004022:	fa02 f100 	lsl.w	r1, r2, r0
 8004026:	4319      	orrs	r1, r3
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <xTaskIncrementTick+0x114>)
 800402a:	f8c9 1000 	str.w	r1, [r9]
 800402e:	fb0e 3000 	mla	r0, lr, r0, r3
 8004032:	4651      	mov	r1, sl
 8004034:	f7ff fb53 	bl	80036de <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004038:	6838      	ldr	r0, [r7, #0]
 800403a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800403c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800403e:	4291      	cmp	r1, r2
 8004040:	bf28      	it	cs
 8004042:	f04f 0b01 	movcs.w	fp, #1
 8004046:	e7d3      	b.n	8003ff0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800404a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e011      	b.n	800407a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004056:	f8d8 2000 	ldr.w	r2, [r8]
 800405a:	68d2      	ldr	r2, [r2, #12]
 800405c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800405e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004060:	428c      	cmp	r4, r1
 8004062:	d2cd      	bcs.n	8004000 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004064:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <xTaskIncrementTick+0x114>)
 800406a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800406c:	2214      	movs	r2, #20
 800406e:	434a      	muls	r2, r1
 8004070:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004072:	2a02      	cmp	r2, #2
 8004074:	bf28      	it	cs
 8004076:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800407a:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <xTaskIncrementTick+0x11c>)
 800407c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800407e:	2a00      	cmp	r2, #0
 8004080:	bf18      	it	ne
 8004082:	f04f 0b01 	movne.w	fp, #1
}
 8004086:	4658      	mov	r0, fp
 8004088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	20000fbc 	.word	0x20000fbc
 8004090:	20001038 	.word	0x20001038
 8004094:	20000f1c 	.word	0x20000f1c
 8004098:	20000f20 	.word	0x20000f20
 800409c:	20000ff4 	.word	0x20000ff4
 80040a0:	20000ff0 	.word	0x20000ff0
 80040a4:	20000f18 	.word	0x20000f18
 80040a8:	20000f24 	.word	0x20000f24
 80040ac:	20000fb8 	.word	0x20000fb8
 80040b0:	2000103c 	.word	0x2000103c
 80040b4:	20000fc4 	.word	0x20000fc4

080040b8 <xTaskResumeAll>:
{
 80040b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80040bc:	4c31      	ldr	r4, [pc, #196]	; (8004184 <xTaskResumeAll+0xcc>)
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	b943      	cbnz	r3, 80040d4 <xTaskResumeAll+0x1c>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	e7fe      	b.n	80040d2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80040d4:	f7ff fb8e 	bl	80037f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040de:	6824      	ldr	r4, [r4, #0]
 80040e0:	b12c      	cbz	r4, 80040ee <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80040e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80040e4:	f7ff fba8 	bl	8003838 <vPortExitCritical>
}
 80040e8:	4620      	mov	r0, r4
 80040ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <xTaskResumeAll+0xd0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f5      	beq.n	80040e2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80041a0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80040fa:	4f24      	ldr	r7, [pc, #144]	; (800418c <xTaskResumeAll+0xd4>)
 80040fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80041a4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004100:	f8d9 3000 	ldr.w	r3, [r9]
 8004104:	b9e3      	cbnz	r3, 8004140 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004106:	b10c      	cbz	r4, 800410c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004108:	f7ff fdbc 	bl	8003c84 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800410c:	4d20      	ldr	r5, [pc, #128]	; (8004190 <xTaskResumeAll+0xd8>)
 800410e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004110:	b144      	cbz	r4, 8004124 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004112:	2701      	movs	r7, #1
 8004114:	4e1f      	ldr	r6, [pc, #124]	; (8004194 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8004116:	f7ff ff3d 	bl	8003f94 <xTaskIncrementTick>
 800411a:	b100      	cbz	r0, 800411e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800411c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800411e:	3c01      	subs	r4, #1
 8004120:	d1f9      	bne.n	8004116 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004122:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <xTaskResumeAll+0xdc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0da      	beq.n	80040e2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800412c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <xTaskResumeAll+0xe0>)
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800413c:	2401      	movs	r4, #1
 800413e:	e7d1      	b.n	80040e4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004140:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8004144:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004146:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800414a:	f104 0018 	add.w	r0, r4, #24
 800414e:	f7ff fae9 	bl	8003724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004152:	4630      	mov	r0, r6
 8004154:	f7ff fae6 	bl	8003724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004158:	2014      	movs	r0, #20
 800415a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	fa05 f302 	lsl.w	r3, r5, r2
 8004162:	430b      	orrs	r3, r1
 8004164:	fb00 8002 	mla	r0, r0, r2, r8
 8004168:	4631      	mov	r1, r6
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	f7ff fab7 	bl	80036de <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <xTaskResumeAll+0xe4>)
 8004172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800417a:	bf24      	itt	cs
 800417c:	4b05      	ldrcs	r3, [pc, #20]	; (8004194 <xTaskResumeAll+0xdc>)
 800417e:	601d      	strcs	r5, [r3, #0]
 8004180:	e7be      	b.n	8004100 <xTaskResumeAll+0x48>
 8004182:	bf00      	nop
 8004184:	20000fbc 	.word	0x20000fbc
 8004188:	20000fb0 	.word	0x20000fb0
 800418c:	20000fc4 	.word	0x20000fc4
 8004190:	20000fb8 	.word	0x20000fb8
 8004194:	2000103c 	.word	0x2000103c
 8004198:	e000ed04 	.word	0xe000ed04
 800419c:	20000f18 	.word	0x20000f18
 80041a0:	20000ff8 	.word	0x20000ff8
 80041a4:	20000f24 	.word	0x20000f24

080041a8 <vTaskDelay>:
	{
 80041a8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041aa:	b940      	cbnz	r0, 80041be <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80041ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <vTaskDelay+0x40>)
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <vTaskDelay+0x44>)
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	b141      	cbz	r1, 80041d6 <vTaskDelay+0x2e>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	e7fe      	b.n	80041d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80041d6:	f7ff fed5 	bl	8003f84 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041da:	f7ff fdf3 	bl	8003dc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80041de:	f7ff ff6b 	bl	80040b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0e2      	beq.n	80041ac <vTaskDelay+0x4>
 80041e6:	bd08      	pop	{r3, pc}
 80041e8:	e000ed04 	.word	0xe000ed04
 80041ec:	20000fbc 	.word	0x20000fbc

080041f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <vTaskSwitchContext+0x60>)
{
 80041f2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b17      	ldr	r3, [pc, #92]	; (8004254 <vTaskSwitchContext+0x64>)
 80041f8:	b112      	cbz	r2, 8004200 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80041fa:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004200:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <vTaskSwitchContext+0x68>)
 8004204:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	2214      	movs	r2, #20
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f1c3 031f 	rsb	r3, r3, #31
 8004212:	435a      	muls	r2, r3
 8004214:	4911      	ldr	r1, [pc, #68]	; (800425c <vTaskSwitchContext+0x6c>)
 8004216:	588c      	ldr	r4, [r1, r2]
 8004218:	1888      	adds	r0, r1, r2
 800421a:	b944      	cbnz	r4, 800422e <vTaskSwitchContext+0x3e>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	e7fe      	b.n	800422c <vTaskSwitchContext+0x3c>
 800422e:	6844      	ldr	r4, [r0, #4]
 8004230:	3208      	adds	r2, #8
 8004232:	6864      	ldr	r4, [r4, #4]
 8004234:	440a      	add	r2, r1
 8004236:	4294      	cmp	r4, r2
 8004238:	bf08      	it	eq
 800423a:	6862      	ldreq	r2, [r4, #4]
 800423c:	6044      	str	r4, [r0, #4]
 800423e:	bf08      	it	eq
 8004240:	6042      	streq	r2, [r0, #4]
 8004242:	2214      	movs	r2, #20
 8004244:	fb02 1303 	mla	r3, r2, r3, r1
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <vTaskSwitchContext+0x70>)
 800424e:	e7d5      	b.n	80041fc <vTaskSwitchContext+0xc>
 8004250:	20000fbc 	.word	0x20000fbc
 8004254:	2000103c 	.word	0x2000103c
 8004258:	20000fc4 	.word	0x20000fc4
 800425c:	20000f24 	.word	0x20000f24
 8004260:	20000f18 	.word	0x20000f18

08004264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004264:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004266:	e003      	b.n	8004270 <LoopCopyDataInit>

08004268 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800426a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800426c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800426e:	3104      	adds	r1, #4

08004270 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004270:	480a      	ldr	r0, [pc, #40]	; (800429c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004274:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004276:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004278:	d3f6      	bcc.n	8004268 <CopyDataInit>
  ldr r2, =_sbss
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800427c:	e002      	b.n	8004284 <LoopFillZerobss>

0800427e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004280:	f842 3b04 	str.w	r3, [r2], #4

08004284 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004286:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004288:	d3f9      	bcc.n	800427e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800428a:	f7fd ffa5 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800428e:	f000 fd27 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004292:	f7fd fe6d 	bl	8001f70 <main>
  bx lr
 8004296:	4770      	bx	lr
  ldr r3, =_sidata
 8004298:	08005a5c 	.word	0x08005a5c
  ldr r0, =_sdata
 800429c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80042a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80042a4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80042a8:	20001158 	.word	0x20001158

080042ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042ac:	e7fe      	b.n	80042ac <ADC1_2_IRQHandler>
	...

080042b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	4604      	mov	r4, r0
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80042b6:	6003      	str	r3, [r0, #0]
 80042b8:	f000 fbe8 	bl	8004a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80042bc:	4620      	mov	r0, r4
 80042be:	bd10      	pop	{r4, pc}
 80042c0:	0800575c 	.word	0x0800575c

080042c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4604      	mov	r4, r0
 80042c8:	f7ff fff2 	bl	80042b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80042cc:	4620      	mov	r0, r4
 80042ce:	210c      	movs	r1, #12
 80042d0:	f000 fbba 	bl	8004a48 <_ZdlPvj>
 80042d4:	4620      	mov	r0, r4
 80042d6:	bd10      	pop	{r4, pc}

080042d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	9e06      	ldr	r6, [sp, #24]
 80042de:	4680      	mov	r8, r0
 80042e0:	4296      	cmp	r6, r2
 80042e2:	460f      	mov	r7, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	461d      	mov	r5, r3
 80042e8:	d103      	bne.n	80042f2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 80042ea:	4619      	mov	r1, r3
 80042ec:	f000 fc22 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 80042f0:	b958      	cbnz	r0, 800430a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 80042f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80042f6:	4622      	mov	r2, r4
 80042f8:	6803      	ldr	r3, [r0, #0]
 80042fa:	9606      	str	r6, [sp, #24]
 80042fc:	6a1e      	ldr	r6, [r3, #32]
 80042fe:	4639      	mov	r1, r7
 8004300:	462b      	mov	r3, r5
 8004302:	46b4      	mov	ip, r6
 8004304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004308:	4760      	bx	ip
 800430a:	2006      	movs	r0, #6
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004310 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8004310:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	460e      	mov	r6, r1
 8004316:	4619      	mov	r1, r3
 8004318:	4683      	mov	fp, r0
 800431a:	4617      	mov	r7, r2
 800431c:	4699      	mov	r9, r3
 800431e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004320:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004324:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004328:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800432a:	f000 fc03 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 800432e:	b190      	cbz	r0, 8004356 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8004330:	2e00      	cmp	r6, #0
 8004332:	602c      	str	r4, [r5, #0]
 8004334:	712f      	strb	r7, [r5, #4]
 8004336:	db09      	blt.n	800434c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8004338:	4434      	add	r4, r6
 800433a:	45a0      	cmp	r8, r4
 800433c:	bf0c      	ite	eq
 800433e:	2406      	moveq	r4, #6
 8004340:	2401      	movne	r4, #1
 8004342:	71ac      	strb	r4, [r5, #6]
 8004344:	2000      	movs	r0, #0
 8004346:	b001      	add	sp, #4
 8004348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434c:	3602      	adds	r6, #2
 800434e:	d1f9      	bne.n	8004344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8004350:	2301      	movs	r3, #1
 8004352:	71ab      	strb	r3, [r5, #6]
 8004354:	e7f6      	b.n	8004344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8004356:	4544      	cmp	r4, r8
 8004358:	d104      	bne.n	8004364 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800435a:	4651      	mov	r1, sl
 800435c:	4658      	mov	r0, fp
 800435e:	f000 fbe9 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004362:	b988      	cbnz	r0, 8004388 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8004364:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004368:	463a      	mov	r2, r7
 800436a:	6803      	ldr	r3, [r0, #0]
 800436c:	950d      	str	r5, [sp, #52]	; 0x34
 800436e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004372:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004376:	940a      	str	r4, [sp, #40]	; 0x28
 8004378:	69dc      	ldr	r4, [r3, #28]
 800437a:	4631      	mov	r1, r6
 800437c:	464b      	mov	r3, r9
 800437e:	46a4      	mov	ip, r4
 8004380:	b001      	add	sp, #4
 8004382:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004386:	4760      	bx	ip
 8004388:	716f      	strb	r7, [r5, #5]
 800438a:	e7db      	b.n	8004344 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

0800438c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4604      	mov	r4, r0
 8004392:	460d      	mov	r5, r1
 8004394:	4616      	mov	r6, r2
 8004396:	461f      	mov	r7, r3
 8004398:	f000 fb8c 	bl	8004ab4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800439c:	b948      	cbnz	r0, 80043b2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800439e:	68a0      	ldr	r0, [r4, #8]
 80043a0:	4632      	mov	r2, r6
 80043a2:	6803      	ldr	r3, [r0, #0]
 80043a4:	4629      	mov	r1, r5
 80043a6:	699c      	ldr	r4, [r3, #24]
 80043a8:	463b      	mov	r3, r7
 80043aa:	46a4      	mov	ip, r4
 80043ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	4760      	bx	ip
 80043b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043b6 <__cxa_end_cleanup>:
 80043b6:	b41e      	push	{r1, r2, r3, r4}
 80043b8:	f000 f89b 	bl	80044f2 <__gnu_end_cleanup>
 80043bc:	bc1e      	pop	{r1, r2, r3, r4}
 80043be:	f7fd f863 	bl	8001488 <_Unwind_Resume>

080043c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80043c2:	7803      	ldrb	r3, [r0, #0]
 80043c4:	2b47      	cmp	r3, #71	; 0x47
 80043c6:	d117      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043c8:	7843      	ldrb	r3, [r0, #1]
 80043ca:	2b4e      	cmp	r3, #78	; 0x4e
 80043cc:	d114      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043ce:	7883      	ldrb	r3, [r0, #2]
 80043d0:	2b55      	cmp	r3, #85	; 0x55
 80043d2:	d111      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043d4:	78c3      	ldrb	r3, [r0, #3]
 80043d6:	2b43      	cmp	r3, #67	; 0x43
 80043d8:	d10e      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043da:	7903      	ldrb	r3, [r0, #4]
 80043dc:	2b43      	cmp	r3, #67	; 0x43
 80043de:	d10b      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043e0:	7943      	ldrb	r3, [r0, #5]
 80043e2:	2b2b      	cmp	r3, #43	; 0x2b
 80043e4:	d108      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043e6:	7983      	ldrb	r3, [r0, #6]
 80043e8:	2b2b      	cmp	r3, #43	; 0x2b
 80043ea:	d105      	bne.n	80043f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80043ec:	79c0      	ldrb	r0, [r0, #7]
 80043ee:	2801      	cmp	r0, #1
 80043f0:	bf8c      	ite	hi
 80043f2:	2000      	movhi	r0, #0
 80043f4:	2001      	movls	r0, #1
 80043f6:	4770      	bx	lr
 80043f8:	2000      	movs	r0, #0
 80043fa:	4770      	bx	lr

080043fc <__cxa_type_match>:
 80043fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004400:	461e      	mov	r6, r3
 8004402:	7803      	ldrb	r3, [r0, #0]
 8004404:	460d      	mov	r5, r1
 8004406:	2b47      	cmp	r3, #71	; 0x47
 8004408:	4602      	mov	r2, r0
 800440a:	79c1      	ldrb	r1, [r0, #7]
 800440c:	d147      	bne.n	800449e <__cxa_type_match+0xa2>
 800440e:	7843      	ldrb	r3, [r0, #1]
 8004410:	2b4e      	cmp	r3, #78	; 0x4e
 8004412:	d144      	bne.n	800449e <__cxa_type_match+0xa2>
 8004414:	7883      	ldrb	r3, [r0, #2]
 8004416:	2b55      	cmp	r3, #85	; 0x55
 8004418:	d141      	bne.n	800449e <__cxa_type_match+0xa2>
 800441a:	78c3      	ldrb	r3, [r0, #3]
 800441c:	2b43      	cmp	r3, #67	; 0x43
 800441e:	d13e      	bne.n	800449e <__cxa_type_match+0xa2>
 8004420:	7903      	ldrb	r3, [r0, #4]
 8004422:	2b46      	cmp	r3, #70	; 0x46
 8004424:	d13b      	bne.n	800449e <__cxa_type_match+0xa2>
 8004426:	7943      	ldrb	r3, [r0, #5]
 8004428:	2b4f      	cmp	r3, #79	; 0x4f
 800442a:	d138      	bne.n	800449e <__cxa_type_match+0xa2>
 800442c:	7983      	ldrb	r3, [r0, #6]
 800442e:	2b52      	cmp	r3, #82	; 0x52
 8004430:	d135      	bne.n	800449e <__cxa_type_match+0xa2>
 8004432:	2900      	cmp	r1, #0
 8004434:	d133      	bne.n	800449e <__cxa_type_match+0xa2>
 8004436:	2301      	movs	r3, #1
 8004438:	4608      	mov	r0, r1
 800443a:	2400      	movs	r4, #0
 800443c:	9401      	str	r4, [sp, #4]
 800443e:	bb33      	cbnz	r3, 800448e <__cxa_type_match+0x92>
 8004440:	bb38      	cbnz	r0, 8004492 <__cxa_type_match+0x96>
 8004442:	2901      	cmp	r1, #1
 8004444:	bf0a      	itet	eq
 8004446:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800444a:	f1a2 0320 	subne.w	r3, r2, #32
 800444e:	3b78      	subeq	r3, #120	; 0x78
 8004450:	2901      	cmp	r1, #1
 8004452:	bf0c      	ite	eq
 8004454:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8004458:	3258      	addne	r2, #88	; 0x58
 800445a:	681c      	ldr	r4, [r3, #0]
 800445c:	9201      	str	r2, [sp, #4]
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	4620      	mov	r0, r4
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4798      	blx	r3
 8004466:	b1b0      	cbz	r0, 8004496 <__cxa_type_match+0x9a>
 8004468:	2702      	movs	r7, #2
 800446a:	9b01      	ldr	r3, [sp, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	aa01      	add	r2, sp, #4
 8004474:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8004478:	4621      	mov	r1, r4
 800447a:	2301      	movs	r3, #1
 800447c:	4628      	mov	r0, r5
 800447e:	47c0      	blx	r8
 8004480:	b158      	cbz	r0, 800449a <__cxa_type_match+0x9e>
 8004482:	9b01      	ldr	r3, [sp, #4]
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	4638      	mov	r0, r7
 8004488:	b002      	add	sp, #8
 800448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800448e:	4c08      	ldr	r4, [pc, #32]	; (80044b0 <__cxa_type_match+0xb4>)
 8004490:	e7e5      	b.n	800445e <__cxa_type_match+0x62>
 8004492:	4c08      	ldr	r4, [pc, #32]	; (80044b4 <__cxa_type_match+0xb8>)
 8004494:	e7e3      	b.n	800445e <__cxa_type_match+0x62>
 8004496:	2701      	movs	r7, #1
 8004498:	e7ea      	b.n	8004470 <__cxa_type_match+0x74>
 800449a:	4607      	mov	r7, r0
 800449c:	e7f3      	b.n	8004486 <__cxa_type_match+0x8a>
 800449e:	4610      	mov	r0, r2
 80044a0:	f7ff ff8f 	bl	80043c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80044a4:	f080 0001 	eor.w	r0, r0, #1
 80044a8:	b2c0      	uxtb	r0, r0
 80044aa:	2300      	movs	r3, #0
 80044ac:	e7c5      	b.n	800443a <__cxa_type_match+0x3e>
 80044ae:	bf00      	nop
 80044b0:	080057f4 	.word	0x080057f4
 80044b4:	080057fc 	.word	0x080057fc

080044b8 <__cxa_begin_cleanup>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f000 fbfe 	bl	8004cbc <__cxa_get_globals>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4620      	mov	r0, r4
 80044c4:	f1a4 0120 	sub.w	r1, r4, #32
 80044c8:	f7ff ff7b 	bl	80043c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80044cc:	b160      	cbz	r0, 80044e8 <__cxa_begin_cleanup+0x30>
 80044ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80044da:	d103      	bne.n	80044e4 <__cxa_begin_cleanup+0x2c>
 80044dc:	6893      	ldr	r3, [r2, #8]
 80044de:	f844 3c08 	str.w	r3, [r4, #-8]
 80044e2:	6091      	str	r1, [r2, #8]
 80044e4:	2001      	movs	r0, #1
 80044e6:	bd10      	pop	{r4, pc}
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f9      	beq.n	80044e2 <__cxa_begin_cleanup+0x2a>
 80044ee:	f000 fbcd 	bl	8004c8c <_ZSt9terminatev>

080044f2 <__gnu_end_cleanup>:
 80044f2:	b510      	push	{r4, lr}
 80044f4:	f000 fbe2 	bl	8004cbc <__cxa_get_globals>
 80044f8:	6882      	ldr	r2, [r0, #8]
 80044fa:	4601      	mov	r1, r0
 80044fc:	b90a      	cbnz	r2, 8004502 <__gnu_end_cleanup+0x10>
 80044fe:	f000 fbc5 	bl	8004c8c <_ZSt9terminatev>
 8004502:	f102 0420 	add.w	r4, r2, #32
 8004506:	4620      	mov	r0, r4
 8004508:	f7ff ff5b 	bl	80043c2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800450c:	b140      	cbz	r0, 8004520 <__gnu_end_cleanup+0x2e>
 800450e:	69d3      	ldr	r3, [r2, #28]
 8004510:	3b01      	subs	r3, #1
 8004512:	61d3      	str	r3, [r2, #28]
 8004514:	b913      	cbnz	r3, 800451c <__gnu_end_cleanup+0x2a>
 8004516:	6990      	ldr	r0, [r2, #24]
 8004518:	6088      	str	r0, [r1, #8]
 800451a:	6193      	str	r3, [r2, #24]
 800451c:	4620      	mov	r0, r4
 800451e:	bd10      	pop	{r4, pc}
 8004520:	6088      	str	r0, [r1, #8]
 8004522:	e7fb      	b.n	800451c <__gnu_end_cleanup+0x2a>

08004524 <_ZL12read_uleb128PKhPm>:
 8004524:	2300      	movs	r3, #0
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800452c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8004530:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004534:	1994      	adds	r4, r2, r6
 8004536:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800453a:	40a2      	lsls	r2, r4
 800453c:	4313      	orrs	r3, r2
 800453e:	062a      	lsls	r2, r5, #24
 8004540:	d4f4      	bmi.n	800452c <_ZL12read_uleb128PKhPm+0x8>
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	bd70      	pop	{r4, r5, r6, pc}

08004546 <_ZL12read_sleb128PKhPl>:
 8004546:	2300      	movs	r3, #0
 8004548:	461a      	mov	r2, r3
 800454a:	b530      	push	{r4, r5, lr}
 800454c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8004550:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8004554:	4095      	lsls	r5, r2
 8004556:	432b      	orrs	r3, r5
 8004558:	0625      	lsls	r5, r4, #24
 800455a:	f102 0207 	add.w	r2, r2, #7
 800455e:	d4f5      	bmi.n	800454c <_ZL12read_sleb128PKhPl+0x6>
 8004560:	2a1f      	cmp	r2, #31
 8004562:	d806      	bhi.n	8004572 <_ZL12read_sleb128PKhPl+0x2c>
 8004564:	0664      	lsls	r4, r4, #25
 8004566:	bf42      	ittt	mi
 8004568:	f04f 34ff 	movmi.w	r4, #4294967295
 800456c:	fa04 f202 	lslmi.w	r2, r4, r2
 8004570:	4313      	orrmi	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	bd30      	pop	{r4, r5, pc}

08004576 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8004576:	2850      	cmp	r0, #80	; 0x50
 8004578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	460e      	mov	r6, r1
 800457e:	4614      	mov	r4, r2
 8004580:	461f      	mov	r7, r3
 8004582:	d107      	bne.n	8004594 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8004584:	1cd0      	adds	r0, r2, #3
 8004586:	f020 0003 	bic.w	r0, r0, #3
 800458a:	f850 3b04 	ldr.w	r3, [r0], #4
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	b003      	add	sp, #12
 8004592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004594:	f000 030f 	and.w	r3, r0, #15
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d82e      	bhi.n	80045fa <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 800459c:	e8df f003 	tbb	[pc, r3]
 80045a0:	251d0725 	.word	0x251d0725
 80045a4:	2d2d2d29 	.word	0x2d2d2d29
 80045a8:	2521182d 	.word	0x2521182d
 80045ac:	29          	.byte	0x29
 80045ad:	00          	.byte	0x00
 80045ae:	a901      	add	r1, sp, #4
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff ffb7 	bl	8004524 <_ZL12read_uleb128PKhPm>
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0e8      	beq.n	800458e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80045bc:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80045c0:	2a10      	cmp	r2, #16
 80045c2:	bf08      	it	eq
 80045c4:	4626      	moveq	r6, r4
 80045c6:	062a      	lsls	r2, r5, #24
 80045c8:	4433      	add	r3, r6
 80045ca:	bf48      	it	mi
 80045cc:	681b      	ldrmi	r3, [r3, #0]
 80045ce:	e7de      	b.n	800458e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80045d0:	a901      	add	r1, sp, #4
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7ff ffb7 	bl	8004546 <_ZL12read_sleb128PKhPl>
 80045d8:	e7ed      	b.n	80045b6 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80045da:	4620      	mov	r0, r4
 80045dc:	f830 3b02 	ldrh.w	r3, [r0], #2
 80045e0:	e7ea      	b.n	80045b8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80045e2:	4620      	mov	r0, r4
 80045e4:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80045e8:	e7e6      	b.n	80045b8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f850 3b04 	ldr.w	r3, [r0], #4
 80045f0:	e7e2      	b.n	80045b8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80045f2:	4620      	mov	r0, r4
 80045f4:	f850 3b08 	ldr.w	r3, [r0], #8
 80045f8:	e7de      	b.n	80045b8 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80045fa:	f000 fb63 	bl	8004cc4 <abort>

080045fe <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80045fe:	b508      	push	{r3, lr}
 8004600:	4603      	mov	r3, r0
 8004602:	2bff      	cmp	r3, #255	; 0xff
 8004604:	4608      	mov	r0, r1
 8004606:	d007      	beq.n	8004618 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004608:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800460c:	2b20      	cmp	r3, #32
 800460e:	d00d      	beq.n	800462c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8004610:	d804      	bhi.n	800461c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8004612:	b10b      	cbz	r3, 8004618 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004614:	2b10      	cmp	r3, #16
 8004616:	d107      	bne.n	8004628 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8004618:	2000      	movs	r0, #0
 800461a:	bd08      	pop	{r3, pc}
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d00d      	beq.n	800463c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8004620:	2b50      	cmp	r3, #80	; 0x50
 8004622:	d0f9      	beq.n	8004618 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	d005      	beq.n	8004634 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8004628:	f000 fb4c 	bl	8004cc4 <abort>
 800462c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004630:	f7fd b92c 	b.w	800188c <_Unwind_GetTextRelBase>
 8004634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004638:	f7fd b92c 	b.w	8001894 <_Unwind_GetDataRelBase>
 800463c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004640:	f7fd b914 	b.w	800186c <_Unwind_GetRegionStart>

08004644 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	4601      	mov	r1, r0
 800464a:	4620      	mov	r0, r4
 800464c:	4615      	mov	r5, r2
 800464e:	461e      	mov	r6, r3
 8004650:	f7ff ffd5 	bl	80045fe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004654:	4633      	mov	r3, r6
 8004656:	462a      	mov	r2, r5
 8004658:	4601      	mov	r1, r0
 800465a:	4620      	mov	r0, r4
 800465c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004660:	f7ff bf89 	b.w	8004576 <_ZL28read_encoded_value_with_basehjPKhPj>

08004664 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8004664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004666:	460e      	mov	r6, r1
 8004668:	4614      	mov	r4, r2
 800466a:	4605      	mov	r5, r0
 800466c:	b318      	cbz	r0, 80046b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800466e:	f7fd f8fd 	bl	800186c <_Unwind_GetRegionStart>
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	7831      	ldrb	r1, [r6, #0]
 8004676:	1c72      	adds	r2, r6, #1
 8004678:	29ff      	cmp	r1, #255	; 0xff
 800467a:	d01d      	beq.n	80046b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 800467c:	1d23      	adds	r3, r4, #4
 800467e:	4628      	mov	r0, r5
 8004680:	f7ff ffe0 	bl	8004644 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004684:	4602      	mov	r2, r0
 8004686:	7813      	ldrb	r3, [r2, #0]
 8004688:	1c50      	adds	r0, r2, #1
 800468a:	2bff      	cmp	r3, #255	; 0xff
 800468c:	7523      	strb	r3, [r4, #20]
 800468e:	d015      	beq.n	80046bc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8004690:	2310      	movs	r3, #16
 8004692:	a901      	add	r1, sp, #4
 8004694:	7523      	strb	r3, [r4, #20]
 8004696:	f7ff ff45 	bl	8004524 <_ZL12read_uleb128PKhPm>
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	4403      	add	r3, r0
 800469e:	60e3      	str	r3, [r4, #12]
 80046a0:	7803      	ldrb	r3, [r0, #0]
 80046a2:	a901      	add	r1, sp, #4
 80046a4:	7563      	strb	r3, [r4, #21]
 80046a6:	3001      	adds	r0, #1
 80046a8:	f7ff ff3c 	bl	8004524 <_ZL12read_uleb128PKhPm>
 80046ac:	9b01      	ldr	r3, [sp, #4]
 80046ae:	4403      	add	r3, r0
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	b002      	add	sp, #8
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	e7dc      	b.n	8004672 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80046b8:	6060      	str	r0, [r4, #4]
 80046ba:	e7e4      	b.n	8004686 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80046bc:	2300      	movs	r3, #0
 80046be:	e7ee      	b.n	800469e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080046c0 <_Unwind_GetGR>:
 80046c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80046c2:	ab03      	add	r3, sp, #12
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	460a      	mov	r2, r1
 80046ca:	4619      	mov	r1, r3
 80046cc:	f7fc fb32 	bl	8000d34 <_Unwind_VRS_Get>
 80046d0:	9803      	ldr	r0, [sp, #12]
 80046d2:	b005      	add	sp, #20
 80046d4:	f85d fb04 	ldr.w	pc, [sp], #4

080046d8 <__gxx_personality_v0>:
 80046d8:	2300      	movs	r3, #0
 80046da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046de:	b091      	sub	sp, #68	; 0x44
 80046e0:	9304      	str	r3, [sp, #16]
 80046e2:	f000 0303 	and.w	r3, r0, #3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	4607      	mov	r7, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	4616      	mov	r6, r2
 80046ee:	d011      	beq.n	8004714 <__gxx_personality_v0+0x3c>
 80046f0:	d303      	bcc.n	80046fa <__gxx_personality_v0+0x22>
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d003      	beq.n	80046fe <__gxx_personality_v0+0x26>
 80046f6:	f000 fae5 	bl	8004cc4 <abort>
 80046fa:	0702      	lsls	r2, r0, #28
 80046fc:	d51a      	bpl.n	8004734 <__gxx_personality_v0+0x5c>
 80046fe:	4631      	mov	r1, r6
 8004700:	4620      	mov	r0, r4
 8004702:	f7fd f89d 	bl	8001840 <__gnu_unwind_frame>
 8004706:	b118      	cbz	r0, 8004710 <__gxx_personality_v0+0x38>
 8004708:	2009      	movs	r0, #9
 800470a:	b011      	add	sp, #68	; 0x44
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004710:	2008      	movs	r0, #8
 8004712:	e7fa      	b.n	800470a <__gxx_personality_v0+0x32>
 8004714:	f000 0508 	and.w	r5, r0, #8
 8004718:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800471c:	bb85      	cbnz	r5, 8004780 <__gxx_personality_v0+0xa8>
 800471e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8004722:	4610      	mov	r0, r2
 8004724:	210d      	movs	r1, #13
 8004726:	f7ff ffcb 	bl	80046c0 <_Unwind_GetGR>
 800472a:	4581      	cmp	r9, r0
 800472c:	f040 8140 	bne.w	80049b0 <__gxx_personality_v0+0x2d8>
 8004730:	2506      	movs	r5, #6
 8004732:	e000      	b.n	8004736 <__gxx_personality_v0+0x5e>
 8004734:	2501      	movs	r5, #1
 8004736:	ab10      	add	r3, sp, #64	; 0x40
 8004738:	f843 4d2c 	str.w	r4, [r3, #-44]!
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	f007 0708 	and.w	r7, r7, #8
 8004744:	433d      	orrs	r5, r7
 8004746:	220c      	movs	r2, #12
 8004748:	4619      	mov	r1, r3
 800474a:	4630      	mov	r0, r6
 800474c:	f7fc fb18 	bl	8000d80 <_Unwind_VRS_Set>
 8004750:	2d06      	cmp	r5, #6
 8004752:	f040 8139 	bne.w	80049c8 <__gxx_personality_v0+0x2f0>
 8004756:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800475a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800475c:	f1b8 0f00 	cmp.w	r8, #0
 8004760:	bf0c      	ite	eq
 8004762:	f04f 0a01 	moveq.w	sl, #1
 8004766:	f04f 0a03 	movne.w	sl, #3
 800476a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800476c:	f015 0508 	ands.w	r5, r5, #8
 8004770:	f000 80ce 	beq.w	8004910 <__gxx_personality_v0+0x238>
 8004774:	f1ba 0f01 	cmp.w	sl, #1
 8004778:	f040 80c6 	bne.w	8004908 <__gxx_personality_v0+0x230>
 800477c:	f000 fa86 	bl	8004c8c <_ZSt9terminatev>
 8004780:	2502      	movs	r5, #2
 8004782:	e7d8      	b.n	8004736 <__gxx_personality_v0+0x5e>
 8004784:	9a07      	ldr	r2, [sp, #28]
 8004786:	4413      	add	r3, r2
 8004788:	429f      	cmp	r7, r3
 800478a:	f080 8137 	bcs.w	80049fc <__gxx_personality_v0+0x324>
 800478e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004792:	f1b8 0f00 	cmp.w	r8, #0
 8004796:	d001      	beq.n	800479c <__gxx_personality_v0+0xc4>
 8004798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800479a:	4498      	add	r8, r3
 800479c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800479e:	b117      	cbz	r7, 80047a6 <__gxx_personality_v0+0xce>
 80047a0:	1e78      	subs	r0, r7, #1
 80047a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80047a4:	4407      	add	r7, r0
 80047a6:	f1b8 0f00 	cmp.w	r8, #0
 80047aa:	d0a8      	beq.n	80046fe <__gxx_personality_v0+0x26>
 80047ac:	2f00      	cmp	r7, #0
 80047ae:	f000 80a1 	beq.w	80048f4 <__gxx_personality_v0+0x21c>
 80047b2:	f015 0308 	ands.w	r3, r5, #8
 80047b6:	9302      	str	r3, [sp, #8]
 80047b8:	d036      	beq.n	8004828 <__gxx_personality_v0+0x150>
 80047ba:	2347      	movs	r3, #71	; 0x47
 80047bc:	7023      	strb	r3, [r4, #0]
 80047be:	234e      	movs	r3, #78	; 0x4e
 80047c0:	7063      	strb	r3, [r4, #1]
 80047c2:	2355      	movs	r3, #85	; 0x55
 80047c4:	70a3      	strb	r3, [r4, #2]
 80047c6:	2343      	movs	r3, #67	; 0x43
 80047c8:	70e3      	strb	r3, [r4, #3]
 80047ca:	2346      	movs	r3, #70	; 0x46
 80047cc:	7123      	strb	r3, [r4, #4]
 80047ce:	234f      	movs	r3, #79	; 0x4f
 80047d0:	7163      	strb	r3, [r4, #5]
 80047d2:	2352      	movs	r3, #82	; 0x52
 80047d4:	71a3      	strb	r3, [r4, #6]
 80047d6:	2300      	movs	r3, #0
 80047d8:	71e3      	strb	r3, [r4, #7]
 80047da:	f04f 0a00 	mov.w	sl, #0
 80047de:	f06f 0b03 	mvn.w	fp, #3
 80047e2:	a907      	add	r1, sp, #28
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff feae 	bl	8004546 <_ZL12read_sleb128PKhPl>
 80047ea:	a908      	add	r1, sp, #32
 80047ec:	9003      	str	r0, [sp, #12]
 80047ee:	f7ff feaa 	bl	8004546 <_ZL12read_sleb128PKhPl>
 80047f2:	9a07      	ldr	r2, [sp, #28]
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d076      	beq.n	80048e6 <__gxx_personality_v0+0x20e>
 80047f8:	dd3d      	ble.n	8004876 <__gxx_personality_v0+0x19e>
 80047fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80047fe:	28ff      	cmp	r0, #255	; 0xff
 8004800:	d035      	beq.n	800486e <__gxx_personality_v0+0x196>
 8004802:	f000 0307 	and.w	r3, r0, #7
 8004806:	2b04      	cmp	r3, #4
 8004808:	f63f af75 	bhi.w	80046f6 <__gxx_personality_v0+0x1e>
 800480c:	a101      	add	r1, pc, #4	; (adr r1, 8004814 <__gxx_personality_v0+0x13c>)
 800480e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004873 	.word	0x08004873
 8004818:	080046f7 	.word	0x080046f7
 800481c:	0800483b 	.word	0x0800483b
 8004820:	08004873 	.word	0x08004873
 8004824:	0800486b 	.word	0x0800486b
 8004828:	79e3      	ldrb	r3, [r4, #7]
 800482a:	2b01      	cmp	r3, #1
 800482c:	bf0c      	ite	eq
 800482e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8004832:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	e7cf      	b.n	80047da <__gxx_personality_v0+0x102>
 800483a:	2702      	movs	r7, #2
 800483c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800483e:	ab09      	add	r3, sp, #36	; 0x24
 8004840:	fb07 1212 	mls	r2, r7, r2, r1
 8004844:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004846:	f7ff fe96 	bl	8004576 <_ZL28read_encoded_value_with_basehjPKhPj>
 800484a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800484c:	b369      	cbz	r1, 80048aa <__gxx_personality_v0+0x1d2>
 800484e:	b12c      	cbz	r4, 800485c <__gxx_personality_v0+0x184>
 8004850:	ab04      	add	r3, sp, #16
 8004852:	2200      	movs	r2, #0
 8004854:	4620      	mov	r0, r4
 8004856:	f7ff fdd1 	bl	80043fc <__cxa_type_match>
 800485a:	bb30      	cbnz	r0, 80048aa <__gxx_personality_v0+0x1d2>
 800485c:	9f08      	ldr	r7, [sp, #32]
 800485e:	2f00      	cmp	r7, #0
 8004860:	d044      	beq.n	80048ec <__gxx_personality_v0+0x214>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	443b      	add	r3, r7
 8004866:	461f      	mov	r7, r3
 8004868:	e7bb      	b.n	80047e2 <__gxx_personality_v0+0x10a>
 800486a:	2708      	movs	r7, #8
 800486c:	e7e6      	b.n	800483c <__gxx_personality_v0+0x164>
 800486e:	2700      	movs	r7, #0
 8004870:	e7e4      	b.n	800483c <__gxx_personality_v0+0x164>
 8004872:	2704      	movs	r7, #4
 8004874:	e7e2      	b.n	800483c <__gxx_personality_v0+0x164>
 8004876:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004878:	3201      	adds	r2, #1
 800487a:	b36c      	cbz	r4, 80048d8 <__gxx_personality_v0+0x200>
 800487c:	9b02      	ldr	r3, [sp, #8]
 800487e:	bb5b      	cbnz	r3, 80048d8 <__gxx_personality_v0+0x200>
 8004880:	fb0b 7202 	mla	r2, fp, r2, r7
 8004884:	9b04      	ldr	r3, [sp, #16]
 8004886:	1f17      	subs	r7, r2, #4
 8004888:	9306      	str	r3, [sp, #24]
 800488a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800488e:	b141      	cbz	r1, 80048a2 <__gxx_personality_v0+0x1ca>
 8004890:	ab06      	add	r3, sp, #24
 8004892:	2200      	movs	r2, #0
 8004894:	4439      	add	r1, r7
 8004896:	4620      	mov	r0, r4
 8004898:	f7ff fdb0 	bl	80043fc <__cxa_type_match>
 800489c:	2800      	cmp	r0, #0
 800489e:	d0f4      	beq.n	800488a <__gxx_personality_v0+0x1b2>
 80048a0:	2101      	movs	r1, #1
 80048a2:	f081 0101 	eor.w	r1, r1, #1
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d0d8      	beq.n	800485c <__gxx_personality_v0+0x184>
 80048aa:	f04f 0a03 	mov.w	sl, #3
 80048ae:	9f07      	ldr	r7, [sp, #28]
 80048b0:	07eb      	lsls	r3, r5, #31
 80048b2:	d527      	bpl.n	8004904 <__gxx_personality_v0+0x22c>
 80048b4:	f1ba 0f02 	cmp.w	sl, #2
 80048b8:	f43f af21 	beq.w	80046fe <__gxx_personality_v0+0x26>
 80048bc:	210d      	movs	r1, #13
 80048be:	4630      	mov	r0, r6
 80048c0:	9d04      	ldr	r5, [sp, #16]
 80048c2:	f7ff fefd 	bl	80046c0 <_Unwind_GetGR>
 80048c6:	6265      	str	r5, [r4, #36]	; 0x24
 80048c8:	6220      	str	r0, [r4, #32]
 80048ca:	62a7      	str	r7, [r4, #40]	; 0x28
 80048cc:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80048d0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80048d4:	2006      	movs	r0, #6
 80048d6:	e718      	b.n	800470a <__gxx_personality_v0+0x32>
 80048d8:	fb0b f202 	mul.w	r2, fp, r2
 80048dc:	58b9      	ldr	r1, [r7, r2]
 80048de:	fab1 f181 	clz	r1, r1
 80048e2:	0949      	lsrs	r1, r1, #5
 80048e4:	e7df      	b.n	80048a6 <__gxx_personality_v0+0x1ce>
 80048e6:	f04f 0a01 	mov.w	sl, #1
 80048ea:	e7b7      	b.n	800485c <__gxx_personality_v0+0x184>
 80048ec:	f1ba 0f00 	cmp.w	sl, #0
 80048f0:	f43f af05 	beq.w	80046fe <__gxx_personality_v0+0x26>
 80048f4:	f04f 0a02 	mov.w	sl, #2
 80048f8:	e7da      	b.n	80048b0 <__gxx_personality_v0+0x1d8>
 80048fa:	2700      	movs	r7, #0
 80048fc:	f04f 0a01 	mov.w	sl, #1
 8004900:	46b8      	mov	r8, r7
 8004902:	e7d5      	b.n	80048b0 <__gxx_personality_v0+0x1d8>
 8004904:	4649      	mov	r1, r9
 8004906:	e731      	b.n	800476c <__gxx_personality_v0+0x94>
 8004908:	2f00      	cmp	r7, #0
 800490a:	da23      	bge.n	8004954 <__gxx_personality_v0+0x27c>
 800490c:	f000 f9d0 	bl	8004cb0 <_ZSt10unexpectedv>
 8004910:	f1ba 0f01 	cmp.w	sl, #1
 8004914:	d102      	bne.n	800491c <__gxx_personality_v0+0x244>
 8004916:	4620      	mov	r0, r4
 8004918:	f000 f941 	bl	8004b9e <__cxa_call_terminate>
 800491c:	2f00      	cmp	r7, #0
 800491e:	da19      	bge.n	8004954 <__gxx_personality_v0+0x27c>
 8004920:	aa0a      	add	r2, sp, #40	; 0x28
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff fe9e 	bl	8004664 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8004928:	4631      	mov	r1, r6
 800492a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800492e:	f7ff fe66 	bl	80045fe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8004932:	f06f 0303 	mvn.w	r3, #3
 8004936:	fb07 3203 	mla	r2, r7, r3, r3
 800493a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800493c:	900c      	str	r0, [sp, #48]	; 0x30
 800493e:	4413      	add	r3, r2
 8004940:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8004944:	b10a      	cbz	r2, 800494a <__gxx_personality_v0+0x272>
 8004946:	3501      	adds	r5, #1
 8004948:	e7fa      	b.n	8004940 <__gxx_personality_v0+0x268>
 800494a:	2204      	movs	r2, #4
 800494c:	62a5      	str	r5, [r4, #40]	; 0x28
 800494e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004950:	6322      	str	r2, [r4, #48]	; 0x30
 8004952:	6363      	str	r3, [r4, #52]	; 0x34
 8004954:	ab10      	add	r3, sp, #64	; 0x40
 8004956:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2300      	movs	r3, #0
 800495e:	4630      	mov	r0, r6
 8004960:	461a      	mov	r2, r3
 8004962:	4619      	mov	r1, r3
 8004964:	f7fc fa0c 	bl	8000d80 <_Unwind_VRS_Set>
 8004968:	ab10      	add	r3, sp, #64	; 0x40
 800496a:	f843 7d20 	str.w	r7, [r3, #-32]!
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2300      	movs	r3, #0
 8004972:	2201      	movs	r2, #1
 8004974:	4619      	mov	r1, r3
 8004976:	4630      	mov	r0, r6
 8004978:	f7fc fa02 	bl	8000d80 <_Unwind_VRS_Set>
 800497c:	210f      	movs	r1, #15
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff fe9e 	bl	80046c0 <_Unwind_GetGR>
 8004984:	f000 0001 	and.w	r0, r0, #1
 8004988:	ab10      	add	r3, sp, #64	; 0x40
 800498a:	ea40 0008 	orr.w	r0, r0, r8
 800498e:	f843 0d24 	str.w	r0, [r3, #-36]!
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	220f      	movs	r2, #15
 8004998:	4619      	mov	r1, r3
 800499a:	4630      	mov	r0, r6
 800499c:	f7fc f9f0 	bl	8000d80 <_Unwind_VRS_Set>
 80049a0:	f1ba 0f02 	cmp.w	sl, #2
 80049a4:	d102      	bne.n	80049ac <__gxx_personality_v0+0x2d4>
 80049a6:	4620      	mov	r0, r4
 80049a8:	f7ff fd86 	bl	80044b8 <__cxa_begin_cleanup>
 80049ac:	2007      	movs	r0, #7
 80049ae:	e6ac      	b.n	800470a <__gxx_personality_v0+0x32>
 80049b0:	aa10      	add	r2, sp, #64	; 0x40
 80049b2:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	4643      	mov	r3, r8
 80049ba:	220c      	movs	r2, #12
 80049bc:	4641      	mov	r1, r8
 80049be:	4630      	mov	r0, r6
 80049c0:	f045 0502 	orr.w	r5, r5, #2
 80049c4:	f7fc f9dc 	bl	8000d80 <_Unwind_VRS_Set>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f7fc ff55 	bl	8001878 <_Unwind_GetLanguageSpecificData>
 80049ce:	4681      	mov	r9, r0
 80049d0:	2800      	cmp	r0, #0
 80049d2:	f43f ae94 	beq.w	80046fe <__gxx_personality_v0+0x26>
 80049d6:	aa0a      	add	r2, sp, #40	; 0x28
 80049d8:	4601      	mov	r1, r0
 80049da:	4630      	mov	r0, r6
 80049dc:	f7ff fe42 	bl	8004664 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80049e0:	4631      	mov	r1, r6
 80049e2:	4680      	mov	r8, r0
 80049e4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80049e8:	f7ff fe09 	bl	80045fe <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80049ec:	210f      	movs	r1, #15
 80049ee:	900c      	str	r0, [sp, #48]	; 0x30
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7ff fe65 	bl	80046c0 <_Unwind_GetGR>
 80049f6:	f020 0001 	bic.w	r0, r0, #1
 80049fa:	1e47      	subs	r7, r0, #1
 80049fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049fe:	4598      	cmp	r8, r3
 8004a00:	f4bf af7b 	bcs.w	80048fa <__gxx_personality_v0+0x222>
 8004a04:	4642      	mov	r2, r8
 8004a06:	ab06      	add	r3, sp, #24
 8004a08:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7ff fe19 	bl	8004644 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004a12:	ab07      	add	r3, sp, #28
 8004a14:	4602      	mov	r2, r0
 8004a16:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f7ff fe12 	bl	8004644 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004a20:	ab08      	add	r3, sp, #32
 8004a22:	4602      	mov	r2, r0
 8004a24:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7ff fe0b 	bl	8004644 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8004a2e:	a909      	add	r1, sp, #36	; 0x24
 8004a30:	f7ff fd78 	bl	8004524 <_ZL12read_uleb128PKhPm>
 8004a34:	9a06      	ldr	r2, [sp, #24]
 8004a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4413      	add	r3, r2
 8004a3c:	429f      	cmp	r7, r3
 8004a3e:	f4bf aea1 	bcs.w	8004784 <__gxx_personality_v0+0xac>
 8004a42:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8004a46:	e7d9      	b.n	80049fc <__gxx_personality_v0+0x324>

08004a48 <_ZdlPvj>:
 8004a48:	f000 b88a 	b.w	8004b60 <_ZdlPv>

08004a4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8004a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004a4e:	2310      	movs	r3, #16
 8004a50:	2400      	movs	r4, #0
 8004a52:	9302      	str	r3, [sp, #8]
 8004a54:	6803      	ldr	r3, [r0, #0]
 8004a56:	4615      	mov	r5, r2
 8004a58:	699e      	ldr	r6, [r3, #24]
 8004a5a:	9400      	str	r4, [sp, #0]
 8004a5c:	466b      	mov	r3, sp
 8004a5e:	f88d 4004 	strb.w	r4, [sp, #4]
 8004a62:	9403      	str	r4, [sp, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	47b0      	blx	r6
 8004a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a6c:	f003 0306 	and.w	r3, r3, #6
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	bf09      	itett	eq
 8004a74:	2001      	moveq	r0, #1
 8004a76:	4620      	movne	r0, r4
 8004a78:	9b00      	ldreq	r3, [sp, #0]
 8004a7a:	602b      	streq	r3, [r5, #0]
 8004a7c:	b004      	add	sp, #16
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}

08004a80 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8004a80:	9800      	ldr	r0, [sp, #0]
 8004a82:	4290      	cmp	r0, r2
 8004a84:	bf0c      	ite	eq
 8004a86:	2006      	moveq	r0, #6
 8004a88:	2001      	movne	r0, #1
 8004a8a:	4770      	bx	lr

08004a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8004a92:	6003      	str	r3, [r0, #0]
 8004a94:	f000 f84b 	bl	8004b2e <_ZNSt9type_infoD1Ev>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	080057b8 	.word	0x080057b8

08004aa0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	f7ff fff2 	bl	8004a8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	2108      	movs	r1, #8
 8004aac:	f7ff ffcc 	bl	8004a48 <_ZdlPvj>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	bd10      	pop	{r4, pc}

08004ab4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	461c      	mov	r4, r3
 8004aba:	f000 f83b 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004abe:	b120      	cbz	r0, 8004aca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	60e3      	str	r3, [r4, #12]
 8004ac4:	2306      	movs	r3, #6
 8004ac6:	6025      	str	r5, [r4, #0]
 8004ac8:	7123      	strb	r3, [r4, #4]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}

08004acc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8004acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	461f      	mov	r7, r3
 8004ad8:	f000 f82c 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004adc:	b948      	cbnz	r0, 8004af2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004ade:	2f03      	cmp	r7, #3
 8004ae0:	d807      	bhi.n	8004af2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	4632      	mov	r2, r6
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4620      	mov	r0, r4
 8004aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	4718      	bx	r3
 8004af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004af6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8004af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afa:	9e06      	ldr	r6, [sp, #24]
 8004afc:	4698      	mov	r8, r3
 8004afe:	9b08      	ldr	r3, [sp, #32]
 8004b00:	4607      	mov	r7, r0
 8004b02:	429e      	cmp	r6, r3
 8004b04:	4615      	mov	r5, r2
 8004b06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004b08:	d103      	bne.n	8004b12 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8004b0a:	9907      	ldr	r1, [sp, #28]
 8004b0c:	f000 f812 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004b10:	b958      	cbnz	r0, 8004b2a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8004b12:	4641      	mov	r1, r8
 8004b14:	4638      	mov	r0, r7
 8004b16:	f000 f80d 	bl	8004b34 <_ZNKSt9type_infoeqERKS_>
 8004b1a:	b118      	cbz	r0, 8004b24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	6026      	str	r6, [r4, #0]
 8004b20:	7125      	strb	r5, [r4, #4]
 8004b22:	71a3      	strb	r3, [r4, #6]
 8004b24:	2000      	movs	r0, #0
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2a:	7165      	strb	r5, [r4, #5]
 8004b2c:	e7fa      	b.n	8004b24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08004b2e <_ZNSt9type_infoD1Ev>:
 8004b2e:	4770      	bx	lr

08004b30 <_ZNKSt9type_info14__is_pointer_pEv>:
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr

08004b34 <_ZNKSt9type_infoeqERKS_>:
 8004b34:	4281      	cmp	r1, r0
 8004b36:	b508      	push	{r3, lr}
 8004b38:	d00e      	beq.n	8004b58 <_ZNKSt9type_infoeqERKS_+0x24>
 8004b3a:	6840      	ldr	r0, [r0, #4]
 8004b3c:	7803      	ldrb	r3, [r0, #0]
 8004b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b40:	d00c      	beq.n	8004b5c <_ZNKSt9type_infoeqERKS_+0x28>
 8004b42:	6849      	ldr	r1, [r1, #4]
 8004b44:	780b      	ldrb	r3, [r1, #0]
 8004b46:	2b2a      	cmp	r3, #42	; 0x2a
 8004b48:	bf08      	it	eq
 8004b4a:	3101      	addeq	r1, #1
 8004b4c:	f7fb fb00 	bl	8000150 <strcmp>
 8004b50:	fab0 f080 	clz	r0, r0
 8004b54:	0940      	lsrs	r0, r0, #5
 8004b56:	bd08      	pop	{r3, pc}
 8004b58:	2001      	movs	r0, #1
 8004b5a:	bd08      	pop	{r3, pc}
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	bd08      	pop	{r3, pc}

08004b60 <_ZdlPv>:
 8004b60:	f000 b8e2 	b.w	8004d28 <free>

08004b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004b64:	7803      	ldrb	r3, [r0, #0]
 8004b66:	2b47      	cmp	r3, #71	; 0x47
 8004b68:	d117      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b6a:	7843      	ldrb	r3, [r0, #1]
 8004b6c:	2b4e      	cmp	r3, #78	; 0x4e
 8004b6e:	d114      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b70:	7883      	ldrb	r3, [r0, #2]
 8004b72:	2b55      	cmp	r3, #85	; 0x55
 8004b74:	d111      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b76:	78c3      	ldrb	r3, [r0, #3]
 8004b78:	2b43      	cmp	r3, #67	; 0x43
 8004b7a:	d10e      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b7c:	7903      	ldrb	r3, [r0, #4]
 8004b7e:	2b43      	cmp	r3, #67	; 0x43
 8004b80:	d10b      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b82:	7943      	ldrb	r3, [r0, #5]
 8004b84:	2b2b      	cmp	r3, #43	; 0x2b
 8004b86:	d108      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b88:	7983      	ldrb	r3, [r0, #6]
 8004b8a:	2b2b      	cmp	r3, #43	; 0x2b
 8004b8c:	d105      	bne.n	8004b9a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004b8e:	79c0      	ldrb	r0, [r0, #7]
 8004b90:	2801      	cmp	r0, #1
 8004b92:	bf8c      	ite	hi
 8004b94:	2000      	movhi	r0, #0
 8004b96:	2001      	movls	r0, #1
 8004b98:	4770      	bx	lr
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	4770      	bx	lr

08004b9e <__cxa_call_terminate>:
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	b148      	cbz	r0, 8004bb8 <__cxa_call_terminate+0x1a>
 8004ba4:	f000 f83b 	bl	8004c1e <__cxa_begin_catch>
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff ffdb 	bl	8004b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004bae:	b118      	cbz	r0, 8004bb8 <__cxa_call_terminate+0x1a>
 8004bb0:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8004bb4:	f000 f85d 	bl	8004c72 <_ZN10__cxxabiv111__terminateEPFvvE>
 8004bb8:	f000 f868 	bl	8004c8c <_ZSt9terminatev>

08004bbc <__cxa_call_unexpected>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	f7ff ffd0 	bl	8004b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004bc4:	b140      	cbz	r0, 8004bd8 <__cxa_call_unexpected+0x1c>
 8004bc6:	2500      	movs	r5, #0
 8004bc8:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f000 f826 	bl	8004c1e <__cxa_begin_catch>
 8004bd2:	b125      	cbz	r5, 8004bde <__cxa_call_unexpected+0x22>
 8004bd4:	f000 f86c 	bl	8004cb0 <_ZSt10unexpectedv>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	2501      	movs	r5, #1
 8004bdc:	e7f6      	b.n	8004bcc <__cxa_call_unexpected+0x10>
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 f859 	bl	8004c96 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08004be4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8004be4:	7803      	ldrb	r3, [r0, #0]
 8004be6:	2b47      	cmp	r3, #71	; 0x47
 8004be8:	d117      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004bea:	7843      	ldrb	r3, [r0, #1]
 8004bec:	2b4e      	cmp	r3, #78	; 0x4e
 8004bee:	d114      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004bf0:	7883      	ldrb	r3, [r0, #2]
 8004bf2:	2b55      	cmp	r3, #85	; 0x55
 8004bf4:	d111      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004bf6:	78c3      	ldrb	r3, [r0, #3]
 8004bf8:	2b43      	cmp	r3, #67	; 0x43
 8004bfa:	d10e      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004bfc:	7903      	ldrb	r3, [r0, #4]
 8004bfe:	2b43      	cmp	r3, #67	; 0x43
 8004c00:	d10b      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c02:	7943      	ldrb	r3, [r0, #5]
 8004c04:	2b2b      	cmp	r3, #43	; 0x2b
 8004c06:	d108      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c08:	7983      	ldrb	r3, [r0, #6]
 8004c0a:	2b2b      	cmp	r3, #43	; 0x2b
 8004c0c:	d105      	bne.n	8004c1a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8004c0e:	79c0      	ldrb	r0, [r0, #7]
 8004c10:	2801      	cmp	r0, #1
 8004c12:	bf8c      	ite	hi
 8004c14:	2000      	movhi	r0, #0
 8004c16:	2001      	movls	r0, #1
 8004c18:	4770      	bx	lr
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	4770      	bx	lr

08004c1e <__cxa_begin_catch>:
 8004c1e:	b538      	push	{r3, r4, r5, lr}
 8004c20:	4605      	mov	r5, r0
 8004c22:	f000 f84b 	bl	8004cbc <__cxa_get_globals>
 8004c26:	4601      	mov	r1, r0
 8004c28:	6802      	ldr	r2, [r0, #0]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f1a5 0420 	sub.w	r4, r5, #32
 8004c30:	f7ff ffd8 	bl	8004be4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8004c34:	b930      	cbnz	r0, 8004c44 <__cxa_begin_catch+0x26>
 8004c36:	b10a      	cbz	r2, 8004c3c <__cxa_begin_catch+0x1e>
 8004c38:	f000 f828 	bl	8004c8c <_ZSt9terminatev>
 8004c3c:	600c      	str	r4, [r1, #0]
 8004c3e:	4614      	mov	r4, r2
 8004c40:	4620      	mov	r0, r4
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8004c48:	4628      	mov	r0, r5
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfb4      	ite	lt
 8004c4e:	f1c3 0301 	rsblt	r3, r3, #1
 8004c52:	3301      	addge	r3, #1
 8004c54:	f845 3c0c 	str.w	r3, [r5, #-12]
 8004c58:	684b      	ldr	r3, [r1, #4]
 8004c5a:	42a2      	cmp	r2, r4
 8004c5c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c60:	604b      	str	r3, [r1, #4]
 8004c62:	bf1c      	itt	ne
 8004c64:	f845 2c10 	strne.w	r2, [r5, #-16]
 8004c68:	600c      	strne	r4, [r1, #0]
 8004c6a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004c6c:	f7fc f85a 	bl	8000d24 <_Unwind_Complete>
 8004c70:	e7e6      	b.n	8004c40 <__cxa_begin_catch+0x22>

08004c72 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004c72:	b508      	push	{r3, lr}
 8004c74:	4780      	blx	r0
 8004c76:	f000 f825 	bl	8004cc4 <abort>
	...

08004c7c <_ZSt13get_terminatev>:
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <_ZSt13get_terminatev+0xc>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	f3bf 8f5b 	dmb	ish
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000010 	.word	0x20000010

08004c8c <_ZSt9terminatev>:
 8004c8c:	b508      	push	{r3, lr}
 8004c8e:	f7ff fff5 	bl	8004c7c <_ZSt13get_terminatev>
 8004c92:	f7ff ffee 	bl	8004c72 <_ZN10__cxxabiv111__terminateEPFvvE>

08004c96 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8004c96:	b508      	push	{r3, lr}
 8004c98:	4780      	blx	r0
 8004c9a:	f7ff fff7 	bl	8004c8c <_ZSt9terminatev>
	...

08004ca0 <_ZSt14get_unexpectedv>:
 8004ca0:	4b02      	ldr	r3, [pc, #8]	; (8004cac <_ZSt14get_unexpectedv+0xc>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	f3bf 8f5b 	dmb	ish
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000014 	.word	0x20000014

08004cb0 <_ZSt10unexpectedv>:
 8004cb0:	b508      	push	{r3, lr}
 8004cb2:	f7ff fff5 	bl	8004ca0 <_ZSt14get_unexpectedv>
 8004cb6:	f7ff ffee 	bl	8004c96 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08004cbc <__cxa_get_globals>:
 8004cbc:	4800      	ldr	r0, [pc, #0]	; (8004cc0 <__cxa_get_globals+0x4>)
 8004cbe:	4770      	bx	lr
 8004cc0:	20001040 	.word	0x20001040

08004cc4 <abort>:
 8004cc4:	b508      	push	{r3, lr}
 8004cc6:	2006      	movs	r0, #6
 8004cc8:	f000 f92c 	bl	8004f24 <raise>
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fd fa63 	bl	8002198 <_exit>
	...

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	; (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000018 	.word	0x20000018

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	2500      	movs	r5, #0
 8004ce4:	4e0c      	ldr	r6, [pc, #48]	; (8004d18 <__libc_init_array+0x38>)
 8004ce6:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce8:	1ba4      	subs	r4, r4, r6
 8004cea:	10a4      	asrs	r4, r4, #2
 8004cec:	42a5      	cmp	r5, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	f000 fc9a 	bl	8005628 <_init>
 8004cf4:	2500      	movs	r5, #0
 8004cf6:	4e0a      	ldr	r6, [pc, #40]	; (8004d20 <__libc_init_array+0x40>)
 8004cf8:	4c0a      	ldr	r4, [pc, #40]	; (8004d24 <__libc_init_array+0x44>)
 8004cfa:	1ba4      	subs	r4, r4, r6
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	42a5      	cmp	r5, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d08:	4798      	blx	r3
 8004d0a:	3501      	adds	r5, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d12:	4798      	blx	r3
 8004d14:	3501      	adds	r5, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08005a54 	.word	0x08005a54
 8004d1c:	08005a54 	.word	0x08005a54
 8004d20:	08005a54 	.word	0x08005a54
 8004d24:	08005a58 	.word	0x08005a58

08004d28 <free>:
 8004d28:	4b02      	ldr	r3, [pc, #8]	; (8004d34 <free+0xc>)
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	f000 b817 	b.w	8004d60 <_free_r>
 8004d32:	bf00      	nop
 8004d34:	20000018 	.word	0x20000018

08004d38 <memcpy>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	1e43      	subs	r3, r0, #1
 8004d3c:	440a      	add	r2, r1
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	d100      	bne.n	8004d44 <memcpy+0xc>
 8004d42:	bd10      	pop	{r4, pc}
 8004d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4c:	e7f7      	b.n	8004d3e <memcpy+0x6>

08004d4e <memset>:
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4402      	add	r2, r0
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d100      	bne.n	8004d58 <memset+0xa>
 8004d56:	4770      	bx	lr
 8004d58:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5c:	e7f9      	b.n	8004d52 <memset+0x4>
	...

08004d60 <_free_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d043      	beq.n	8004df0 <_free_r+0x90>
 8004d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6c:	1f0c      	subs	r4, r1, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfb8      	it	lt
 8004d72:	18e4      	addlt	r4, r4, r3
 8004d74:	f000 f916 	bl	8004fa4 <__malloc_lock>
 8004d78:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <_free_r+0x94>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	b933      	cbnz	r3, 8004d8e <_free_r+0x2e>
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	6014      	str	r4, [r2, #0]
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d8a:	f000 b90c 	b.w	8004fa6 <__malloc_unlock>
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	d90b      	bls.n	8004daa <_free_r+0x4a>
 8004d92:	6821      	ldr	r1, [r4, #0]
 8004d94:	1862      	adds	r2, r4, r1
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bf01      	itttt	eq
 8004d9a:	681a      	ldreq	r2, [r3, #0]
 8004d9c:	685b      	ldreq	r3, [r3, #4]
 8004d9e:	1852      	addeq	r2, r2, r1
 8004da0:	6022      	streq	r2, [r4, #0]
 8004da2:	6063      	str	r3, [r4, #4]
 8004da4:	6004      	str	r4, [r0, #0]
 8004da6:	e7ed      	b.n	8004d84 <_free_r+0x24>
 8004da8:	4613      	mov	r3, r2
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	b10a      	cbz	r2, 8004db2 <_free_r+0x52>
 8004dae:	42a2      	cmp	r2, r4
 8004db0:	d9fa      	bls.n	8004da8 <_free_r+0x48>
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	1858      	adds	r0, r3, r1
 8004db6:	42a0      	cmp	r0, r4
 8004db8:	d10b      	bne.n	8004dd2 <_free_r+0x72>
 8004dba:	6820      	ldr	r0, [r4, #0]
 8004dbc:	4401      	add	r1, r0
 8004dbe:	1858      	adds	r0, r3, r1
 8004dc0:	4282      	cmp	r2, r0
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	d1de      	bne.n	8004d84 <_free_r+0x24>
 8004dc6:	6810      	ldr	r0, [r2, #0]
 8004dc8:	6852      	ldr	r2, [r2, #4]
 8004dca:	4401      	add	r1, r0
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	605a      	str	r2, [r3, #4]
 8004dd0:	e7d8      	b.n	8004d84 <_free_r+0x24>
 8004dd2:	d902      	bls.n	8004dda <_free_r+0x7a>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	e7d4      	b.n	8004d84 <_free_r+0x24>
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	1821      	adds	r1, r4, r0
 8004dde:	428a      	cmp	r2, r1
 8004de0:	bf01      	itttt	eq
 8004de2:	6811      	ldreq	r1, [r2, #0]
 8004de4:	6852      	ldreq	r2, [r2, #4]
 8004de6:	1809      	addeq	r1, r1, r0
 8004de8:	6021      	streq	r1, [r4, #0]
 8004dea:	6062      	str	r2, [r4, #4]
 8004dec:	605c      	str	r4, [r3, #4]
 8004dee:	e7c9      	b.n	8004d84 <_free_r+0x24>
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
 8004df2:	bf00      	nop
 8004df4:	2000104c 	.word	0x2000104c

08004df8 <_malloc_r>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	1ccd      	adds	r5, r1, #3
 8004dfc:	f025 0503 	bic.w	r5, r5, #3
 8004e00:	3508      	adds	r5, #8
 8004e02:	2d0c      	cmp	r5, #12
 8004e04:	bf38      	it	cc
 8004e06:	250c      	movcc	r5, #12
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	db01      	blt.n	8004e12 <_malloc_r+0x1a>
 8004e0e:	42a9      	cmp	r1, r5
 8004e10:	d903      	bls.n	8004e1a <_malloc_r+0x22>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	2000      	movs	r0, #0
 8004e18:	bd70      	pop	{r4, r5, r6, pc}
 8004e1a:	f000 f8c3 	bl	8004fa4 <__malloc_lock>
 8004e1e:	4a23      	ldr	r2, [pc, #140]	; (8004eac <_malloc_r+0xb4>)
 8004e20:	6814      	ldr	r4, [r2, #0]
 8004e22:	4621      	mov	r1, r4
 8004e24:	b991      	cbnz	r1, 8004e4c <_malloc_r+0x54>
 8004e26:	4c22      	ldr	r4, [pc, #136]	; (8004eb0 <_malloc_r+0xb8>)
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	b91b      	cbnz	r3, 8004e34 <_malloc_r+0x3c>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f841 	bl	8004eb4 <_sbrk_r>
 8004e32:	6020      	str	r0, [r4, #0]
 8004e34:	4629      	mov	r1, r5
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f83c 	bl	8004eb4 <_sbrk_r>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d126      	bne.n	8004e8e <_malloc_r+0x96>
 8004e40:	230c      	movs	r3, #12
 8004e42:	4630      	mov	r0, r6
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	f000 f8ae 	bl	8004fa6 <__malloc_unlock>
 8004e4a:	e7e4      	b.n	8004e16 <_malloc_r+0x1e>
 8004e4c:	680b      	ldr	r3, [r1, #0]
 8004e4e:	1b5b      	subs	r3, r3, r5
 8004e50:	d41a      	bmi.n	8004e88 <_malloc_r+0x90>
 8004e52:	2b0b      	cmp	r3, #11
 8004e54:	d90f      	bls.n	8004e76 <_malloc_r+0x7e>
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	18cc      	adds	r4, r1, r3
 8004e5a:	50cd      	str	r5, [r1, r3]
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f8a2 	bl	8004fa6 <__malloc_unlock>
 8004e62:	f104 000b 	add.w	r0, r4, #11
 8004e66:	1d23      	adds	r3, r4, #4
 8004e68:	f020 0007 	bic.w	r0, r0, #7
 8004e6c:	1ac3      	subs	r3, r0, r3
 8004e6e:	d01b      	beq.n	8004ea8 <_malloc_r+0xb0>
 8004e70:	425a      	negs	r2, r3
 8004e72:	50e2      	str	r2, [r4, r3]
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
 8004e76:	428c      	cmp	r4, r1
 8004e78:	bf0b      	itete	eq
 8004e7a:	6863      	ldreq	r3, [r4, #4]
 8004e7c:	684b      	ldrne	r3, [r1, #4]
 8004e7e:	6013      	streq	r3, [r2, #0]
 8004e80:	6063      	strne	r3, [r4, #4]
 8004e82:	bf18      	it	ne
 8004e84:	460c      	movne	r4, r1
 8004e86:	e7e9      	b.n	8004e5c <_malloc_r+0x64>
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6849      	ldr	r1, [r1, #4]
 8004e8c:	e7ca      	b.n	8004e24 <_malloc_r+0x2c>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d005      	beq.n	8004ea4 <_malloc_r+0xac>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f80a 	bl	8004eb4 <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0cd      	beq.n	8004e40 <_malloc_r+0x48>
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	e7d9      	b.n	8004e5c <_malloc_r+0x64>
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000104c 	.word	0x2000104c
 8004eb0:	20001050 	.word	0x20001050

08004eb4 <_sbrk_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4c05      	ldr	r4, [pc, #20]	; (8004ed0 <_sbrk_r+0x1c>)
 8004eba:	4605      	mov	r5, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	f7fd f970 	bl	80021a4 <_sbrk>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_sbrk_r+0x1a>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_sbrk_r+0x1a>
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20001154 	.word	0x20001154

08004ed4 <_raise_r>:
 8004ed4:	291f      	cmp	r1, #31
 8004ed6:	b538      	push	{r3, r4, r5, lr}
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	d904      	bls.n	8004ee8 <_raise_r+0x14>
 8004ede:	2316      	movs	r3, #22
 8004ee0:	6003      	str	r3, [r0, #0]
 8004ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eea:	b112      	cbz	r2, 8004ef2 <_raise_r+0x1e>
 8004eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ef0:	b94b      	cbnz	r3, 8004f06 <_raise_r+0x32>
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f000 f830 	bl	8004f58 <_getpid_r>
 8004ef8:	462a      	mov	r2, r5
 8004efa:	4601      	mov	r1, r0
 8004efc:	4620      	mov	r0, r4
 8004efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f02:	f000 b817 	b.w	8004f34 <_kill_r>
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d00a      	beq.n	8004f20 <_raise_r+0x4c>
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	d103      	bne.n	8004f16 <_raise_r+0x42>
 8004f0e:	2316      	movs	r3, #22
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	2001      	movs	r0, #1
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	2400      	movs	r4, #0
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f1e:	4798      	blx	r3
 8004f20:	2000      	movs	r0, #0
 8004f22:	bd38      	pop	{r3, r4, r5, pc}

08004f24 <raise>:
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <raise+0xc>)
 8004f26:	4601      	mov	r1, r0
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	f7ff bfd3 	b.w	8004ed4 <_raise_r>
 8004f2e:	bf00      	nop
 8004f30:	20000018 	.word	0x20000018

08004f34 <_kill_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	2300      	movs	r3, #0
 8004f38:	4c06      	ldr	r4, [pc, #24]	; (8004f54 <_kill_r+0x20>)
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	f7fd f921 	bl	8002188 <_kill>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d102      	bne.n	8004f50 <_kill_r+0x1c>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	b103      	cbz	r3, 8004f50 <_kill_r+0x1c>
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	20001154 	.word	0x20001154

08004f58 <_getpid_r>:
 8004f58:	f7fd b914 	b.w	8002184 <_getpid>

08004f5c <siprintf>:
 8004f5c:	b40e      	push	{r1, r2, r3}
 8004f5e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f62:	b500      	push	{lr}
 8004f64:	b09c      	sub	sp, #112	; 0x70
 8004f66:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004f6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f6e:	9104      	str	r1, [sp, #16]
 8004f70:	9107      	str	r1, [sp, #28]
 8004f72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f76:	ab1d      	add	r3, sp, #116	; 0x74
 8004f78:	9002      	str	r0, [sp, #8]
 8004f7a:	9006      	str	r0, [sp, #24]
 8004f7c:	4808      	ldr	r0, [pc, #32]	; (8004fa0 <siprintf+0x44>)
 8004f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f82:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004f86:	6800      	ldr	r0, [r0, #0]
 8004f88:	a902      	add	r1, sp, #8
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	f000 f868 	bl	8005060 <_svfiprintf_r>
 8004f90:	2200      	movs	r2, #0
 8004f92:	9b02      	ldr	r3, [sp, #8]
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	b01c      	add	sp, #112	; 0x70
 8004f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f9c:	b003      	add	sp, #12
 8004f9e:	4770      	bx	lr
 8004fa0:	20000018 	.word	0x20000018

08004fa4 <__malloc_lock>:
 8004fa4:	4770      	bx	lr

08004fa6 <__malloc_unlock>:
 8004fa6:	4770      	bx	lr

08004fa8 <__ssputs_r>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	688e      	ldr	r6, [r1, #8]
 8004fae:	4682      	mov	sl, r0
 8004fb0:	429e      	cmp	r6, r3
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	4691      	mov	r9, r2
 8004fb6:	4698      	mov	r8, r3
 8004fb8:	d835      	bhi.n	8005026 <__ssputs_r+0x7e>
 8004fba:	898a      	ldrh	r2, [r1, #12]
 8004fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fc0:	d031      	beq.n	8005026 <__ssputs_r+0x7e>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	6825      	ldr	r5, [r4, #0]
 8004fc6:	6909      	ldr	r1, [r1, #16]
 8004fc8:	1a6f      	subs	r7, r5, r1
 8004fca:	6965      	ldr	r5, [r4, #20]
 8004fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004fd4:	f108 0301 	add.w	r3, r8, #1
 8004fd8:	443b      	add	r3, r7
 8004fda:	429d      	cmp	r5, r3
 8004fdc:	bf38      	it	cc
 8004fde:	461d      	movcc	r5, r3
 8004fe0:	0553      	lsls	r3, r2, #21
 8004fe2:	d531      	bpl.n	8005048 <__ssputs_r+0xa0>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7ff ff07 	bl	8004df8 <_malloc_r>
 8004fea:	4606      	mov	r6, r0
 8004fec:	b950      	cbnz	r0, 8005004 <__ssputs_r+0x5c>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	f8ca 3000 	str.w	r3, [sl]
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005004:	463a      	mov	r2, r7
 8005006:	6921      	ldr	r1, [r4, #16]
 8005008:	f7ff fe96 	bl	8004d38 <memcpy>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	6126      	str	r6, [r4, #16]
 800501a:	443e      	add	r6, r7
 800501c:	6026      	str	r6, [r4, #0]
 800501e:	4646      	mov	r6, r8
 8005020:	6165      	str	r5, [r4, #20]
 8005022:	1bed      	subs	r5, r5, r7
 8005024:	60a5      	str	r5, [r4, #8]
 8005026:	4546      	cmp	r6, r8
 8005028:	bf28      	it	cs
 800502a:	4646      	movcs	r6, r8
 800502c:	4649      	mov	r1, r9
 800502e:	4632      	mov	r2, r6
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	f000 faaf 	bl	8005594 <memmove>
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	2000      	movs	r0, #0
 800503a:	1b9b      	subs	r3, r3, r6
 800503c:	60a3      	str	r3, [r4, #8]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	441e      	add	r6, r3
 8005042:	6026      	str	r6, [r4, #0]
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	462a      	mov	r2, r5
 800504a:	f000 fabd 	bl	80055c8 <_realloc_r>
 800504e:	4606      	mov	r6, r0
 8005050:	2800      	cmp	r0, #0
 8005052:	d1e1      	bne.n	8005018 <__ssputs_r+0x70>
 8005054:	6921      	ldr	r1, [r4, #16]
 8005056:	4650      	mov	r0, sl
 8005058:	f7ff fe82 	bl	8004d60 <_free_r>
 800505c:	e7c7      	b.n	8004fee <__ssputs_r+0x46>
	...

08005060 <_svfiprintf_r>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	b09d      	sub	sp, #116	; 0x74
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	898b      	ldrh	r3, [r1, #12]
 800506a:	4680      	mov	r8, r0
 800506c:	061c      	lsls	r4, r3, #24
 800506e:	460d      	mov	r5, r1
 8005070:	4616      	mov	r6, r2
 8005072:	d50f      	bpl.n	8005094 <_svfiprintf_r+0x34>
 8005074:	690b      	ldr	r3, [r1, #16]
 8005076:	b96b      	cbnz	r3, 8005094 <_svfiprintf_r+0x34>
 8005078:	2140      	movs	r1, #64	; 0x40
 800507a:	f7ff febd 	bl	8004df8 <_malloc_r>
 800507e:	6028      	str	r0, [r5, #0]
 8005080:	6128      	str	r0, [r5, #16]
 8005082:	b928      	cbnz	r0, 8005090 <_svfiprintf_r+0x30>
 8005084:	230c      	movs	r3, #12
 8005086:	f8c8 3000 	str.w	r3, [r8]
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	e0c4      	b.n	800521a <_svfiprintf_r+0x1ba>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	616b      	str	r3, [r5, #20]
 8005094:	2300      	movs	r3, #0
 8005096:	9309      	str	r3, [sp, #36]	; 0x24
 8005098:	2320      	movs	r3, #32
 800509a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800509e:	2330      	movs	r3, #48	; 0x30
 80050a0:	f04f 0b01 	mov.w	fp, #1
 80050a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a8:	4637      	mov	r7, r6
 80050aa:	463c      	mov	r4, r7
 80050ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13c      	bne.n	800512e <_svfiprintf_r+0xce>
 80050b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80050b8:	d00b      	beq.n	80050d2 <_svfiprintf_r+0x72>
 80050ba:	4653      	mov	r3, sl
 80050bc:	4632      	mov	r2, r6
 80050be:	4629      	mov	r1, r5
 80050c0:	4640      	mov	r0, r8
 80050c2:	f7ff ff71 	bl	8004fa8 <__ssputs_r>
 80050c6:	3001      	adds	r0, #1
 80050c8:	f000 80a2 	beq.w	8005210 <_svfiprintf_r+0x1b0>
 80050cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ce:	4453      	add	r3, sl
 80050d0:	9309      	str	r3, [sp, #36]	; 0x24
 80050d2:	783b      	ldrb	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 809b 	beq.w	8005210 <_svfiprintf_r+0x1b0>
 80050da:	2300      	movs	r3, #0
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	9304      	str	r3, [sp, #16]
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9205      	str	r2, [sp, #20]
 80050e6:	9306      	str	r3, [sp, #24]
 80050e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ec:	931a      	str	r3, [sp, #104]	; 0x68
 80050ee:	2205      	movs	r2, #5
 80050f0:	7821      	ldrb	r1, [r4, #0]
 80050f2:	4850      	ldr	r0, [pc, #320]	; (8005234 <_svfiprintf_r+0x1d4>)
 80050f4:	f000 fa40 	bl	8005578 <memchr>
 80050f8:	1c67      	adds	r7, r4, #1
 80050fa:	9b04      	ldr	r3, [sp, #16]
 80050fc:	b9d8      	cbnz	r0, 8005136 <_svfiprintf_r+0xd6>
 80050fe:	06d9      	lsls	r1, r3, #27
 8005100:	bf44      	itt	mi
 8005102:	2220      	movmi	r2, #32
 8005104:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005108:	071a      	lsls	r2, r3, #28
 800510a:	bf44      	itt	mi
 800510c:	222b      	movmi	r2, #43	; 0x2b
 800510e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005112:	7822      	ldrb	r2, [r4, #0]
 8005114:	2a2a      	cmp	r2, #42	; 0x2a
 8005116:	d016      	beq.n	8005146 <_svfiprintf_r+0xe6>
 8005118:	2100      	movs	r1, #0
 800511a:	200a      	movs	r0, #10
 800511c:	9a07      	ldr	r2, [sp, #28]
 800511e:	4627      	mov	r7, r4
 8005120:	783b      	ldrb	r3, [r7, #0]
 8005122:	3401      	adds	r4, #1
 8005124:	3b30      	subs	r3, #48	; 0x30
 8005126:	2b09      	cmp	r3, #9
 8005128:	d950      	bls.n	80051cc <_svfiprintf_r+0x16c>
 800512a:	b1c9      	cbz	r1, 8005160 <_svfiprintf_r+0x100>
 800512c:	e011      	b.n	8005152 <_svfiprintf_r+0xf2>
 800512e:	2b25      	cmp	r3, #37	; 0x25
 8005130:	d0c0      	beq.n	80050b4 <_svfiprintf_r+0x54>
 8005132:	4627      	mov	r7, r4
 8005134:	e7b9      	b.n	80050aa <_svfiprintf_r+0x4a>
 8005136:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <_svfiprintf_r+0x1d4>)
 8005138:	463c      	mov	r4, r7
 800513a:	1a80      	subs	r0, r0, r2
 800513c:	fa0b f000 	lsl.w	r0, fp, r0
 8005140:	4318      	orrs	r0, r3
 8005142:	9004      	str	r0, [sp, #16]
 8005144:	e7d3      	b.n	80050ee <_svfiprintf_r+0x8e>
 8005146:	9a03      	ldr	r2, [sp, #12]
 8005148:	1d11      	adds	r1, r2, #4
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	9103      	str	r1, [sp, #12]
 800514e:	2a00      	cmp	r2, #0
 8005150:	db01      	blt.n	8005156 <_svfiprintf_r+0xf6>
 8005152:	9207      	str	r2, [sp, #28]
 8005154:	e004      	b.n	8005160 <_svfiprintf_r+0x100>
 8005156:	4252      	negs	r2, r2
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	9207      	str	r2, [sp, #28]
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	783b      	ldrb	r3, [r7, #0]
 8005162:	2b2e      	cmp	r3, #46	; 0x2e
 8005164:	d10d      	bne.n	8005182 <_svfiprintf_r+0x122>
 8005166:	787b      	ldrb	r3, [r7, #1]
 8005168:	1c79      	adds	r1, r7, #1
 800516a:	2b2a      	cmp	r3, #42	; 0x2a
 800516c:	d132      	bne.n	80051d4 <_svfiprintf_r+0x174>
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	3702      	adds	r7, #2
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	9203      	str	r2, [sp, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfb8      	it	lt
 800517c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005180:	9305      	str	r3, [sp, #20]
 8005182:	4c2d      	ldr	r4, [pc, #180]	; (8005238 <_svfiprintf_r+0x1d8>)
 8005184:	2203      	movs	r2, #3
 8005186:	7839      	ldrb	r1, [r7, #0]
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f9f5 	bl	8005578 <memchr>
 800518e:	b138      	cbz	r0, 80051a0 <_svfiprintf_r+0x140>
 8005190:	2340      	movs	r3, #64	; 0x40
 8005192:	1b00      	subs	r0, r0, r4
 8005194:	fa03 f000 	lsl.w	r0, r3, r0
 8005198:	9b04      	ldr	r3, [sp, #16]
 800519a:	3701      	adds	r7, #1
 800519c:	4303      	orrs	r3, r0
 800519e:	9304      	str	r3, [sp, #16]
 80051a0:	7839      	ldrb	r1, [r7, #0]
 80051a2:	2206      	movs	r2, #6
 80051a4:	4825      	ldr	r0, [pc, #148]	; (800523c <_svfiprintf_r+0x1dc>)
 80051a6:	1c7e      	adds	r6, r7, #1
 80051a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ac:	f000 f9e4 	bl	8005578 <memchr>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d035      	beq.n	8005220 <_svfiprintf_r+0x1c0>
 80051b4:	4b22      	ldr	r3, [pc, #136]	; (8005240 <_svfiprintf_r+0x1e0>)
 80051b6:	b9fb      	cbnz	r3, 80051f8 <_svfiprintf_r+0x198>
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	3307      	adds	r3, #7
 80051bc:	f023 0307 	bic.w	r3, r3, #7
 80051c0:	3308      	adds	r3, #8
 80051c2:	9303      	str	r3, [sp, #12]
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	444b      	add	r3, r9
 80051c8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ca:	e76d      	b.n	80050a8 <_svfiprintf_r+0x48>
 80051cc:	fb00 3202 	mla	r2, r0, r2, r3
 80051d0:	2101      	movs	r1, #1
 80051d2:	e7a4      	b.n	800511e <_svfiprintf_r+0xbe>
 80051d4:	2300      	movs	r3, #0
 80051d6:	240a      	movs	r4, #10
 80051d8:	4618      	mov	r0, r3
 80051da:	9305      	str	r3, [sp, #20]
 80051dc:	460f      	mov	r7, r1
 80051de:	783a      	ldrb	r2, [r7, #0]
 80051e0:	3101      	adds	r1, #1
 80051e2:	3a30      	subs	r2, #48	; 0x30
 80051e4:	2a09      	cmp	r2, #9
 80051e6:	d903      	bls.n	80051f0 <_svfiprintf_r+0x190>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ca      	beq.n	8005182 <_svfiprintf_r+0x122>
 80051ec:	9005      	str	r0, [sp, #20]
 80051ee:	e7c8      	b.n	8005182 <_svfiprintf_r+0x122>
 80051f0:	fb04 2000 	mla	r0, r4, r0, r2
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7f1      	b.n	80051dc <_svfiprintf_r+0x17c>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <_svfiprintf_r+0x1e4>)
 8005200:	a904      	add	r1, sp, #16
 8005202:	4640      	mov	r0, r8
 8005204:	f3af 8000 	nop.w
 8005208:	f1b0 3fff 	cmp.w	r0, #4294967295
 800520c:	4681      	mov	r9, r0
 800520e:	d1d9      	bne.n	80051c4 <_svfiprintf_r+0x164>
 8005210:	89ab      	ldrh	r3, [r5, #12]
 8005212:	065b      	lsls	r3, r3, #25
 8005214:	f53f af39 	bmi.w	800508a <_svfiprintf_r+0x2a>
 8005218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521a:	b01d      	add	sp, #116	; 0x74
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	ab03      	add	r3, sp, #12
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	462a      	mov	r2, r5
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <_svfiprintf_r+0x1e4>)
 8005228:	a904      	add	r1, sp, #16
 800522a:	4640      	mov	r0, r8
 800522c:	f000 f884 	bl	8005338 <_printf_i>
 8005230:	e7ea      	b.n	8005208 <_svfiprintf_r+0x1a8>
 8005232:	bf00      	nop
 8005234:	08005848 	.word	0x08005848
 8005238:	0800584e 	.word	0x0800584e
 800523c:	08005852 	.word	0x08005852
 8005240:	00000000 	.word	0x00000000
 8005244:	08004fa9 	.word	0x08004fa9

08005248 <_printf_common>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	4691      	mov	r9, r2
 800524e:	461f      	mov	r7, r3
 8005250:	688a      	ldr	r2, [r1, #8]
 8005252:	690b      	ldr	r3, [r1, #16]
 8005254:	4606      	mov	r6, r0
 8005256:	4293      	cmp	r3, r2
 8005258:	bfb8      	it	lt
 800525a:	4613      	movlt	r3, r2
 800525c:	f8c9 3000 	str.w	r3, [r9]
 8005260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005264:	460c      	mov	r4, r1
 8005266:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800526a:	b112      	cbz	r2, 8005272 <_printf_common+0x2a>
 800526c:	3301      	adds	r3, #1
 800526e:	f8c9 3000 	str.w	r3, [r9]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	f8d9 3000 	ldrmi.w	r3, [r9]
 800527c:	3302      	addmi	r3, #2
 800527e:	f8c9 3000 	strmi.w	r3, [r9]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d107      	bne.n	800529a <_printf_common+0x52>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	f8d9 2000 	ldr.w	r2, [r9]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	429d      	cmp	r5, r3
 8005298:	db2a      	blt.n	80052f0 <_printf_common+0xa8>
 800529a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	3300      	adds	r3, #0
 80052a2:	bf18      	it	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	0692      	lsls	r2, r2, #26
 80052a8:	d42f      	bmi.n	800530a <_printf_common+0xc2>
 80052aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ae:	4639      	mov	r1, r7
 80052b0:	4630      	mov	r0, r6
 80052b2:	47c0      	blx	r8
 80052b4:	3001      	adds	r0, #1
 80052b6:	d022      	beq.n	80052fe <_printf_common+0xb6>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	68e5      	ldr	r5, [r4, #12]
 80052bc:	f003 0306 	and.w	r3, r3, #6
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	bf18      	it	ne
 80052c4:	2500      	movne	r5, #0
 80052c6:	f8d9 2000 	ldr.w	r2, [r9]
 80052ca:	f04f 0900 	mov.w	r9, #0
 80052ce:	bf08      	it	eq
 80052d0:	1aad      	subeq	r5, r5, r2
 80052d2:	68a3      	ldr	r3, [r4, #8]
 80052d4:	6922      	ldr	r2, [r4, #16]
 80052d6:	bf08      	it	eq
 80052d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfc4      	itt	gt
 80052e0:	1a9b      	subgt	r3, r3, r2
 80052e2:	18ed      	addgt	r5, r5, r3
 80052e4:	341a      	adds	r4, #26
 80052e6:	454d      	cmp	r5, r9
 80052e8:	d11b      	bne.n	8005322 <_printf_common+0xda>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	2301      	movs	r3, #1
 80052f2:	4652      	mov	r2, sl
 80052f4:	4639      	mov	r1, r7
 80052f6:	4630      	mov	r0, r6
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d103      	bne.n	8005306 <_printf_common+0xbe>
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	3501      	adds	r5, #1
 8005308:	e7c1      	b.n	800528e <_printf_common+0x46>
 800530a:	2030      	movs	r0, #48	; 0x30
 800530c:	18e1      	adds	r1, r4, r3
 800530e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005318:	4422      	add	r2, r4
 800531a:	3302      	adds	r3, #2
 800531c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005320:	e7c3      	b.n	80052aa <_printf_common+0x62>
 8005322:	2301      	movs	r3, #1
 8005324:	4622      	mov	r2, r4
 8005326:	4639      	mov	r1, r7
 8005328:	4630      	mov	r0, r6
 800532a:	47c0      	blx	r8
 800532c:	3001      	adds	r0, #1
 800532e:	d0e6      	beq.n	80052fe <_printf_common+0xb6>
 8005330:	f109 0901 	add.w	r9, r9, #1
 8005334:	e7d7      	b.n	80052e6 <_printf_common+0x9e>
	...

08005338 <_printf_i>:
 8005338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800533c:	4617      	mov	r7, r2
 800533e:	7e0a      	ldrb	r2, [r1, #24]
 8005340:	b085      	sub	sp, #20
 8005342:	2a6e      	cmp	r2, #110	; 0x6e
 8005344:	4698      	mov	r8, r3
 8005346:	4606      	mov	r6, r0
 8005348:	460c      	mov	r4, r1
 800534a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800534c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005350:	f000 80bc 	beq.w	80054cc <_printf_i+0x194>
 8005354:	d81a      	bhi.n	800538c <_printf_i+0x54>
 8005356:	2a63      	cmp	r2, #99	; 0x63
 8005358:	d02e      	beq.n	80053b8 <_printf_i+0x80>
 800535a:	d80a      	bhi.n	8005372 <_printf_i+0x3a>
 800535c:	2a00      	cmp	r2, #0
 800535e:	f000 80c8 	beq.w	80054f2 <_printf_i+0x1ba>
 8005362:	2a58      	cmp	r2, #88	; 0x58
 8005364:	f000 808a 	beq.w	800547c <_printf_i+0x144>
 8005368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800536c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005370:	e02a      	b.n	80053c8 <_printf_i+0x90>
 8005372:	2a64      	cmp	r2, #100	; 0x64
 8005374:	d001      	beq.n	800537a <_printf_i+0x42>
 8005376:	2a69      	cmp	r2, #105	; 0x69
 8005378:	d1f6      	bne.n	8005368 <_printf_i+0x30>
 800537a:	6821      	ldr	r1, [r4, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005382:	d023      	beq.n	80053cc <_printf_i+0x94>
 8005384:	1d11      	adds	r1, r2, #4
 8005386:	6019      	str	r1, [r3, #0]
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	e027      	b.n	80053dc <_printf_i+0xa4>
 800538c:	2a73      	cmp	r2, #115	; 0x73
 800538e:	f000 80b4 	beq.w	80054fa <_printf_i+0x1c2>
 8005392:	d808      	bhi.n	80053a6 <_printf_i+0x6e>
 8005394:	2a6f      	cmp	r2, #111	; 0x6f
 8005396:	d02a      	beq.n	80053ee <_printf_i+0xb6>
 8005398:	2a70      	cmp	r2, #112	; 0x70
 800539a:	d1e5      	bne.n	8005368 <_printf_i+0x30>
 800539c:	680a      	ldr	r2, [r1, #0]
 800539e:	f042 0220 	orr.w	r2, r2, #32
 80053a2:	600a      	str	r2, [r1, #0]
 80053a4:	e003      	b.n	80053ae <_printf_i+0x76>
 80053a6:	2a75      	cmp	r2, #117	; 0x75
 80053a8:	d021      	beq.n	80053ee <_printf_i+0xb6>
 80053aa:	2a78      	cmp	r2, #120	; 0x78
 80053ac:	d1dc      	bne.n	8005368 <_printf_i+0x30>
 80053ae:	2278      	movs	r2, #120	; 0x78
 80053b0:	496f      	ldr	r1, [pc, #444]	; (8005570 <_printf_i+0x238>)
 80053b2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80053b6:	e064      	b.n	8005482 <_printf_i+0x14a>
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80053be:	1d11      	adds	r1, r2, #4
 80053c0:	6019      	str	r1, [r3, #0]
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a3      	b.n	8005514 <_printf_i+0x1dc>
 80053cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80053d0:	f102 0104 	add.w	r1, r2, #4
 80053d4:	6019      	str	r1, [r3, #0]
 80053d6:	d0d7      	beq.n	8005388 <_printf_i+0x50>
 80053d8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da03      	bge.n	80053e8 <_printf_i+0xb0>
 80053e0:	222d      	movs	r2, #45	; 0x2d
 80053e2:	425b      	negs	r3, r3
 80053e4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053e8:	4962      	ldr	r1, [pc, #392]	; (8005574 <_printf_i+0x23c>)
 80053ea:	220a      	movs	r2, #10
 80053ec:	e017      	b.n	800541e <_printf_i+0xe6>
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053f6:	d003      	beq.n	8005400 <_printf_i+0xc8>
 80053f8:	1d08      	adds	r0, r1, #4
 80053fa:	6018      	str	r0, [r3, #0]
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	e006      	b.n	800540e <_printf_i+0xd6>
 8005400:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005404:	f101 0004 	add.w	r0, r1, #4
 8005408:	6018      	str	r0, [r3, #0]
 800540a:	d0f7      	beq.n	80053fc <_printf_i+0xc4>
 800540c:	880b      	ldrh	r3, [r1, #0]
 800540e:	2a6f      	cmp	r2, #111	; 0x6f
 8005410:	bf14      	ite	ne
 8005412:	220a      	movne	r2, #10
 8005414:	2208      	moveq	r2, #8
 8005416:	4957      	ldr	r1, [pc, #348]	; (8005574 <_printf_i+0x23c>)
 8005418:	2000      	movs	r0, #0
 800541a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800541e:	6865      	ldr	r5, [r4, #4]
 8005420:	2d00      	cmp	r5, #0
 8005422:	60a5      	str	r5, [r4, #8]
 8005424:	f2c0 809c 	blt.w	8005560 <_printf_i+0x228>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	f020 0004 	bic.w	r0, r0, #4
 800542e:	6020      	str	r0, [r4, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d13f      	bne.n	80054b4 <_printf_i+0x17c>
 8005434:	2d00      	cmp	r5, #0
 8005436:	f040 8095 	bne.w	8005564 <_printf_i+0x22c>
 800543a:	4675      	mov	r5, lr
 800543c:	2a08      	cmp	r2, #8
 800543e:	d10b      	bne.n	8005458 <_printf_i+0x120>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d508      	bpl.n	8005458 <_printf_i+0x120>
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	bfde      	ittt	le
 800544e:	2330      	movle	r3, #48	; 0x30
 8005450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005458:	ebae 0305 	sub.w	r3, lr, r5
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	f8cd 8000 	str.w	r8, [sp]
 8005462:	463b      	mov	r3, r7
 8005464:	aa03      	add	r2, sp, #12
 8005466:	4621      	mov	r1, r4
 8005468:	4630      	mov	r0, r6
 800546a:	f7ff feed 	bl	8005248 <_printf_common>
 800546e:	3001      	adds	r0, #1
 8005470:	d155      	bne.n	800551e <_printf_i+0x1e6>
 8005472:	f04f 30ff 	mov.w	r0, #4294967295
 8005476:	b005      	add	sp, #20
 8005478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800547c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005480:	493c      	ldr	r1, [pc, #240]	; (8005574 <_printf_i+0x23c>)
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f012 0f80 	tst.w	r2, #128	; 0x80
 800548a:	f100 0504 	add.w	r5, r0, #4
 800548e:	601d      	str	r5, [r3, #0]
 8005490:	d001      	beq.n	8005496 <_printf_i+0x15e>
 8005492:	6803      	ldr	r3, [r0, #0]
 8005494:	e002      	b.n	800549c <_printf_i+0x164>
 8005496:	0655      	lsls	r5, r2, #25
 8005498:	d5fb      	bpl.n	8005492 <_printf_i+0x15a>
 800549a:	8803      	ldrh	r3, [r0, #0]
 800549c:	07d0      	lsls	r0, r2, #31
 800549e:	bf44      	itt	mi
 80054a0:	f042 0220 	orrmi.w	r2, r2, #32
 80054a4:	6022      	strmi	r2, [r4, #0]
 80054a6:	b91b      	cbnz	r3, 80054b0 <_printf_i+0x178>
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	f022 0220 	bic.w	r2, r2, #32
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	e7b1      	b.n	8005418 <_printf_i+0xe0>
 80054b4:	4675      	mov	r5, lr
 80054b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80054ba:	fb02 3310 	mls	r3, r2, r0, r3
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054c4:	4603      	mov	r3, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d1f5      	bne.n	80054b6 <_printf_i+0x17e>
 80054ca:	e7b7      	b.n	800543c <_printf_i+0x104>
 80054cc:	6808      	ldr	r0, [r1, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80054d4:	6949      	ldr	r1, [r1, #20]
 80054d6:	d004      	beq.n	80054e2 <_printf_i+0x1aa>
 80054d8:	1d10      	adds	r0, r2, #4
 80054da:	6018      	str	r0, [r3, #0]
 80054dc:	6813      	ldr	r3, [r2, #0]
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	e007      	b.n	80054f2 <_printf_i+0x1ba>
 80054e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054e6:	f102 0004 	add.w	r0, r2, #4
 80054ea:	6018      	str	r0, [r3, #0]
 80054ec:	6813      	ldr	r3, [r2, #0]
 80054ee:	d0f6      	beq.n	80054de <_printf_i+0x1a6>
 80054f0:	8019      	strh	r1, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	4675      	mov	r5, lr
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	e7b1      	b.n	800545e <_printf_i+0x126>
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	1d11      	adds	r1, r2, #4
 80054fe:	6019      	str	r1, [r3, #0]
 8005500:	6815      	ldr	r5, [r2, #0]
 8005502:	2100      	movs	r1, #0
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f836 	bl	8005578 <memchr>
 800550c:	b108      	cbz	r0, 8005512 <_printf_i+0x1da>
 800550e:	1b40      	subs	r0, r0, r5
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	e79f      	b.n	800545e <_printf_i+0x126>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	462a      	mov	r2, r5
 8005522:	4639      	mov	r1, r7
 8005524:	4630      	mov	r0, r6
 8005526:	47c0      	blx	r8
 8005528:	3001      	adds	r0, #1
 800552a:	d0a2      	beq.n	8005472 <_printf_i+0x13a>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d507      	bpl.n	8005542 <_printf_i+0x20a>
 8005532:	2500      	movs	r5, #0
 8005534:	f104 0919 	add.w	r9, r4, #25
 8005538:	68e3      	ldr	r3, [r4, #12]
 800553a:	9a03      	ldr	r2, [sp, #12]
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	429d      	cmp	r5, r3
 8005540:	db05      	blt.n	800554e <_printf_i+0x216>
 8005542:	68e0      	ldr	r0, [r4, #12]
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	4298      	cmp	r0, r3
 8005548:	bfb8      	it	lt
 800554a:	4618      	movlt	r0, r3
 800554c:	e793      	b.n	8005476 <_printf_i+0x13e>
 800554e:	2301      	movs	r3, #1
 8005550:	464a      	mov	r2, r9
 8005552:	4639      	mov	r1, r7
 8005554:	4630      	mov	r0, r6
 8005556:	47c0      	blx	r8
 8005558:	3001      	adds	r0, #1
 800555a:	d08a      	beq.n	8005472 <_printf_i+0x13a>
 800555c:	3501      	adds	r5, #1
 800555e:	e7eb      	b.n	8005538 <_printf_i+0x200>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1a7      	bne.n	80054b4 <_printf_i+0x17c>
 8005564:	780b      	ldrb	r3, [r1, #0]
 8005566:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800556a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800556e:	e765      	b.n	800543c <_printf_i+0x104>
 8005570:	0800586a 	.word	0x0800586a
 8005574:	08005859 	.word	0x08005859

08005578 <memchr>:
 8005578:	b510      	push	{r4, lr}
 800557a:	b2c9      	uxtb	r1, r1
 800557c:	4402      	add	r2, r0
 800557e:	4290      	cmp	r0, r2
 8005580:	4603      	mov	r3, r0
 8005582:	d101      	bne.n	8005588 <memchr+0x10>
 8005584:	2000      	movs	r0, #0
 8005586:	bd10      	pop	{r4, pc}
 8005588:	781c      	ldrb	r4, [r3, #0]
 800558a:	3001      	adds	r0, #1
 800558c:	428c      	cmp	r4, r1
 800558e:	d1f6      	bne.n	800557e <memchr+0x6>
 8005590:	4618      	mov	r0, r3
 8005592:	bd10      	pop	{r4, pc}

08005594 <memmove>:
 8005594:	4288      	cmp	r0, r1
 8005596:	b510      	push	{r4, lr}
 8005598:	eb01 0302 	add.w	r3, r1, r2
 800559c:	d803      	bhi.n	80055a6 <memmove+0x12>
 800559e:	1e42      	subs	r2, r0, #1
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d10c      	bne.n	80055be <memmove+0x2a>
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	4298      	cmp	r0, r3
 80055a8:	d2f9      	bcs.n	800559e <memmove+0xa>
 80055aa:	1881      	adds	r1, r0, r2
 80055ac:	1ad2      	subs	r2, r2, r3
 80055ae:	42d3      	cmn	r3, r2
 80055b0:	d100      	bne.n	80055b4 <memmove+0x20>
 80055b2:	bd10      	pop	{r4, pc}
 80055b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80055bc:	e7f7      	b.n	80055ae <memmove+0x1a>
 80055be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80055c6:	e7eb      	b.n	80055a0 <memmove+0xc>

080055c8 <_realloc_r>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	4607      	mov	r7, r0
 80055cc:	4614      	mov	r4, r2
 80055ce:	460e      	mov	r6, r1
 80055d0:	b921      	cbnz	r1, 80055dc <_realloc_r+0x14>
 80055d2:	4611      	mov	r1, r2
 80055d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055d8:	f7ff bc0e 	b.w	8004df8 <_malloc_r>
 80055dc:	b922      	cbnz	r2, 80055e8 <_realloc_r+0x20>
 80055de:	f7ff fbbf 	bl	8004d60 <_free_r>
 80055e2:	4625      	mov	r5, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055e8:	f000 f814 	bl	8005614 <_malloc_usable_size_r>
 80055ec:	4284      	cmp	r4, r0
 80055ee:	d90f      	bls.n	8005610 <_realloc_r+0x48>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4638      	mov	r0, r7
 80055f4:	f7ff fc00 	bl	8004df8 <_malloc_r>
 80055f8:	4605      	mov	r5, r0
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d0f2      	beq.n	80055e4 <_realloc_r+0x1c>
 80055fe:	4631      	mov	r1, r6
 8005600:	4622      	mov	r2, r4
 8005602:	f7ff fb99 	bl	8004d38 <memcpy>
 8005606:	4631      	mov	r1, r6
 8005608:	4638      	mov	r0, r7
 800560a:	f7ff fba9 	bl	8004d60 <_free_r>
 800560e:	e7e9      	b.n	80055e4 <_realloc_r+0x1c>
 8005610:	4635      	mov	r5, r6
 8005612:	e7e7      	b.n	80055e4 <_realloc_r+0x1c>

08005614 <_malloc_usable_size_r>:
 8005614:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005618:	2800      	cmp	r0, #0
 800561a:	f1a0 0004 	sub.w	r0, r0, #4
 800561e:	bfbc      	itt	lt
 8005620:	580b      	ldrlt	r3, [r1, r0]
 8005622:	18c0      	addlt	r0, r0, r3
 8005624:	4770      	bx	lr
	...

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
