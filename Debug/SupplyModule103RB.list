
SupplyModule103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   0000000c  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001180  20000074  08003e08  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200011f4  08003e08  000211f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b734  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004c2e  00000000  00000000  0003b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2aa  00000000  00000000  000403ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001210  00000000  00000000  0004a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001518  00000000  00000000  0004b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000070c3  00000000  00000000  0004cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000130d5  00000000  00000000  00053e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00099069  00000000  00000000  00066f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000fffd9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000397c  00000000  00000000  00100054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c6c 	.word	0x08003c6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003c6c 	.word	0x08003c6c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80006f8:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_ADC1_Init+0x68>)
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x6c>)
{
 80006fc:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 80006fe:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000704:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
 8000710:	2302      	movs	r3, #2
{
 8000712:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000714:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000718:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071a:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071e:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000720:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	f000 fd0d 	bl	8001140 <HAL_ADC_Init>
 8000726:	b108      	cbz	r0, 800072c <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8000728:	f000 f9af 	bl	8000a8a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800072c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	a901      	add	r1, sp, #4
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_ADC1_Init+0x68>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000736:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	f000 fb3a 	bl	8000db0 <HAL_ADC_ConfigChannel>
 800073c:	b108      	cbz	r0, 8000742 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f9a4 	bl	8000a8a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000742:	2302      	movs	r3, #2
 8000744:	2201      	movs	r2, #1
 8000746:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800074a:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	a901      	add	r1, sp, #4
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_ADC1_Init+0x68>)
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000750:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	f000 fb2d 	bl	8000db0 <HAL_ADC_ConfigChannel>
 8000756:	b108      	cbz	r0, 800075c <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 8000758:	f000 f997 	bl	8000a8a <Error_Handler>
  }

}
 800075c:	b005      	add	sp, #20
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	200010ac 	.word	0x200010ac
 8000764:	40012400 	.word	0x40012400

08000768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	4605      	mov	r5, r0
 800076c:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	2210      	movs	r2, #16
 8000770:	2100      	movs	r1, #0
 8000772:	a802      	add	r0, sp, #8
 8000774:	f003 fa24 	bl	8003bc0 <memset>
  if(adcHandle->Instance==ADC1)
 8000778:	682a      	ldr	r2, [r5, #0]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_ADC_MspInit+0x84>)
 800077c:	429a      	cmp	r2, r3
 800077e:	d133      	bne.n	80007e8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000780:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000784:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800078c:	619a      	str	r2, [r3, #24]
 800078e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	4817      	ldr	r0, [pc, #92]	; (80007f0 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000792:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000796:	9200      	str	r2, [sp, #0]
 8000798:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800079c:	4c15      	ldr	r4, [pc, #84]	; (80007f4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	f042 0204 	orr.w	r2, r2, #4
 80007a2:	619a      	str	r2, [r3, #24]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ae:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f000 fee2 	bl	800157c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b8:	2300      	movs	r3, #0
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007bc:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007be:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007ca:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007ce:	2220      	movs	r2, #32
 80007d0:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007d4:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d6:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007da:	f000 fd85 	bl	80012e8 <HAL_DMA_Init>
 80007de:	b108      	cbz	r0, 80007e4 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80007e0:	f000 f953 	bl	8000a8a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007e4:	622c      	str	r4, [r5, #32]
 80007e6:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007e8:	b007      	add	sp, #28
 80007ea:	bd30      	pop	{r4, r5, pc}
 80007ec:	40012400 	.word	0x40012400
 80007f0:	40010800 	.word	0x40010800
 80007f4:	200010dc 	.word	0x200010dc
 80007f8:	40020008 	.word	0x40020008

080007fc <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_DMA_Init+0x2c>)
{
 80007fe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000800:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000802:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000804:	f042 0201 	orr.w	r2, r2, #1
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800080c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000814:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000818:	f000 fd24 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800081c:	200b      	movs	r0, #11

}
 800081e:	b003      	add	sp, #12
 8000820:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000824:	f000 bd52 	b.w	80012cc <HAL_NVIC_EnableIRQ>
 8000828:	40021000 	.word	0x40021000

0800082c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <vApplicationGetIdleTaskMemory+0x28>)
 800083c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <vApplicationGetIdleTaskMemory+0x2c>)
 8000842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000094 	.word	0x20000094
 8000858:	200000e8 	.word	0x200000e8

0800085c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_FREERTOS_Init+0x34>)
 8000864:	1d3c      	adds	r4, r7, #4
 8000866:	461d      	mov	r5, r3
 8000868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fe58 	bl	800252e <osThreadCreate>
 800087e:	4602      	mov	r2, r0
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <MX_FREERTOS_Init+0x38>)
 8000882:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  AllTasks_init();
 8000884:	f002 fd0c 	bl	80032a0 <_Z13AllTasks_initv>
  /* USER CODE END RTOS_THREADS */

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bdb0      	pop	{r4, r5, r7, pc}
 8000890:	08003c90 	.word	0x08003c90
 8000894:	20000090 	.word	0x20000090

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f001 fe6c 	bl	800257e <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartDefaultTask+0x8>

080008a8 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2210      	movs	r2, #16
{
 80008aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	eb0d 0002 	add.w	r0, sp, r2
 80008b4:	2100      	movs	r1, #0
 80008b6:	f003 f983 	bl	8003bc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008bc:	4f33      	ldr	r7, [pc, #204]	; (800098c <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008c0:	4e33      	ldr	r6, [pc, #204]	; (8000990 <MX_GPIO_Init+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	f042 0210 	orr.w	r2, r2, #16
 80008c6:	619a      	str	r2, [r3, #24]
 80008c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	f002 0210 	and.w	r2, r2, #16
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	f042 0220 	orr.w	r2, r2, #32
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	f002 0220 	and.w	r2, r2, #32
 80008e6:	9201      	str	r2, [sp, #4]
 80008e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	f042 0204 	orr.w	r2, r2, #4
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	f002 0204 	and.w	r2, r2, #4
 80008fe:	9202      	str	r2, [sp, #8]
 8000900:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	f042 0208 	orr.w	r2, r2, #8
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	9303      	str	r3, [sp, #12]
 8000914:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000916:	f000 ff11 	bl	800173c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800091a:	4630      	mov	r0, r6
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000922:	f000 ff0b 	bl	800173c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_GPIO_Init+0xec>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	a904      	add	r1, sp, #16
 800092e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f000 fe21 	bl	800157c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	a904      	add	r1, sp, #16
 800093e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f000 fe19 	bl	800157c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	a904      	add	r1, sp, #16
 800094e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f000 fe10 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800095c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	a904      	add	r1, sp, #16
 8000962:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	f000 fe06 	bl	800157c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000970:	4622      	mov	r2, r4
 8000972:	2105      	movs	r1, #5
 8000974:	2028      	movs	r0, #40	; 0x28
 8000976:	f000 fc75 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f000 fca6 	bl	80012cc <HAL_NVIC_EnableIRQ>

}
 8000980:	b008      	add	sp, #32
 8000982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	40011000 	.word	0x40011000
 8000994:	10110000 	.word	0x10110000

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 f9a8 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f80f 	bl	80009c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f7ff ff80 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a8:	f7ff ff28 	bl	80007fc <MX_DMA_Init>
  MX_ADC1_Init();
 80009ac:	f7ff fea4 	bl	80006f8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009b0:	f000 f93e 	bl	8000c30 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM4_Init();
 80009b4:	f000 f8f2 	bl	8000b9c <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009b8:	f7ff ff50 	bl	800085c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009bc:	f001 fdb2 	bl	8002524 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x28>

080009c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b094      	sub	sp, #80	; 0x50
 80009c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009cc:	2228      	movs	r2, #40	; 0x28
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 f8f5 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2310      	movs	r3, #16
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a02:	2300      	movs	r3, #0
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 feb0 	bl	8001774 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a24:	f000 f831 	bl	8000a8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f86d 	bl	8001b24 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a5a:	f000 f816 	bl	8000a8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 f935 	bl	8001cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a7e:	f000 f804 	bl	8000a8a <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_MspInit+0x48>)
{
 8000a9a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa8:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aac:	f002 0201 	and.w	r2, r2, #1
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aba:	61da      	str	r2, [r3, #28]
 8000abc:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000abe:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac8:	f000 fbcc 	bl	8001264 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000acc:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ace:	6853      	ldr	r3, [r2, #4]
 8000ad0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	b003      	add	sp, #12
 8000adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000aea:	4601      	mov	r1, r0
{
 8000aec:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000aee:	2200      	movs	r2, #0
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 fbb7 	bl	8001264 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000af6:	2019      	movs	r0, #25
 8000af8:	f000 fbe8 	bl	80012cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afe:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b00:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b02:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b0c:	4c11      	ldr	r4, [pc, #68]	; (8000b54 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b16:	f001 f8c1 	bl	8001c9c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b1a:	f001 f8af 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_InitTick+0x70>)
 8000b20:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b22:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000b26:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_InitTick+0x74>)
 8000b2a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000b2e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b30:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b32:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b34:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8000b36:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b3a:	f001 fa73 	bl	8002024 <HAL_TIM_Base_Init>
 8000b3e:	b920      	cbnz	r0, 8000b4a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b40:	4620      	mov	r0, r4
 8000b42:	f001 f967 	bl	8001e14 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000b46:	b008      	add	sp, #32
 8000b48:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	e7fb      	b.n	8000b46 <HAL_InitTick+0x5e>
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20001120 	.word	0x20001120
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	000f4240 	.word	0x000f4240

08000b60 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b60:	4770      	bx	lr

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler>

08000b6a <DebugMon_Handler>:
 8000b6a:	4770      	bx	lr

08000b6c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b6c:	4801      	ldr	r0, [pc, #4]	; (8000b74 <DMA1_Channel1_IRQHandler+0x8>)
 8000b6e:	f000 bc71 	b.w	8001454 <HAL_DMA_IRQHandler>
 8000b72:	bf00      	nop
 8000b74:	200010dc 	.word	0x200010dc

08000b78 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b78:	4801      	ldr	r0, [pc, #4]	; (8000b80 <TIM1_UP_IRQHandler+0x8>)
 8000b7a:	f001 b979 	b.w	8001e70 <HAL_TIM_IRQHandler>
 8000b7e:	bf00      	nop
 8000b80:	20001120 	.word	0x20001120

08000b84 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b84:	4801      	ldr	r0, [pc, #4]	; (8000b8c <USART3_IRQHandler+0x8>)
 8000b86:	f001 bc25 	b.w	80023d4 <HAL_UART_IRQHandler>
 8000b8a:	bf00      	nop
 8000b8c:	200011b0 	.word	0x200011b0

08000b90 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b94:	f000 bde2 	b.w	800175c <HAL_GPIO_EXTI_IRQHandler>

08000b98 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	4770      	bx	lr
	...

08000b9c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	a802      	add	r0, sp, #8
 8000ba4:	f003 f80c 	bl	8003bc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 8000-1;
 8000ba8:	f641 723f 	movw	r2, #7999	; 0x1f3f
  htim4.Instance = TIM4;
 8000bac:	4814      	ldr	r0, [pc, #80]	; (8000c00 <MX_TIM4_Init+0x64>)
  htim4.Init.Prescaler = 8000-1;
 8000bae:	4915      	ldr	r1, [pc, #84]	; (8000c04 <MX_TIM4_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 8000-1;
 8000bb2:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0xffff;
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bba:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bc6:	f001 fa2d 	bl	8002024 <HAL_TIM_Base_Init>
 8000bca:	b108      	cbz	r0, 8000bd0 <MX_TIM4_Init+0x34>
  {
    Error_Handler();
 8000bcc:	f7ff ff5d 	bl	8000a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bd4:	a902      	add	r1, sp, #8
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <MX_TIM4_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bda:	f001 fa59 	bl	8002090 <HAL_TIM_ConfigClockSource>
 8000bde:	b108      	cbz	r0, 8000be4 <MX_TIM4_Init+0x48>
  {
    Error_Handler();
 8000be0:	f7ff ff53 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be6:	4669      	mov	r1, sp
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM4_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bea:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bee:	f001 fae3 	bl	80021b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	b108      	cbz	r0, 8000bf8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000bf4:	f7ff ff49 	bl	8000a8a <Error_Handler>
  }

}
 8000bf8:	b007      	add	sp, #28
 8000bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bfe:	bf00      	nop
 8000c00:	20001168 	.word	0x20001168
 8000c04:	40000800 	.word	0x40000800

08000c08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8000c08:	6802      	ldr	r2, [r0, #0]
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_TIM_Base_MspInit+0x24>)
{
 8000c0c:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d10a      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c12:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000c16:	69da      	ldr	r2, [r3, #28]
 8000c18:	f042 0204 	orr.w	r2, r2, #4
 8000c1c:	61da      	str	r2, [r3, #28]
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c28:	b002      	add	sp, #8
 8000c2a:	4770      	bx	lr
 8000c2c:	40000800 	.word	0x40000800

08000c30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c30:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8000c32:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Instance = USART3;
 8000c36:	480a      	ldr	r0, [pc, #40]	; (8000c60 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <MX_USART3_UART_Init+0x34>)
 8000c3a:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c42:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c46:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c48:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4e:	f001 fb2f 	bl	80022b0 <HAL_UART_Init>
 8000c52:	b118      	cbz	r0, 8000c5c <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000c58:	f7ff bf17 	b.w	8000a8a <Error_Handler>
}
 8000c5c:	bd08      	pop	{r3, pc}
 8000c5e:	bf00      	nop
 8000c60:	200011b0 	.word	0x200011b0
 8000c64:	40004800 	.word	0x40004800

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	2210      	movs	r2, #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	a802      	add	r0, sp, #8
 8000c74:	f002 ffa4 	bl	8003bc0 <memset>
  if(uartHandle->Instance==USART3)
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_UART_MspInit+0x80>)
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d130      	bne.n	8000ce2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c80:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8000c84:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c8c:	61da      	str	r2, [r3, #28]
 8000c8e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	4816      	ldr	r0, [pc, #88]	; (8000cec <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000c96:	9200      	str	r2, [sp, #0]
 8000c98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	f042 0208 	orr.w	r2, r2, #8
 8000ca2:	619a      	str	r2, [r3, #24]
 8000ca4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f000 fc5e 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	a902      	add	r1, sp, #8
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f000 fc55 	bl	800157c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cd2:	2027      	movs	r0, #39	; 0x27
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	2105      	movs	r1, #5
 8000cd8:	f000 fac4 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cdc:	2027      	movs	r0, #39	; 0x27
 8000cde:	f000 faf5 	bl	80012cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce2:	b006      	add	sp, #24
 8000ce4:	bd10      	pop	{r4, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x20>)
{
 8000cf2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	f000 fa9f 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fef0 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fec6 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	bd08      	pop	{r3, pc}
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x10>)
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_IncTick+0x14>)
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	440b      	add	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200011f0 	.word	0x200011f0
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <HAL_GetTick+0x8>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	200011f0 	.word	0x200011f0

08000d38 <HAL_ADC_ConvCpltCallback>:
 8000d38:	4770      	bx	lr

08000d3a <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000d3c:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d40:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000d44:	d11b      	bne.n	8000d7e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	6892      	ldr	r2, [r2, #8]
 8000d52:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d56:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d5a:	d10c      	bne.n	8000d76 <ADC_DMAConvCplt+0x3c>
 8000d5c:	7b1a      	ldrb	r2, [r3, #12]
 8000d5e:	b952      	cbnz	r2, 8000d76 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d6a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d6c:	bf5e      	ittt	pl
 8000d6e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000d70:	f042 0201 	orrpl.w	r2, r2, #1
 8000d74:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000d7c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
}
 8000d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4718      	bx	r3

08000d88 <HAL_ADC_ConvHalfCpltCallback>:
 8000d88:	4770      	bx	lr

08000d8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d8a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d8e:	f7ff fffb 	bl	8000d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d92:	bd08      	pop	{r3, pc}

08000d94 <HAL_ADC_ErrorCallback>:
 8000d94:	4770      	bx	lr

08000d96 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d96:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000d98:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000da2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000daa:	f7ff fff3 	bl	8000d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dae:	bd08      	pop	{r3, pc}

08000db0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000db0:	2300      	movs	r3, #0
{ 
 8000db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000db4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000db6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d06d      	beq.n	8000e9a <HAL_ADC_ConfigChannel+0xea>
 8000dbe:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000dc0:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000dc2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000dc6:	2d06      	cmp	r5, #6
 8000dc8:	6802      	ldr	r2, [r0, #0]
 8000dca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000dce:	680c      	ldr	r4, [r1, #0]
 8000dd0:	d823      	bhi.n	8000e1a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dd2:	261f      	movs	r6, #31
 8000dd4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000dd6:	3b05      	subs	r3, #5
 8000dd8:	409e      	lsls	r6, r3
 8000dda:	ea25 0506 	bic.w	r5, r5, r6
 8000dde:	fa04 f303 	lsl.w	r3, r4, r3
 8000de2:	432b      	orrs	r3, r5
 8000de4:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de6:	2c09      	cmp	r4, #9
 8000de8:	688b      	ldr	r3, [r1, #8]
 8000dea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000dee:	f04f 0107 	mov.w	r1, #7
 8000df2:	d92a      	bls.n	8000e4a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000df4:	68d6      	ldr	r6, [r2, #12]
 8000df6:	3d1e      	subs	r5, #30
 8000df8:	40a9      	lsls	r1, r5
 8000dfa:	ea26 0101 	bic.w	r1, r6, r1
 8000dfe:	40ab      	lsls	r3, r5
 8000e00:	430b      	orrs	r3, r1
 8000e02:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e04:	f1a4 0310 	sub.w	r3, r4, #16
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d926      	bls.n	8000e5a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	b002      	add	sp, #8
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000e1a:	2d0c      	cmp	r5, #12
 8000e1c:	f04f 051f 	mov.w	r5, #31
 8000e20:	d809      	bhi.n	8000e36 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e22:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000e24:	3b23      	subs	r3, #35	; 0x23
 8000e26:	409d      	lsls	r5, r3
 8000e28:	ea26 0505 	bic.w	r5, r6, r5
 8000e2c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e30:	432b      	orrs	r3, r5
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	e7d7      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e36:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000e38:	3b41      	subs	r3, #65	; 0x41
 8000e3a:	409d      	lsls	r5, r3
 8000e3c:	ea26 0505 	bic.w	r5, r6, r5
 8000e40:	fa04 f303 	lsl.w	r3, r4, r3
 8000e44:	432b      	orrs	r3, r5
 8000e46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e48:	e7cd      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e4a:	6916      	ldr	r6, [r2, #16]
 8000e4c:	40a9      	lsls	r1, r5
 8000e4e:	ea26 0101 	bic.w	r1, r6, r1
 8000e52:	40ab      	lsls	r3, r5
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6113      	str	r3, [r2, #16]
 8000e58:	e7d4      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_ADC_ConfigChannel+0xf0>)
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d116      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e60:	6893      	ldr	r3, [r2, #8]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	d4d2      	bmi.n	8000e0c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e66:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e68:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e6e:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e70:	d1cc      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_ADC_ConfigChannel+0xf4>)
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_ADC_ConfigChannel+0xf8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000e80:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e82:	9b01      	ldr	r3, [sp, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0c1      	beq.n	8000e0c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	e7f8      	b.n	8000e80 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e7b9      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e7ba      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x64>
 8000e9e:	bf00      	nop
 8000ea0:	40012400 	.word	0x40012400
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	000f4240 	.word	0x000f4240

08000eac <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000eac:	2300      	movs	r3, #0
{
 8000eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000eb0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb2:	6803      	ldr	r3, [r0, #0]
{
 8000eb4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	07d2      	lsls	r2, r2, #31
 8000eba:	d502      	bpl.n	8000ec2 <ADC_Enable+0x16>
  return HAL_OK;
 8000ebc:	2000      	movs	r0, #0
}
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <ADC_Enable+0x68>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <ADC_Enable+0x6c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000ed4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	b9c3      	cbnz	r3, 8000f0c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000eda:	f7ff ff27 	bl	8000d2c <HAL_GetTick>
 8000ede:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	689d      	ldr	r5, [r3, #8]
 8000ee4:	f015 0501 	ands.w	r5, r5, #1
 8000ee8:	d1e8      	bne.n	8000ebc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000eea:	f7ff ff1f 	bl	8000d2c <HAL_GetTick>
 8000eee:	1b80      	subs	r0, r0, r6
 8000ef0:	2802      	cmp	r0, #2
 8000ef2:	d9f5      	bls.n	8000ee0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000ef6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000f02:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f0a:	e7d8      	b.n	8000ebe <ADC_Enable+0x12>
      wait_loop_index--;
 8000f0c:	9b01      	ldr	r3, [sp, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	e7e0      	b.n	8000ed4 <ADC_Enable+0x28>
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000
 8000f18:	000f4240 	.word	0x000f4240

08000f1c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000f1c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000f20:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000f22:	2b01      	cmp	r3, #1
{
 8000f24:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000f26:	d054      	beq.n	8000fd2 <HAL_ADC_Start+0xb6>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000f2e:	f7ff ffbd 	bl	8000eac <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d149      	bne.n	8000fca <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d104      	bne.n	8000f58 <HAL_ADC_Start+0x3c>
 8000f4e:	4923      	ldr	r1, [pc, #140]	; (8000fdc <HAL_ADC_Start+0xc0>)
 8000f50:	684a      	ldr	r2, [r1, #4]
 8000f52:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000f56:	d12e      	bne.n	8000fb6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000f5e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f60:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f62:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f64:	bf41      	itttt	mi
 8000f66:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000f68:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f6c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f70:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f78:	bf1c      	itt	ne
 8000f7a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000f7c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f88:	f06f 0202 	mvn.w	r2, #2
 8000f8c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f94:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f98:	d113      	bne.n	8000fc2 <HAL_ADC_Start+0xa6>
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_ADC_Start+0xbc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d105      	bne.n	8000fac <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fa0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000fa4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000faa:	d10a      	bne.n	8000fc2 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fbc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fbe:	684a      	ldr	r2, [r1, #4]
 8000fc0:	e7cf      	b.n	8000f62 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fc8:	e7f3      	b.n	8000fb2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000fd0:	e7f0      	b.n	8000fb4 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	e7ee      	b.n	8000fb4 <HAL_ADC_Start+0x98>
 8000fd6:	bf00      	nop
 8000fd8:	40012800 	.word	0x40012800
 8000fdc:	40012400 	.word	0x40012400

08000fe0 <HAL_ADC_Start_DMA>:
{
 8000fe0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000fe4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_ADC_Start_DMA+0x108>)
 8000fe8:	6802      	ldr	r2, [r0, #0]
{
 8000fea:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000fec:	429a      	cmp	r2, r3
{
 8000fee:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ff0:	d002      	beq.n	8000ff8 <HAL_ADC_Start_DMA+0x18>
 8000ff2:	493e      	ldr	r1, [pc, #248]	; (80010ec <HAL_ADC_Start_DMA+0x10c>)
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d103      	bne.n	8001000 <HAL_ADC_Start_DMA+0x20>
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000ffe:	d16e      	bne.n	80010de <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8001000:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001004:	2b01      	cmp	r3, #1
 8001006:	d06c      	beq.n	80010e2 <HAL_ADC_Start_DMA+0x102>
 8001008:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800100a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800100c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001010:	f7ff ff4c 	bl	8000eac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001014:	4606      	mov	r6, r0
 8001016:	2800      	cmp	r0, #0
 8001018:	d15d      	bne.n	80010d6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800101a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800101c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800101e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8001024:	f020 0001 	bic.w	r0, r0, #1
 8001028:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800102c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800102e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001030:	d104      	bne.n	800103c <HAL_ADC_Start_DMA+0x5c>
 8001032:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <HAL_ADC_Start_DMA+0x108>)
 8001034:	6853      	ldr	r3, [r2, #4]
 8001036:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800103a:	d13e      	bne.n	80010ba <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800103e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001042:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001044:	684b      	ldr	r3, [r1, #4]
 8001046:	055a      	lsls	r2, r3, #21
 8001048:	d505      	bpl.n	8001056 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800104c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001054:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001058:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800105e:	bf18      	it	ne
 8001060:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001062:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001064:	bf18      	it	ne
 8001066:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800106a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800106c:	2300      	movs	r3, #0
 800106e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001074:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001076:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_ADC_Start_DMA+0x114>)
 800107a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_ADC_Start_DMA+0x118>)
 800107e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001080:	f06f 0302 	mvn.w	r3, #2
 8001084:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001088:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001094:	4643      	mov	r3, r8
 8001096:	f000 f957 	bl	8001348 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010a2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	bf0c      	ite	eq
 80010aa:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010ae:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	4630      	mov	r0, r6
 80010b6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010c0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c2:	6853      	ldr	r3, [r2, #4]
 80010c4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c6:	bf41      	itttt	mi
 80010c8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80010ca:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80010ce:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80010d2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80010d4:	e7bf      	b.n	8001056 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80010d6:	2300      	movs	r3, #0
 80010d8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80010dc:	e7ea      	b.n	80010b4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80010de:	2601      	movs	r6, #1
 80010e0:	e7e8      	b.n	80010b4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80010e2:	2602      	movs	r6, #2
 80010e4:	e7e6      	b.n	80010b4 <HAL_ADC_Start_DMA+0xd4>
 80010e6:	bf00      	nop
 80010e8:	40012400 	.word	0x40012400
 80010ec:	40012800 	.word	0x40012800
 80010f0:	08000d3b 	.word	0x08000d3b
 80010f4:	08000d8b 	.word	0x08000d8b
 80010f8:	08000d97 	.word	0x08000d97

080010fc <ADC_ConversionStop_Disable>:
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010fe:	6803      	ldr	r3, [r0, #0]
{
 8001100:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	07d2      	lsls	r2, r2, #31
 8001106:	d401      	bmi.n	800110c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001108:	2000      	movs	r0, #0
}
 800110a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001114:	f7ff fe0a 	bl	8000d2c <HAL_GetTick>
 8001118:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	07db      	lsls	r3, r3, #31
 8001120:	d5f2      	bpl.n	8001108 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001122:	f7ff fe03 	bl	8000d2c <HAL_GetTick>
 8001126:	1b40      	subs	r0, r0, r5
 8001128:	2802      	cmp	r0, #2
 800112a:	d9f6      	bls.n	800111a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800113e:	e7e4      	b.n	800110a <ADC_ConversionStop_Disable+0xe>

08001140 <HAL_ADC_Init>:
{
 8001140:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001142:	4604      	mov	r4, r0
 8001144:	2800      	cmp	r0, #0
 8001146:	d070      	beq.n	800122a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800114a:	b923      	cbnz	r3, 8001156 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800114e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001152:	f7ff fb09 	bl	8000768 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff ffd0 	bl	80010fc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800115c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800115e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001164:	d163      	bne.n	800122e <HAL_ADC_Init+0xee>
 8001166:	2800      	cmp	r0, #0
 8001168:	d161      	bne.n	800122e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800116c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001170:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	f023 0302 	bic.w	r3, r3, #2
 8001176:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800117a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800117c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800117e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001180:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001182:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001186:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800118a:	d037      	beq.n	80011fc <HAL_ADC_Init+0xbc>
 800118c:	2901      	cmp	r1, #1
 800118e:	bf14      	ite	ne
 8001190:	4606      	movne	r6, r0
 8001192:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001196:	7d25      	ldrb	r5, [r4, #20]
 8001198:	2d01      	cmp	r5, #1
 800119a:	d106      	bne.n	80011aa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800119c:	bb83      	cbnz	r3, 8001200 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800119e:	69a3      	ldr	r3, [r4, #24]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80011a6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80011aa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80011b0:	685d      	ldr	r5, [r3, #4]
 80011b2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80011b6:	ea45 0506 	orr.w	r5, r5, r6
 80011ba:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80011bc:	689e      	ldr	r6, [r3, #8]
 80011be:	4d1e      	ldr	r5, [pc, #120]	; (8001238 <HAL_ADC_Init+0xf8>)
 80011c0:	ea05 0506 	and.w	r5, r5, r6
 80011c4:	ea45 0502 	orr.w	r5, r5, r2
 80011c8:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011ca:	d001      	beq.n	80011d0 <HAL_ADC_Init+0x90>
 80011cc:	2901      	cmp	r1, #1
 80011ce:	d120      	bne.n	8001212 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011d0:	6921      	ldr	r1, [r4, #16]
 80011d2:	3901      	subs	r1, #1
 80011d4:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80011d6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80011d8:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80011dc:	4329      	orrs	r1, r5
 80011de:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e0:	6899      	ldr	r1, [r3, #8]
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_ADC_Init+0xfc>)
 80011e4:	400b      	ands	r3, r1
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d115      	bne.n	8001216 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 80011ea:	2300      	movs	r3, #0
 80011ec:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80011ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f0:	f023 0303 	bic.w	r3, r3, #3
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011fc:	460e      	mov	r6, r1
 80011fe:	e7ca      	b.n	8001196 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001202:	f043 0320 	orr.w	r3, r3, #32
 8001206:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001210:	e7cb      	b.n	80011aa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001212:	2100      	movs	r1, #0
 8001214:	e7df      	b.n	80011d6 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001218:	f023 0312 	bic.w	r3, r3, #18
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
 800122c:	e7e5      	b.n	80011fa <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	62a3      	str	r3, [r4, #40]	; 0x28
 8001234:	e7f9      	b.n	800122a <HAL_ADC_Init+0xea>
 8001236:	bf00      	nop
 8001238:	ffe1f7fd 	.word	0xffe1f7fd
 800123c:	ff1f0efe 	.word	0xff1f0efe

08001240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001242:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800125a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800125c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b570      	push	{r4, r5, r6, lr}
 8001268:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001272:	f1c4 0507 	rsb	r5, r4, #7
 8001276:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001278:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	bf28      	it	cs
 800127e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001280:	2b06      	cmp	r3, #6
 8001282:	bf98      	it	ls
 8001284:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001286:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	bf88      	it	hi
 800128c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128e:	ea21 0303 	bic.w	r3, r1, r3
 8001292:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	fa06 f404 	lsl.w	r4, r6, r4
 8001298:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800129c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	bfa8      	it	ge
 80012a4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80012a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	bfb8      	it	lt
 80012ae:	4a06      	ldrlt	r2, [pc, #24]	; (80012c8 <HAL_NVIC_SetPriority+0x64>)
 80012b0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	bfab      	itete	ge
 80012b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000ed14 	.word	0xe000ed14

080012cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012cc:	2800      	cmp	r0, #0
 80012ce:	db08      	blt.n	80012e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d0:	2301      	movs	r3, #1
 80012d2:	0942      	lsrs	r2, r0, #5
 80012d4:	f000 001f 	and.w	r0, r0, #31
 80012d8:	fa03 f000 	lsl.w	r0, r3, r0
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <HAL_NVIC_EnableIRQ+0x18>)
 80012de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012ea:	b330      	cbz	r0, 800133a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ec:	2214      	movs	r2, #20
 80012ee:	6801      	ldr	r1, [r0, #0]
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_DMA_Init+0x58>)
 80012f2:	440b      	add	r3, r1
 80012f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fe:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001300:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001302:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001306:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001308:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800130a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130e:	4323      	orrs	r3, r4
 8001310:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001312:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001318:	6944      	ldr	r4, [r0, #20]
 800131a:	4323      	orrs	r3, r4
 800131c:	6984      	ldr	r4, [r0, #24]
 800131e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001320:	69c4      	ldr	r4, [r0, #28]
 8001322:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001324:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001326:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001328:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800132c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001330:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001332:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001336:	4618      	mov	r0, r3
}
 8001338:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	e7fc      	b.n	8001338 <HAL_DMA_Init+0x50>
 800133e:	bf00      	nop
 8001340:	bffdfff8 	.word	0xbffdfff8
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800134a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800134e:	2c01      	cmp	r4, #1
 8001350:	d035      	beq.n	80013be <HAL_DMA_Start_IT+0x76>
 8001352:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001354:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001358:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800135c:	42a5      	cmp	r5, r4
 800135e:	f04f 0600 	mov.w	r6, #0
 8001362:	f04f 0402 	mov.w	r4, #2
 8001366:	d128      	bne.n	80013ba <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800136c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001370:	6826      	ldr	r6, [r4, #0]
 8001372:	f026 0601 	bic.w	r6, r6, #1
 8001376:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001378:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800137c:	40bd      	lsls	r5, r7
 800137e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001380:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001382:	6843      	ldr	r3, [r0, #4]
 8001384:	6805      	ldr	r5, [r0, #0]
 8001386:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001388:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800138a:	bf0b      	itete	eq
 800138c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800138e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001390:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001392:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001394:	b14b      	cbz	r3, 80013aa <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800139c:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800139e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	602b      	str	r3, [r5, #0]
}
 80013a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f043 030a 	orr.w	r3, r3, #10
 80013b8:	e7f0      	b.n	800139c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80013ba:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80013be:	2002      	movs	r0, #2
 80013c0:	e7f2      	b.n	80013a8 <HAL_DMA_Start_IT+0x60>
	...

080013c4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80013c8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d003      	beq.n	80013d6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ce:	2304      	movs	r3, #4
 80013d0:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
}
 80013d4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	f022 020e 	bic.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013e8:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_DMA_Abort_IT+0x88>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_DMA_Abort_IT+0x6a>
 80013ee:	3214      	adds	r2, #20
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d01e      	beq.n	8001432 <HAL_DMA_Abort_IT+0x6e>
 80013f4:	3214      	adds	r2, #20
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01d      	beq.n	8001436 <HAL_DMA_Abort_IT+0x72>
 80013fa:	3214      	adds	r2, #20
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d01d      	beq.n	800143c <HAL_DMA_Abort_IT+0x78>
 8001400:	3214      	adds	r2, #20
 8001402:	4293      	cmp	r3, r2
 8001404:	d01d      	beq.n	8001442 <HAL_DMA_Abort_IT+0x7e>
 8001406:	3214      	adds	r2, #20
 8001408:	4293      	cmp	r3, r2
 800140a:	bf0c      	ite	eq
 800140c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001410:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001416:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001418:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800141a:	2301      	movs	r3, #1
 800141c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001420:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001422:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001426:	b17b      	cbz	r3, 8001448 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001428:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	4620      	mov	r0, r4
 800142c:	e7d2      	b.n	80013d4 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800142e:	2301      	movs	r3, #1
 8001430:	e7f0      	b.n	8001414 <HAL_DMA_Abort_IT+0x50>
 8001432:	2310      	movs	r3, #16
 8001434:	e7ee      	b.n	8001414 <HAL_DMA_Abort_IT+0x50>
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	e7eb      	b.n	8001414 <HAL_DMA_Abort_IT+0x50>
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	e7e8      	b.n	8001414 <HAL_DMA_Abort_IT+0x50>
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001446:	e7e5      	b.n	8001414 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	4618      	mov	r0, r3
 800144a:	e7c3      	b.n	80013d4 <HAL_DMA_Abort_IT+0x10>
 800144c:	40020008 	.word	0x40020008
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_DMA_IRQHandler>:
{
 8001454:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001456:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001458:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800145a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800145c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800145e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001460:	4095      	lsls	r5, r2
 8001462:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001464:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001466:	d032      	beq.n	80014ce <HAL_DMA_IRQHandler+0x7a>
 8001468:	074d      	lsls	r5, r1, #29
 800146a:	d530      	bpl.n	80014ce <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001470:	bf5e      	ittt	pl
 8001472:	681a      	ldrpl	r2, [r3, #0]
 8001474:	f022 0204 	bicpl.w	r2, r2, #4
 8001478:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_DMA_IRQHandler+0x120>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d019      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x60>
 8001480:	3214      	adds	r2, #20
 8001482:	4293      	cmp	r3, r2
 8001484:	d018      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x64>
 8001486:	3214      	adds	r2, #20
 8001488:	4293      	cmp	r3, r2
 800148a:	d017      	beq.n	80014bc <HAL_DMA_IRQHandler+0x68>
 800148c:	3214      	adds	r2, #20
 800148e:	4293      	cmp	r3, r2
 8001490:	d017      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x6e>
 8001492:	3214      	adds	r2, #20
 8001494:	4293      	cmp	r3, r2
 8001496:	d017      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x74>
 8001498:	3214      	adds	r2, #20
 800149a:	4293      	cmp	r3, r2
 800149c:	bf0c      	ite	eq
 800149e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80014a2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80014a6:	4a34      	ldr	r2, [pc, #208]	; (8001578 <HAL_DMA_IRQHandler+0x124>)
 80014a8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80014aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05e      	beq.n	800156e <HAL_DMA_IRQHandler+0x11a>
}
 80014b0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80014b2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014b4:	2304      	movs	r3, #4
 80014b6:	e7f6      	b.n	80014a6 <HAL_DMA_IRQHandler+0x52>
 80014b8:	2340      	movs	r3, #64	; 0x40
 80014ba:	e7f4      	b.n	80014a6 <HAL_DMA_IRQHandler+0x52>
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c0:	e7f1      	b.n	80014a6 <HAL_DMA_IRQHandler+0x52>
 80014c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014c6:	e7ee      	b.n	80014a6 <HAL_DMA_IRQHandler+0x52>
 80014c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014cc:	e7eb      	b.n	80014a6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014ce:	2502      	movs	r5, #2
 80014d0:	4095      	lsls	r5, r2
 80014d2:	4225      	tst	r5, r4
 80014d4:	d035      	beq.n	8001542 <HAL_DMA_IRQHandler+0xee>
 80014d6:	078d      	lsls	r5, r1, #30
 80014d8:	d533      	bpl.n	8001542 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	0694      	lsls	r4, r2, #26
 80014de:	d406      	bmi.n	80014ee <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f022 020a 	bic.w	r2, r2, #10
 80014e6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80014e8:	2201      	movs	r2, #1
 80014ea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014ee:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_DMA_IRQHandler+0x120>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d019      	beq.n	8001528 <HAL_DMA_IRQHandler+0xd4>
 80014f4:	3214      	adds	r2, #20
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d018      	beq.n	800152c <HAL_DMA_IRQHandler+0xd8>
 80014fa:	3214      	adds	r2, #20
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d017      	beq.n	8001530 <HAL_DMA_IRQHandler+0xdc>
 8001500:	3214      	adds	r2, #20
 8001502:	4293      	cmp	r3, r2
 8001504:	d017      	beq.n	8001536 <HAL_DMA_IRQHandler+0xe2>
 8001506:	3214      	adds	r2, #20
 8001508:	4293      	cmp	r3, r2
 800150a:	d017      	beq.n	800153c <HAL_DMA_IRQHandler+0xe8>
 800150c:	3214      	adds	r2, #20
 800150e:	4293      	cmp	r3, r2
 8001510:	bf0c      	ite	eq
 8001512:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001516:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_DMA_IRQHandler+0x124>)
 800151c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800151e:	2300      	movs	r3, #0
 8001520:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001524:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001526:	e7c1      	b.n	80014ac <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001528:	2302      	movs	r3, #2
 800152a:	e7f6      	b.n	800151a <HAL_DMA_IRQHandler+0xc6>
 800152c:	2320      	movs	r3, #32
 800152e:	e7f4      	b.n	800151a <HAL_DMA_IRQHandler+0xc6>
 8001530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001534:	e7f1      	b.n	800151a <HAL_DMA_IRQHandler+0xc6>
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	e7ee      	b.n	800151a <HAL_DMA_IRQHandler+0xc6>
 800153c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001540:	e7eb      	b.n	800151a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001542:	2508      	movs	r5, #8
 8001544:	4095      	lsls	r5, r2
 8001546:	4225      	tst	r5, r4
 8001548:	d011      	beq.n	800156e <HAL_DMA_IRQHandler+0x11a>
 800154a:	0709      	lsls	r1, r1, #28
 800154c:	d50f      	bpl.n	800156e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	6819      	ldr	r1, [r3, #0]
 8001550:	f021 010e 	bic.w	r1, r1, #14
 8001554:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001556:	2301      	movs	r3, #1
 8001558:	fa03 f202 	lsl.w	r2, r3, r2
 800155c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800155e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001564:	2300      	movs	r3, #0
 8001566:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800156a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800156c:	e79e      	b.n	80014ac <HAL_DMA_IRQHandler+0x58>
}
 800156e:	bc70      	pop	{r4, r5, r6}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40020008 	.word	0x40020008
 8001578:	40020000 	.word	0x40020000

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001580:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001582:	4626      	mov	r6, r4
 8001584:	4b65      	ldr	r3, [pc, #404]	; (800171c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001586:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800172c <HAL_GPIO_Init+0x1b0>
 800158a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001730 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	680a      	ldr	r2, [r1, #0]
 8001590:	fa32 f506 	lsrs.w	r5, r2, r6
 8001594:	d102      	bne.n	800159c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001596:	b003      	add	sp, #12
 8001598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800159c:	f04f 0801 	mov.w	r8, #1
 80015a0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a4:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80015a8:	4590      	cmp	r8, r2
 80015aa:	d17e      	bne.n	80016aa <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80015ac:	684d      	ldr	r5, [r1, #4]
 80015ae:	2d12      	cmp	r5, #18
 80015b0:	f000 80a9 	beq.w	8001706 <HAL_GPIO_Init+0x18a>
 80015b4:	f200 8082 	bhi.w	80016bc <HAL_GPIO_Init+0x140>
 80015b8:	2d02      	cmp	r5, #2
 80015ba:	f000 80a1 	beq.w	8001700 <HAL_GPIO_Init+0x184>
 80015be:	d876      	bhi.n	80016ae <HAL_GPIO_Init+0x132>
 80015c0:	2d00      	cmp	r5, #0
 80015c2:	f000 8088 	beq.w	80016d6 <HAL_GPIO_Init+0x15a>
 80015c6:	2d01      	cmp	r5, #1
 80015c8:	f000 8098 	beq.w	80016fc <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015cc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d0:	2aff      	cmp	r2, #255	; 0xff
 80015d2:	bf93      	iteet	ls
 80015d4:	4682      	movls	sl, r0
 80015d6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80015da:	3d08      	subhi	r5, #8
 80015dc:	f8d0 b000 	ldrls.w	fp, [r0]
 80015e0:	bf92      	itee	ls
 80015e2:	00b5      	lslls	r5, r6, #2
 80015e4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80015e8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ea:	fa09 f805 	lsl.w	r8, r9, r5
 80015ee:	ea2b 0808 	bic.w	r8, fp, r8
 80015f2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f6:	bf88      	it	hi
 80015f8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fc:	ea48 0505 	orr.w	r5, r8, r5
 8001600:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001604:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001608:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800160c:	d04d      	beq.n	80016aa <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4f44      	ldr	r7, [pc, #272]	; (8001720 <HAL_GPIO_Init+0x1a4>)
 8001610:	f026 0803 	bic.w	r8, r6, #3
 8001614:	69bd      	ldr	r5, [r7, #24]
 8001616:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800161a:	f045 0501 	orr.w	r5, r5, #1
 800161e:	61bd      	str	r5, [r7, #24]
 8001620:	69bd      	ldr	r5, [r7, #24]
 8001622:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001626:	f005 0501 	and.w	r5, r5, #1
 800162a:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001630:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001632:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001636:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163a:	fa09 f90b 	lsl.w	r9, r9, fp
 800163e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001642:	4d38      	ldr	r5, [pc, #224]	; (8001724 <HAL_GPIO_Init+0x1a8>)
 8001644:	42a8      	cmp	r0, r5
 8001646:	d063      	beq.n	8001710 <HAL_GPIO_Init+0x194>
 8001648:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800164c:	42a8      	cmp	r0, r5
 800164e:	d061      	beq.n	8001714 <HAL_GPIO_Init+0x198>
 8001650:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001654:	42a8      	cmp	r0, r5
 8001656:	d05f      	beq.n	8001718 <HAL_GPIO_Init+0x19c>
 8001658:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800165c:	42a8      	cmp	r0, r5
 800165e:	bf0c      	ite	eq
 8001660:	2503      	moveq	r5, #3
 8001662:	2504      	movne	r5, #4
 8001664:	fa05 f50b 	lsl.w	r5, r5, fp
 8001668:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800166c:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001672:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001676:	bf14      	ite	ne
 8001678:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167a:	4395      	biceq	r5, r2
 800167c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800167e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001680:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001684:	bf14      	ite	ne
 8001686:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001688:	4395      	biceq	r5, r2
 800168a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800168c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001692:	bf14      	ite	ne
 8001694:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001696:	4395      	biceq	r5, r2
 8001698:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800169a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a0:	bf14      	ite	ne
 80016a2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a4:	ea25 0202 	biceq.w	r2, r5, r2
 80016a8:	60da      	str	r2, [r3, #12]
	position++;
 80016aa:	3601      	adds	r6, #1
 80016ac:	e76f      	b.n	800158e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80016ae:	2d03      	cmp	r5, #3
 80016b0:	d022      	beq.n	80016f8 <HAL_GPIO_Init+0x17c>
 80016b2:	2d11      	cmp	r5, #17
 80016b4:	d18a      	bne.n	80015cc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b6:	68cc      	ldr	r4, [r1, #12]
 80016b8:	3404      	adds	r4, #4
          break;
 80016ba:	e787      	b.n	80015cc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80016bc:	4f1a      	ldr	r7, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x1ac>)
 80016be:	42bd      	cmp	r5, r7
 80016c0:	d009      	beq.n	80016d6 <HAL_GPIO_Init+0x15a>
 80016c2:	d812      	bhi.n	80016ea <HAL_GPIO_Init+0x16e>
 80016c4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001734 <HAL_GPIO_Init+0x1b8>
 80016c8:	454d      	cmp	r5, r9
 80016ca:	d004      	beq.n	80016d6 <HAL_GPIO_Init+0x15a>
 80016cc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80016d0:	454d      	cmp	r5, r9
 80016d2:	f47f af7b 	bne.w	80015cc <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	688c      	ldr	r4, [r1, #8]
 80016d8:	b1c4      	cbz	r4, 800170c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016da:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80016dc:	bf0c      	ite	eq
 80016de:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80016e2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e6:	2408      	movs	r4, #8
 80016e8:	e770      	b.n	80015cc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80016ea:	4565      	cmp	r5, ip
 80016ec:	d0f3      	beq.n	80016d6 <HAL_GPIO_Init+0x15a>
 80016ee:	4575      	cmp	r5, lr
 80016f0:	d0f1      	beq.n	80016d6 <HAL_GPIO_Init+0x15a>
 80016f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001738 <HAL_GPIO_Init+0x1bc>
 80016f6:	e7eb      	b.n	80016d0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f8:	2400      	movs	r4, #0
 80016fa:	e767      	b.n	80015cc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016fc:	68cc      	ldr	r4, [r1, #12]
          break;
 80016fe:	e765      	b.n	80015cc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001700:	68cc      	ldr	r4, [r1, #12]
 8001702:	3408      	adds	r4, #8
          break;
 8001704:	e762      	b.n	80015cc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001706:	68cc      	ldr	r4, [r1, #12]
 8001708:	340c      	adds	r4, #12
          break;
 800170a:	e75f      	b.n	80015cc <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170c:	2404      	movs	r4, #4
 800170e:	e75d      	b.n	80015cc <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001710:	2500      	movs	r5, #0
 8001712:	e7a7      	b.n	8001664 <HAL_GPIO_Init+0xe8>
 8001714:	2501      	movs	r5, #1
 8001716:	e7a5      	b.n	8001664 <HAL_GPIO_Init+0xe8>
 8001718:	2502      	movs	r5, #2
 800171a:	e7a3      	b.n	8001664 <HAL_GPIO_Init+0xe8>
 800171c:	40010400 	.word	0x40010400
 8001720:	40021000 	.word	0x40021000
 8001724:	40010800 	.word	0x40010800
 8001728:	10210000 	.word	0x10210000
 800172c:	10310000 	.word	0x10310000
 8001730:	10320000 	.word	0x10320000
 8001734:	10110000 	.word	0x10110000
 8001738:	10220000 	.word	0x10220000

0800173c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800173c:	b10a      	cbz	r2, 8001742 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800173e:	6101      	str	r1, [r0, #16]
  }
}
 8001740:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	e7fb      	b.n	800173e <HAL_GPIO_WritePin+0x2>

08001746 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001746:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001748:	ea01 0203 	and.w	r2, r1, r3
 800174c:	ea21 0103 	bic.w	r1, r1, r3
 8001750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001754:	6101      	str	r1, [r0, #16]
}
 8001756:	4770      	bx	lr

08001758 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001758:	4770      	bx	lr
	...

0800175c <HAL_GPIO_EXTI_IRQHandler>:
{
 800175c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001760:	6959      	ldr	r1, [r3, #20]
 8001762:	4201      	tst	r1, r0
 8001764:	d002      	beq.n	800176c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001766:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001768:	f7ff fff6 	bl	8001758 <HAL_GPIO_EXTI_Callback>
}
 800176c:	bd08      	pop	{r3, pc}
 800176e:	bf00      	nop
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	4605      	mov	r5, r0
 800177a:	b908      	cbnz	r0, 8001780 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	e03c      	b.n	80017fa <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001780:	6803      	ldr	r3, [r0, #0]
 8001782:	07db      	lsls	r3, r3, #31
 8001784:	d410      	bmi.n	80017a8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	079f      	lsls	r7, r3, #30
 800178a:	d45d      	bmi.n	8001848 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	0719      	lsls	r1, r3, #28
 8001790:	f100 8094 	bmi.w	80018bc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	075a      	lsls	r2, r3, #29
 8001798:	f100 80be 	bmi.w	8001918 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179c:	69e8      	ldr	r0, [r5, #28]
 800179e:	2800      	cmp	r0, #0
 80017a0:	f040 812c 	bne.w	80019fc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
 80017a6:	e028      	b.n	80017fa <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4c8f      	ldr	r4, [pc, #572]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 80017aa:	6863      	ldr	r3, [r4, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d007      	beq.n	80017c4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b4:	6863      	ldr	r3, [r4, #4]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5e>
 80017be:	6863      	ldr	r3, [r4, #4]
 80017c0:	03de      	lsls	r6, r3, #15
 80017c2:	d506      	bpl.n	80017d2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	039c      	lsls	r4, r3, #14
 80017c8:	d5dd      	bpl.n	8001786 <HAL_RCC_OscConfig+0x12>
 80017ca:	686b      	ldr	r3, [r5, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1da      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
 80017d0:	e7d4      	b.n	800177c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	686b      	ldr	r3, [r5, #4]
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d112      	bne.n	8001800 <HAL_RCC_OscConfig+0x8c>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017e2:	f7ff faa3 	bl	8000d2c <HAL_GetTick>
 80017e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	0398      	lsls	r0, r3, #14
 80017ec:	d4cb      	bmi.n	8001786 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ee:	f7ff fa9d 	bl	8000d2c <HAL_GetTick>
 80017f2:	1b80      	subs	r0, r0, r6
 80017f4:	2864      	cmp	r0, #100	; 0x64
 80017f6:	d9f7      	bls.n	80017e8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
}
 80017fa:	b002      	add	sp, #8
 80017fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	b99b      	cbnz	r3, 800182a <HAL_RCC_OscConfig+0xb6>
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001812:	f7ff fa8b 	bl	8000d2c <HAL_GetTick>
 8001816:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	0399      	lsls	r1, r3, #14
 800181c:	d5b3      	bpl.n	8001786 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff fa85 	bl	8000d2c <HAL_GetTick>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	2864      	cmp	r0, #100	; 0x64
 8001826:	d9f7      	bls.n	8001818 <HAL_RCC_OscConfig+0xa4>
 8001828:	e7e6      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	d103      	bne.n	800183a <HAL_RCC_OscConfig+0xc6>
 8001832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001836:	6023      	str	r3, [r4, #0]
 8001838:	e7cf      	b.n	80017da <HAL_RCC_OscConfig+0x66>
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	6023      	str	r3, [r4, #0]
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	e7cb      	b.n	80017e0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001848:	4c67      	ldr	r4, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 800184a:	6863      	ldr	r3, [r4, #4]
 800184c:	f013 0f0c 	tst.w	r3, #12
 8001850:	d007      	beq.n	8001862 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d110      	bne.n	800187e <HAL_RCC_OscConfig+0x10a>
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	03da      	lsls	r2, r3, #15
 8001860:	d40d      	bmi.n	800187e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	079b      	lsls	r3, r3, #30
 8001866:	d502      	bpl.n	800186e <HAL_RCC_OscConfig+0xfa>
 8001868:	692b      	ldr	r3, [r5, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d186      	bne.n	800177c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	696a      	ldr	r2, [r5, #20]
 8001872:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001876:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	e786      	b.n	800178c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187e:	692a      	ldr	r2, [r5, #16]
 8001880:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_RCC_OscConfig+0x278>)
 8001882:	b16a      	cbz	r2, 80018a0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001888:	f7ff fa50 	bl	8000d2c <HAL_GetTick>
 800188c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	079f      	lsls	r7, r3, #30
 8001892:	d4ec      	bmi.n	800186e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fa4a 	bl	8000d2c <HAL_GetTick>
 8001898:	1b80      	subs	r0, r0, r6
 800189a:	2802      	cmp	r0, #2
 800189c:	d9f7      	bls.n	800188e <HAL_RCC_OscConfig+0x11a>
 800189e:	e7ab      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80018a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa43 	bl	8000d2c <HAL_GetTick>
 80018a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	0798      	lsls	r0, r3, #30
 80018ac:	f57f af6e 	bpl.w	800178c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fa3c 	bl	8000d2c <HAL_GetTick>
 80018b4:	1b80      	subs	r0, r0, r6
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9f6      	bls.n	80018a8 <HAL_RCC_OscConfig+0x134>
 80018ba:	e79d      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018bc:	69aa      	ldr	r2, [r5, #24]
 80018be:	4c4a      	ldr	r4, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	b1da      	cbz	r2, 80018fc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018c8:	f7ff fa30 	bl	8000d2c <HAL_GetTick>
 80018cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d0:	079b      	lsls	r3, r3, #30
 80018d2:	d50d      	bpl.n	80018f0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x280>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80018e0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80018e2:	bf00      	nop
  }
  while (Delay --);
 80018e4:	9b01      	ldr	r3, [sp, #4]
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_RCC_OscConfig+0x16e>
 80018ee:	e751      	b.n	8001794 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fa1c 	bl	8000d2c <HAL_GetTick>
 80018f4:	1b80      	subs	r0, r0, r6
 80018f6:	2802      	cmp	r0, #2
 80018f8:	d9e9      	bls.n	80018ce <HAL_RCC_OscConfig+0x15a>
 80018fa:	e77d      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80018fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa15 	bl	8000d2c <HAL_GetTick>
 8001902:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001906:	079f      	lsls	r7, r3, #30
 8001908:	f57f af44 	bpl.w	8001794 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fa0e 	bl	8000d2c <HAL_GetTick>
 8001910:	1b80      	subs	r0, r0, r6
 8001912:	2802      	cmp	r0, #2
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x190>
 8001916:	e76f      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001918:	4c33      	ldr	r4, [pc, #204]	; (80019e8 <HAL_RCC_OscConfig+0x274>)
 800191a:	69e3      	ldr	r3, [r4, #28]
 800191c:	00d8      	lsls	r0, r3, #3
 800191e:	d424      	bmi.n	800196a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001920:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	69e3      	ldr	r3, [r4, #28]
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	61e3      	str	r3, [r4, #28]
 800192a:	69e3      	ldr	r3, [r4, #28]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4e30      	ldr	r6, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x284>)
 8001936:	6833      	ldr	r3, [r6, #0]
 8001938:	05d9      	lsls	r1, r3, #23
 800193a:	d518      	bpl.n	800196e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	68eb      	ldr	r3, [r5, #12]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d126      	bne.n	8001990 <HAL_RCC_OscConfig+0x21c>
 8001942:	6a23      	ldr	r3, [r4, #32]
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800194a:	f7ff f9ef 	bl	8000d2c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001952:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	6a23      	ldr	r3, [r4, #32]
 8001956:	079b      	lsls	r3, r3, #30
 8001958:	d53f      	bpl.n	80019da <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800195a:	2f00      	cmp	r7, #0
 800195c:	f43f af1e 	beq.w	800179c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	69e3      	ldr	r3, [r4, #28]
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001966:	61e3      	str	r3, [r4, #28]
 8001968:	e718      	b.n	800179c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2700      	movs	r7, #0
 800196c:	e7e2      	b.n	8001934 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	6833      	ldr	r3, [r6, #0]
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001976:	f7ff f9d9 	bl	8000d2c <HAL_GetTick>
 800197a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	6833      	ldr	r3, [r6, #0]
 800197e:	05da      	lsls	r2, r3, #23
 8001980:	d4dc      	bmi.n	800193c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff f9d3 	bl	8000d2c <HAL_GetTick>
 8001986:	eba0 0008 	sub.w	r0, r0, r8
 800198a:	2864      	cmp	r0, #100	; 0x64
 800198c:	d9f6      	bls.n	800197c <HAL_RCC_OscConfig+0x208>
 800198e:	e733      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	b9ab      	cbnz	r3, 80019be <HAL_RCC_OscConfig+0x24a>
 8001992:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6223      	str	r3, [r4, #32]
 800199e:	6a23      	ldr	r3, [r4, #32]
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019a6:	f7ff f9c1 	bl	8000d2c <HAL_GetTick>
 80019aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ac:	6a23      	ldr	r3, [r4, #32]
 80019ae:	0798      	lsls	r0, r3, #30
 80019b0:	d5d3      	bpl.n	800195a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f9bb 	bl	8000d2c <HAL_GetTick>
 80019b6:	1b80      	subs	r0, r0, r6
 80019b8:	4540      	cmp	r0, r8
 80019ba:	d9f7      	bls.n	80019ac <HAL_RCC_OscConfig+0x238>
 80019bc:	e71c      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019be:	2b05      	cmp	r3, #5
 80019c0:	6a23      	ldr	r3, [r4, #32]
 80019c2:	d103      	bne.n	80019cc <HAL_RCC_OscConfig+0x258>
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6223      	str	r3, [r4, #32]
 80019ca:	e7ba      	b.n	8001942 <HAL_RCC_OscConfig+0x1ce>
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6223      	str	r3, [r4, #32]
 80019d2:	6a23      	ldr	r3, [r4, #32]
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	e7b6      	b.n	8001948 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff f9a7 	bl	8000d2c <HAL_GetTick>
 80019de:	eba0 0008 	sub.w	r0, r0, r8
 80019e2:	42b0      	cmp	r0, r6
 80019e4:	d9b6      	bls.n	8001954 <HAL_RCC_OscConfig+0x1e0>
 80019e6:	e707      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	42420000 	.word	0x42420000
 80019f0:	42420480 	.word	0x42420480
 80019f4:	20000000 	.word	0x20000000
 80019f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x334>)
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	461c      	mov	r4, r3
 8001a02:	f002 020c 	and.w	r2, r2, #12
 8001a06:	2a08      	cmp	r2, #8
 8001a08:	d03d      	beq.n	8001a86 <HAL_RCC_OscConfig+0x312>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4e27      	ldr	r6, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a10:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	d12b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001a14:	f7ff f98a 	bl	8000d2c <HAL_GetTick>
 8001a18:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	0199      	lsls	r1, r3, #6
 8001a1e:	d41f      	bmi.n	8001a60 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a20:	6a2b      	ldr	r3, [r5, #32]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a28:	6862      	ldr	r2, [r4, #4]
 8001a2a:	68a9      	ldr	r1, [r5, #8]
 8001a2c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a30:	430a      	orrs	r2, r1
 8001a32:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a34:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001a36:	6862      	ldr	r2, [r4, #4]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a42:	2301      	movs	r3, #1
 8001a44:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a46:	f7ff f971 	bl	8000d2c <HAL_GetTick>
 8001a4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	019a      	lsls	r2, r3, #6
 8001a50:	f53f aea8 	bmi.w	80017a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f96a 	bl	8000d2c <HAL_GetTick>
 8001a58:	1b40      	subs	r0, r0, r5
 8001a5a:	2802      	cmp	r0, #2
 8001a5c:	d9f6      	bls.n	8001a4c <HAL_RCC_OscConfig+0x2d8>
 8001a5e:	e6cb      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f964 	bl	8000d2c <HAL_GetTick>
 8001a64:	1bc0      	subs	r0, r0, r7
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9d7      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2a6>
 8001a6a:	e6c5      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f95e 	bl	8000d2c <HAL_GetTick>
 8001a70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	f57f ae95 	bpl.w	80017a4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f957 	bl	8000d2c <HAL_GetTick>
 8001a7e:	1b40      	subs	r0, r0, r5
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f6      	bls.n	8001a72 <HAL_RCC_OscConfig+0x2fe>
 8001a84:	e6b8      	b.n	80017f8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a86:	2801      	cmp	r0, #1
 8001a88:	f43f aeb7 	beq.w	80017fa <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001a8c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	6a2b      	ldr	r3, [r5, #32]
 8001a90:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f47f ae71 	bne.w	800177c <HAL_RCC_OscConfig+0x8>
 8001a9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001aa0:	1ac0      	subs	r0, r0, r3
 8001aa2:	bf18      	it	ne
 8001aa4:	2001      	movne	r0, #1
 8001aa6:	e6a8      	b.n	80017fa <HAL_RCC_OscConfig+0x86>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	42420060 	.word	0x42420060

08001ab0 <HAL_RCC_GetSysClockFreq>:
{
 8001ab0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ab4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ab6:	ac02      	add	r4, sp, #8
 8001ab8:	f103 0510 	add.w	r5, r3, #16
 8001abc:	4622      	mov	r2, r4
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	c203      	stmia	r2!, {r0, r1}
 8001ac6:	42ab      	cmp	r3, r5
 8001ac8:	4614      	mov	r4, r2
 8001aca:	d1f7      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001acc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001ad0:	4911      	ldr	r1, [pc, #68]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ad2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001ad6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad8:	f003 020c 	and.w	r2, r3, #12
 8001adc:	2a08      	cmp	r2, #8
 8001ade:	d117      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001ae4:	a806      	add	r0, sp, #24
 8001ae6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aee:	d50c      	bpl.n	8001b0a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001af0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001af4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001af8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afa:	aa06      	add	r2, sp, #24
 8001afc:	4413      	add	r3, r2
 8001afe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b02:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b06:	b007      	add	sp, #28
 8001b08:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x70>)
 8001b0c:	4350      	muls	r0, r2
 8001b0e:	e7fa      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001b12:	e7f8      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x56>
 8001b14:	08003cac 	.word	0x08003cac
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	007a1200 	.word	0x007a1200
 8001b20:	003d0900 	.word	0x003d0900

08001b24 <HAL_RCC_ClockConfig>:
{
 8001b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b28:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b910      	cbnz	r0, 8001b34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
}
 8001b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_RCC_ClockConfig+0x124>)
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	d328      	bcc.n	8001b92 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	6821      	ldr	r1, [r4, #0]
 8001b42:	078e      	lsls	r6, r1, #30
 8001b44:	d430      	bmi.n	8001ba8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	07ca      	lsls	r2, r1, #31
 8001b48:	d443      	bmi.n	8001bd2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_RCC_ClockConfig+0x124>)
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	42ab      	cmp	r3, r5
 8001b54:	d865      	bhi.n	8001c22 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	4d3c      	ldr	r5, [pc, #240]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
 8001b5a:	f012 0f04 	tst.w	r2, #4
 8001b5e:	d16c      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	0713      	lsls	r3, r2, #28
 8001b62:	d506      	bpl.n	8001b72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b64:	686b      	ldr	r3, [r5, #4]
 8001b66:	6922      	ldr	r2, [r4, #16]
 8001b68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b70:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b72:	f7ff ff9d 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001b76:	686b      	ldr	r3, [r5, #4]
 8001b78:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <HAL_RCC_ClockConfig+0x12c>)
 8001b7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	40d8      	lsrs	r0, r3
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_ClockConfig+0x130>)
 8001b84:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x134>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f7fe ffad 	bl	8000ae8 <HAL_InitTick>
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7ce      	b.n	8001b30 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f023 0307 	bic.w	r3, r3, #7
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	428b      	cmp	r3, r1
 8001ba4:	d1c3      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xa>
 8001ba6:	e7cb      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1c>
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001baa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bae:	bf1e      	ittt	ne
 8001bb0:	685a      	ldrne	r2, [r3, #4]
 8001bb2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001bb6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bba:	bf42      	ittt	mi
 8001bbc:	685a      	ldrmi	r2, [r3, #4]
 8001bbe:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001bc2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68a0      	ldr	r0, [r4, #8]
 8001bc8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bcc:	4302      	orrs	r2, r0
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	e7b9      	b.n	8001b46 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	6862      	ldr	r2, [r4, #4]
 8001bd4:	4e1d      	ldr	r6, [pc, #116]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
 8001bd6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	d11a      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	d0a5      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be8:	f023 0303 	bic.w	r3, r3, #3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f89c 	bl	8000d2c <HAL_GetTick>
 8001bf4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	6873      	ldr	r3, [r6, #4]
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c02:	d0a2      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f892 	bl	8000d2c <HAL_GetTick>
 8001c08:	1bc0      	subs	r0, r0, r7
 8001c0a:	4540      	cmp	r0, r8
 8001c0c:	d9f3      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e78e      	b.n	8001b30 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	2a02      	cmp	r2, #2
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c1a:	e7e1      	b.n	8001be0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	f013 0f02 	tst.w	r3, #2
 8001c20:	e7de      	b.n	8001be0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f023 0307 	bic.w	r3, r3, #7
 8001c28:	432b      	orrs	r3, r5
 8001c2a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	42ab      	cmp	r3, r5
 8001c34:	f47f af7b 	bne.w	8001b2e <HAL_RCC_ClockConfig+0xa>
 8001c38:	e78d      	b.n	8001b56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3a:	686b      	ldr	r3, [r5, #4]
 8001c3c:	68e1      	ldr	r1, [r4, #12]
 8001c3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c42:	430b      	orrs	r3, r1
 8001c44:	606b      	str	r3, [r5, #4]
 8001c46:	e78b      	b.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003d14 	.word	0x08003d14
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000008 	.word	0x20000008

08001c5c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c6a:	6810      	ldr	r0, [r2, #0]
}
 8001c6c:	40d8      	lsrs	r0, r3
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	08003d24 	.word	0x08003d24
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c8a:	6810      	ldr	r0, [r2, #0]
}
 8001c8c:	40d8      	lsrs	r0, r3
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003d24 	.word	0x08003d24
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_GetClockConfig+0x34>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001cb0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001cb8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cc2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetClockConfig+0x38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	600b      	str	r3, [r1, #0]
}
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cd8:	6803      	ldr	r3, [r0, #0]
{
 8001cda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cde:	07d9      	lsls	r1, r3, #31
{
 8001ce0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ce2:	d520      	bpl.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4c35      	ldr	r4, [pc, #212]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ce6:	69e3      	ldr	r3, [r4, #28]
 8001ce8:	00da      	lsls	r2, r3, #3
 8001cea:	d432      	bmi.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001cec:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	69e3      	ldr	r3, [r4, #28]
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	61e3      	str	r3, [r4, #28]
 8001cf6:	69e3      	ldr	r3, [r4, #28]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	4e2f      	ldr	r6, [pc, #188]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001d02:	6833      	ldr	r3, [r6, #0]
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	d526      	bpl.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d08:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d0a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d0e:	d136      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d10:	6a23      	ldr	r3, [r4, #32]
 8001d12:	686a      	ldr	r2, [r5, #4]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1c:	b11f      	cbz	r7, 8001d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1e:	69e3      	ldr	r3, [r4, #28]
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d24:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d26:	6828      	ldr	r0, [r5, #0]
 8001d28:	0783      	lsls	r3, r0, #30
 8001d2a:	d506      	bpl.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d2e:	68a9      	ldr	r1, [r5, #8]
 8001d30:	6853      	ldr	r3, [r2, #4]
 8001d32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d36:	430b      	orrs	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d3a:	f010 0010 	ands.w	r0, r0, #16
 8001d3e:	d01b      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001d42:	68e9      	ldr	r1, [r5, #12]
 8001d44:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d46:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6053      	str	r3, [r2, #4]
 8001d50:	e012      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2700      	movs	r7, #0
 8001d54:	e7d4      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	6833      	ldr	r3, [r6, #0]
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d5e:	f7fe ffe5 	bl	8000d2c <HAL_GetTick>
 8001d62:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	6833      	ldr	r3, [r6, #0]
 8001d66:	05d8      	lsls	r0, r3, #23
 8001d68:	d4ce      	bmi.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7fe ffdf 	bl	8000d2c <HAL_GetTick>
 8001d6e:	eba0 0008 	sub.w	r0, r0, r8
 8001d72:	2864      	cmp	r0, #100	; 0x64
 8001d74:	d9f6      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
}
 8001d78:	b002      	add	sp, #8
 8001d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d7e:	686a      	ldr	r2, [r5, #4]
 8001d80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d0c3      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d88:	2001      	movs	r0, #1
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d8c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d90:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d96:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001d98:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d9a:	07d9      	lsls	r1, r3, #31
 8001d9c:	d5b8      	bpl.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffc5 	bl	8000d2c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001da6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	6a23      	ldr	r3, [r4, #32]
 8001daa:	079a      	lsls	r2, r3, #30
 8001dac:	d4b0      	bmi.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe ffbd 	bl	8000d2c <HAL_GetTick>
 8001db2:	1b80      	subs	r0, r0, r6
 8001db4:	4540      	cmp	r0, r8
 8001db6:	d9f7      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001db8:	e7dd      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420440 	.word	0x42420440

08001dc8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d11c      	bne.n	8001e0a <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	6803      	ldr	r3, [r0, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00a      	beq.n	8001df4 <HAL_TIM_Base_Start+0x2c>
 8001dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de2:	d007      	beq.n	8001df4 <HAL_TIM_Base_Start+0x2c>
 8001de4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_TIM_Base_Start+0x2c>
 8001dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	2a06      	cmp	r2, #6
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2000      	movs	r0, #0
}
 8001e08:	4770      	bx	lr
    return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00

08001e14 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d120      	bne.n	8001e5e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e22:	6803      	ldr	r3, [r0, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_TIM_Base_Start_IT+0x50>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00a      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x34>
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d007      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x34>
 8001e38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x34>
 8001e40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	2a06      	cmp	r2, #6
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2000      	movs	r0, #0
}
 8001e5c:	4770      	bx	lr
    return HAL_ERROR;
 8001e5e:	2001      	movs	r0, #1
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00

08001e68 <HAL_TIM_OC_DelayElapsedCallback>:
 8001e68:	4770      	bx	lr

08001e6a <HAL_TIM_IC_CaptureCallback>:
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_TriggerCallback>:
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e70:	6803      	ldr	r3, [r0, #0]
{
 8001e72:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e74:	691a      	ldr	r2, [r3, #16]
{
 8001e76:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e78:	0791      	lsls	r1, r2, #30
 8001e7a:	d50e      	bpl.n	8001e9a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	0792      	lsls	r2, r2, #30
 8001e80:	d50b      	bpl.n	8001e9a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e82:	f06f 0202 	mvn.w	r2, #2
 8001e86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e88:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8e:	079b      	lsls	r3, r3, #30
 8001e90:	d077      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	f7ff ffea 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	2300      	movs	r3, #0
 8001e98:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	0750      	lsls	r0, r2, #29
 8001ea0:	d510      	bpl.n	8001ec4 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	0751      	lsls	r1, r2, #29
 8001ea6:	d50d      	bpl.n	8001ec4 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea8:	f06f 0204 	mvn.w	r2, #4
 8001eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eae:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb4:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eba:	d068      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebc:	f7ff ffd5 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	0712      	lsls	r2, r2, #28
 8001eca:	d50f      	bpl.n	8001eec <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	0710      	lsls	r0, r2, #28
 8001ed0:	d50c      	bpl.n	8001eec <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed2:	f06f 0208 	mvn.w	r2, #8
 8001ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ed8:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eda:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001edc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ede:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee2:	d05a      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee4:	f7ff ffc1 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	06d2      	lsls	r2, r2, #27
 8001ef2:	d510      	bpl.n	8001f16 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	06d0      	lsls	r0, r2, #27
 8001ef8:	d50d      	bpl.n	8001f16 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efa:	f06f 0210 	mvn.w	r2, #16
 8001efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f00:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f02:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f06:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	d04b      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	f7ff ffac 	bl	8001e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	2300      	movs	r3, #0
 8001f14:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	07d1      	lsls	r1, r2, #31
 8001f1c:	d508      	bpl.n	8001f30 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	07d2      	lsls	r2, r2, #31
 8001f22:	d505      	bpl.n	8001f30 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f24:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2c:	f001 fab4 	bl	8003498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	0610      	lsls	r0, r2, #24
 8001f36:	d508      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	0611      	lsls	r1, r2, #24
 8001f3c:	d505      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f46:	f000 f96a 	bl	800221e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	0652      	lsls	r2, r2, #25
 8001f50:	d508      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	0650      	lsls	r0, r2, #25
 8001f56:	d505      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f60:	f7ff ff85 	bl	8001e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	0691      	lsls	r1, r2, #26
 8001f6a:	d522      	bpl.n	8001fb2 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	0692      	lsls	r2, r2, #26
 8001f70:	d51f      	bpl.n	8001fb2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f72:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f76:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	f000 b94d 	b.w	800221c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	f7ff ff71 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff ff70 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f8c:	e783      	b.n	8001e96 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	f7ff ff6b 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ff6a 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f98:	e792      	b.n	8001ec0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	f7ff ff65 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ff64 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa4:	e7a0      	b.n	8001ee8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	f7ff ff5f 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff ff5e 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb0:	e7af      	b.n	8001f12 <HAL_TIM_IRQHandler+0xa2>
}
 8001fb2:	bd10      	pop	{r4, pc}

08001fb4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb4:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001fb6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb8:	4290      	cmp	r0, r2
 8001fba:	d00a      	beq.n	8001fd2 <TIM_Base_SetConfig+0x1e>
 8001fbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fc0:	d007      	beq.n	8001fd2 <TIM_Base_SetConfig+0x1e>
 8001fc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_Base_SetConfig+0x1e>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d115      	bne.n	8001ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001fd2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <TIM_Base_SetConfig+0x6c>)
 8001fdc:	4290      	cmp	r0, r2
 8001fde:	d00a      	beq.n	8001ff6 <TIM_Base_SetConfig+0x42>
 8001fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fe4:	d007      	beq.n	8001ff6 <TIM_Base_SetConfig+0x42>
 8001fe6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d003      	beq.n	8001ff6 <TIM_Base_SetConfig+0x42>
 8001fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d103      	bne.n	8001ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ffe:	694a      	ldr	r2, [r1, #20]
 8002000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002004:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002006:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002008:	688b      	ldr	r3, [r1, #8]
 800200a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200c:	680b      	ldr	r3, [r1, #0]
 800200e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <TIM_Base_SetConfig+0x6c>)
 8002012:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	bf04      	itt	eq
 8002016:	690b      	ldreq	r3, [r1, #16]
 8002018:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201a:	2301      	movs	r3, #1
 800201c:	6143      	str	r3, [r0, #20]
}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00

08002024 <HAL_TIM_Base_Init>:
{
 8002024:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002026:	4604      	mov	r4, r0
 8002028:	b330      	cbz	r0, 8002078 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800202e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002032:	b91b      	cbnz	r3, 800203c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002034:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002038:	f7fe fde6 	bl	8000c08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002044:	1d21      	adds	r1, r4, #4
 8002046:	f7ff ffb5 	bl	8001fb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204a:	2301      	movs	r3, #1
  return HAL_OK;
 800204c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002052:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002056:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800205a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800205e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002062:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800206a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800206e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002076:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
 800207a:	e7fc      	b.n	8002076 <HAL_TIM_Base_Init+0x52>

0800207c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800207c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800207e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002080:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002082:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002086:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800208a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800208c:	6083      	str	r3, [r0, #8]
}
 800208e:	bd10      	pop	{r4, pc}

08002090 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002094:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002096:	2b01      	cmp	r3, #1
{
 8002098:	4604      	mov	r4, r0
 800209a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800209e:	d019      	beq.n	80020d4 <HAL_TIM_ConfigClockSource+0x44>
 80020a0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80020a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80020a6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80020a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80020ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80020b6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80020b8:	680b      	ldr	r3, [r1, #0]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d065      	beq.n	800218a <HAL_TIM_ConfigClockSource+0xfa>
 80020be:	d815      	bhi.n	80020ec <HAL_TIM_ConfigClockSource+0x5c>
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d00c      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x4e>
 80020c4:	d807      	bhi.n	80020d6 <HAL_TIM_ConfigClockSource+0x46>
 80020c6:	b153      	cbz	r3, 80020de <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80020ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80020d0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d001      	beq.n	80020de <HAL_TIM_ConfigClockSource+0x4e>
 80020da:	2b30      	cmp	r3, #48	; 0x30
 80020dc:	d1f4      	bne.n	80020c8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80020de:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020e0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80020e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020e8:	4313      	orrs	r3, r2
 80020ea:	e01a      	b.n	8002122 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80020ec:	2b60      	cmp	r3, #96	; 0x60
 80020ee:	d034      	beq.n	800215a <HAL_TIM_ConfigClockSource+0xca>
 80020f0:	d819      	bhi.n	8002126 <HAL_TIM_ConfigClockSource+0x96>
 80020f2:	2b50      	cmp	r3, #80	; 0x50
 80020f4:	d1e8      	bne.n	80020c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f6:	684a      	ldr	r2, [r1, #4]
 80020f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80020fa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020fc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fe:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002102:	f025 0501 	bic.w	r5, r5, #1
 8002106:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002108:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800210a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800210c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002110:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002114:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002116:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002118:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800211a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800211e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002122:	6083      	str	r3, [r0, #8]
 8002124:	e7d0      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002126:	2b70      	cmp	r3, #112	; 0x70
 8002128:	d00c      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0xb4>
 800212a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212e:	d1cb      	bne.n	80020c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	68cb      	ldr	r3, [r1, #12]
 8002132:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002136:	f7ff ffa1 	bl	800207c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	6893      	ldr	r3, [r2, #8]
 800213e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002142:	e008      	b.n	8002156 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002144:	68cb      	ldr	r3, [r1, #12]
 8002146:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800214a:	f7ff ff97 	bl	800207c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800214e:	6822      	ldr	r2, [r4, #0]
 8002150:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002156:	6093      	str	r3, [r2, #8]
      break;
 8002158:	e7b6      	b.n	80020c8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800215a:	684d      	ldr	r5, [r1, #4]
 800215c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800215e:	6a01      	ldr	r1, [r0, #32]
 8002160:	f021 0110 	bic.w	r1, r1, #16
 8002164:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002166:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002168:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800216a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800216e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002172:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002176:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800217a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800217c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800217e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002184:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002188:	e7cb      	b.n	8002122 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800218a:	684a      	ldr	r2, [r1, #4]
 800218c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800218e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002190:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002192:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	f025 0501 	bic.w	r5, r5, #1
 800219a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800219c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800219e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021a4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80021a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80021aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021b2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80021b6:	e7b4      	b.n	8002122 <HAL_TIM_ConfigClockSource+0x92>

080021b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021bc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f04f 0302 	mov.w	r3, #2
 80021c4:	d025      	beq.n	8002212 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80021c6:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021cc:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021ce:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80021d0:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 80021d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021da:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80021dc:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021de:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e0:	4c0d      	ldr	r4, [pc, #52]	; (8002218 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	d00a      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d007      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021ec:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80021f0:	42a3      	cmp	r3, r4
 80021f2:	d003      	beq.n	80021fc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80021f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021f8:	42a3      	cmp	r3, r4
 80021fa:	d104      	bne.n	8002206 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021fc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002202:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002206:	2301      	movs	r3, #1
 8002208:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800220c:	2300      	movs	r3, #0
 800220e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002212:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002214:	bd30      	pop	{r4, r5, pc}
 8002216:	bf00      	nop
 8002218:	40012c00 	.word	0x40012c00

0800221c <HAL_TIMEx_CommutCallback>:
 800221c:	4770      	bx	lr

0800221e <HAL_TIMEx_BreakCallback>:
 800221e:	4770      	bx	lr

08002220 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002220:	6803      	ldr	r3, [r0, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002228:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002232:	2320      	movs	r3, #32
 8002234:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002238:	4770      	bx	lr
	...

0800223c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800223c:	b510      	push	{r4, lr}
 800223e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002240:	6803      	ldr	r3, [r0, #0]
 8002242:	68c1      	ldr	r1, [r0, #12]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800224e:	6882      	ldr	r2, [r0, #8]
 8002250:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002252:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002254:	4302      	orrs	r2, r0
 8002256:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002258:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800225c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002260:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	69a1      	ldr	r1, [r4, #24]
 800226a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800226e:	430a      	orrs	r2, r1
 8002270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <UART_SetConfig+0x70>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d115      	bne.n	80022a4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002278:	f7ff fd00 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227c:	2319      	movs	r3, #25
 800227e:	4358      	muls	r0, r3
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	2264      	movs	r2, #100	; 0x64
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	fbb0 f0f3 	udiv	r0, r0, r3
 800228a:	fbb0 f1f2 	udiv	r1, r0, r2
 800228e:	fb02 0311 	mls	r3, r2, r1, r0
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	3332      	adds	r3, #50	; 0x32
 8002296:	fbb3 f3f2 	udiv	r3, r3, r2
 800229a:	6824      	ldr	r4, [r4, #0]
 800229c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80022a0:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 80022a2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80022a4:	f7ff fcda 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 80022a8:	e7e8      	b.n	800227c <UART_SetConfig+0x40>
 80022aa:	bf00      	nop
 80022ac:	40013800 	.word	0x40013800

080022b0 <HAL_UART_Init>:
{
 80022b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80022b2:	4604      	mov	r4, r0
 80022b4:	b340      	cbz	r0, 8002308 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80022b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022be:	b91b      	cbnz	r3, 80022c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022c4:	f7fe fcd0 	bl	8000c68 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80022ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022d0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80022d2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80022d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022da:	f7ff ffaf 	bl	800223c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002302:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
 800230a:	e7fc      	b.n	8002306 <HAL_UART_Init+0x56>

0800230c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800230c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002310:	2b20      	cmp	r3, #32
 8002312:	d120      	bne.n	8002356 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8002314:	b1e9      	cbz	r1, 8002352 <HAL_UART_Receive_IT+0x46>
 8002316:	b1e2      	cbz	r2, 8002352 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8002318:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800231c:	2b01      	cmp	r3, #1
 800231e:	d01a      	beq.n	8002356 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8002320:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8002322:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002326:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800232e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8002330:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002332:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8002334:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002338:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800233c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800233e:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002340:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002342:	f041 0101 	orr.w	r1, r1, #1
 8002346:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002348:	68d1      	ldr	r1, [r2, #12]
 800234a:	f041 0120 	orr.w	r1, r1, #32
 800234e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002350:	4770      	bx	lr
      return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
 8002354:	4770      	bx	lr
    return HAL_BUSY;
 8002356:	2002      	movs	r0, #2
}
 8002358:	4770      	bx	lr

0800235a <HAL_UART_TxCpltCallback>:
 800235a:	4770      	bx	lr

0800235c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800235c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002360:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002362:	2b22      	cmp	r3, #34	; 0x22
 8002364:	d132      	bne.n	80023cc <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002366:	6881      	ldr	r1, [r0, #8]
 8002368:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800236a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800236e:	6802      	ldr	r2, [r0, #0]
 8002370:	d120      	bne.n	80023b4 <UART_Receive_IT+0x58>
 8002372:	6901      	ldr	r1, [r0, #16]
 8002374:	bb09      	cbnz	r1, 80023ba <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002376:	6852      	ldr	r2, [r2, #4]
 8002378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237c:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8002380:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002382:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002384:	3c01      	subs	r4, #1
 8002386:	b2a4      	uxth	r4, r4
 8002388:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800238a:	b98c      	cbnz	r4, 80023b0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	f022 0220 	bic.w	r2, r2, #32
 8002394:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800239c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023a6:	2320      	movs	r3, #32
 80023a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80023ac:	f001 f862 	bl	8003474 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80023b0:	2000      	movs	r0, #0
 80023b2:	e00c      	b.n	80023ce <UART_Receive_IT+0x72>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023b4:	b931      	cbnz	r1, 80023c4 <UART_Receive_IT+0x68>
 80023b6:	6901      	ldr	r1, [r0, #16]
 80023b8:	b921      	cbnz	r1, 80023c4 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ba:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023bc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80023be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023c0:	3301      	adds	r3, #1
 80023c2:	e7dd      	b.n	8002380 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023c4:	6852      	ldr	r2, [r2, #4]
 80023c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ca:	e7f7      	b.n	80023bc <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80023cc:	2002      	movs	r0, #2
}
 80023ce:	bd10      	pop	{r4, pc}

080023d0 <HAL_UART_ErrorCallback>:
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d4:	6803      	ldr	r3, [r0, #0]
{
 80023d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d8:	681a      	ldr	r2, [r3, #0]
{
 80023da:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80023dc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023de:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80023e2:	d107      	bne.n	80023f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e4:	0696      	lsls	r6, r2, #26
 80023e6:	d55a      	bpl.n	800249e <HAL_UART_IRQHandler+0xca>
 80023e8:	068d      	lsls	r5, r1, #26
 80023ea:	d558      	bpl.n	800249e <HAL_UART_IRQHandler+0xca>
}
 80023ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80023f0:	f7ff bfb4 	b.w	800235c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023f4:	f015 0501 	ands.w	r5, r5, #1
 80023f8:	d102      	bne.n	8002400 <HAL_UART_IRQHandler+0x2c>
 80023fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80023fe:	d04e      	beq.n	800249e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002400:	07d0      	lsls	r0, r2, #31
 8002402:	d505      	bpl.n	8002410 <HAL_UART_IRQHandler+0x3c>
 8002404:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002406:	bf42      	ittt	mi
 8002408:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800240a:	f043 0301 	orrmi.w	r3, r3, #1
 800240e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002410:	0756      	lsls	r6, r2, #29
 8002412:	d504      	bpl.n	800241e <HAL_UART_IRQHandler+0x4a>
 8002414:	b11d      	cbz	r5, 800241e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241e:	0790      	lsls	r0, r2, #30
 8002420:	d504      	bpl.n	800242c <HAL_UART_IRQHandler+0x58>
 8002422:	b11d      	cbz	r5, 800242c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800242c:	0713      	lsls	r3, r2, #28
 800242e:	d506      	bpl.n	800243e <HAL_UART_IRQHandler+0x6a>
 8002430:	068e      	lsls	r6, r1, #26
 8002432:	d400      	bmi.n	8002436 <HAL_UART_IRQHandler+0x62>
 8002434:	b11d      	cbz	r5, 800243e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800243e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002440:	b343      	cbz	r3, 8002494 <HAL_UART_IRQHandler+0xc0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002442:	0695      	lsls	r5, r2, #26
 8002444:	d504      	bpl.n	8002450 <HAL_UART_IRQHandler+0x7c>
 8002446:	0688      	lsls	r0, r1, #26
 8002448:	d502      	bpl.n	8002450 <HAL_UART_IRQHandler+0x7c>
        UART_Receive_IT(huart);
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff ff86 	bl	800235c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002450:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002452:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002454:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002456:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002458:	0711      	lsls	r1, r2, #28
 800245a:	d402      	bmi.n	8002462 <HAL_UART_IRQHandler+0x8e>
 800245c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002460:	d019      	beq.n	8002496 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002462:	f7ff fedd 	bl	8002220 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	0652      	lsls	r2, r2, #25
 800246c:	d50f      	bpl.n	800248e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800246e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002470:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002476:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002478:	b148      	cbz	r0, 800248e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_UART_IRQHandler+0x13c>)
 800247c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800247e:	f7fe ffa1 	bl	80013c4 <HAL_DMA_Abort_IT>
 8002482:	b138      	cbz	r0, 8002494 <HAL_UART_IRQHandler+0xc0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002484:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800248a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800248c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff ff9e 	bl	80023d0 <HAL_UART_ErrorCallback>
}
 8002494:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002496:	f7ff ff9b 	bl	80023d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800249c:	e7fa      	b.n	8002494 <HAL_UART_IRQHandler+0xc0>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800249e:	0616      	lsls	r6, r2, #24
 80024a0:	d526      	bpl.n	80024f0 <HAL_UART_IRQHandler+0x11c>
 80024a2:	060d      	lsls	r5, r1, #24
 80024a4:	d524      	bpl.n	80024f0 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80024aa:	2a21      	cmp	r2, #33	; 0x21
 80024ac:	d1f2      	bne.n	8002494 <HAL_UART_IRQHandler+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ae:	68a1      	ldr	r1, [r4, #8]
 80024b0:	6a22      	ldr	r2, [r4, #32]
 80024b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80024b6:	d116      	bne.n	80024e6 <HAL_UART_IRQHandler+0x112>
 80024b8:	6921      	ldr	r1, [r4, #16]
 80024ba:	b9a1      	cbnz	r1, 80024e6 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024bc:	f832 1b02 	ldrh.w	r1, [r2], #2
 80024c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80024c4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80024c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80024ca:	3a01      	subs	r2, #1
 80024cc:	b292      	uxth	r2, r2
 80024ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	d1df      	bne.n	8002494 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024da:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	e7d6      	b.n	8002494 <HAL_UART_IRQHandler+0xc0>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024e6:	1c51      	adds	r1, r2, #1
 80024e8:	6221      	str	r1, [r4, #32]
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e7eb      	b.n	80024c8 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f0:	0650      	lsls	r0, r2, #25
 80024f2:	d5cf      	bpl.n	8002494 <HAL_UART_IRQHandler+0xc0>
 80024f4:	064a      	lsls	r2, r1, #25
 80024f6:	d5cd      	bpl.n	8002494 <HAL_UART_IRQHandler+0xc0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024f8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80024fa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002500:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002502:	2320      	movs	r3, #32
 8002504:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002508:	f7ff ff27 	bl	800235a <HAL_UART_TxCpltCallback>
 800250c:	e7c2      	b.n	8002494 <HAL_UART_IRQHandler+0xc0>
 800250e:	bf00      	nop
 8002510:	08002515 	.word	0x08002515

08002514 <UART_DMAAbortOnError>:
{
 8002514:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002516:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002518:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800251a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800251c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800251e:	f7ff ff57 	bl	80023d0 <HAL_UART_ErrorCallback>
}
 8002522:	bd08      	pop	{r3, pc}

08002524 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002524:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002526:	f000 fa3d 	bl	80029a4 <vTaskStartScheduler>
  
  return osOK;
}
 800252a:	2000      	movs	r0, #0
 800252c:	bd08      	pop	{r3, pc}

0800252e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800252e:	b570      	push	{r4, r5, r6, lr}
 8002530:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002532:	6946      	ldr	r6, [r0, #20]
{
 8002534:	460b      	mov	r3, r1
 8002536:	e9d0 1000 	ldrd	r1, r0, [r0]
 800253a:	b086      	sub	sp, #24
 800253c:	692a      	ldr	r2, [r5, #16]
 800253e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002542:	b176      	cbz	r6, 8002562 <osThreadCreate+0x34>
 8002544:	69ad      	ldr	r5, [r5, #24]
 8002546:	b165      	cbz	r5, 8002562 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8002548:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800254a:	bf0c      	ite	eq
 800254c:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800254e:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002550:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8002554:	9400      	str	r4, [sp, #0]
 8002556:	f000 f9c1 	bl	80028dc <xTaskCreateStatic>
 800255a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800255c:	9805      	ldr	r0, [sp, #20]
}
 800255e:	b006      	add	sp, #24
 8002560:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002562:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002564:	bf0c      	ite	eq
 8002566:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002568:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800256a:	ad05      	add	r5, sp, #20
 800256c:	b292      	uxth	r2, r2
 800256e:	e9cd 4500 	strd	r4, r5, [sp]
 8002572:	f000 f9ea 	bl	800294a <xTaskCreate>
 8002576:	2801      	cmp	r0, #1
 8002578:	d0f0      	beq.n	800255c <osThreadCreate+0x2e>
      return NULL;
 800257a:	2000      	movs	r0, #0
 800257c:	e7ef      	b.n	800255e <osThreadCreate+0x30>

0800257e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800257e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002580:	2800      	cmp	r0, #0
 8002582:	bf08      	it	eq
 8002584:	2001      	moveq	r0, #1
 8002586:	f000 fb53 	bl	8002c30 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800258a:	2000      	movs	r0, #0
 800258c:	bd08      	pop	{r3, pc}

0800258e <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800258e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002592:	f100 0308 	add.w	r3, r0, #8
 8002596:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025a2:	4770      	bx	lr

080025a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025a8:	4770      	bx	lr

080025aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80025aa:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ac:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80025ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025b0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80025b8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ba:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80025bc:	3301      	adds	r3, #1
 80025be:	6003      	str	r3, [r0, #0]
}
 80025c0:	4770      	bx	lr

080025c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c2:	680a      	ldr	r2, [r1, #0]
{
 80025c4:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c6:	1c53      	adds	r3, r2, #1
 80025c8:	d10a      	bne.n	80025e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ca:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025d0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025d2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80025d4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80025d6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025d8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80025da:	3301      	adds	r3, #1
 80025dc:	6003      	str	r3, [r0, #0]
}
 80025de:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e0:	f100 0308 	add.w	r3, r0, #8
 80025e4:	685c      	ldr	r4, [r3, #4]
 80025e6:	6825      	ldr	r5, [r4, #0]
 80025e8:	4295      	cmp	r5, r2
 80025ea:	d8ef      	bhi.n	80025cc <vListInsert+0xa>
 80025ec:	4623      	mov	r3, r4
 80025ee:	e7f9      	b.n	80025e4 <vListInsert+0x22>

080025f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025f2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80025f6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025f8:	6882      	ldr	r2, [r0, #8]
 80025fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002600:	bf08      	it	eq
 8002602:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002604:	2200      	movs	r2, #0
 8002606:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	3a01      	subs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800260e:	6818      	ldr	r0, [r3, #0]
}
 8002610:	4770      	bx	lr
	...

08002614 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002618:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800261a:	f000 fbbb 	bl	8002d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8002620:	4c2e      	ldr	r4, [pc, #184]	; (80026dc <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4f2e      	ldr	r7, [pc, #184]	; (80026e0 <prvAddNewTaskToReadyList+0xcc>)
 8002626:	3201      	adds	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800262a:	6825      	ldr	r5, [r4, #0]
 800262c:	2d00      	cmp	r5, #0
 800262e:	d148      	bne.n	80026c2 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002630:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d11f      	bne.n	8002678 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002638:	f04f 0814 	mov.w	r8, #20
 800263c:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002640:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002642:	f7ff ffa4 	bl	800258e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002646:	2d07      	cmp	r5, #7
 8002648:	d1f8      	bne.n	800263c <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800264a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800270c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800264e:	4d25      	ldr	r5, [pc, #148]	; (80026e4 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8002650:	4640      	mov	r0, r8
 8002652:	f7ff ff9c 	bl	800258e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002656:	4628      	mov	r0, r5
 8002658:	f7ff ff99 	bl	800258e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800265c:	4822      	ldr	r0, [pc, #136]	; (80026e8 <prvAddNewTaskToReadyList+0xd4>)
 800265e:	f7ff ff96 	bl	800258e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002662:	4822      	ldr	r0, [pc, #136]	; (80026ec <prvAddNewTaskToReadyList+0xd8>)
 8002664:	f7ff ff93 	bl	800258e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002668:	4821      	ldr	r0, [pc, #132]	; (80026f0 <prvAddNewTaskToReadyList+0xdc>)
 800266a:	f7ff ff90 	bl	800258e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <prvAddNewTaskToReadyList+0xe0>)
 8002670:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <prvAddNewTaskToReadyList+0xe4>)
 8002676:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002678:	4a20      	ldr	r2, [pc, #128]	; (80026fc <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 800267a:	4921      	ldr	r1, [pc, #132]	; (8002700 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800267c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800267e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002680:	3301      	adds	r3, #1
 8002682:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002684:	2301      	movs	r3, #1
 8002686:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002688:	4093      	lsls	r3, r2
 800268a:	4303      	orrs	r3, r0
 800268c:	2014      	movs	r0, #20
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	fb00 7002 	mla	r0, r0, r2, r7
 8002694:	1d31      	adds	r1, r6, #4
 8002696:	f7ff ff88 	bl	80025aa <vListInsertEnd>
	taskEXIT_CRITICAL();
 800269a:	f000 fb9d 	bl	8002dd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <prvAddNewTaskToReadyList+0xf0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b163      	cbz	r3, 80026be <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d207      	bcs.n	80026be <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 80026ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <prvAddNewTaskToReadyList+0xf4>)
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
}
 80026be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <prvAddNewTaskToReadyList+0xf0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1d6      	bne.n	8002678 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80026d0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80026d2:	bf98      	it	ls
 80026d4:	6026      	strls	r6, [r4, #0]
 80026d6:	e7cf      	b.n	8002678 <prvAddNewTaskToReadyList+0x64>
 80026d8:	20000380 	.word	0x20000380
 80026dc:	200002e8 	.word	0x200002e8
 80026e0:	200002f4 	.word	0x200002f4
 80026e4:	200003ac 	.word	0x200003ac
 80026e8:	200003c8 	.word	0x200003c8
 80026ec:	200003f4 	.word	0x200003f4
 80026f0:	200003e0 	.word	0x200003e0
 80026f4:	200002ec 	.word	0x200002ec
 80026f8:	200002f0 	.word	0x200002f0
 80026fc:	20000390 	.word	0x20000390
 8002700:	20000394 	.word	0x20000394
 8002704:	200003dc 	.word	0x200003dc
 8002708:	e000ed04 	.word	0xe000ed04
 800270c:	20000398 	.word	0x20000398

08002710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002710:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002712:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002716:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002718:	b93b      	cbnz	r3, 800272a <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800271a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800271c:	f000 fccc 	bl	80030b8 <vPortFree>
				vPortFree( pxTCB );
 8002720:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002726:	f000 bcc7 	b.w	80030b8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800272a:	2b01      	cmp	r3, #1
 800272c:	d0f9      	beq.n	8002722 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800272e:	2b02      	cmp	r3, #2
 8002730:	d008      	beq.n	8002744 <prvDeleteTCB+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	e7fe      	b.n	8002742 <prvDeleteTCB+0x32>
	}
 8002744:	bd10      	pop	{r4, pc}
	...

08002748 <prvIdleTask>:
{
 8002748:	b580      	push	{r7, lr}
				taskYIELD();
 800274a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80027a8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800274e:	4f12      	ldr	r7, [pc, #72]	; (8002798 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002750:	4c12      	ldr	r4, [pc, #72]	; (800279c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002752:	4d13      	ldr	r5, [pc, #76]	; (80027a0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	b963      	cbnz	r3, 8002772 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <prvIdleTask+0x5c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d9f8      	bls.n	8002752 <prvIdleTask+0xa>
				taskYIELD();
 8002760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002764:	f8c8 3000 	str.w	r3, [r8]
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	e7ee      	b.n	8002750 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002772:	f000 fb0f 	bl	8002d94 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800277a:	1d30      	adds	r0, r6, #4
 800277c:	f7ff ff38 	bl	80025f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	3b01      	subs	r3, #1
 8002784:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800278c:	f000 fb24 	bl	8002dd8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002790:	4630      	mov	r0, r6
 8002792:	f7ff ffbd 	bl	8002710 <prvDeleteTCB>
 8002796:	e7dd      	b.n	8002754 <prvIdleTask+0xc>
 8002798:	200003f4 	.word	0x200003f4
 800279c:	20000384 	.word	0x20000384
 80027a0:	20000380 	.word	0x20000380
 80027a4:	200002f4 	.word	0x200002f4
 80027a8:	e000ed04 	.word	0xe000ed04

080027ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <prvResetNextTaskUnblockTime+0x1c>)
 80027ae:	6813      	ldr	r3, [r2, #0]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <prvResetNextTaskUnblockTime+0x20>)
 80027b4:	b919      	cbnz	r1, 80027be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80027b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80027ba:	601a      	str	r2, [r3, #0]
	}
}
 80027bc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80027c2:	68d2      	ldr	r2, [r2, #12]
 80027c4:	6852      	ldr	r2, [r2, #4]
 80027c6:	e7f8      	b.n	80027ba <prvResetNextTaskUnblockTime+0xe>
 80027c8:	200002ec 	.word	0x200002ec
 80027cc:	200003c0 	.word	0x200003c0

080027d0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80027d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	4681      	mov	r9, r0
 80027d6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80027de:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80027e0:	3a01      	subs	r2, #1
 80027e2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80027e6:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80027e8:	f026 0607 	bic.w	r6, r6, #7
 80027ec:	1e4b      	subs	r3, r1, #1
 80027ee:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80027f2:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027f4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80027f8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80027fc:	7818      	ldrb	r0, [r3, #0]
 80027fe:	b108      	cbz	r0, 8002804 <prvInitialiseNewTask.isra.2+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002800:	428b      	cmp	r3, r1
 8002802:	d1f7      	bne.n	80027f4 <prvInitialiseNewTask.isra.2+0x24>
 8002804:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002806:	2700      	movs	r7, #0
 8002808:	2d06      	cmp	r5, #6
 800280a:	bf28      	it	cs
 800280c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800280e:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002810:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8002812:	e9c4 5711 	strd	r5, r7, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002816:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800281a:	f7ff fec3 	bl	80025a4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800281e:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002822:	f104 0018 	add.w	r0, r4, #24
 8002826:	f7ff febd 	bl	80025a4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800282a:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800282c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002830:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002832:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002836:	4652      	mov	r2, sl
 8002838:	4649      	mov	r1, r9
 800283a:	4630      	mov	r0, r6
 800283c:	f000 fa86 	bl	8002d4c <pxPortInitialiseStack>
 8002840:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002842:	f1b8 0f00 	cmp.w	r8, #0
 8002846:	d001      	beq.n	800284c <prvInitialiseNewTask.isra.2+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002848:	f8c8 4000 	str.w	r4, [r8]
}
 800284c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002850 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002854:	4e1b      	ldr	r6, [pc, #108]	; (80028c4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002856:	681c      	ldr	r4, [r3, #0]
{
 8002858:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800285a:	6830      	ldr	r0, [r6, #0]
{
 800285c:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800285e:	3004      	adds	r0, #4
 8002860:	f7ff fec6 	bl	80025f0 <uxListRemove>
 8002864:	4633      	mov	r3, r6
 8002866:	b940      	cbnz	r0, 800287a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002868:	2001      	movs	r0, #1
 800286a:	6831      	ldr	r1, [r6, #0]
 800286c:	4e16      	ldr	r6, [pc, #88]	; (80028c8 <prvAddCurrentTaskToDelayedList+0x78>)
 800286e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002870:	6832      	ldr	r2, [r6, #0]
 8002872:	4088      	lsls	r0, r1
 8002874:	ea22 0200 	bic.w	r2, r2, r0
 8002878:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800287a:	1c6a      	adds	r2, r5, #1
 800287c:	d107      	bne.n	800288e <prvAddCurrentTaskToDelayedList+0x3e>
 800287e:	b137      	cbz	r7, 800288e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	4812      	ldr	r0, [pc, #72]	; (80028cc <prvAddCurrentTaskToDelayedList+0x7c>)
 8002884:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800288a:	f7ff be8e 	b.w	80025aa <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	1964      	adds	r4, r4, r5
 8002892:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002894:	d307      	bcc.n	80028a6 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <prvAddCurrentTaskToDelayedList+0x80>)
 8002898:	6810      	ldr	r0, [r2, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
}
 800289c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028a0:	3104      	adds	r1, #4
 80028a2:	f7ff be8e 	b.w	80025c2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <prvAddCurrentTaskToDelayedList+0x84>)
 80028a8:	6810      	ldr	r0, [r2, #0]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	3104      	adds	r1, #4
 80028ae:	f7ff fe88 	bl	80025c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <prvAddCurrentTaskToDelayedList+0x88>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80028b8:	bf88      	it	hi
 80028ba:	601c      	strhi	r4, [r3, #0]
}
 80028bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000408 	.word	0x20000408
 80028c4:	200002e8 	.word	0x200002e8
 80028c8:	20000394 	.word	0x20000394
 80028cc:	200003e0 	.word	0x200003e0
 80028d0:	200002f0 	.word	0x200002f0
 80028d4:	200002ec 	.word	0x200002ec
 80028d8:	200003c0 	.word	0x200003c0

080028dc <xTaskCreateStatic>:
	{
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80028e4:	b945      	cbnz	r5, 80028f8 <xTaskCreateStatic+0x1c>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	e7fe      	b.n	80028f6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80028f8:	b944      	cbnz	r4, 800290c <xTaskCreateStatic+0x30>
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	e7fe      	b.n	800290a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800290c:	2654      	movs	r6, #84	; 0x54
 800290e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002910:	9e04      	ldr	r6, [sp, #16]
 8002912:	2e54      	cmp	r6, #84	; 0x54
 8002914:	d008      	beq.n	8002928 <xTaskCreateStatic+0x4c>
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	e7fe      	b.n	8002926 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002928:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800292a:	2502      	movs	r5, #2
 800292c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002930:	ad05      	add	r5, sp, #20
 8002932:	9501      	str	r5, [sp, #4]
 8002934:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002936:	9402      	str	r4, [sp, #8]
 8002938:	9500      	str	r5, [sp, #0]
 800293a:	f7ff ff49 	bl	80027d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff fe68 	bl	8002614 <prvAddNewTaskToReadyList>
	}
 8002944:	9805      	ldr	r0, [sp, #20]
 8002946:	b006      	add	sp, #24
 8002948:	bd70      	pop	{r4, r5, r6, pc}

0800294a <xTaskCreate>:
	{
 800294a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800294e:	4607      	mov	r7, r0
 8002950:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002952:	0090      	lsls	r0, r2, #2
	{
 8002954:	4688      	mov	r8, r1
 8002956:	4616      	mov	r6, r2
 8002958:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295a:	f000 fb21 	bl	8002fa0 <pvPortMalloc>
			if( pxStack != NULL )
 800295e:	4605      	mov	r5, r0
 8002960:	b1e8      	cbz	r0, 800299e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002962:	2054      	movs	r0, #84	; 0x54
 8002964:	f000 fb1c 	bl	8002fa0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002968:	4604      	mov	r4, r0
 800296a:	b1a8      	cbz	r0, 8002998 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800296c:	2300      	movs	r3, #0
 800296e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002974:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800297a:	9002      	str	r0, [sp, #8]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4632      	mov	r2, r6
 8002980:	464b      	mov	r3, r9
 8002982:	4641      	mov	r1, r8
 8002984:	4638      	mov	r0, r7
 8002986:	f7ff ff23 	bl	80027d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fe42 	bl	8002614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002990:	2001      	movs	r0, #1
	}
 8002992:	b005      	add	sp, #20
 8002994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002998:	4628      	mov	r0, r5
 800299a:	f000 fb8d 	bl	80030b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800299e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80029a2:	e7f6      	b.n	8002992 <xTaskCreate+0x48>

080029a4 <vTaskStartScheduler>:
{
 80029a4:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029a6:	2400      	movs	r4, #0
{
 80029a8:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029aa:	aa07      	add	r2, sp, #28
 80029ac:	a906      	add	r1, sp, #24
 80029ae:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029b4:	f7fd ff3a 	bl	800082c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029b8:	9b05      	ldr	r3, [sp, #20]
 80029ba:	9a07      	ldr	r2, [sp, #28]
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	9b06      	ldr	r3, [sp, #24]
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <vTaskStartScheduler+0x58>)
 80029c2:	e9cd 4300 	strd	r4, r3, [sp]
 80029c6:	480e      	ldr	r0, [pc, #56]	; (8002a00 <vTaskStartScheduler+0x5c>)
 80029c8:	4623      	mov	r3, r4
 80029ca:	f7ff ff87 	bl	80028dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80029ce:	b190      	cbz	r0, 80029f6 <vTaskStartScheduler+0x52>
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <vTaskStartScheduler+0x60>)
 80029e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029e8:	2201      	movs	r2, #1
 80029ea:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <vTaskStartScheduler+0x64>)
 80029ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <vTaskStartScheduler+0x68>)
 80029f0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80029f2:	f000 fa57 	bl	8002ea4 <xPortStartScheduler>
}
 80029f6:	b008      	add	sp, #32
 80029f8:	bd10      	pop	{r4, pc}
 80029fa:	bf00      	nop
 80029fc:	08003d2c 	.word	0x08003d2c
 8002a00:	08002749 	.word	0x08002749
 8002a04:	200003c0 	.word	0x200003c0
 8002a08:	200003dc 	.word	0x200003dc
 8002a0c:	20000408 	.word	0x20000408

08002a10 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002a10:	4a02      	ldr	r2, [pc, #8]	; (8002a1c <vTaskSuspendAll+0xc>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000038c 	.word	0x2000038c

08002a20 <xTaskIncrementTick>:
{
 8002a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a24:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <xTaskIncrementTick+0xf8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d16e      	bne.n	8002b0a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <xTaskIncrementTick+0xfc>)
 8002a2e:	681c      	ldr	r4, [r3, #0]
 8002a30:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002a32:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a34:	b9bc      	cbnz	r4, 8002a66 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <xTaskIncrementTick+0x100>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	b142      	cbz	r2, 8002a50 <xTaskIncrementTick+0x30>
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	e7fe      	b.n	8002a4e <xTaskIncrementTick+0x2e>
 8002a50:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <xTaskIncrementTick+0x104>)
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	6810      	ldr	r0, [r2, #0]
 8002a56:	6018      	str	r0, [r3, #0]
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	4a33      	ldr	r2, [pc, #204]	; (8002b28 <xTaskIncrementTick+0x108>)
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	f7ff fea3 	bl	80027ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a66:	4d31      	ldr	r5, [pc, #196]	; (8002b2c <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8002a68:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	4f30      	ldr	r7, [pc, #192]	; (8002b30 <xTaskIncrementTick+0x110>)
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	d911      	bls.n	8002a98 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <xTaskIncrementTick+0x114>)
 8002a78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a7a:	2214      	movs	r2, #20
 8002a7c:	434a      	muls	r2, r1
 8002a7e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002a80:	2a02      	cmp	r2, #2
 8002a82:	bf28      	it	cs
 8002a84:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002a88:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <xTaskIncrementTick+0x118>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002a8c:	2a00      	cmp	r2, #0
}
 8002a8e:	bf0c      	ite	eq
 8002a90:	4658      	moveq	r0, fp
 8002a92:	2001      	movne	r0, #1
 8002a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a98:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002b20 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002a9c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002b40 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa0:	f8da 2000 	ldr.w	r2, [sl]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	b91a      	cbnz	r2, 8002ab0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aac:	602a      	str	r2, [r5, #0]
					break;
 8002aae:	e7e1      	b.n	8002a74 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ab0:	f8da 2000 	ldr.w	r2, [sl]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ab8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002aba:	428c      	cmp	r4, r1
 8002abc:	d201      	bcs.n	8002ac2 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8002abe:	6029      	str	r1, [r5, #0]
						break;
 8002ac0:	e7d8      	b.n	8002a74 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ac2:	f106 0804 	add.w	r8, r6, #4
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	f7ff fd92 	bl	80025f0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002acc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002ace:	b119      	cbz	r1, 8002ad8 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ad0:	f106 0018 	add.w	r0, r6, #24
 8002ad4:	f7ff fd8c 	bl	80025f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f04f 0c14 	mov.w	ip, #20
 8002ade:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002ae0:	f8d9 3000 	ldr.w	r3, [r9]
 8002ae4:	fa02 f100 	lsl.w	r1, r2, r0
 8002ae8:	4319      	orrs	r1, r3
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <xTaskIncrementTick+0x114>)
 8002aec:	f8c9 1000 	str.w	r1, [r9]
 8002af0:	fb0c 3000 	mla	r0, ip, r0, r3
 8002af4:	4641      	mov	r1, r8
 8002af6:	f7ff fd58 	bl	80025aa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002afe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002b00:	4291      	cmp	r1, r2
 8002b02:	bf28      	it	cs
 8002b04:	f04f 0b01 	movcs.w	fp, #1
 8002b08:	e7ca      	b.n	8002aa0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8002b0c:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e7b7      	b.n	8002a88 <xTaskIncrementTick+0x68>
 8002b18:	2000038c 	.word	0x2000038c
 8002b1c:	20000408 	.word	0x20000408
 8002b20:	200002ec 	.word	0x200002ec
 8002b24:	200002f0 	.word	0x200002f0
 8002b28:	200003c4 	.word	0x200003c4
 8002b2c:	200003c0 	.word	0x200003c0
 8002b30:	200002e8 	.word	0x200002e8
 8002b34:	200002f4 	.word	0x200002f4
 8002b38:	2000040c 	.word	0x2000040c
 8002b3c:	20000388 	.word	0x20000388
 8002b40:	20000394 	.word	0x20000394

08002b44 <xTaskResumeAll>:
{
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002b48:	4c30      	ldr	r4, [pc, #192]	; (8002c0c <xTaskResumeAll+0xc8>)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	b943      	cbnz	r3, 8002b60 <xTaskResumeAll+0x1c>
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	e7fe      	b.n	8002b5e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002b60:	f000 f918 	bl	8002d94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b6a:	6824      	ldr	r4, [r4, #0]
 8002b6c:	b12c      	cbz	r4, 8002b7a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002b6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002b70:	f000 f932 	bl	8002dd8 <vPortExitCritical>
}
 8002b74:	4620      	mov	r0, r4
 8002b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <xTaskResumeAll+0xcc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f5      	beq.n	8002b6e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b82:	4d24      	ldr	r5, [pc, #144]	; (8002c14 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8002b84:	4e24      	ldr	r6, [pc, #144]	; (8002c18 <xTaskResumeAll+0xd4>)
 8002b86:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002c2c <xTaskResumeAll+0xe8>
 8002b8a:	e01f      	b.n	8002bcc <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b8c:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8002b8e:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b90:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b92:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b96:	f104 0018 	add.w	r0, r4, #24
 8002b9a:	f7ff fd29 	bl	80025f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b9e:	4648      	mov	r0, r9
 8002ba0:	f7ff fd26 	bl	80025f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ba4:	2014      	movs	r0, #20
 8002ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba8:	6831      	ldr	r1, [r6, #0]
 8002baa:	fa07 f302 	lsl.w	r3, r7, r2
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	fb00 8002 	mla	r0, r0, r2, r8
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	6033      	str	r3, [r6, #0]
 8002bb8:	f7ff fcf7 	bl	80025aa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <xTaskResumeAll+0xd8>)
 8002bbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d301      	bcc.n	8002bcc <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <xTaskResumeAll+0xdc>)
 8002bca:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1dc      	bne.n	8002b8c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8002bd2:	b10c      	cbz	r4, 8002bd8 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002bd4:	f7ff fdea 	bl	80027ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bd8:	4d12      	ldr	r5, [pc, #72]	; (8002c24 <xTaskResumeAll+0xe0>)
 8002bda:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bdc:	b144      	cbz	r4, 8002bf0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002bde:	2701      	movs	r7, #1
 8002be0:	4e0f      	ldr	r6, [pc, #60]	; (8002c20 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8002be2:	f7ff ff1d 	bl	8002a20 <xTaskIncrementTick>
 8002be6:	b100      	cbz	r0, 8002bea <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002be8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bea:	3c01      	subs	r4, #1
 8002bec:	d1f9      	bne.n	8002be2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002bee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <xTaskResumeAll+0xdc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ba      	beq.n	8002b6e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <xTaskResumeAll+0xe4>)
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002c08:	2401      	movs	r4, #1
 8002c0a:	e7b1      	b.n	8002b70 <xTaskResumeAll+0x2c>
 8002c0c:	2000038c 	.word	0x2000038c
 8002c10:	20000380 	.word	0x20000380
 8002c14:	200003c8 	.word	0x200003c8
 8002c18:	20000394 	.word	0x20000394
 8002c1c:	200002e8 	.word	0x200002e8
 8002c20:	2000040c 	.word	0x2000040c
 8002c24:	20000388 	.word	0x20000388
 8002c28:	e000ed04 	.word	0xe000ed04
 8002c2c:	200002f4 	.word	0x200002f4

08002c30 <vTaskDelay>:
	{
 8002c30:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c32:	b940      	cbnz	r0, 8002c46 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c38:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <vTaskDelay+0x40>)
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
	}
 8002c44:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <vTaskDelay+0x44>)
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	b141      	cbz	r1, 8002c5e <vTaskDelay+0x2e>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	e7fe      	b.n	8002c5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002c5e:	f7ff fed7 	bl	8002a10 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c62:	f7ff fdf5 	bl	8002850 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002c66:	f7ff ff6d 	bl	8002b44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d0e2      	beq.n	8002c34 <vTaskDelay+0x4>
 8002c6e:	e7e9      	b.n	8002c44 <vTaskDelay+0x14>
 8002c70:	e000ed04 	.word	0xe000ed04
 8002c74:	2000038c 	.word	0x2000038c

08002c78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <vTaskSwitchContext+0x60>)
{
 8002c7a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <vTaskSwitchContext+0x64>)
 8002c80:	b112      	cbz	r2, 8002c88 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002c82:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002c88:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <vTaskSwitchContext+0x68>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	2214      	movs	r2, #20
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f1c3 031f 	rsb	r3, r3, #31
 8002c9a:	435a      	muls	r2, r3
 8002c9c:	4911      	ldr	r1, [pc, #68]	; (8002ce4 <vTaskSwitchContext+0x6c>)
 8002c9e:	588c      	ldr	r4, [r1, r2]
 8002ca0:	1888      	adds	r0, r1, r2
 8002ca2:	b944      	cbnz	r4, 8002cb6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	e7fe      	b.n	8002cb4 <vTaskSwitchContext+0x3c>
 8002cb6:	6844      	ldr	r4, [r0, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	6864      	ldr	r4, [r4, #4]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	4294      	cmp	r4, r2
 8002cc0:	bf08      	it	eq
 8002cc2:	6862      	ldreq	r2, [r4, #4]
 8002cc4:	6044      	str	r4, [r0, #4]
 8002cc6:	bf08      	it	eq
 8002cc8:	6042      	streq	r2, [r0, #4]
 8002cca:	2214      	movs	r2, #20
 8002ccc:	fb02 1303 	mla	r3, r2, r3, r1
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <vTaskSwitchContext+0x70>)
 8002cd6:	e7d5      	b.n	8002c84 <vTaskSwitchContext+0xc>
 8002cd8:	2000038c 	.word	0x2000038c
 8002cdc:	2000040c 	.word	0x2000040c
 8002ce0:	20000394 	.word	0x20000394
 8002ce4:	200002f4 	.word	0x200002f4
 8002ce8:	200002e8 	.word	0x200002e8

08002cec <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8002cec:	2300      	movs	r3, #0
{
 8002cee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8002cf0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <prvTaskExitError+0x3c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	d008      	beq.n	8002d0c <prvTaskExitError+0x20>
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	e7fe      	b.n	8002d0a <prvTaskExitError+0x1e>
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0fc      	beq.n	8002d1c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d22:	b002      	add	sp, #8
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d2c:	4806      	ldr	r0, [pc, #24]	; (8002d48 <prvPortStartFirstTask+0x1c>)
 8002d2e:	6800      	ldr	r0, [r0, #0]
 8002d30:	6800      	ldr	r0, [r0, #0]
 8002d32:	f380 8808 	msr	MSP, r0
 8002d36:	b662      	cpsie	i
 8002d38:	b661      	cpsie	f
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	df00      	svc	0
 8002d44:	bf00      	nop
 8002d46:	0000      	.short	0x0000
 8002d48:	e000ed08 	.word	0xe000ed08

08002d4c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d50:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d56:	f021 0101 	bic.w	r1, r1, #1
 8002d5a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d5e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d62:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002d66:	3840      	subs	r0, #64	; 0x40
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	08002ced 	.word	0x08002ced

08002d70 <SVC_Handler>:
	__asm volatile (
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <pxCurrentTCBConst2>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d7a:	f380 8809 	msr	PSP, r0
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002d8e:	4770      	bx	lr

08002d90 <pxCurrentTCBConst2>:
 8002d90:	200002e8 	.word	0x200002e8

08002d94 <vPortEnterCritical>:
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <vPortEnterCritical+0x3c>)
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002daa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002dac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002dae:	d10d      	bne.n	8002dcc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vPortEnterCritical+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002db8:	d008      	beq.n	8002dcc <vPortEnterCritical+0x38>
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	e7fe      	b.n	8002dca <vPortEnterCritical+0x36>
	}
}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c
 8002dd4:	e000ed04 	.word	0xe000ed04

08002dd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002dd8:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <vPortExitCritical+0x24>)
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	b943      	cbnz	r3, 8002df0 <vPortExitCritical+0x18>
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	e7fe      	b.n	8002dee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002df0:	3b01      	subs	r3, #1
 8002df2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002df4:	b90b      	cbnz	r3, 8002dfa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dfa:	4770      	bx	lr
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e10:	6010      	str	r0, [r2, #0]
 8002e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e1a:	f380 8811 	msr	BASEPRI, r0
 8002e1e:	f7ff ff2b 	bl	8002c78 <vTaskSwitchContext>
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f380 8811 	msr	BASEPRI, r0
 8002e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	6808      	ldr	r0, [r1, #0]
 8002e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e36:	f380 8809 	msr	PSP, r0
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	4770      	bx	lr

08002e40 <pxCurrentTCBConst>:
 8002e40:	200002e8 	.word	0x200002e8

08002e44 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e44:	b508      	push	{r3, lr}
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e56:	f7ff fde3 	bl	8002a20 <xTaskIncrementTick>
 8002e5a:	b118      	cbz	r0, 8002e64 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <SysTick_Handler+0x28>)
 8002e62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002e64:	2300      	movs	r3, #0
 8002e66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e6a:	bd08      	pop	{r3, pc}
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e74:	4908      	ldr	r1, [pc, #32]	; (8002e98 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e78:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <vPortSetupTimerInterrupt+0x2c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e86:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <vPortSetupTimerInterrupt+0x30>)
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010
 8002e98:	e000e018 	.word	0xe000e018
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	e000e014 	.word	0xe000e014

08002ea4 <xPortStartScheduler>:
{
 8002ea4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ea6:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ea8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eb4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eb6:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ebe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002ec2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ec6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ec8:	2207      	movs	r2, #7
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <xPortStartScheduler+0xa8>)
 8002ecc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ece:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002ed2:	1e54      	subs	r4, r2, #1
 8002ed4:	0600      	lsls	r0, r0, #24
 8002ed6:	d40d      	bmi.n	8002ef4 <xPortStartScheduler+0x50>
 8002ed8:	b101      	cbz	r1, 8002edc <xPortStartScheduler+0x38>
 8002eda:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2a03      	cmp	r2, #3
 8002ee0:	d011      	beq.n	8002f06 <xPortStartScheduler+0x62>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	e7fe      	b.n	8002ef2 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ef4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	0052      	lsls	r2, r2, #1
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	f88d 2003 	strb.w	r2, [sp, #3]
 8002f02:	4622      	mov	r2, r4
 8002f04:	e7e3      	b.n	8002ece <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8002f06:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f08:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f0a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002f0e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f10:	9b01      	ldr	r3, [sp, #4]
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <xPortStartScheduler+0xa0>)
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <xPortStartScheduler+0xac>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f28:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002f2a:	f7ff ffa1 	bl	8002e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <xPortStartScheduler+0xb0>)
 8002f30:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8002f32:	f7ff fefb 	bl	8002d2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002f36:	f7ff fe9f 	bl	8002c78 <vTaskSwitchContext>
	prvTaskExitError();
 8002f3a:	f7ff fed7 	bl	8002cec <prvTaskExitError>
}
 8002f3e:	4620      	mov	r0, r4
 8002f40:	b002      	add	sp, #8
 8002f42:	bd10      	pop	{r4, pc}
 8002f44:	e000e400 	.word	0xe000e400
 8002f48:	20000410 	.word	0x20000410
 8002f4c:	20000414 	.word	0x20000414
 8002f50:	e000ed20 	.word	0xe000ed20
 8002f54:	2000000c 	.word	0x2000000c

08002f58 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f58:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <prvInsertBlockIntoFreeList+0x40>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4282      	cmp	r2, r0
 8002f60:	d318      	bcc.n	8002f94 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f62:	685c      	ldr	r4, [r3, #4]
 8002f64:	1919      	adds	r1, r3, r4
 8002f66:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f68:	bf01      	itttt	eq
 8002f6a:	6841      	ldreq	r1, [r0, #4]
 8002f6c:	4618      	moveq	r0, r3
 8002f6e:	1909      	addeq	r1, r1, r4
 8002f70:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f72:	6844      	ldr	r4, [r0, #4]
 8002f74:	1901      	adds	r1, r0, r4
 8002f76:	428a      	cmp	r2, r1
 8002f78:	d107      	bne.n	8002f8a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f7a:	4908      	ldr	r1, [pc, #32]	; (8002f9c <prvInsertBlockIntoFreeList+0x44>)
 8002f7c:	6809      	ldr	r1, [r1, #0]
 8002f7e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f80:	bf1f      	itttt	ne
 8002f82:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f84:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f86:	1909      	addne	r1, r1, r4
 8002f88:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f8a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f8c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f8e:	bf18      	it	ne
 8002f90:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f92:	bd10      	pop	{r4, pc}
 8002f94:	4613      	mov	r3, r2
 8002f96:	e7e1      	b.n	8002f5c <prvInsertBlockIntoFreeList+0x4>
 8002f98:	20001028 	.word	0x20001028
 8002f9c:	20000418 	.word	0x20000418

08002fa0 <pvPortMalloc>:
{
 8002fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002fa6:	f7ff fd33 	bl	8002a10 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002faa:	493d      	ldr	r1, [pc, #244]	; (80030a0 <pvPortMalloc+0x100>)
 8002fac:	4d3d      	ldr	r5, [pc, #244]	; (80030a4 <pvPortMalloc+0x104>)
 8002fae:	680b      	ldr	r3, [r1, #0]
 8002fb0:	b9fb      	cbnz	r3, 8002ff2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002fb2:	4a3d      	ldr	r2, [pc, #244]	; (80030a8 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002fb4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fb6:	0756      	lsls	r6, r2, #29
 8002fb8:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002fbc:	bf0f      	iteee	eq
 8002fbe:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fc2:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fc4:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fc8:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fca:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fcc:	4e37      	ldr	r6, [pc, #220]	; (80030ac <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8002fce:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002fd4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fd6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8002fd8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fdc:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8002fde:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fe0:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe4:	4b32      	ldr	r3, [pc, #200]	; (80030b0 <pvPortMalloc+0x110>)
 8002fe6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <pvPortMalloc+0x114>)
 8002fea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002fec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ff0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ff2:	682f      	ldr	r7, [r5, #0]
 8002ff4:	4227      	tst	r7, r4
 8002ff6:	d14d      	bne.n	8003094 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8002ff8:	2c00      	cmp	r4, #0
 8002ffa:	d03e      	beq.n	800307a <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8002ffc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003000:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003002:	bf1c      	itt	ne
 8003004:	f023 0307 	bicne.w	r3, r3, #7
 8003008:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800300a:	2b00      	cmp	r3, #0
 800300c:	d042      	beq.n	8003094 <pvPortMalloc+0xf4>
 800300e:	4a29      	ldr	r2, [pc, #164]	; (80030b4 <pvPortMalloc+0x114>)
 8003010:	6816      	ldr	r6, [r2, #0]
 8003012:	4690      	mov	r8, r2
 8003014:	429e      	cmp	r6, r3
 8003016:	d33d      	bcc.n	8003094 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <pvPortMalloc+0x10c>)
 800301a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800301c:	6868      	ldr	r0, [r5, #4]
 800301e:	4298      	cmp	r0, r3
 8003020:	d201      	bcs.n	8003026 <pvPortMalloc+0x86>
 8003022:	682c      	ldr	r4, [r5, #0]
 8003024:	b9a4      	cbnz	r4, 8003050 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8003026:	6809      	ldr	r1, [r1, #0]
 8003028:	42a9      	cmp	r1, r5
 800302a:	d033      	beq.n	8003094 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800302c:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800302e:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003030:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003032:	1ac2      	subs	r2, r0, r3
 8003034:	2a10      	cmp	r2, #16
 8003036:	d912      	bls.n	800305e <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003038:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800303a:	0741      	lsls	r1, r0, #29
 800303c:	d00b      	beq.n	8003056 <pvPortMalloc+0xb6>
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	e7fe      	b.n	800304e <pvPortMalloc+0xae>
 8003050:	462a      	mov	r2, r5
 8003052:	4625      	mov	r5, r4
 8003054:	e7e2      	b.n	800301c <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003056:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003058:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800305a:	f7ff ff7d 	bl	8002f58 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800305e:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003060:	4913      	ldr	r1, [pc, #76]	; (80030b0 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003062:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003064:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8003066:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003068:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800306a:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800306e:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003070:	bf38      	it	cc
 8003072:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003074:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003076:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003078:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800307a:	f7ff fd63 	bl	8002b44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800307e:	0763      	lsls	r3, r4, #29
 8003080:	d00a      	beq.n	8003098 <pvPortMalloc+0xf8>
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	e7fe      	b.n	8003092 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8003094:	2400      	movs	r4, #0
 8003096:	e7f0      	b.n	800307a <pvPortMalloc+0xda>
}
 8003098:	4620      	mov	r0, r4
 800309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800309e:	bf00      	nop
 80030a0:	20000418 	.word	0x20000418
 80030a4:	2000101c 	.word	0x2000101c
 80030a8:	2000041c 	.word	0x2000041c
 80030ac:	20001028 	.word	0x20001028
 80030b0:	20001024 	.word	0x20001024
 80030b4:	20001020 	.word	0x20001020

080030b8 <vPortFree>:
{
 80030b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80030ba:	4604      	mov	r4, r0
 80030bc:	b370      	cbz	r0, 800311c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <vPortFree+0x68>)
 80030c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	4213      	tst	r3, r2
 80030c8:	d108      	bne.n	80030dc <vPortFree+0x24>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	e7fe      	b.n	80030da <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030dc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80030e0:	b141      	cbz	r1, 80030f4 <vPortFree+0x3c>
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	e7fe      	b.n	80030f2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030f4:	ea23 0302 	bic.w	r3, r3, r2
 80030f8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80030fc:	f7ff fc88 	bl	8002a10 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003100:	4a08      	ldr	r2, [pc, #32]	; (8003124 <vPortFree+0x6c>)
 8003102:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003106:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003108:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800310c:	440b      	add	r3, r1
 800310e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003110:	f7ff ff22 	bl	8002f58 <prvInsertBlockIntoFreeList>
}
 8003114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003118:	f7ff bd14 	b.w	8002b44 <xTaskResumeAll>
}
 800311c:	bd10      	pop	{r4, pc}
 800311e:	bf00      	nop
 8003120:	2000101c 	.word	0x2000101c
 8003124:	20001020 	.word	0x20001020

08003128 <_ZN9ADC_Tools14getVoltageAvrgEv>:

	/** Abstract method to return voltage value average.
	 * Need to be defined in derived class - in case it won't be defined it return getVoltage() result
	 * @return float voltageAverage or float voltage
	 */
	virtual float getVoltageAvrg()      { return value; };
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <_ZNK9ADC_Tools13getPercentageEv>:
	/** Abstract method to return percent value in reference to maximum and minimum voltage value.
	 * Could be defined in derived class - normally it returned percent value in voltage range <max, min>
	 * (defined in Constructor ADC_Tools())
	 * @return float voltageAverage or voltage
	 */
	virtual float getPercentage()const	{ return per; };
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <_ZN9ADC_Tools17getPercentageAvrgEv>:

	/** Abstract method to return voltage value average.
	 * Need to be defined in derived class - in case it won't be defined it return getVoltage() result
	 * @return float voltageAverage or float voltage
	 */
	virtual float getPercentageAvrg()   { return per; };
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <_ZN9ADC_ToolsC1Effm>:

#include "ADC_Tools.h"



ADC_Tools::ADC_Tools(float max, float min,uint32_t res ):maxVal(max), minVal(min),bitResolution(res),
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
					   per(0), value(0){
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <_ZN9ADC_ToolsC1Effm+0x58>)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	809a      	strh	r2, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
	maxLevels = 2 << (bitResolution - 1);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	889b      	ldrh	r3, [r3, #4]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	2202      	movs	r2, #2
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	611a      	str	r2, [r3, #16]
}
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	08003d3c 	.word	0x08003d3c

080031c8 <_ZN9ADC_Tools17updateMeasurmentsEm>:
	bitResolution = res;
	maxLevels = 2 << (bitResolution - 1);
}
*/

void ADC_Tools::updateMeasurments(uint32_t val){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	value = convertToVoltage(val);
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f810 	bl	80031fa <_ZN9ADC_Tools16convertToVoltageEm>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	615a      	str	r2, [r3, #20]
	per = convertToPercentage(value);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f828 	bl	800323c <_ZN9ADC_Tools19convertToPercentageEf>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]

}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZN9ADC_Tools16convertToVoltageEm>:

float ADC_Tools::convertToVoltage(uint32_t raw) {
 80031fa:	b590      	push	{r4, r7, lr}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
	return ((float)raw * maxVal) / (float)maxLevels;
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	f7fd f859 	bl	80002bc <__aeabi_ui2f>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f7fd f8aa 	bl	800036c <__aeabi_fmul>
 8003218:	4603      	mov	r3, r0
 800321a:	461c      	mov	r4, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f84b 	bl	80002bc <__aeabi_ui2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4619      	mov	r1, r3
 800322a:	4620      	mov	r0, r4
 800322c:	f7fd f952 	bl	80004d4 <__aeabi_fdiv>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bd90      	pop	{r4, r7, pc}
	...

0800323c <_ZN9ADC_Tools19convertToPercentageEf>:

float ADC_Tools::convertToPercentage(float val) {
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	return 100.f * ((val - minVal) / (maxVal - minVal));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4619      	mov	r1, r3
 800324c:	6838      	ldr	r0, [r7, #0]
 800324e:	f7fc ff83 	bl	8000158 <__aeabi_fsub>
 8003252:	4603      	mov	r3, r0
 8003254:	461c      	mov	r4, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fc ff79 	bl	8000158 <__aeabi_fsub>
 8003266:	4603      	mov	r3, r0
 8003268:	4619      	mov	r1, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f7fd f932 	bl	80004d4 <__aeabi_fdiv>
 8003270:	4603      	mov	r3, r0
 8003272:	4904      	ldr	r1, [pc, #16]	; (8003284 <_ZN9ADC_Tools19convertToPercentageEf+0x48>)
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f879 	bl	800036c <__aeabi_fmul>
 800327a:	4603      	mov	r3, r0

}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	42c80000 	.word	0x42c80000

08003288 <_ZNK9ADC_Tools10getVoltageEv>:
	float getVoltage()const				{ return value; };
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
	...

080032a0 <_Z13AllTasks_initv>:
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
LedNotifier led2(LED2_GPIO_Port, LED2_Pin);


void AllTasks_init(){
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af00      	add	r7, sp, #0

	  osThreadDef(BatteryManagerTask, StartBatteryManagerTask, osPriorityNormal, 0, 256);
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <_Z13AllTasks_initv+0x60>)
 80032a8:	f107 041c 	add.w	r4, r7, #28
 80032ac:	461d      	mov	r5, r3
 80032ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  BatteryManagerHandle = osThreadCreate(osThread(BatteryManagerTask), NULL);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff f934 	bl	800252e <osThreadCreate>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <_Z13AllTasks_initv+0x64>)
 80032ca:	601a      	str	r2, [r3, #0]

	  osThreadDef(LedUpTask, StartLedUpTask, osPriorityBelowNormal, 0, 256);
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <_Z13AllTasks_initv+0x68>)
 80032ce:	463c      	mov	r4, r7
 80032d0:	461d      	mov	r5, r3
 80032d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  LedUpHandle = osThreadCreate(osThread(LedUpTask), NULL);
 80032de:	463b      	mov	r3, r7
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f923 	bl	800252e <osThreadCreate>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <_Z13AllTasks_initv+0x6c>)
 80032ec:	601a      	str	r2, [r3, #0]


	  HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <_Z13AllTasks_initv+0x70>)
 80032f2:	4808      	ldr	r0, [pc, #32]	; (8003314 <_Z13AllTasks_initv+0x74>)
 80032f4:	f7ff f80a 	bl	800230c <HAL_UART_Receive_IT>

}
 80032f8:	bf00      	nop
 80032fa:	3738      	adds	r7, #56	; 0x38
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003300:	08003cd0 	.word	0x08003cd0
 8003304:	20001030 	.word	0x20001030
 8003308:	08003cf8 	.word	0x08003cf8
 800330c:	20001034 	.word	0x20001034
 8003310:	20001056 	.word	0x20001056
 8003314:	200011b0 	.word	0x200011b0

08003318 <_Z23StartBatteryManagerTaskPKv>:


void StartBatteryManagerTask(void const * argument){
 8003318:	b580      	push	{r7, lr}
 800331a:	b096      	sub	sp, #88	; 0x58
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]


	uint8_t blinkFlag=0;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	LipoCell lipo(3.3f);
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	492c      	ldr	r1, [pc, #176]	; (80033dc <_Z23StartBatteryManagerTaskPKv+0xc4>)
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fadf 	bl	80038f0 <_ZN8LipoCellC1Ef>
	HAL_ADC_Start(&hadc1);
 8003332:	482b      	ldr	r0, [pc, #172]	; (80033e0 <_Z23StartBatteryManagerTaskPKv+0xc8>)
 8003334:	f7fd fdf2 	bl	8000f1c <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, receiveADC, 2);
 8003338:	2202      	movs	r2, #2
 800333a:	492a      	ldr	r1, [pc, #168]	; (80033e4 <_Z23StartBatteryManagerTaskPKv+0xcc>)
 800333c:	4828      	ldr	r0, [pc, #160]	; (80033e0 <_Z23StartBatteryManagerTaskPKv+0xc8>)
 800333e:	f7fd fe4f 	bl	8000fe0 <HAL_ADC_Start_DMA>

	for(;;){

		lipo.update(receiveADC[0]);
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <_Z23StartBatteryManagerTaskPKv+0xcc>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 faf1 	bl	8003934 <_ZN8LipoCell6updateEm>
		per = lipo.getPercentage();
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fef1 	bl	800313e <_ZNK9ADC_Tools13getPercentageEv>
 800335c:	4602      	mov	r2, r0
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <_Z23StartBatteryManagerTaskPKv+0xd0>)
 8003360:	601a      	str	r2, [r3, #0]
		volt= lipo.getVoltage();
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff8e 	bl	8003288 <_ZNK9ADC_Tools10getVoltageEv>
 800336c:	4602      	mov	r2, r0
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <_Z23StartBatteryManagerTaskPKv+0xd4>)
 8003370:	601a      	str	r2, [r3, #0]
		perAvrg = lipo.getPercentageAvrg();
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fb05 	bl	8003986 <_ZN8LipoCell17getPercentageAvrgEv>
 800337c:	4602      	mov	r2, r0
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <_Z23StartBatteryManagerTaskPKv+0xd8>)
 8003380:	601a      	str	r2, [r3, #0]
		voltAvrg= lipo.getVoltageAvrg();
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	4618      	mov	r0, r3
 8003388:	f000 faee 	bl	8003968 <_ZN8LipoCell14getVoltageAvrgEv>
 800338c:	4602      	mov	r2, r0
 800338e:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <_Z23StartBatteryManagerTaskPKv+0xdc>)
 8003390:	601a      	str	r2, [r3, #0]

		if(voltAvrg >=2.5f && blinkFlag==0){
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <_Z23StartBatteryManagerTaskPKv+0xdc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4918      	ldr	r1, [pc, #96]	; (80033f8 <_Z23StartBatteryManagerTaskPKv+0xe0>)
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f999 	bl	80006d0 <__aeabi_fcmpge>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <_Z23StartBatteryManagerTaskPKv+0xbc>
 80033a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <_Z23StartBatteryManagerTaskPKv+0xbc>
			led.blink(500,1000);
 80033ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033b4:	4811      	ldr	r0, [pc, #68]	; (80033fc <_Z23StartBatteryManagerTaskPKv+0xe4>)
 80033b6:	f000 f9a9 	bl	800370c <_ZN11LedNotifier5blinkEtt>
			led1.blink(1000,200);
 80033ba:	22c8      	movs	r2, #200	; 0xc8
 80033bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c0:	480f      	ldr	r0, [pc, #60]	; (8003400 <_Z23StartBatteryManagerTaskPKv+0xe8>)
 80033c2:	f000 f9a3 	bl	800370c <_ZN11LedNotifier5blinkEtt>
			led2.blink(25);
 80033c6:	2119      	movs	r1, #25
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <_Z23StartBatteryManagerTaskPKv+0xec>)
 80033ca:	f000 f98f 	bl	80036ec <_ZN11LedNotifier5blinkEt>
			blinkFlag = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
//			blinkFlag = 0;
//			led.on();
//		}


		osDelay(100);
 80033d4:	2064      	movs	r0, #100	; 0x64
 80033d6:	f7ff f8d2 	bl	800257e <osDelay>
		lipo.update(receiveADC[0]);
 80033da:	e7b2      	b.n	8003342 <_Z23StartBatteryManagerTaskPKv+0x2a>
 80033dc:	40533333 	.word	0x40533333
 80033e0:	200010ac 	.word	0x200010ac
 80033e4:	20001038 	.word	0x20001038
 80033e8:	20001040 	.word	0x20001040
 80033ec:	20001044 	.word	0x20001044
 80033f0:	20001048 	.word	0x20001048
 80033f4:	2000104c 	.word	0x2000104c
 80033f8:	40200000 	.word	0x40200000
 80033fc:	20001058 	.word	0x20001058
 8003400:	20001070 	.word	0x20001070
 8003404:	20001088 	.word	0x20001088

08003408 <_Z14StartLedUpTaskPKv>:


	}
}

void StartLedUpTask(void const * argument){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

	time_tool.init();
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <_Z14StartLedUpTaskPKv+0x58>)
 8003412:	f000 fb03 	bl	8003a1c <_ZN8TimeTool4initEv>

	for(;;){
		currentTime[2]= time_tool.getMicros();
 8003416:	4812      	ldr	r0, [pc, #72]	; (8003460 <_Z14StartLedUpTaskPKv+0x58>)
 8003418:	f000 faca 	bl	80039b0 <_ZN8TimeTool9getMicrosEv>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 8003422:	809a      	strh	r2, [r3, #4]
		currentTime[0]= time_tool.compareMicros(currentTime[2], currentTime[1]);
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 8003426:	8899      	ldrh	r1, [r3, #4]
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 800342a:	885b      	ldrh	r3, [r3, #2]
 800342c:	461a      	mov	r2, r3
 800342e:	480c      	ldr	r0, [pc, #48]	; (8003460 <_Z14StartLedUpTaskPKv+0x58>)
 8003430:	f000 face 	bl	80039d0 <_ZN8TimeTool13compareMicrosEtt>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 800343a:	801a      	strh	r2, [r3, #0]
		currentTime[1] = currentTime[2];
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 800343e:	889a      	ldrh	r2, [r3, #4]
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <_Z14StartLedUpTaskPKv+0x5c>)
 8003442:	805a      	strh	r2, [r3, #2]

		led.blink_process();
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <_Z14StartLedUpTaskPKv+0x60>)
 8003446:	f000 f97f 	bl	8003748 <_ZN11LedNotifier13blink_processEv>
		led1.blink_process();
 800344a:	4808      	ldr	r0, [pc, #32]	; (800346c <_Z14StartLedUpTaskPKv+0x64>)
 800344c:	f000 f97c 	bl	8003748 <_ZN11LedNotifier13blink_processEv>
		led2.blink_process();
 8003450:	4807      	ldr	r0, [pc, #28]	; (8003470 <_Z14StartLedUpTaskPKv+0x68>)
 8003452:	f000 f979 	bl	8003748 <_ZN11LedNotifier13blink_processEv>
//				led.blink_process();
//
//			}


		osDelay(10);
 8003456:	200a      	movs	r0, #10
 8003458:	f7ff f891 	bl	800257e <osDelay>
		currentTime[2]= time_tool.getMicros();
 800345c:	e7db      	b.n	8003416 <_Z14StartLedUpTaskPKv+0xe>
 800345e:	bf00      	nop
 8003460:	200010a0 	.word	0x200010a0
 8003464:	20001050 	.word	0x20001050
 8003468:	20001058 	.word	0x20001058
 800346c:	20001070 	.word	0x20001070
 8003470:	20001088 	.word	0x20001088

08003474 <HAL_UART_RxCpltCallback>:

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
//	if	   (RXdata == 'n') led.on();
//	else if(RXdata == 'f') led.off();
//	else if(RXdata == 'b') led.blink_config(500,1000);


	HAL_UART_Receive_IT(&huart3, &RXdata, 1);
 800347c:	2201      	movs	r2, #1
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_UART_RxCpltCallback+0x1c>)
 8003480:	4804      	ldr	r0, [pc, #16]	; (8003494 <HAL_UART_RxCpltCallback+0x20>)
 8003482:	f7fe ff43 	bl	800230c <HAL_UART_Receive_IT>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20001056 	.word	0x20001056
 8003494:	200011b0 	.word	0x200011b0

08003498 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034aa:	f7fd fc33 	bl	8000d14 <HAL_IncTick>
  }


}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00

080034bc <_Z41__static_initialization_and_destruction_0ii>:
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d118      	bne.n	80034fe <_Z41__static_initialization_and_destruction_0ii+0x42>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d113      	bne.n	80034fe <_Z41__static_initialization_and_destruction_0ii+0x42>
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
 80034d6:	2300      	movs	r3, #0
 80034d8:	2220      	movs	r2, #32
 80034da:	4913      	ldr	r1, [pc, #76]	; (8003528 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80034dc:	4813      	ldr	r0, [pc, #76]	; (800352c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80034de:	f000 f9b7 	bl	8003850 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
 80034e2:	2300      	movs	r3, #0
 80034e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e8:	4911      	ldr	r1, [pc, #68]	; (8003530 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80034ea:	4812      	ldr	r0, [pc, #72]	; (8003534 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80034ec:	f000 f9b0 	bl	8003850 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
LedNotifier led2(LED2_GPIO_Port, LED2_Pin);
 80034f0:	2300      	movs	r3, #0
 80034f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f6:	490e      	ldr	r1, [pc, #56]	; (8003530 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80034f8:	480f      	ldr	r0, [pc, #60]	; (8003538 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80034fa:	f000 f9a9 	bl	8003850 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800350e:	480a      	ldr	r0, [pc, #40]	; (8003538 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003510:	f000 f9ce 	bl	80038b0 <_ZN11LedNotifierD1Ev>
LedNotifier led1(LED1_GPIO_Port, LED1_Pin);
 8003514:	4807      	ldr	r0, [pc, #28]	; (8003534 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003516:	f000 f9cb 	bl	80038b0 <_ZN11LedNotifierD1Ev>
LedNotifier led(LD2_GPIO_Port, LD2_Pin);
 800351a:	4804      	ldr	r0, [pc, #16]	; (800352c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800351c:	f000 f9c8 	bl	80038b0 <_ZN11LedNotifierD1Ev>
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40010800 	.word	0x40010800
 800352c:	20001058 	.word	0x20001058
 8003530:	40011000 	.word	0x40011000
 8003534:	20001070 	.word	0x20001070
 8003538:	20001088 	.word	0x20001088

0800353c <_GLOBAL__sub_I_BatteryManagerHandle>:
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
 8003540:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff ffb9 	bl	80034bc <_Z41__static_initialization_and_destruction_0ii>
 800354a:	bd80      	pop	{r7, pc}

0800354c <_GLOBAL__sub_D_BatteryManagerHandle>:
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
 8003550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003554:	2000      	movs	r0, #0
 8003556:	f7ff ffb1 	bl	80034bc <_Z41__static_initialization_and_destruction_0ii>
 800355a:	bd80      	pop	{r7, pc}

0800355c <_ZN7AverageIfLh10EEC1Ev>:
		for (uint8_t i = 0; i < numberOfElem; i++) a += elem[i];
		avrg = a /(T)numberOfElem;
	}

public:
	Average(){
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
		clear();
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f826 	bl	80035b6 <_ZN7AverageIfLh10EE5clearEv>
	}
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_ZN7AverageIfLh10EEclEv>:

	/**Overload of () operator
	 *  Calculate average and return it
	 *  @return average of all data collected in object
	 */
	T& operator()(){
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
		this->calculate();
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f83a 	bl	80035f6 <_ZN7AverageIfLh10EE9calculateEv>
		return this->avrg;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	332c      	adds	r3, #44	; 0x2c
	}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZN7AverageIfLh10EE6insertEf>:
	void insert(T val){
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
		elem[currentIndex] = val;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800359e:	4619      	mov	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		indexIterate();
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f854 	bl	8003656 <_ZN7AverageIfLh10EE12indexIterateEv>
	}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN7AverageIfLh10EE5clearEv>:
	void clear(){
 80035b6:	b480      	push	{r7}
 80035b8:	b085      	sub	sp, #20
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
		currentIndex = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		numberOfElem = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		for (uint8_t i = 0; i < s; i++) elem[i] = T();
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d809      	bhi.n	80035ec <_ZN7AverageIfLh10EE5clearEv+0x36>
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	e7f2      	b.n	80035d2 <_ZN7AverageIfLh10EE5clearEv+0x1c>
	}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <_ZN7AverageIfLh10EE9calculateEv>:
	void calculate(){
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
		T a = 0;
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < numberOfElem; i++) a += elem[i];
 8003604:	2300      	movs	r3, #0
 8003606:	72fb      	strb	r3, [r7, #11]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800360e:	7afa      	ldrb	r2, [r7, #11]
 8003610:	429a      	cmp	r2, r3
 8003612:	d20d      	bcs.n	8003630 <_ZN7AverageIfLh10EE9calculateEv+0x3a>
 8003614:	7afa      	ldrb	r2, [r7, #11]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	4619      	mov	r1, r3
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7fc fd9c 	bl	800015c <__addsf3>
 8003624:	4603      	mov	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	3301      	adds	r3, #1
 800362c:	72fb      	strb	r3, [r7, #11]
 800362e:	e7eb      	b.n	8003608 <_ZN7AverageIfLh10EE9calculateEv+0x12>
		avrg = a /(T)numberOfElem;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc fe40 	bl	80002bc <__aeabi_ui2f>
 800363c:	4603      	mov	r3, r0
 800363e:	4619      	mov	r1, r3
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7fc ff47 	bl	80004d4 <__aeabi_fdiv>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN7AverageIfLh10EE12indexIterateEv>:
	void indexIterate(){
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
		if (numberOfElem != s) numberOfElem++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003664:	2b0a      	cmp	r3, #10
 8003666:	d007      	beq.n	8003678 <_ZN7AverageIfLh10EE12indexIterateEv+0x22>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800366e:	3301      	adds	r3, #1
 8003670:	b2da      	uxtb	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if (currentIndex == (s - 1)) currentIndex = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367e:	2b09      	cmp	r3, #9
 8003680:	d104      	bne.n	800368c <_ZN7AverageIfLh10EE12indexIterateEv+0x36>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 800368a:	e007      	b.n	800369c <_ZN7AverageIfLh10EE12indexIterateEv+0x46>
			currentIndex++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003692:	3301      	adds	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <_ZN11LedNotifier13getONPinStateEv>:
	LedState curState;

	uint8_t isReversed;   								/** flag of reversed led logic */
	GPIO_PinState onState; 								/** state consider as ON */
	GPIO_PinState offState; 							/** state consider as OFF */
	GPIO_PinState getONPinState(){ return onState;};  	/** return real ON state */
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7cdb      	ldrb	r3, [r3, #19]
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <_ZN11LedNotifier2onEv>:
 *      Author: Igor
 */

#include <LedNotifier.h>

void LedNotifier::on(){
 80036bc:	b5b0      	push	{r4, r5, r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	curState = ON;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	745a      	strb	r2, [r3, #17]
	HAL_GPIO_WritePin(Port,Pin, getONPinState());
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685c      	ldr	r4, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	891d      	ldrh	r5, [r3, #8]
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffe7 	bl	80036a6 <_ZN11LedNotifier13getONPinStateEv>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	4629      	mov	r1, r5
 80036de:	4620      	mov	r0, r4
 80036e0:	f7fe f82c 	bl	800173c <HAL_GPIO_WritePin>

}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}

080036ec <_ZN11LedNotifier5blinkEt>:
	curState = OFF;
	HAL_GPIO_WritePin(Port,Pin, getOFFPinState());

}

void LedNotifier::blink( uint16_t perON){
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
	blink(perON,perON);
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f804 	bl	800370c <_ZN11LedNotifier5blinkEtt>
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <_ZN11LedNotifier5blinkEtt>:

void LedNotifier::blink( uint16_t perON, uint16_t perOFF){
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	803b      	strh	r3, [r7, #0]
	// initial state of led in blinking mode
	on();
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ffcd 	bl	80036bc <_ZN11LedNotifier2onEv>
	// update led state
	curState = BLINK;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	745a      	strb	r2, [r3, #17]
	blink_state = blinkOn;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	741a      	strb	r2, [r3, #16]

	// saving required periods
	blinkPeriodON = perON;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	887a      	ldrh	r2, [r7, #2]
 8003732:	815a      	strh	r2, [r3, #10]
	blinkPeriodOFF = perOFF;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	883a      	ldrh	r2, [r7, #0]
 8003738:	819a      	strh	r2, [r3, #12]

	updateLastToggleTime();
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f850 	bl	80037e0 <_ZN11LedNotifier20updateLastToggleTimeEv>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_ZN11LedNotifier13blink_processEv>:

void LedNotifier::blink_process(){
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	// process called by ledNotifier manager
	if(curState == BLINK){
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7c5b      	ldrb	r3, [r3, #17]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d118      	bne.n	800378a <_ZN11LedNotifier13blink_processEv+0x42>
		if(getTimeFromLastToggle() >= getPeriod()){
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f81b 	bl	8003794 <_ZN11LedNotifier21getTimeFromLastToggleEv>
 800375e:	4603      	mov	r3, r0
 8003760:	461c      	mov	r4, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f862 	bl	800382c <_ZN11LedNotifier9getPeriodEv>
 8003768:	4603      	mov	r3, r0
 800376a:	429c      	cmp	r4, r3
 800376c:	bf2c      	ite	cs
 800376e:	2301      	movcs	r3, #1
 8003770:	2300      	movcc	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <_ZN11LedNotifier13blink_processEv+0x42>
			updateLastToggleTime();
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f831 	bl	80037e0 <_ZN11LedNotifier20updateLastToggleTimeEv>
			toggle();
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f81e 	bl	80037c0 <_ZN11LedNotifier6toggleEv>
			toggle_blinkstate();
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f83d 	bl	8003804 <_ZN11LedNotifier17toggle_blinkstateEv>
		}
	}
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
	...

08003794 <_ZN11LedNotifier21getTimeFromLastToggleEv>:

uint16_t LedNotifier::getTimeFromLastToggle(){
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	return time_tool.compareMicros(time_tool.getMicros(), last_toggle_time );
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <_ZN11LedNotifier21getTimeFromLastToggleEv+0x28>)
 800379e:	f000 f907 	bl	80039b0 <_ZN8TimeTool9getMicrosEv>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4619      	mov	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	89db      	ldrh	r3, [r3, #14]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <_ZN11LedNotifier21getTimeFromLastToggleEv+0x28>)
 80037ae:	f000 f90f 	bl	80039d0 <_ZN8TimeTool13compareMicrosEtt>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200010a0 	.word	0x200010a0

080037c0 <_ZN11LedNotifier6toggleEv>:
void LedNotifier::toggle(){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Port,Pin);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	891b      	ldrh	r3, [r3, #8]
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fd ffb7 	bl	8001746 <HAL_GPIO_TogglePin>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_ZN11LedNotifier20updateLastToggleTimeEv>:

void LedNotifier::updateLastToggleTime(){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	last_toggle_time = time_tool.getMicros();
 80037e8:	4805      	ldr	r0, [pc, #20]	; (8003800 <_ZN11LedNotifier20updateLastToggleTimeEv+0x20>)
 80037ea:	f000 f8e1 	bl	80039b0 <_ZN8TimeTool9getMicrosEv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	81da      	strh	r2, [r3, #14]
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200010a0 	.word	0x200010a0

08003804 <_ZN11LedNotifier17toggle_blinkstateEv>:

void LedNotifier::toggle_blinkstate(){
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	if (blink_state == blinkOff) blink_state = blinkOn;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7c1b      	ldrb	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <_ZN11LedNotifier17toggle_blinkstateEv+0x18>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	741a      	strb	r2, [r3, #16]
	else 						 blink_state = blinkOff;
}
 800381a:	e002      	b.n	8003822 <_ZN11LedNotifier17toggle_blinkstateEv+0x1e>
	else 						 blink_state = blinkOff;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	741a      	strb	r2, [r3, #16]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <_ZN11LedNotifier9getPeriodEv>:

uint32_t LedNotifier::getPeriod(){
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	if(blink_state == blinkOff) return blinkPeriodOFF;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7c1b      	ldrb	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <_ZN11LedNotifier9getPeriodEv+0x16>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	899b      	ldrh	r3, [r3, #12]
 8003840:	e001      	b.n	8003846 <_ZN11LedNotifier9getPeriodEv+0x1a>
	else 						return blinkPeriodON;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	895b      	ldrh	r3, [r3, #10]
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <_ZN11LedNotifierC1EP12GPIO_TypeDefth>:
LedNotifier::LedState LedNotifier::getState(){
	return curState;
}


LedNotifier::LedNotifier(GPIO_TypeDef *port, uint16_t pin, uint8_t rev):
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	460b      	mov	r3, r1
 8003860:	80fb      	strh	r3, [r7, #6]
 8003862:	4613      	mov	r3, r2
 8003864:	717b      	strb	r3, [r7, #5]
	Port(port), Pin(pin){
 8003866:	4a11      	ldr	r2, [pc, #68]	; (80038ac <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x5c>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	811a      	strh	r2, [r3, #8]
	isReversed = rev;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	797a      	ldrb	r2, [r7, #5]
 800387c:	749a      	strb	r2, [r3, #18]
	if(isReversed){ onState = GPIO_PIN_RESET; offState= GPIO_PIN_SET;}
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	7c9b      	ldrb	r3, [r3, #18]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x44>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	74da      	strb	r2, [r3, #19]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	751a      	strb	r2, [r3, #20]
 8003892:	e005      	b.n	80038a0 <_ZN11LedNotifierC1EP12GPIO_TypeDefth+0x50>
	else          { onState = GPIO_PIN_SET;   offState= GPIO_PIN_RESET;}
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	74da      	strb	r2, [r3, #19]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	751a      	strb	r2, [r3, #20]

}
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	08003d50 	.word	0x08003d50

080038b0 <_ZN11LedNotifierD1Ev>:

LedNotifier::~LedNotifier() {
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <_ZN11LedNotifierD1Ev+0x1c>)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	08003d50 	.word	0x08003d50

080038d0 <_ZN11LedNotifierD0Ev>:
LedNotifier::~LedNotifier() {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
}
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffe9 	bl	80038b0 <_ZN11LedNotifierD1Ev>
 80038de:	2118      	movs	r1, #24
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f93c 	bl	8003b5e <_ZdlPvj>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN8LipoCellC1Ef>:
#include "LipoCell.h"



LipoCell::LipoCell(float max ):ADC_Tools(max,max-CELL_MAX_VOLTAGE_DROP){ }
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	687c      	ldr	r4, [r7, #4]
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <_ZN8LipoCellC1Ef+0x3c>)
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f7fc fc2a 	bl	8000158 <__aeabi_fsub>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	230c      	movs	r3, #12
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	4620      	mov	r0, r4
 800390e:	f7ff fc2d 	bl	800316c <_ZN9ADC_ToolsC1Effm>
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <_ZN8LipoCellC1Ef+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	331c      	adds	r3, #28
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fe1d 	bl	800355c <_ZN7AverageIfLh10EEC1Ev>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	3f99999a 	.word	0x3f99999a
 8003930:	08003d60 	.word	0x08003d60

08003934 <_ZN8LipoCell6updateEm>:

void LipoCell::update(uint32_t val) {
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	updateMeasurments(val);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fc40 	bl	80031c8 <_ZN9ADC_Tools17updateMeasurmentsEm>
	avrg.insert(getVoltage());
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f103 041c 	add.w	r4, r3, #28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fc99 	bl	8003288 <_ZNK9ADC_Tools10getVoltageEv>
 8003956:	4603      	mov	r3, r0
 8003958:	4619      	mov	r1, r3
 800395a:	4620      	mov	r0, r4
 800395c:	f7ff fe17 	bl	800358e <_ZN7AverageIfLh10EE6insertEf>
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <_ZN8LipoCell14getVoltageAvrgEv>:


float LipoCell::getVoltageAvrg() {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	return avrg();
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	331c      	adds	r3, #28
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fdfd 	bl	8003574 <_ZN7AverageIfLh10EEclEv>
 800397a:	4603      	mov	r3, r0
 800397c:	681b      	ldr	r3, [r3, #0]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_ZN8LipoCell17getPercentageAvrgEv>:

float LipoCell::getPercentageAvrg() {
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
	float valAvrg = getVoltageAvrg();
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
 8003998:	60f8      	str	r0, [r7, #12]
	return convertToPercentage(valAvrg);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68f9      	ldr	r1, [r7, #12]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fc4c 	bl	800323c <_ZN9ADC_Tools19convertToPercentageEf>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <_ZN8TimeTool9getMicrosEv>:
TimeTool time_tool;

uint8_t TimeTool::isToolInit(void){
	return microsInitDone;
}
uint16_t TimeTool::getMicros(void){
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return TIMETOOL_TIMER.Instance->CNT;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <_ZN8TimeTool9getMicrosEv+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b29b      	uxth	r3, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20001168 	.word	0x20001168

080039d0 <_ZN8TimeTool13compareMicrosEtt>:
uint16_t TimeTool::compareMicros(uint16_t a, uint16_t b) {
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
 80039dc:	4613      	mov	r3, r2
 80039de:	803b      	strh	r3, [r7, #0]
	uint16_t res = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	81fb      	strh	r3, [r7, #14]
	if (a > b) res = a - b;
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	883b      	ldrh	r3, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d904      	bls.n	80039f6 <_ZN8TimeTool13compareMicrosEtt+0x26>
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	883b      	ldrh	r3, [r7, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	81fb      	strh	r3, [r7, #14]
 80039f4:	e003      	b.n	80039fe <_ZN8TimeTool13compareMicrosEtt+0x2e>
	else       res = b - a;
 80039f6:	883a      	ldrh	r2, [r7, #0]
 80039f8:	887b      	ldrh	r3, [r7, #2]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	81fb      	strh	r3, [r7, #14]
	if (res > uint16Half){
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	88db      	ldrh	r3, [r3, #6]
 8003a02:	89fa      	ldrh	r2, [r7, #14]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <_ZN8TimeTool13compareMicrosEtt+0x3e>
		res = UINT16_MAX- res;
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	81fb      	strh	r3, [r7, #14]
	}
	return res;
 8003a0e:	89fb      	ldrh	r3, [r7, #14]

}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <_ZN8TimeTool4initEv>:
void TimeTool::init(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	if (!microsInitDone) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	791b      	ldrb	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <_ZN8TimeTool4initEv+0x1c>
		HAL_TIM_Base_Start(&TIMETOOL_TIMER);
 8003a2c:	4804      	ldr	r0, [pc, #16]	; (8003a40 <_ZN8TimeTool4initEv+0x24>)
 8003a2e:	f7fe f9cb 	bl	8001dc8 <HAL_TIM_Base_Start>
		microsInitDone = 1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	711a      	strb	r2, [r3, #4]
	}
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20001168 	.word	0x20001168

08003a44 <_ZN8TimeToolC1Ev>:


TimeTool::TimeTool(): microsInitDone(0) {
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <_ZN8TimeToolC1Ev+0x28>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	711a      	strb	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003a5e:	80da      	strh	r2, [r3, #6]


}
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	08003d74 	.word	0x08003d74

08003a70 <_ZN8TimeToolD1Ev>:

TimeTool::~TimeTool() {
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <_ZN8TimeToolD1Ev+0x1c>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	08003d74 	.word	0x08003d74

08003a90 <_ZN8TimeToolD0Ev>:
TimeTool::~TimeTool() {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
}
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ffe9 	bl	8003a70 <_ZN8TimeToolD1Ev>
 8003a9e:	2108      	movs	r1, #8
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f85c 	bl	8003b5e <_ZdlPvj>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_Z41__static_initialization_and_destruction_0ii>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d102      	bne.n	8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x20>
TimeTool time_tool;
 8003aca:	4809      	ldr	r0, [pc, #36]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003acc:	f7ff ffba 	bl	8003a44 <_ZN8TimeToolC1Ev>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d102      	bne.n	8003ae6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003ae0:	4803      	ldr	r0, [pc, #12]	; (8003af0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003ae2:	f7ff ffc5 	bl	8003a70 <_ZN8TimeToolD1Ev>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200010a0 	.word	0x200010a0

08003af4 <_GLOBAL__sub_I_time_tool>:
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7ff ffd7 	bl	8003ab0 <_Z41__static_initialization_and_destruction_0ii>
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_GLOBAL__sub_D_time_tool>:
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7ff ffcf 	bl	8003ab0 <_Z41__static_initialization_and_destruction_0ii>
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b16:	e003      	b.n	8003b20 <LoopCopyDataInit>

08003b18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b1e:	3104      	adds	r1, #4

08003b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b28:	d3f6      	bcc.n	8003b18 <CopyDataInit>
  ldr r2, =_sbss
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003b2c:	e002      	b.n	8003b34 <LoopFillZerobss>

08003b2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003b30:	f842 3b04 	str.w	r3, [r2], #4

08003b34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003b36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b38:	d3f9      	bcc.n	8003b2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b3a:	f7fd f82d 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b3e:	f000 f813 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b42:	f7fc ff29 	bl	8000998 <main>
  bx lr
 8003b46:	4770      	bx	lr
  ldr r3, =_sidata
 8003b48:	08003d94 	.word	0x08003d94
  ldr r0, =_sdata
 8003b4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b50:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003b54:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8003b58:	200011f4 	.word	0x200011f4

08003b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC1_2_IRQHandler>

08003b5e <_ZdlPvj>:
 8003b5e:	f000 b800 	b.w	8003b62 <_ZdlPv>

08003b62 <_ZdlPv>:
 8003b62:	f000 b825 	b.w	8003bb0 <free>
	...

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	4e0c      	ldr	r6, [pc, #48]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b70:	1ba4      	subs	r4, r4, r6
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	42a5      	cmp	r5, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	f000 f878 	bl	8003c6c <_init>
 8003b7c:	2500      	movs	r5, #0
 8003b7e:	4e0a      	ldr	r6, [pc, #40]	; (8003ba8 <__libc_init_array+0x40>)
 8003b80:	4c0a      	ldr	r4, [pc, #40]	; (8003bac <__libc_init_array+0x44>)
 8003b82:	1ba4      	subs	r4, r4, r6
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	42a5      	cmp	r5, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b90:	4798      	blx	r3
 8003b92:	3501      	adds	r5, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9a:	4798      	blx	r3
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08003d7c 	.word	0x08003d7c
 8003ba4:	08003d7c 	.word	0x08003d7c
 8003ba8:	08003d7c 	.word	0x08003d7c
 8003bac:	08003d88 	.word	0x08003d88

08003bb0 <free>:
 8003bb0:	4b02      	ldr	r3, [pc, #8]	; (8003bbc <free+0xc>)
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	f000 b80b 	b.w	8003bd0 <_free_r>
 8003bba:	bf00      	nop
 8003bbc:	20000010 	.word	0x20000010

08003bc0 <memset>:
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4402      	add	r2, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <_free_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	d043      	beq.n	8003c60 <_free_r+0x90>
 8003bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bdc:	1f0c      	subs	r4, r1, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfb8      	it	lt
 8003be2:	18e4      	addlt	r4, r4, r3
 8003be4:	f000 f840 	bl	8003c68 <__malloc_lock>
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <_free_r+0x94>)
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	4610      	mov	r0, r2
 8003bee:	b933      	cbnz	r3, 8003bfe <_free_r+0x2e>
 8003bf0:	6063      	str	r3, [r4, #4]
 8003bf2:	6014      	str	r4, [r2, #0]
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bfa:	f000 b836 	b.w	8003c6a <__malloc_unlock>
 8003bfe:	42a3      	cmp	r3, r4
 8003c00:	d90b      	bls.n	8003c1a <_free_r+0x4a>
 8003c02:	6821      	ldr	r1, [r4, #0]
 8003c04:	1862      	adds	r2, r4, r1
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bf01      	itttt	eq
 8003c0a:	681a      	ldreq	r2, [r3, #0]
 8003c0c:	685b      	ldreq	r3, [r3, #4]
 8003c0e:	1852      	addeq	r2, r2, r1
 8003c10:	6022      	streq	r2, [r4, #0]
 8003c12:	6063      	str	r3, [r4, #4]
 8003c14:	6004      	str	r4, [r0, #0]
 8003c16:	e7ed      	b.n	8003bf4 <_free_r+0x24>
 8003c18:	4613      	mov	r3, r2
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	b10a      	cbz	r2, 8003c22 <_free_r+0x52>
 8003c1e:	42a2      	cmp	r2, r4
 8003c20:	d9fa      	bls.n	8003c18 <_free_r+0x48>
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	1858      	adds	r0, r3, r1
 8003c26:	42a0      	cmp	r0, r4
 8003c28:	d10b      	bne.n	8003c42 <_free_r+0x72>
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	4401      	add	r1, r0
 8003c2e:	1858      	adds	r0, r3, r1
 8003c30:	4282      	cmp	r2, r0
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	d1de      	bne.n	8003bf4 <_free_r+0x24>
 8003c36:	6810      	ldr	r0, [r2, #0]
 8003c38:	6852      	ldr	r2, [r2, #4]
 8003c3a:	4401      	add	r1, r0
 8003c3c:	6019      	str	r1, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	e7d8      	b.n	8003bf4 <_free_r+0x24>
 8003c42:	d902      	bls.n	8003c4a <_free_r+0x7a>
 8003c44:	230c      	movs	r3, #12
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	e7d4      	b.n	8003bf4 <_free_r+0x24>
 8003c4a:	6820      	ldr	r0, [r4, #0]
 8003c4c:	1821      	adds	r1, r4, r0
 8003c4e:	428a      	cmp	r2, r1
 8003c50:	bf01      	itttt	eq
 8003c52:	6811      	ldreq	r1, [r2, #0]
 8003c54:	6852      	ldreq	r2, [r2, #4]
 8003c56:	1809      	addeq	r1, r1, r0
 8003c58:	6021      	streq	r1, [r4, #0]
 8003c5a:	6062      	str	r2, [r4, #4]
 8003c5c:	605c      	str	r4, [r3, #4]
 8003c5e:	e7c9      	b.n	8003bf4 <_free_r+0x24>
 8003c60:	bd38      	pop	{r3, r4, r5, pc}
 8003c62:	bf00      	nop
 8003c64:	200010a8 	.word	0x200010a8

08003c68 <__malloc_lock>:
 8003c68:	4770      	bx	lr

08003c6a <__malloc_unlock>:
 8003c6a:	4770      	bx	lr

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
